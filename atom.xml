<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知识与头发不可兼得</title>
  
  <subtitle>文杰的博客</subtitle>
  <link href="https://xwjahahahaha.github.io/atom.xml" rel="self"/>
  
  <link href="https://xwjahahahaha.github.io/"/>
  <updated>2021-07-16T07:48:18.080Z</updated>
  <id>https://xwjahahahaha.github.io/</id>
  
  <author>
    <name>DDDemons hide</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>同态加密</title>
    <link href="https://xwjahahahaha.github.io/2021/07/16/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%AF%86%E7%A0%81%E5%AD%A6/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%86/"/>
    <id>https://xwjahahahaha.github.io/2021/07/16/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%AF%86%E7%A0%81%E5%AD%A6/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6/%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%86/</id>
    <published>2021-07-16T03:01:23.000Z</published>
    <updated>2021-07-16T07:48:18.080Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习资料来源：</p><p>知乎VenusBlockChain: <a href="https://zhuanlan.zhihu.com/p/110210315" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/110210315</a></p><p>知乎刘巍然：<a href="https://www.zhihu.com/question/27645858/answer/37598506" target="_blank" rel="noopener">https://www.zhihu.com/question/27645858/answer/37598506</a></p><p><a href="https://blog.csdn.net/Gouph/article/details/106179325" target="_blank" rel="noopener">https://blog.csdn.net/Gouph/article/details/106179325</a></p></blockquote><h1 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h1><h2 id="1-1-同态加密"><a href="#1-1-同态加密" class="headerlink" title="1.1 同态加密"></a>1.1 同态加密</h2><p><strong><em>什么是同态加密？</em></strong></p><p>提出第一个构造出全同态加密（Fully Homomorphic Encryption）[Gen09]的Craig Gentry给出的直观定义最好：</p><blockquote><p>A way to delegate processing of your data, without giving away access to it.</p><p>一种委托数据处理的方法，但是让你不丧失对数据的所有权</p></blockquote><p><font color='#e54d42'>同态加密对于数据安全来说，不像一般的加密方案只关注<strong>数据存储安全</strong>，攻击者无法从密文中获得任何信息, 对加密数据的任何改动操作都会造成解密的错误。而同态加密关注于<strong>数据的处理安全</strong>，其提供了一种对加密数据处理的功能，且处理过程中无法得知原始内容，同时数据经过操作后还能够解密得到处理好的结果。</font></p><p>同态加密（Homomorphic Encryption）允许对密文处理后仍然是加密的结果。即对密文直接进行处理，跟对明文进行处理后再对处理结果加密，得到的结果相同。从抽象代数的角度讲，保持了同态性。</p><p>同态加密是<strong>基于数学难题</strong>的计算复杂性理论的密码学技术，它的概念可以简单的解释为：对经过同态加密的数据进行密文运算处理得到一个输出，这一输出解密结果与用同一方法处理未加密的原始数据得到的输出结果是一样的。</p><a id="more"></a><p>可以定一个运算符$\Delta$ , 对应的加密算法E和解密算法D, 同态加密满足: $E(x\Delta y) = E(x) \Delta E(y)$</p><p><strong><em>一个例子：</em></strong></p><p>(刘老师的例子非常贴切)</p><p>Alice想让工人加工自己的金子但是不信任工人，害怕其在操作过程中偷取自己的金子，那么就相出了以下的办法：</p><ul><li>Alice将金子锁在一个密闭的盒子里面，这个盒子安装了一个手套。</li><li>工人可以带着这个手套，对盒子内部的金子进行处理。但是盒子是锁着的，所以工人不仅拿不到金块，连处理过程中掉下的任何金子都拿不到。</li><li>加工完成后。Alice拿回这个盒子，把锁打开，就得到了金子。</li></ul><p>这个盒子的样子大概是这样的：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/GiDNiP.png" alt="GiDNiP"></p><p>这里面的对应关系是：</p><ul><li>Alice：数据持有方</li><li>工人： 不可信的服务提供第三方</li></ul><ul><li>盒子：加密算法</li><li>盒子上的锁：用户密钥</li><li>将金块放在盒子里面并且用锁锁上：将数据用同态加密方案进行加密</li><li>加工：应用同态特性，在无法取得数据的条件下直接对加密结果进行处理</li><li>开锁：对结果进行解密，直接得到处理后的结果</li></ul><h2 id="1-2-分类"><a href="#1-2-分类" class="headerlink" title="1.2 分类"></a>1.2 分类</h2><p>同态性来自代数领域，一般包括四种类型：加法同态、乘法同态、减法同态和除法同态。</p><p>同时满足加法同态和乘法同态，则意味着是代数同态，称为<strong>全同态</strong>(Full Homomorphic)</p><p>同时满足四种同态性，则称为<strong>算数同态</strong>。</p><p><font color='#e54d42'>对于计算机来说，实现了全同态就可以实现所有操作的同态性</font></p><p>只实现部分特定操作的同态性称为<strong>特定同态</strong>, 对于特定同态特性的算法，如RSA，Elgamal，Paillier、Pedersen Commitment等等。</p><p>目前业界使用的较多的还是特定同态/部分同态，而斯坦福大学的博士生Craig Gentry基于<strong>理想格</strong>提出一个全同态加密方案。Fully Homomorphic Encryption Using Ideal Lattices. In the 41st ACM Symposium on Theory of Computing (STOC), 2009.</p><p>所谓的格（Lattice）就是整系数基的线性组合构成的点，也就是一个空间中的一些离散有规律的点。离散的点之间的距离产生了一些困难问题，例如：最短向量问题(SVP)。</p><p>如果是一个二维平面，那么寻找在格上寻找最短向量问题是简单的，但是当维数变大的时候，例如200多维，寻找格上的最短向量问题就变的异常困难，称之为格上标准困难问题，是一个指数级的困难问题。 </p><p>Gentry首次设计出一个真正的全同态加密体制，即可以在不解密的条件下对加密数据进行任何可以在明文上进行的运算，使得对加密信息仍能进行深入和无限的分析，而不会影响其保密性。</p><blockquote><p>IBM公布的开源代码：FHE ：<a href="https://github.com/IBM/fhe-toolkit-linux" target="_blank" rel="noopener">https://github.com/IBM/fhe-toolkit-linux</a></p></blockquote><h2 id="1-3-应用"><a href="#1-3-应用" class="headerlink" title="1.3 应用"></a>1.3 应用</h2><p><strong><em>云计算</em></strong></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/rb1HwZ.png" alt="rb1HwZ"></p><p>Alice通过Cloud，以Homomorphic Encryption（以下简称HE）处理数据的整个处理过程大致是这样的：</p><ol><li>Alice对数据进行加密。并把加密后的数据发送给Cloud；</li><li>Alice向Cloud提交数据的处理方法，这里用函数f来表示；</li><li>Cloud在函数f下对数据进行处理，并且将处理后的结果发送给Alice；</li><li>Alice对数据进行解密，得到结果。</li></ol><p>可想而之，在未来如果实现了真正可以实用的全同态技术(加强环节中的f()的操作空间)，那么一款完全不会泄漏个人数据隐私的云计算服务的市场竞争有多大！</p><blockquote><p>对于Function f()是否也可以进行加密呢，这样云服务器连操作都不会知晓</p></blockquote><p><strong><em>区块链</em></strong></p><p>使用同态加密技术，运行在区块链上的<strong>智能合约可以处理密文</strong>，<strong>而无法获知真实数据</strong>，极大地提高了隐私安全性。</p><p>这样的优点是，用户将交易数据提交到区块链网络之前，可使用相应的加密算法对交易数据进行加密，数据以密文的形式存在，即使被攻击者获取，也不会泄露用户的任何隐私信息，同时密文运算结果与明文运算结果一致。</p><p>数据的操作还可以与区块链的<strong>智能合约</strong>相关联</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/TZ7T29.png" alt="TZ7T29"></p><p>华为区块链提供同态加密库，对用户的交易数据用其公钥进行加密保护，交易的时候都是密文运算，最终账本中加密保存，即使节点被攻破，获取到账本记录也无法解密。</p><p>趣链Hyperchain通过同态加密（采用Paillier同态加密算法）的加密思想实现区块中交易金额和账户余额的加密。其白皮书声称经过同态加密的交易验证时间约为10微秒，可以满足Hyperchain每秒上万笔交易的需求。</p><p>BCOS也采用了Paillier同态加密算法，并开源出了加法同态解说使用说明[1]，以及Paillier同态加密算法JAVA版实现[2]。当然还有其他产品，此处不再一一列举。</p><h1 id="二、实现原理"><a href="#二、实现原理" class="headerlink" title="二、实现原理"></a>二、实现原理</h1><p>同态加密也有很多的实现算法</p><h2 id="2-1-Paillier"><a href="#2-1-Paillier" class="headerlink" title="2.1 Paillier"></a>2.1 Paillier</h2><p>类别:  <font color='#fbbd08'><strong>加法</strong>同态加密算法</font></p><p>困难：分解两个大质数</p><p>Paillier加密算法[3]是1999年Paillier发明的基于复合剩余类的困难问题的加法同态加密算法</p><h3 id="算法生成过程："><a href="#算法生成过程：" class="headerlink" title="算法生成过程："></a>算法生成过程：</h3><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/dQbHXB.png" alt="dQbHXB"></p><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><ul><li>明文m, 0&lt;=m&lt;=n</li><li>随机数r, 0&lt;r&lt;n, 且gcd(r, n) =1</li><li>加密结果: $c = g^m * r ^n mod n^2$</li></ul><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><ul><li>解密结果：$m = L(c^\lambda)modn^2 * \mu  mod n$</li></ul><h3 id="同态性的证明"><a href="#同态性的证明" class="headerlink" title="同态性的证明"></a>同态性的证明</h3><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/0idXJv.png" alt="0idXJv"></p><h2 id="2-2-ElGamal"><a href="#2-2-ElGamal" class="headerlink" title="2.2 ElGamal"></a>2.2 ElGamal</h2><p>类别：<font color='#fbbd08'><strong>乘法</strong>同态加密算法</font></p><p>困难：离散对数问题</p><p>ELGamal密码是除了RSA之外最有代表性的公开密钥密码之一，是一种公认安全的公钥密码。</p><h3 id="离散对数问题"><a href="#离散对数问题" class="headerlink" title="离散对数问题"></a>离散对数问题</h3><p>设p为素数，若存在一个正整数α，使得 $a,a^2,a^3,…,a^{p-1}$ 关于模p互不同余，则称α为模p的一个<strong>原根</strong>。于是有如下运算：</p><p>a的幂乘运算： $y = a^xmod p , 1 \leqslant x \leqslant{p-1}$</p><p>a的对数运算： $x = log_a^y, \ 1 \leqslant y \leqslant {p-1}$</p><p>只要p足够大，求解离散对数问题时相当复杂的。离散对数问题具有较好的单向性。</p><h3 id="密钥生成"><a href="#密钥生成" class="headerlink" title="密钥生成"></a>密钥生成</h3><ul><li>随机地选择一个大素数p，且要求p-1有大素数因子，将p公开。</li><li>选择一个模p的原根α，并将α公开。</li><li>随机地选择一个整数d（1＜d＜p-1）作为私钥，并对d保密。</li><li>计算公钥$y=a^d(modp)$ ，并将y公开。</li></ul><h3 id="加密-1"><a href="#加密-1" class="headerlink" title="加密"></a>加密</h3><ul><li><p>对于待加密明文M，随机地选取一个整数k（1＜k＜p-1）。</p></li><li><p>计算$U= a^kmodp 、C_1=a^kmodp 、C_2=U*Mmodp$</p></li><li><p>取(C1,C2)作为密文。</p></li></ul><h4 id="解密-1"><a href="#解密-1" class="headerlink" title="解密"></a>解密</h4><p>计算$V = C_1^dmodp$</p><p>解密结果: $M = C_2V^{-1}modp$</p><h3 id="同态性的证明-1"><a href="#同态性的证明-1" class="headerlink" title="同态性的证明"></a>同态性的证明</h3><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/OmOuqx.png" alt="OmOuqx"></p><h1 id="三、golang代码实现"><a href="#三、golang代码实现" class="headerlink" title="三、golang代码实现"></a>三、golang代码实现</h1><h2 id="3-1-Paillier"><a href="#3-1-Paillier" class="headerlink" title="3.1 Paillier"></a>3.1 Paillier</h2><p>代码库：<a href="https://github.com/Roasbeef/go-go-gadget-paillier" target="_blank" rel="noopener">https://github.com/Roasbeef/go-go-gadget-paillier</a></p><p>采用Go语言实现的加法同态加密算法Paillier </p><p>其主要可以实现以下操作：</p><ul><li><p>可以将加密的整数加在一起 </p></li><li><p>加密的整数可以与未加密的整数相<strong>乘</strong> </p></li><li><p>加密的整数和未加密的整数可以加在一起</p></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>go get github.com/roasbeef/go-go-gadget-paillier</code></p><h3 id="测试Demo"><a href="#测试Demo" class="headerlink" title="测试Demo"></a>测试Demo</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test_homomorphicCrypto</span><span class="params">(t *testing.T)</span></span>  &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成一个128位的私钥</span></span><br><span class="line">privKey, _ := paillier.GenerateKey(rand.Reader, <span class="number">128</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公钥加密明文：数字15</span></span><br><span class="line">m15 := <span class="built_in">new</span>(big.Int).SetInt64(<span class="number">15</span>)</span><br><span class="line">c15, _ := paillier.Encrypt(&amp;privKey.PublicKey, m15.Bytes())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 私钥解密密文：15</span></span><br><span class="line">d, _ := paillier.Decrypt(privKey, c15)</span><br><span class="line">plainText := <span class="built_in">new</span>(big.Int).SetBytes(d)</span><br><span class="line">fmt.Println(<span class="string">"Decryption Result of 15: "</span>, plainText.String()) <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 公钥加密数字20</span></span><br><span class="line">m20 := <span class="built_in">new</span>(big.Int).SetInt64(<span class="number">20</span>)</span><br><span class="line">c20, _ := paillier.Encrypt(&amp;privKey.PublicKey, m20.Bytes())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将15的密文与20的密文相加（注意都是同一公钥）</span></span><br><span class="line">plusM16M20 := paillier.AddCipher(&amp;privKey.PublicKey, c15, c20)</span><br><span class="line"><span class="comment">// 使用私钥解密和的明文结果</span></span><br><span class="line">decryptedAddition, _ := paillier.Decrypt(privKey, plusM16M20)</span><br><span class="line">fmt.Println(<span class="string">"Result of 15+20 after decryption: "</span>,</span><br><span class="line"><span class="built_in">new</span>(big.Int).SetBytes(decryptedAddition).String()) <span class="comment">// 35!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将15密文与10明文常数相加</span></span><br><span class="line">plusE15and10 := paillier.Add(&amp;privKey.PublicKey, c15, <span class="built_in">new</span>(big.Int).SetInt64(<span class="number">10</span>).Bytes())</span><br><span class="line">decryptedAddition, _ = paillier.Decrypt(privKey, plusE15and10)</span><br><span class="line">fmt.Println(<span class="string">"Result of 15+10 after decryption: "</span>,</span><br><span class="line"><span class="built_in">new</span>(big.Int).SetBytes(decryptedAddition).String()) <span class="comment">// 25!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将15密文与10明文常数相乘</span></span><br><span class="line">mulE15and10 := paillier.Mul(&amp;privKey.PublicKey, c15, <span class="built_in">new</span>(big.Int).SetInt64(<span class="number">10</span>).Bytes())</span><br><span class="line">decryptedMul, _ := paillier.Decrypt(privKey, mulE15and10)</span><br><span class="line">fmt.Println(<span class="string">"Result of 15*10 after decryption: "</span>,</span><br><span class="line"><span class="built_in">new</span>(big.Int).SetBytes(decryptedMul).String()) <span class="comment">// 150!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 结果显示</span></span><br><span class="line">=== RUN   Test_homomorphicCrypto</span><br><span class="line">Decryption Result of 15:  15</span><br><span class="line">Result of 15+20 after decryption:  35</span><br><span class="line">Result of 15+10 after decryption:  25</span><br><span class="line">Result of 15*10 after decryption:  150</span><br><span class="line">--- PASS: Test_homomorphicCrypto (0.00s)</span><br><span class="line">PASS</span><br></pre></td></tr></table></figure><p>值得注意的是该包的作者说其用于课程教学，实际的生产环境则不太适合</p><h1 id="四、当下挑战"><a href="#四、当下挑战" class="headerlink" title="四、当下挑战"></a>四、当下挑战</h1><p>同态加密最大的问题是效率</p><p>效率。效率一词包含两个方面，一个是<strong>加密数据的处理速度</strong>，一个是这个<strong>加密方案的数据存储量</strong>。</p><ul><li><p>工人戴着手套加工金子，肯定没有直接加工来得快嘛~ 也就是说，隔着手套处理，精准度会变差（<strong>现有构造会有误差传递问题</strong>），加工的时间也会变得更长（<strong>密文的操作花费更长的时间</strong>），工人需要隔着操作，因此也需要更专业（<strong>会正确调用算法</strong>）。</p></li><li><p>金子放在盒子里面，为了操作，总得做一个稍微大一点的盒子吧，要不然手操作不开啊（<strong>存储空间问题</strong>）。里面也要放各种工具吧，什么电钻啦，锉刀啦，也需要空间吧？</p></li></ul><p>2011年，Gentry和Halevi在IBM尝试实现了两个HE方案：Smart-Vercauteren的SWHE方案[SV10]以及Gentry的FHE方案[Gen09]，并公布了效率。结果如何呢？我们给出Gentry公布的数据（原始数据可以在<a href="https://link.zhihu.com/?target=http%3A//crypto.biu.ac.il/winterschool2012/">2nd Bar-Ilan Winter School on Cryptography</a>找到）Smart-Vercauteren的SWHE方案效率如下：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/IsCUut.png" alt="IsCUut"></p><p>看着好像还行，不过这Dimension有点夸张啊…也就是说公钥很长…那么，Gentry的FHE方案如何呢？效率如下：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/69jQG9.png" alt="69jQG9"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;学习资料来源：&lt;/p&gt;
&lt;p&gt;知乎VenusBlockChain: &lt;a href=&quot;https://zhuanlan.zhihu.com/p/110210315&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/110210315&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;知乎刘巍然：&lt;a href=&quot;https://www.zhihu.com/question/27645858/answer/37598506&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/27645858/answer/37598506&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/Gouph/article/details/106179325&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/Gouph/article/details/106179325&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、基本概念&quot;&gt;&lt;a href=&quot;#一、基本概念&quot; class=&quot;headerlink&quot; title=&quot;一、基本概念&quot;&gt;&lt;/a&gt;一、基本概念&lt;/h1&gt;&lt;h2 id=&quot;1-1-同态加密&quot;&gt;&lt;a href=&quot;#1-1-同态加密&quot; class=&quot;headerlink&quot; title=&quot;1.1 同态加密&quot;&gt;&lt;/a&gt;1.1 同态加密&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;什么是同态加密？&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;提出第一个构造出全同态加密（Fully Homomorphic Encryption）[Gen09]的Craig Gentry给出的直观定义最好：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A way to delegate processing of your data, without giving away access to it.&lt;/p&gt;
&lt;p&gt;一种委托数据处理的方法，但是让你不丧失对数据的所有权&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;font color=&#39;#e54d42&#39;&gt;同态加密对于数据安全来说，不像一般的加密方案只关注&lt;strong&gt;数据存储安全&lt;/strong&gt;，攻击者无法从密文中获得任何信息, 对加密数据的任何改动操作都会造成解密的错误。而同态加密关注于&lt;strong&gt;数据的处理安全&lt;/strong&gt;，其提供了一种对加密数据处理的功能，且处理过程中无法得知原始内容，同时数据经过操作后还能够解密得到处理好的结果。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;同态加密（Homomorphic Encryption）允许对密文处理后仍然是加密的结果。即对密文直接进行处理，跟对明文进行处理后再对处理结果加密，得到的结果相同。从抽象代数的角度讲，保持了同态性。&lt;/p&gt;
&lt;p&gt;同态加密是&lt;strong&gt;基于数学难题&lt;/strong&gt;的计算复杂性理论的密码学技术，它的概念可以简单的解释为：对经过同态加密的数据进行密文运算处理得到一个输出，这一输出解密结果与用同一方法处理未加密的原始数据得到的输出结果是一样的。&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/categories/technical/golang/"/>
    
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer15.二进制中1的个数</title>
    <link href="https://xwjahahahaha.github.io/2021/07/16/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/%E5%89%91%E6%8C%87Offer15-%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>https://xwjahahahaha.github.io/2021/07/16/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/%E5%89%91%E6%8C%87Offer15-%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</id>
    <published>2021-07-16T02:16:29.000Z</published>
    <updated>2021-07-16T02:19:57.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/" target="_blank" rel="noopener">剑指 Offer 15. 二进制中1的个数</a></p><p>难度简单</p><p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为 <a href="http://en.wikipedia.org/wiki/Hamming_weight" target="_blank" rel="noopener">汉明重量</a>).）。</p><a id="more"></a><p><strong>提示：</strong></p><ul><li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li><li>在 Java 中，编译器使用 <a href="https://baike.baidu.com/item/二进制补码/5295284" target="_blank" rel="noopener">二进制补码</a> 记法来表示有符号整数。因此，在上面的 <strong>示例 3</strong> 中，输入表示有符号整数 <code>-3</code>。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n &#x3D; 11 (控制台输入 00000000000000000000000000001011)</span><br><span class="line">输出：3</span><br><span class="line">解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 &#39;1&#39;。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n &#x3D; 128 (控制台输入 00000000000000000000000010000000)</span><br><span class="line">输出：1</span><br><span class="line">解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 &#39;1&#39;。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n &#x3D; 4294967293 (控制台输入 11111111111111111111111111111101，部分语言中 n &#x3D; -3）</span><br><span class="line">输出：31</span><br><span class="line">解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 &#39;1&#39;。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>输入必须是长度为 <code>32</code> 的 <strong>二进制串</strong> 。</li></ul><h2 id="解题思路及代码"><a href="#解题思路及代码" class="headerlink" title="解题思路及代码"></a>解题思路及代码</h2><p>本题依托一种算法：  <a href="https://myblog.gumptlu.work/2020/07/03/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/461-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/" target="_blank" rel="noopener">布赖恩·克尼根算法</a>， 位运算中需要掌握的一种算法</p><p>作用： 将一个数的二进制从右往左看最后一个1变为0</p><p>原理：将一个数-1，在二进制上的表现就是最后一位1变为0，此位后面的所有0变为1，此位前面的二进制位数字不动</p><p>使用： x &amp; (x-1)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hammingWeight</span><span class="params">(num <span class="keyword">uint32</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    count := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> num != <span class="number">0</span>  &#123;</span><br><span class="line">        <span class="comment">// x &amp; (x-1) 可以去除掉最后一位1</span></span><br><span class="line">        num &amp;= (num<span class="number">-1</span>)</span><br><span class="line">        count ++ </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;剑指 Offer 15. 二进制中1的个数&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;难度简单&lt;/p&gt;
&lt;p&gt;编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为 &lt;a href=&quot;http://en.wikipedia.org/wiki/Hamming_weight&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;汉明重量&lt;/a&gt;).）。&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="leetcode" scheme="https://xwjahahahaha.github.io/categories/technical/leetcode/"/>
    
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>日记_0198</title>
    <link href="https://xwjahahahaha.github.io/2021/07/16/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-07/%E6%97%A5%E8%AE%B0-0198/"/>
    <id>https://xwjahahahaha.github.io/2021/07/16/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-07/%E6%97%A5%E8%AE%B0-0198/</id>
    <published>2021-07-16T01:13:02.000Z</published>
    <updated>2021-07-16T01:17:12.495Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>每天</th><th>开发-云容器技术</th><th>项目与框架</th><th>科研-区块链(FL+BC)</th><th>预备事宜</th></tr></thead><tbody><tr><td>1.</td><td><strong>英语单词</strong></td><td>go基础</td><td>SimpleBitcoin</td><td>FL/分布式存储论文一周一篇细读</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>2.</td><td>语法课看完</td><td>go网络编程、Web框架</td><td>联邦学习框架</td><td>写专利</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>3.</td><td><font color='red'>六级</font></td><td>go数据库、ORM、go高级编程</td><td></td><td>机器学习课程</td><td>为<strong>研二实习</strong>做准备</td></tr><tr><td>4.</td><td>Leetcode</td><td>go容器技术docker、k8s</td><td></td><td></td><td></td></tr><tr><td>5.</td><td></td><td>go微服务与任务调度</td><td></td><td></td><td></td></tr><tr><td>6.</td><td></td><td>看源码docker、k8s、Fabric、以太坊、比特币等</td><td></td><td></td><td></td></tr><tr><td>7.</td><td></td><td>Linux、C++</td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li><li><input disabled="" type="checkbox"> Advances_and_Open_Problems_in_Federated_Learning</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input checked="" disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input checked="" disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input checked="" disabled="" type="checkbox"> Proof of Federated Learning: A Novel Energy-recycling Consensus Algorithm</li><li><input checked="" disabled="" type="checkbox"> Scalable and Communication-efficient Decentralized Federated Edge Learning with Multi-blockchain Framework</li><li><input checked="" disabled="" type="checkbox"> DEEP GRADIENT COMPRESSION:REDUCING THE COMMUNICATION BANDWIDTH FOR DISTRIBUTED TRAINING</li><li><input disabled="" type="checkbox"> BlockFLA:Accountable_Federated_Learning_via_Hybrid_Blockchain_Architecture</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li><del>学弟的cosmos隐私保护项目</del></li><li>第一篇论文FL+BC</li><li><del>科技部编程比赛</del></li><li>暑期实习准备(Go, 算法等)</li></ul><ul><li><input checked="" disabled="" type="checkbox"> cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></li><li><input checked="" disabled="" type="checkbox"> 科技部编程比赛项目实现(使用cosmos)</li><li><input checked="" disabled="" type="checkbox"> Go公链实现项目(simple_bitcoin)</li><li><input checked="" disabled="" type="checkbox"> 专利一篇(金链积分)</li><li><input disabled="" type="checkbox"> Go网络编程Base</li><li><input disabled="" type="checkbox"> Go网络编程(base、Echo、Gin)</li><li><input disabled="" type="checkbox"> 第一篇论文初稿(blockchain + FL)</li><li><input disabled="" type="checkbox"> 论文实验(编码实现)</li><li><input disabled="" type="checkbox"> 数据库(mysql, PostgreSQL), ORM(Gorm) 、Go设计模式  </li><li><input disabled="" type="checkbox"> Go设计模式 </li><li><input disabled="" type="checkbox"> docker </li><li><input disabled="" type="checkbox"> 容器编程k8s</li><li><input disabled="" type="checkbox"> 缓存、日志</li><li><input disabled="" type="checkbox"> 微服务(消息队列、任务调度、rpc)</li></ul><ul><li>Go开发走云容器技术</li><li>区块链开发走科研论文、Etherem、Fabric、源码分析、Cosmos使用</li></ul><p><strong>有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input disabled="" type="checkbox"> leetcode一题 剑指offer</li><li><input disabled="" type="checkbox"> 隐私计算</li><li><input disabled="" type="checkbox"> BlockFLA论文</li><li><input disabled="" type="checkbox"> tendermint项目解读2</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每天&lt;/th&gt;
&lt;th&gt;开发-云容器技术&lt;/th&gt;
&lt;th&gt;项目与框架&lt;/th&gt;
&lt;th&gt;科研-区块链(FL+BC)&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go基础&lt;/td&gt;
&lt;td&gt;SimpleBitcoin&lt;/td&gt;
&lt;td&gt;FL/分布式存储论文一周一篇细读&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;go网络编程、Web框架&lt;/td&gt;
&lt;td&gt;联邦学习框架&lt;/td&gt;
&lt;td&gt;写专利&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;go数据库、ORM、go高级编程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;机器学习课程&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;研二实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;Leetcode&lt;/td&gt;
&lt;td&gt;go容器技术docker、k8s&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;go微服务与任务调度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码docker、k8s、Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux、C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>隐私计算</title>
    <link href="https://xwjahahahaha.github.io/2021/07/15/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%AF%86%E7%A0%81%E5%AD%A6/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6/%E9%9A%90%E7%A7%81%E8%AE%A1%E7%AE%97/"/>
    <id>https://xwjahahahaha.github.io/2021/07/15/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%AF%86%E7%A0%81%E5%AD%A6/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6/%E9%9A%90%E7%A7%81%E8%AE%A1%E7%AE%97/</id>
    <published>2021-07-15T06:04:05.000Z</published>
    <updated>2021-07-16T03:05:44.059Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习材料：</p><p><a href="https://zhuanlan.zhihu.com/p/138630291" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/138630291</a></p><p><a href="https://zhuanlan.zhihu.com/p/110210315" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/110210315</a></p></blockquote><h1 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h1><ul><li><p>区块链本身的公开性与隐私保护的冲突：</p><ul><li>区块链的隐私保护与传统隐私保护不同：上链数据需要多节点的验证共识, 链上的数据是公开透明的</li></ul></li><li><p>区块链隐私保护策略：</p><ol><li>链上链下分割, 分别设计隐私数据的保护策略</li><li>访问控制</li></ol></li><li><p>隐私保护策略的实现需要密码学技术的支持：</p><ol><li><p>同态加密：加密后的数据计算与原数据的直接计算同态</p></li><li><p>零知识证明：不泄漏数据本身的任何信息的情况下实现某些信息的证明</p></li><li><p>安全多方计算: 在隐私保护的情况下多方之间协同计算 (<em>一般基于<strong>混淆电路</strong>和<strong>不经意传输</strong>等技术实现</em>)</p></li><li><p>TEE(如SGX): 信任硬件设备:</p><p>在信任特定硬件设备（如 Intel 芯片的 SGX 功能）难以攻破的前提下选择在受硬件保护的 Enclave 环境中解密外部输入数据、执行智能合约代码、加密输出数据，此过程中<strong>明文信息只出现在 Enclave 中</strong>但不能被外部看到。</p><blockquote><p><font color='#39b54a'>加解密在硬件中，让明文只在硬件中暴露</font></p></blockquote></li></ol></li></ul><a id="more"></a><ul><li><p>区块链隐私主要分为身份隐私和交易隐私</p><ul><li>身份隐私：区块链地址与真实地址的映射关系隐私</li><li>交易隐私： 区块链上公开的信息，例如比特币的输入输出地址、金额暴露的支付关系</li></ul></li><li><p>交易数据的加密可以实现隐私保护，但是密文又会给验证交易带来困难</p><blockquote><p>如果比特币的金额都是加密的，那么核对账户余额以及扣款等就会相对变得更加复杂</p></blockquote><p>同态加密可以解决这个问题</p></li></ul><p>文章针对 ACCOUNT 模型，设计一种交易金额的同态加密计算和基于 FO 承诺的零知识证明方案。</p><blockquote><p>详细的加密工具的基本详解与使用，见下方链接：</p><ol><li>同态加密：</li><li>零知识证明：</li><li>安全多方计算：</li><li>查分隐私：</li></ol></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;学习材料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/138630291&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/138630291&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/110210315&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/110210315&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、基本概念&quot;&gt;&lt;a href=&quot;#一、基本概念&quot; class=&quot;headerlink&quot; title=&quot;一、基本概念&quot;&gt;&lt;/a&gt;一、基本概念&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;区块链本身的公开性与隐私保护的冲突：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;区块链的隐私保护与传统隐私保护不同：上链数据需要多节点的验证共识, 链上的数据是公开透明的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;区块链隐私保护策略：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;链上链下分割, 分别设计隐私数据的保护策略&lt;/li&gt;
&lt;li&gt;访问控制&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;隐私保护策略的实现需要密码学技术的支持：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;同态加密：加密后的数据计算与原数据的直接计算同态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;零知识证明：不泄漏数据本身的任何信息的情况下实现某些信息的证明&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安全多方计算: 在隐私保护的情况下多方之间协同计算 (&lt;em&gt;一般基于&lt;strong&gt;混淆电路&lt;/strong&gt;和&lt;strong&gt;不经意传输&lt;/strong&gt;等技术实现&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TEE(如SGX): 信任硬件设备:&lt;/p&gt;
&lt;p&gt;在信任特定硬件设备（如 Intel 芯片的 SGX 功能）难以攻破的前提下选择在受硬件保护的 Enclave 环境中解密外部输入数据、执行智能合约代码、加密输出数据，此过程中&lt;strong&gt;明文信息只出现在 Enclave 中&lt;/strong&gt;但不能被外部看到。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;font color=&#39;#39b54a&#39;&gt;加解密在硬件中，让明文只在硬件中暴露&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="solidity" scheme="https://xwjahahahaha.github.io/categories/technical/solidity/"/>
    
    
    <category term="solidity" scheme="https://xwjahahahaha.github.io/tags/solidity/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer14-II.剪绳子II</title>
    <link href="https://xwjahahahaha.github.io/2021/07/14/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/%E5%89%91%E6%8C%87Offer14-II-%E5%89%AA%E7%BB%B3%E5%AD%90II/"/>
    <id>https://xwjahahahaha.github.io/2021/07/14/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/%E5%89%91%E6%8C%87Offer14-II-%E5%89%AA%E7%BB%B3%E5%AD%90II/</id>
    <published>2021-07-14T06:18:34.000Z</published>
    <updated>2021-07-14T06:29:07.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/" target="_blank" rel="noopener">剑指 Offer 14- II. 剪绳子 II</a></p><p>难度中等125</p><p>给你一根长度为 <code>n</code> 的绳子，请把绳子剪成整数长度的 <code>m</code> 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 <code>k[0],k[1]...k[m - 1]</code> 。请问 <code>k[0]*k[1]*...*k[m - 1]</code> 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p><p><font color='#e54d42'>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</font></p> <a id="more"></a><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 2</span><br><span class="line">输出: 1</span><br><span class="line">解释: 2 &#x3D; 1 + 1, 1 × 1 &#x3D; 1</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 10</span><br><span class="line">输出: 36</span><br><span class="line">解释: 10 &#x3D; 3 + 3 + 4, 3 × 3 × 4 &#x3D; 36</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= n &lt;= 1000</code></li></ul><p>注意：本题与主站 343 题相同：<a href="https://leetcode-cn.com/problems/integer-break/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/integer-break/</a></p><h2 id="解题思路及代码"><a href="#解题思路及代码" class="headerlink" title="解题思路及代码"></a>解题思路及代码</h2><p>循环求余法除去溢出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此题不在适合动态规划，要用贪心算法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cuttingRope</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> || n == <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> n == <span class="number">3</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mod := <span class="number">1000000007</span></span><br><span class="line">    timesOf3 := n/<span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span> n- (<span class="number">3</span> * timesOf3) == <span class="number">1</span> &#123;</span><br><span class="line">        timesOf3 -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    timesOf2 := (n - <span class="number">3</span> * timesOf3) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求指数的时候，进行循环求模处理</span></span><br><span class="line">    res := <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>; i&lt;=timesOf3; i++ &#123;</span><br><span class="line">        res = (res * <span class="number">3</span>) % mod</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>; i&lt;=timesOf2; i++ &#123;</span><br><span class="line">        res = (res * <span class="number">2</span>) % mod</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % mod</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;剑指 Offer 14- II. 剪绳子 II&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;难度中等125&lt;/p&gt;
&lt;p&gt;给你一根长度为 &lt;code&gt;n&lt;/code&gt; 的绳子，请把绳子剪成整数长度的 &lt;code&gt;m&lt;/code&gt; 段（m、n都是整数，n&amp;gt;1并且m&amp;gt;1），每段绳子的长度记为 &lt;code&gt;k[0],k[1]...k[m - 1]&lt;/code&gt; 。请问 &lt;code&gt;k[0]*k[1]*...*k[m - 1]&lt;/code&gt; 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;#e54d42&#39;&gt;答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="leetcode" scheme="https://xwjahahahaha.github.io/categories/technical/leetcode/"/>
    
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>日记_0197</title>
    <link href="https://xwjahahahaha.github.io/2021/07/14/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-07/%E6%97%A5%E8%AE%B0-0197/"/>
    <id>https://xwjahahahaha.github.io/2021/07/14/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-07/%E6%97%A5%E8%AE%B0-0197/</id>
    <published>2021-07-14T03:21:17.000Z</published>
    <updated>2021-07-16T01:09:25.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>每天</th><th>开发-云容器技术</th><th>项目与框架</th><th>科研-区块链(FL+BC)</th><th>预备事宜</th></tr></thead><tbody><tr><td>1.</td><td><strong>英语单词</strong></td><td>go基础</td><td>SimpleBitcoin</td><td>FL/分布式存储论文一周一篇细读</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>2.</td><td>语法课看完</td><td>go网络编程、Web框架</td><td>联邦学习框架</td><td>写专利</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>3.</td><td><font color='red'>六级</font></td><td>go数据库、ORM、go高级编程</td><td></td><td>机器学习课程</td><td>为<strong>研二实习</strong>做准备</td></tr><tr><td>4.</td><td>Leetcode</td><td>go容器技术docker、k8s</td><td></td><td></td><td></td></tr><tr><td>5.</td><td></td><td>go微服务与任务调度</td><td></td><td></td><td></td></tr><tr><td>6.</td><td></td><td>看源码docker、k8s、Fabric、以太坊、比特币等</td><td></td><td></td><td></td></tr><tr><td>7.</td><td></td><td>Linux、C++</td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li><li><input disabled="" type="checkbox"> Advances_and_Open_Problems_in_Federated_Learning</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input checked="" disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input checked="" disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input checked="" disabled="" type="checkbox"> Proof of Federated Learning: A Novel Energy-recycling Consensus Algorithm</li><li><input checked="" disabled="" type="checkbox"> Scalable and Communication-efficient Decentralized Federated Edge Learning with Multi-blockchain Framework</li><li><input checked="" disabled="" type="checkbox"> DEEP GRADIENT COMPRESSION:REDUCING THE COMMUNICATION BANDWIDTH FOR DISTRIBUTED TRAINING</li><li><input disabled="" type="checkbox"> BlockFLA:Accountable_Federated_Learning_via_Hybrid_Blockchain_Architecture</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li><del>学弟的cosmos隐私保护项目</del></li><li>第一篇论文FL+BC</li><li><del>科技部编程比赛</del></li><li>暑期实习准备(Go, 算法等)</li></ul><ul><li><input checked="" disabled="" type="checkbox"> cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></li><li><input checked="" disabled="" type="checkbox"> 科技部编程比赛项目实现(使用cosmos)</li><li><input checked="" disabled="" type="checkbox"> Go公链实现项目(simple_bitcoin)</li><li><input checked="" disabled="" type="checkbox"> 专利一篇(金链积分)</li><li><input disabled="" type="checkbox"> Go网络编程Base</li><li><input disabled="" type="checkbox"> Go网络编程(base、Echo、Gin)</li><li><input disabled="" type="checkbox"> 第一篇论文初稿(blockchain + FL)</li><li><input disabled="" type="checkbox"> 论文实验(编码实现)</li><li><input disabled="" type="checkbox"> 数据库(mysql, PostgreSQL), ORM(Gorm) 、Go设计模式  </li><li><input disabled="" type="checkbox"> Go设计模式 </li><li><input disabled="" type="checkbox"> docker </li><li><input disabled="" type="checkbox"> 容器编程k8s</li><li><input disabled="" type="checkbox"> 缓存、日志</li><li><input disabled="" type="checkbox"> 微服务(消息队列、任务调度、rpc)</li></ul><ul><li>Go开发走云容器技术</li><li>区块链开发走科研论文、Etherem、Fabric、源码分析、Cosmos使用</li></ul><p><strong>有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input disabled="" type="checkbox"> 英语</li><li><input checked="" disabled="" type="checkbox"> leetcode一题 剑指offer</li><li><input checked="" disabled="" type="checkbox"> 华为比赛</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每天&lt;/th&gt;
&lt;th&gt;开发-云容器技术&lt;/th&gt;
&lt;th&gt;项目与框架&lt;/th&gt;
&lt;th&gt;科研-区块链(FL+BC)&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go基础&lt;/td&gt;
&lt;td&gt;SimpleBitcoin&lt;/td&gt;
&lt;td&gt;FL/分布式存储论文一周一篇细读&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;go网络编程、Web框架&lt;/td&gt;
&lt;td&gt;联邦学习框架&lt;/td&gt;
&lt;td&gt;写专利&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;go数据库、ORM、go高级编程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;机器学习课程&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;研二实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;Leetcode&lt;/td&gt;
&lt;td&gt;go容器技术docker、k8s&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;go微服务与任务调度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码docker、k8s、Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux、C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer14-I.剪绳子</title>
    <link href="https://xwjahahahaha.github.io/2021/07/13/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/%E5%89%91%E6%8C%87Offer14-I-%E5%89%AA%E7%BB%B3%E5%AD%90/"/>
    <id>https://xwjahahahaha.github.io/2021/07/13/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/%E5%89%91%E6%8C%87Offer14-I-%E5%89%AA%E7%BB%B3%E5%AD%90/</id>
    <published>2021-07-13T09:02:06.000Z</published>
    <updated>2021-07-13T09:15:48.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://leetcode-cn.com/problems/jian-sheng-zi-lcof/" target="_blank" rel="noopener">剑指 Offer 14- I. 剪绳子</a></p><p>难度中等</p><p>给你一根长度为 <code>n</code> 的绳子，请把绳子剪成整数长度的 <code>m</code> 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 <code>k[0],k[1]...k[m-1]</code>。请问 <code>k[0]*k[1]*...*k[m-1]</code> 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p><a id="more"></a><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 2</span><br><span class="line">输出: 1</span><br><span class="line">解释: 2 &#x3D; 1 + 1, 1 × 1 &#x3D; 1</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 10</span><br><span class="line">输出: 36</span><br><span class="line">解释: 10 &#x3D; 3 + 3 + 4, 3 × 3 × 4 &#x3D; 36</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= n &lt;= 58</code></li></ul><h2 id="解题思路及代码"><a href="#解题思路及代码" class="headerlink" title="解题思路及代码"></a>解题思路及代码</h2><h3 id="方法一：-动态规划"><a href="#方法一：-动态规划" class="headerlink" title="方法一： 动态规划"></a>方法一： 动态规划</h3><p>时间复杂度O($n^2$), 空间复杂度O(n)</p><p><font color='#e54d42'><strong>从上往下分析，从下往上编写</strong></font> (避免重复计算)</p><ul><li>对于dp[i]长度的绳子，可从k位置开始剪开，则k的范围为[1, i)</li><li>在第k个位置剪开，[k, i]长度的绳子可以剪也可以不剪，选择大者。则状态转移方程为: $dp[i] = max(k<em>dp[i-k], k</em>(i-k))$</li><li>对于所有的k位置，取最大为当前dp[i]的最大乘积，所以状态转移方程变为:$dp[i] = max(dp[i], max(k<em>dp[i-k], k</em>(i-k)))$</li><li>优化: 对于长度为i的绳子，剪为长度k与(i-k) 和 剪为长度(i-k)和k是一样的，所以第k个位置剪开只需要考虑到i/2不用到i</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态规划 时间复杂度O(n2), 空间复杂度O(n)</span></span><br><span class="line"><span class="comment">// 构建动态规划方程：</span></span><br><span class="line"><span class="comment">// dp[i] = max&#123;dp[i], max&#123;k*dp[i-k], k*(i-k)&#125;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cuttingRope</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// 创建动态规划数组</span></span><br><span class="line">    dp := <span class="built_in">make</span>([]<span class="keyword">int</span>, n+<span class="number">1</span>)</span><br><span class="line">    <span class="comment">// 初始化情况</span></span><br><span class="line">    <span class="comment">// 长度为2最大乘积为1</span></span><br><span class="line">    dp[<span class="number">1</span>], dp[<span class="number">2</span>] = <span class="number">1</span>, <span class="number">1</span>           </span><br><span class="line">    <span class="comment">// 从下往上构建,避免重复计算</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">3</span>; i&lt;=n; i++ &#123;</span><br><span class="line">        <span class="comment">// 遍历切的位置k</span></span><br><span class="line">        max := <span class="number">0</span></span><br><span class="line">        <span class="comment">// 此循环优化：不用到达i，切到中间后面都是一样的</span></span><br><span class="line">        <span class="keyword">for</span> k:=<span class="number">1</span>; k&lt;=i/<span class="number">2</span>; k++ &#123;</span><br><span class="line">            <span class="comment">// [k, i]部分裁剪</span></span><br><span class="line">            clip := k * dp[i-k]</span><br><span class="line">            <span class="comment">// [k, i]部分不裁剪</span></span><br><span class="line">            no_clip := k * (i-k)</span><br><span class="line">            <span class="comment">// 选择最大的</span></span><br><span class="line">            <span class="keyword">if</span> clip &gt; no_clip &#123;</span><br><span class="line">                dp[i] = clip</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i] = no_clip</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 找出所有裁剪位置的最大值</span></span><br><span class="line">            <span class="keyword">if</span> dp[i] &gt; max &#123;</span><br><span class="line">                max = dp[i]</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        dp[i] = max</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>复杂度优化思路加一：</p><ul><li>考虑遍历过程前后是否有重复，有的话可以只遍历一半，甚至开根</li></ul></blockquote><h3 id="方法二-贪心算法"><a href="#方法二-贪心算法" class="headerlink" title="方法二 贪心算法"></a>方法二 贪心算法</h3><p>时间复杂度O（n）</p><p>尽可能把绳子分成长度为3的小段，这样乘积最大，当最后为4时分为两个2最大</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 贪心算法 时间复杂度O（n）</span></span><br><span class="line"><span class="comment">// 尽可能把绳子分成长度为3的小段，这样乘积最大</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cuttingRope</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// 直接返回一些特殊情况</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> || n == <span class="number">2</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> n == <span class="number">3</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 计算3的次数</span></span><br><span class="line">    timesOf3 := n / <span class="number">3</span></span><br><span class="line">    <span class="comment">// 如果最后一次为4，那么就改为2*2</span></span><br><span class="line">    <span class="keyword">if</span> n - timesOf3 * <span class="number">3</span> == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="comment">// 现将最后一次剪次数扣除</span></span><br><span class="line">        timesOf3 -= <span class="number">1</span>       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算余下2的次数，要么为一次(余2)，要么为2次(余4)</span></span><br><span class="line">    timesOf2 := (n - timesOf3 * <span class="number">3</span>) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">int</span>(math.Pow(<span class="keyword">float64</span>(<span class="number">3</span>), <span class="keyword">float64</span>(timesOf3))) * <span class="keyword">int</span>(math.Pow(<span class="keyword">float64</span>(<span class="number">2</span>), <span class="keyword">float64</span>(timesOf2)))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/jian-sheng-zi-lcof/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;剑指 Offer 14- I. 剪绳子&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;难度中等&lt;/p&gt;
&lt;p&gt;给你一根长度为 &lt;code&gt;n&lt;/code&gt; 的绳子，请把绳子剪成整数长度的 &lt;code&gt;m&lt;/code&gt; 段（m、n都是整数，n&amp;gt;1并且m&amp;gt;1），每段绳子的长度记为 &lt;code&gt;k[0],k[1]...k[m-1]&lt;/code&gt;。请问 &lt;code&gt;k[0]*k[1]*...*k[m-1]&lt;/code&gt; 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="leetcode" scheme="https://xwjahahahaha.github.io/categories/technical/leetcode/"/>
    
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>日记_0196</title>
    <link href="https://xwjahahahaha.github.io/2021/07/13/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-07/%E6%97%A5%E8%AE%B0-0196/"/>
    <id>https://xwjahahahaha.github.io/2021/07/13/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-07/%E6%97%A5%E8%AE%B0-0196/</id>
    <published>2021-07-13T01:55:26.000Z</published>
    <updated>2021-07-14T03:21:34.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>每天</th><th>开发-云容器技术</th><th>项目与框架</th><th>科研-区块链(FL+BC)</th><th>预备事宜</th></tr></thead><tbody><tr><td>1.</td><td><strong>英语单词</strong></td><td>go基础</td><td>SimpleBitcoin</td><td>FL/分布式存储论文一周一篇细读</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>2.</td><td>语法课看完</td><td>go网络编程、Web框架</td><td>联邦学习框架</td><td>写专利</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>3.</td><td><font color='red'>六级</font></td><td>go数据库、ORM、go高级编程</td><td></td><td>机器学习课程</td><td>为<strong>研二实习</strong>做准备</td></tr><tr><td>4.</td><td>Leetcode</td><td>go容器技术docker、k8s</td><td></td><td></td><td></td></tr><tr><td>5.</td><td></td><td>go微服务与任务调度</td><td></td><td></td><td></td></tr><tr><td>6.</td><td></td><td>看源码docker、k8s、Fabric、以太坊、比特币等</td><td></td><td></td><td></td></tr><tr><td>7.</td><td></td><td>Linux、C++</td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li><li><input disabled="" type="checkbox"> Advances_and_Open_Problems_in_Federated_Learning</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input checked="" disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input checked="" disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input checked="" disabled="" type="checkbox"> Proof of Federated Learning: A Novel Energy-recycling Consensus Algorithm</li><li><input checked="" disabled="" type="checkbox"> Scalable and Communication-efficient Decentralized Federated Edge Learning with Multi-blockchain Framework</li><li><input checked="" disabled="" type="checkbox"> DEEP GRADIENT COMPRESSION:REDUCING THE COMMUNICATION BANDWIDTH FOR DISTRIBUTED TRAINING</li><li><input disabled="" type="checkbox"> BlockFLA:Accountable_Federated_Learning_via_Hybrid_Blockchain_Architecture</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li><del>学弟的cosmos隐私保护项目</del></li><li>第一篇论文FL+BC</li><li><del>科技部编程比赛</del></li><li>暑期实习准备(Go, 算法等)</li></ul><ul><li><input checked="" disabled="" type="checkbox"> cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></li><li><input checked="" disabled="" type="checkbox"> 科技部编程比赛项目实现(使用cosmos)</li><li><input checked="" disabled="" type="checkbox"> Go公链实现项目(simple_bitcoin)</li><li><input disabled="" type="checkbox"> 专利一篇(金链积分)</li><li><input disabled="" type="checkbox"> Go网络编程Base</li><li><input disabled="" type="checkbox"> Go网络编程(base、Echo、Gin)</li><li><input disabled="" type="checkbox"> 第一篇论文初稿(blockchain + FL)</li><li><input disabled="" type="checkbox"> 论文实验(编码实现)</li><li><input disabled="" type="checkbox"> 数据库(mysql, PostgreSQL), ORM(Gorm) 、Go设计模式  </li><li><input disabled="" type="checkbox"> Go设计模式 </li><li><input disabled="" type="checkbox"> docker </li><li><input disabled="" type="checkbox"> 容器编程k8s</li><li><input disabled="" type="checkbox"> 缓存、日志</li><li><input disabled="" type="checkbox"> 微服务(消息队列、任务调度、rpc)</li></ul><ul><li>Go开发走云容器技术</li><li>区块链开发走科研论文、Etherem、Fabric、源码分析、Cosmos使用</li></ul><p><strong>有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input disabled="" type="checkbox"> 英语</li><li><input checked="" disabled="" type="checkbox"> leetcode一题 剑指offer</li><li><input checked="" disabled="" type="checkbox"> 论文BlockFLA系统架构部分</li><li><input checked="" disabled="" type="checkbox"> mqtt go语言实现</li><li><input disabled="" type="checkbox"> 项目Tendermint</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每天&lt;/th&gt;
&lt;th&gt;开发-云容器技术&lt;/th&gt;
&lt;th&gt;项目与框架&lt;/th&gt;
&lt;th&gt;科研-区块链(FL+BC)&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go基础&lt;/td&gt;
&lt;td&gt;SimpleBitcoin&lt;/td&gt;
&lt;td&gt;FL/分布式存储论文一周一篇细读&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;go网络编程、Web框架&lt;/td&gt;
&lt;td&gt;联邦学习框架&lt;/td&gt;
&lt;td&gt;写专利&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;go数据库、ORM、go高级编程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;机器学习课程&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;研二实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;Leetcode&lt;/td&gt;
&lt;td&gt;go容器技术docker、k8s&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;go微服务与任务调度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码docker、k8s、Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux、C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>拒绝年费自己组建MarkdownNice转微信公众号格式神器</title>
    <link href="https://xwjahahahaha.github.io/2021/07/12/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%B0%8F%E6%8A%80%E5%B7%A7/%E6%8B%92%E7%BB%9D%E5%B9%B4%E8%B4%B9%E8%87%AA%E5%B7%B1%E7%BB%84%E5%BB%BAMarkdownNice%E8%BD%AC%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%A0%BC%E5%BC%8F%E7%A5%9E%E5%99%A8/"/>
    <id>https://xwjahahahaha.github.io/2021/07/12/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%B0%8F%E6%8A%80%E5%B7%A7/%E6%8B%92%E7%BB%9D%E5%B9%B4%E8%B4%B9%E8%87%AA%E5%B7%B1%E7%BB%84%E5%BB%BAMarkdownNice%E8%BD%AC%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%A0%BC%E5%BC%8F%E7%A5%9E%E5%99%A8/</id>
    <published>2021-07-12T06:12:29.000Z</published>
    <updated>2021-07-12T06:38:35.867Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>资料来源：</p><p><a href="https://cloud.tencent.com/developer/article/1811081" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1811081</a></p></blockquote><h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p>墨滴的公众号排版格式转换服务非常的好用，对于一些带有公式的Markdown也能够完美的转换成为公众号的格式</p><p>它的简单功能介绍可见连接：<a href="https://zhuanlan.zhihu.com/p/104209040" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/104209040</a></p><p>总之，如果你喜欢用Markdown写公众号，那么这个是你的不二之选</p><p>但是，官方的app软件只有试用期7天，年费的开销也挺大, 在线转网站必须要登陆等等限制（且自动会把内容发到社区）。。。</p><p>好在其代码开源，所以我们可以自己搭建一个mdnice服务</p><a id="more"></a><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/8pVlof.png" alt="8pVlof"></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p>一台云服务器，或者有公网IP带域名解析的服务器主机</p><p>建议阿里云、腾讯等学生机，便宜够用。</p><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><p>有一个注册的域名</p><p>nodejs npm 环境需要提前安装. (如果不会也可跳过)</p><h1 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h1><h2 id="1-下载官方包"><a href="#1-下载官方包" class="headerlink" title="1. 下载官方包"></a>1. 下载官方包</h2><p>下载官方的压缩包， 链接： <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fmdnice%2Fmarkdown-nice%2Farchive%2Frefs%2Fheads%2Fmaster.zip" target="_blank" rel="noopener">https://github.com/mdnice/markdown-nice/archive/refs/heads/master.zip</a></p><p>进入文件夹，下载依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖包</span></span><br><span class="line">npm i</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译软件, 获得可直接部署的项目文件夹</span></span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>没有环境的可以直接下载编译好的文件链接：  <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fzhaoolee.lanzoui.com%2FiZqoQnqrt9e" target="_blank" rel="noopener">https://zhaoolee.lanzoui.com/iZqoQnqrt9e</a></p><p>正确完整的文件目录如下：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/mEouy8.png" alt="mEouy8"></p><h2 id="2-部署"><a href="#2-部署" class="headerlink" title="2. 部署"></a>2. 部署</h2><p>发送到你的云服务器中，放置到如下目录</p><p><code>/usr/share/nginx/mdnice</code>    (文件夹名称可自行命名, 我就叫mdnice)</p><h2 id="3-添加域名解析"><a href="#3-添加域名解析" class="headerlink" title="3. 添加域名解析"></a>3. 添加域名解析</h2><p>在你的云服务器服务商网站中找到域名解析，以阿里云为例：</p><p>添加一个你喜欢子域名前缀，这里我就是<code>mdnice.gumptlu.work</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/uo4FFB.png" alt="uo4FFB"></p><h2 id="4-nginx配置"><a href="#4-nginx配置" class="headerlink" title="4. nginx配置"></a>4. nginx配置</h2><p>在云服务器的<code>/etc/nginx/conf.d</code>目录下添加一个conf后缀文件, 这里命名就以<code>mdnice.gumptlu.work.conf</code>为例</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/nalT1T.png" alt="nalT1T"></p><p>文件中写入解析内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80; </span><br><span class="line">  server_name mdnice.gumptlu.work;</span><br><span class="line">  charset  utf-8;</span><br><span class="line"> </span><br><span class="line">  location / &#123; </span><br><span class="line">    root /usr/share/nginx/mdnice;# 要与部署的路径对应</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启nginx：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试配置文件</span></span><br><span class="line">nginx -t</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启nginx</span></span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><h2 id="5-访问地址"><a href="#5-访问地址" class="headerlink" title="5. 访问地址"></a>5. 访问地址</h2><p><code>http://mdnice.gumptlu.work</code></p><p>ok!</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/s6284p.png" alt="s6284p"></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>如果之前开启过ssl用于https，那么需要关闭ssl，否则80端口会被自动转发到443, The plain HTTP request was sent to HTTPS port</p><p>解决：</p><p>开配置文件，查看HTTPS server段的配置：</p><p>修改前：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改方式，将监听端口后的“ssl”删除，即：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       443;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;资料来源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1811081&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cloud.tencent.com/developer/article/1811081&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;简单介绍&quot;&gt;&lt;a href=&quot;#简单介绍&quot; class=&quot;headerlink&quot; title=&quot;简单介绍&quot;&gt;&lt;/a&gt;简单介绍&lt;/h1&gt;&lt;p&gt;墨滴的公众号排版格式转换服务非常的好用，对于一些带有公式的Markdown也能够完美的转换成为公众号的格式&lt;/p&gt;
&lt;p&gt;它的简单功能介绍可见连接：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/104209040&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/104209040&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;总之，如果你喜欢用Markdown写公众号，那么这个是你的不二之选&lt;/p&gt;
&lt;p&gt;但是，官方的app软件只有试用期7天，年费的开销也挺大, 在线转网站必须要登陆等等限制（且自动会把内容发到社区）。。。&lt;/p&gt;
&lt;p&gt;好在其代码开源，所以我们可以自己搭建一个mdnice服务&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="markdown" scheme="https://xwjahahahaha.github.io/categories/technical/markdown/"/>
    
    
    <category term="markdown" scheme="https://xwjahahahaha.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>m1芯片Mac无法调试Goland的解决方案</title>
    <link href="https://xwjahahahaha.github.io/2021/07/12/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%B0%8F%E6%8A%80%E5%B7%A7/m1%E8%8A%AF%E7%89%87Mac%E6%97%A0%E6%B3%95%E8%B0%83%E8%AF%95Goland%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://xwjahahahaha.github.io/2021/07/12/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%B0%8F%E6%8A%80%E5%B7%A7/m1%E8%8A%AF%E7%89%87Mac%E6%97%A0%E6%B3%95%E8%B0%83%E8%AF%95Goland%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2021-07-12T03:20:31.000Z</published>
    <updated>2021-07-12T03:47:33.328Z</updated>
    
    <content type="html"><![CDATA[<p>查询了很多资料文章，下面这篇给了启发，记录一下我的解决方案</p><p><a href="https://blog.csdn.net/zsi386/article/details/116357850?spm=1001.2014.3001.5501" target="_blank" rel="noopener">https://blog.csdn.net/zsi386/article/details/116357850?spm=1001.2014.3001.5501</a></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>我的环境：</p><ul><li><p>go version :  go1.16.5 darwin/arm64.  (下载时记得下载arm架构的)</p></li><li><p>goland version: 2020.3</p></li><li><p>mac version:Big Sur 11.4 MacBook Air m1芯片</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/MvQldJ.png" alt="MvQldJ"> </p></li></ul><a id="more"></a><p>调试出现的问题：</p><p><font color='#e54d42'>可以断点停下来，但是无法<strong>下一步和查看变量</strong>，无报错</font></p><blockquote><p>断点都不可以停下的需要检查一下go的版本是否下载的arm架构</p><p><a href="https://studygolang.com/dl" target="_blank" rel="noopener">https://studygolang.com/dl</a></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/SjFTRk.png" alt="SjFTRk"></p></blockquote><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>下载go-delve/delve</p><p><code>git clone https://github.com/go-delve/delve.git</code></p><p>下载慢的可以用这个：<code>git clone https://github.com.cnpmjs.org/go-delve/delve.git</code></p><p>可以把它放在了GOPATH下的src/github.com//go-delve下，进入clone下来的delve中（<code>cd delve</code>），切换分支：</p><p><code>git checkout -b darwin-arm64-lldb</code></p><p>然后进入工程目录<code>cd ./cmd/dlv/</code>，重新编译：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go build</span><br><span class="line">go install</span><br></pre></td></tr></table></figure><p>(不需要修改代码，目前1205 bug估计已修复)</p><p>会在你的<code>GOPATH/bin</code>下重新生成二进制文件<code>dlv</code></p><p>我的版本信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Delve Debugger</span><br><span class="line">Version: 1.6.1</span><br><span class="line">Build: $Id: 114218c22f3791287c4bc2f4ff35a846a1416ee9 $</span><br></pre></td></tr></table></figure><p>设置你的goland (<code>Help&gt;Edit custom properties</code>)指向它就可以：</p><p><code>dlv.path=/path/to/dlv</code> (<font color='#e54d42'>路径要改</font>)，然后可以debug了：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/DHncf0.png" alt="DHncf0"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/VWLHrO.png" alt="VWLHrO"></p><h1 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h1><p>dlv老版本bug：</p><p>Big Sur11.3，lldb成了1205，dlv处理了1200，没处理1205</p><p>更新版本即可</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;查询了很多资料文章，下面这篇给了启发，记录一下我的解决方案&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zsi386/article/details/116357850?spm=1001.2014.3001.5501&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/zsi386/article/details/116357850?spm=1001.2014.3001.5501&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;我的环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;go version :  go1.16.5 darwin/arm64.  (下载时记得下载arm架构的)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;goland version: 2020.3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mac version:Big Sur 11.4 MacBook Air m1芯片&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://xwjpics.gumptlu.work/qinniu_uPic/MvQldJ.png&quot; alt=&quot;MvQldJ&quot;&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    
  </entry>
  
  <entry>
    <title>mqtt协议与go语言实现</title>
    <link href="https://xwjahahahaha.github.io/2021/07/12/%E6%8A%80%E6%9C%AF%E8%B4%B4/GoLang/mqtt%E5%8D%8F%E8%AE%AE%E4%B8%8Ego%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
    <id>https://xwjahahahaha.github.io/2021/07/12/%E6%8A%80%E6%9C%AF%E8%B4%B4/GoLang/mqtt%E5%8D%8F%E8%AE%AE%E4%B8%8Ego%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-07-12T01:11:57.000Z</published>
    <updated>2021-07-13T16:25:09.781Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习资料：</p><p><a href="https://studygolang.com/articles/14452" target="_blank" rel="noopener">https://studygolang.com/articles/14452</a></p><p><a href="https://blog.csdn.net/jacky128256/article/details/105610456" target="_blank" rel="noopener">https://blog.csdn.net/jacky128256/article/details/105610456</a></p></blockquote><h1 id="一、什么是MQTT"><a href="#一、什么是MQTT" class="headerlink" title="一、什么是MQTT"></a>一、什么是MQTT</h1><p><strong>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议）</strong>，是一种<strong>基于发布/订阅（publish/subscribe）模式</strong>的“轻量级”通讯协议，该协议构建于TCP/IP协议上，由IBM在1999年发布。</p><p>MQTT最大优点在于，可以以极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。作为一种低开销、低带宽占用的即时通讯协议，使其在物联网、小型设备、移动应用等方面有较广泛的应用</p><p>MQTT是一个基于客户端-服务器的消息发布/订阅传输协议。MQTT协议是轻量、简单、开放和易于实现的，这些特点使它适用范围非常广泛。在很多情况下，包括受限的环境中，如：机器与机器（M2M）通信和物联网（IoT）。其在，通过卫星链路通信传感器、偶尔拨号的医疗设备、智能家居、及一些小型化设备中已广泛使用</p><blockquote><p><font color='#39b54a'>MQTT还有一个特点就是客户端之间不用相互通信, MQTT通信更像是邮箱服务，发布者发布消息到服务器，接收者只要订阅了其服务在线后即可收到</font></p></blockquote><p>实现MQTT协议需要客户端和服务器端通讯完成，在通讯过程中，MQTT协议中有三种身份：<strong>发布者（Publish）、代理（Broker）（服务器）、订阅者（Subscribe）</strong>。其中，消息的发布者和订阅者都是客户端，消息代理是服务器，消息发布者可以同时是订阅者。</p><p>MQTT传输的消息分为：主题（Topic）和负载（payload）两部分：</p><p>（1）Topic，可以理解为消息的类型，订阅者订阅（Subscribe）后，就会收到该主题的消息内容（payload）；</p><p>（2）payload，可以理解为消息的内容，是指订阅者具体要使用的内容。</p><blockquote><p><font color='#39b54a'>Topic就是消息名，payload就是消息体</font></p></blockquote><a id="more"></a><p>MQTT会构建底层网络传输：它将建立客户端到服务器的连接，提供两者之间的一个<strong>有序的、无损的、基于字节流的双向传输。</strong></p><p>当应用数据通过MQTT网络发送时，MQTT会把与之相关的<strong>服务质量（QoS）</strong>和<strong>主题名（Topic）</strong>相关连。</p><h1 id="二、Go语言MQTT服务器Broker的搭建"><a href="#二、Go语言MQTT服务器Broker的搭建" class="headerlink" title="二、Go语言MQTT服务器Broker的搭建"></a>二、Go语言MQTT服务器Broker的搭建</h1><p>服务端用erlang编写的一个开源项目：emqqtd</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载安装包</span></span><br><span class="line">wget https://github.com/emqx/emqx/releases/download/v4.0.4/emqx-ubuntu18.04-v4.0.4.zip</span><br><span class="line">cd mqttd/emqx</span><br><span class="line">.</span><br><span class="line">├── bin</span><br><span class="line">├── data</span><br><span class="line">├── erts-10.5.2</span><br><span class="line">├── etc</span><br><span class="line">├── lib</span><br><span class="line">├── log</span><br><span class="line">└── releases</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启服务</span></span><br><span class="line">./bin/emqx start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看状态</span></span><br><span class="line">./bin/emqx_ctl status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止服务</span></span><br><span class="line">./bin/emqx stop</span><br></pre></td></tr></table></figure><p>找到自己的IP，访问<code>http://[你的IP]:18083/#/clients</code></p><ul><li>用户名：admin</li><li>密码：public</li></ul><p>即可进入服务器的控制台</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/RYTlik.png" alt="RYTlik"></p><h1 id="三、Go客户端访问简单API"><a href="#三、Go客户端访问简单API" class="headerlink" title="三、Go客户端访问简单API"></a>三、Go客户端访问简单API</h1><p>客户端用golang客户端的库：“github.com/eclipse/paho.mqtt.golang”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载依赖包</span></span><br><span class="line">go get -u github.com/eclipse/paho.mqtt.golang</span><br></pre></td></tr></table></figure><p>实例如下：</p><p>编写了两个函数一个发布一个订阅，传入参数即可服务</p><p>修改<code>EMQServerAddress</code>为你服务器的IP</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与后端mqtt服务交互</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">mqtt <span class="string">"github.com/eclipse/paho.mqtt.golang"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> EMQServerAddress = <span class="string">"你的IP"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建全局mqtt publish消息处理 handler</span></span><br><span class="line"><span class="keyword">var</span> messagePubHandler mqtt.MessageHandler = <span class="function"><span class="keyword">func</span><span class="params">(client mqtt.Client, msg mqtt.Message)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Push Message:"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"TOPIC: %s\n"</span>, msg.Topic())</span><br><span class="line">fmt.Printf(<span class="string">"MSG: %s\n"</span>, msg.Payload())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建全局mqtt sub消息处理 handler</span></span><br><span class="line"><span class="keyword">var</span> messageSubHandler mqtt.MessageHandler = <span class="function"><span class="keyword">func</span><span class="params">(client mqtt.Client, msg mqtt.Message)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"收到订阅消息:"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"Sub Client Topic : %s \n"</span>, msg.Topic())</span><br><span class="line">fmt.Printf(<span class="string">"Sub Client msg : %s \n"</span>, msg.Payload())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接的回掉函数</span></span><br><span class="line"><span class="keyword">var</span> connectHandler mqtt.OnConnectHandler =<span class="function"><span class="keyword">func</span><span class="params">(client mqtt.Client)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"新的连接!"</span> + <span class="string">" Connected"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 丢失连接的回掉函数</span></span><br><span class="line"><span class="keyword">var</span> connectLostHandler mqtt.ConnectionLostHandler = <span class="function"><span class="keyword">func</span><span class="params">(client mqtt.Client, err error)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Connect loss: %v\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 配置错误提示</span></span><br><span class="line">mqtt.DEBUG = log.New(os.Stdout, <span class="string">"[mqttDEBUG]"</span>, <span class="number">0</span>)</span><br><span class="line">mqtt.ERROR = log.New(os.Stdout, <span class="string">" [mqttERROR]"</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @Description: 发布订阅</span></span><br><span class="line"><span class="comment"> * @param clientID</span></span><br><span class="line"><span class="comment"> * @param addr</span></span><br><span class="line"><span class="comment"> * @param topic</span></span><br><span class="line"><span class="comment"> * @param payload</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Push</span><span class="params">(topic <span class="keyword">string</span>, qos <span class="keyword">byte</span>, retain <span class="keyword">bool</span>, payload <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// opts ClientOptions 用于设置 broker，端口，客户端 id ，用户名密码等选项</span></span><br><span class="line">opts := mqtt.NewClientOptions().AddBroker(<span class="string">"tcp://"</span> + EMQServerAddress + <span class="string">":1883"</span>).SetClientID(<span class="string">"test_push"</span>)</span><br><span class="line">opts.SetKeepAlive(<span class="number">60</span> * time.Second)</span><br><span class="line"><span class="comment">// Message callback handler，在没有任何订阅时，发布端调用此函数</span></span><br><span class="line">opts.SetDefaultPublishHandler(messagePubHandler)</span><br><span class="line">opts.SetPingTimeout(<span class="number">1</span> * time.Second)</span><br><span class="line">opts.OnConnect = connectHandler</span><br><span class="line">opts.OnConnectionLost = connectLostHandler</span><br><span class="line">client := mqtt.NewClient(opts)</span><br><span class="line"><span class="keyword">if</span> token := client.Connect(); token.Wait() &amp;&amp; token.Error() != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(token.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发布消息</span></span><br><span class="line"><span class="comment">// qos是服务质量: ==1: 一次, &gt;=1: 至少一次, &lt;=1:最多一次</span></span><br><span class="line"><span class="comment">// retained: 表示mqtt服务器要保留这次推送的信息，如果有新的订阅者出现，就会把这消息推送给它（持久化推送）</span></span><br><span class="line">token := client.Publish(topic, qos, retain, payload)</span><br><span class="line">token.Wait()</span><br><span class="line">fmt.Println(<span class="string">"Push Data : "</span>+topic, <span class="string">"Data Size is "</span>+strconv.Itoa(<span class="built_in">len</span>(payload)))</span><br><span class="line">fmt.Println(<span class="string">"Disconnect with broker"</span>)</span><br><span class="line">client.Disconnect(<span class="number">250</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @Description: 订阅或取消订阅</span></span><br><span class="line"><span class="comment"> * @param clientID</span></span><br><span class="line"><span class="comment"> * @param addr</span></span><br><span class="line"><span class="comment"> * @param topic</span></span><br><span class="line"><span class="comment"> * @param isSub</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Subscription</span><span class="params">(topic <span class="keyword">string</span>, qos <span class="keyword">byte</span>, isSub <span class="keyword">bool</span>, handleFun <span class="keyword">func</span>([]<span class="keyword">byte</span>)</span>)</span> &#123;</span><br><span class="line">opts := mqtt.NewClientOptions().AddBroker(<span class="string">"tcp://"</span> + EMQServerAddress + <span class="string">":1883"</span>).SetClientID(<span class="string">"sub_test"</span>)</span><br><span class="line">opts.SetKeepAlive(<span class="number">60</span> * time.Second)</span><br><span class="line">opts.SetPingTimeout(<span class="number">1</span> * time.Second)</span><br><span class="line">opts.OnConnect = <span class="function"><span class="keyword">func</span><span class="params">(client mqtt.Client)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"New Subscription! Connected"</span> + <span class="string">" =&gt; "</span> + topic)</span><br><span class="line">&#125;</span><br><span class="line">opts.OnConnectionLost = connectLostHandler</span><br><span class="line">client := mqtt.NewClient(opts)</span><br><span class="line"><span class="keyword">if</span> token := client.Connect(); token.Wait() &amp;&amp; token.Error() != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(token.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> isSub &#123;</span><br><span class="line"><span class="comment">// 订阅消息</span></span><br><span class="line"><span class="keyword">if</span> token := client.Subscribe(topic, qos, <span class="function"><span class="keyword">func</span><span class="params">(client mqtt.Client, msg mqtt.Message)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Receive Subscribe Message :"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"Sub Client Topic : %s, Data size is  %d \n"</span>, msg.Topic(), <span class="built_in">len</span>(msg.Payload()))</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(msg.Payload()) &gt; <span class="number">0</span> &#123;</span><br><span class="line">handleFun(msg.Payload())</span><br><span class="line">&#125;</span><br><span class="line">&#125;); token.Wait() &amp;&amp; token.Error() != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(token.Error())</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 取消订阅</span></span><br><span class="line"><span class="keyword">if</span> token := client.Unsubscribe(topic); token.Wait() &amp;&amp; token.Error() != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(token.Error())</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;学习资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://studygolang.com/articles/14452&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://studygolang.com/articles/14452&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/jacky128256/article/details/105610456&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/jacky128256/article/details/105610456&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、什么是MQTT&quot;&gt;&lt;a href=&quot;#一、什么是MQTT&quot; class=&quot;headerlink&quot; title=&quot;一、什么是MQTT&quot;&gt;&lt;/a&gt;一、什么是MQTT&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议）&lt;/strong&gt;，是一种&lt;strong&gt;基于发布/订阅（publish/subscribe）模式&lt;/strong&gt;的“轻量级”通讯协议，该协议构建于TCP/IP协议上，由IBM在1999年发布。&lt;/p&gt;
&lt;p&gt;MQTT最大优点在于，可以以极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。作为一种低开销、低带宽占用的即时通讯协议，使其在物联网、小型设备、移动应用等方面有较广泛的应用&lt;/p&gt;
&lt;p&gt;MQTT是一个基于客户端-服务器的消息发布/订阅传输协议。MQTT协议是轻量、简单、开放和易于实现的，这些特点使它适用范围非常广泛。在很多情况下，包括受限的环境中，如：机器与机器（M2M）通信和物联网（IoT）。其在，通过卫星链路通信传感器、偶尔拨号的医疗设备、智能家居、及一些小型化设备中已广泛使用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;font color=&#39;#39b54a&#39;&gt;MQTT还有一个特点就是客户端之间不用相互通信, MQTT通信更像是邮箱服务，发布者发布消息到服务器，接收者只要订阅了其服务在线后即可收到&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实现MQTT协议需要客户端和服务器端通讯完成，在通讯过程中，MQTT协议中有三种身份：&lt;strong&gt;发布者（Publish）、代理（Broker）（服务器）、订阅者（Subscribe）&lt;/strong&gt;。其中，消息的发布者和订阅者都是客户端，消息代理是服务器，消息发布者可以同时是订阅者。&lt;/p&gt;
&lt;p&gt;MQTT传输的消息分为：主题（Topic）和负载（payload）两部分：&lt;/p&gt;
&lt;p&gt;（1）Topic，可以理解为消息的类型，订阅者订阅（Subscribe）后，就会收到该主题的消息内容（payload）；&lt;/p&gt;
&lt;p&gt;（2）payload，可以理解为消息的内容，是指订阅者具体要使用的内容。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;font color=&#39;#39b54a&#39;&gt;Topic就是消息名，payload就是消息体&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/categories/technical/golang/"/>
    
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>日记_0195</title>
    <link href="https://xwjahahahaha.github.io/2021/07/12/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-07/%E6%97%A5%E8%AE%B0-0195/"/>
    <id>https://xwjahahahaha.github.io/2021/07/12/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-07/%E6%97%A5%E8%AE%B0-0195/</id>
    <published>2021-07-12T01:08:35.000Z</published>
    <updated>2021-07-13T01:55:16.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>每天</th><th>开发-云容器技术</th><th>项目与框架</th><th>科研-区块链(FL+BC)</th><th>预备事宜</th></tr></thead><tbody><tr><td>1.</td><td><strong>英语单词</strong></td><td>go基础</td><td>SimpleBitcoin</td><td>FL/分布式存储论文一周一篇细读</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>2.</td><td>语法课看完</td><td>go网络编程、Web框架</td><td>联邦学习框架</td><td>写专利</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>3.</td><td><font color='red'>六级</font></td><td>go数据库、ORM、go高级编程</td><td></td><td>机器学习课程</td><td>为<strong>研二实习</strong>做准备</td></tr><tr><td>4.</td><td>Leetcode</td><td>go容器技术docker、k8s</td><td></td><td></td><td></td></tr><tr><td>5.</td><td></td><td>go微服务与任务调度</td><td></td><td></td><td></td></tr><tr><td>6.</td><td></td><td>看源码docker、k8s、Fabric、以太坊、比特币等</td><td></td><td></td><td></td></tr><tr><td>7.</td><td></td><td>Linux、C++</td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li><li><input disabled="" type="checkbox"> Advances_and_Open_Problems_in_Federated_Learning</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input checked="" disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input checked="" disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input checked="" disabled="" type="checkbox"> Proof of Federated Learning: A Novel Energy-recycling Consensus Algorithm</li><li><input checked="" disabled="" type="checkbox"> Scalable and Communication-efficient Decentralized Federated Edge Learning with Multi-blockchain Framework</li><li><input checked="" disabled="" type="checkbox"> DEEP GRADIENT COMPRESSION:REDUCING THE COMMUNICATION BANDWIDTH FOR DISTRIBUTED TRAINING</li><li><input disabled="" type="checkbox"> BlockFLA:Accountable_Federated_Learning_via_Hybrid_Blockchain_Architecture</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li><del>学弟的cosmos隐私保护项目</del></li><li>第一篇论文FL+BC</li><li><del>科技部编程比赛</del></li><li>暑期实习准备(Go, 算法等)</li></ul><ul><li><input checked="" disabled="" type="checkbox"> cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></li><li><input checked="" disabled="" type="checkbox"> 科技部编程比赛项目实现(使用cosmos)</li><li><input checked="" disabled="" type="checkbox"> Go公链实现项目(simple_bitcoin)</li><li><input checked="" disabled="" type="checkbox"> 专利一篇(金链积分)</li><li><input disabled="" type="checkbox"> Go网络编程Base</li><li><input disabled="" type="checkbox"> Go网络编程(base、Echo、Gin)</li><li><input disabled="" type="checkbox"> 第一篇论文初稿(blockchain + FL)</li><li><input disabled="" type="checkbox"> 论文实验(编码实现)</li><li><input disabled="" type="checkbox"> 数据库(mysql, PostgreSQL), ORM(Gorm) 、Go设计模式  </li><li><input disabled="" type="checkbox"> Go设计模式 </li><li><input disabled="" type="checkbox"> docker </li><li><input disabled="" type="checkbox"> 容器编程k8s</li><li><input disabled="" type="checkbox"> 缓存、日志</li><li><input disabled="" type="checkbox"> 微服务(消息队列、任务调度、rpc)</li></ul><ul><li>Go开发走云容器技术</li><li>区块链开发走科研论文、Etherem、Fabric、源码分析、Cosmos使用</li></ul><p><strong>有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input disabled="" type="checkbox"> 英语</li><li><input disabled="" type="checkbox"> leetcode一题 剑指offer</li><li><input checked="" disabled="" type="checkbox"> 华为区块链比赛结束</li><li><input checked="" disabled="" type="checkbox"> 解决IDE Debug</li><li><input checked="" disabled="" type="checkbox"> 论文BlockFLA 部分</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每天&lt;/th&gt;
&lt;th&gt;开发-云容器技术&lt;/th&gt;
&lt;th&gt;项目与框架&lt;/th&gt;
&lt;th&gt;科研-区块链(FL+BC)&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go基础&lt;/td&gt;
&lt;td&gt;SimpleBitcoin&lt;/td&gt;
&lt;td&gt;FL/分布式存储论文一周一篇细读&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;go网络编程、Web框架&lt;/td&gt;
&lt;td&gt;联邦学习框架&lt;/td&gt;
&lt;td&gt;写专利&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;go数据库、ORM、go高级编程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;机器学习课程&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;研二实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;Leetcode&lt;/td&gt;
&lt;td&gt;go容器技术docker、k8s&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;go微服务与任务调度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码docker、k8s、Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux、C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Go语言-6-grpc与微服务</title>
    <link href="https://xwjahahahaha.github.io/2021/07/08/%E6%8A%80%E6%9C%AF%E8%B4%B4/GoLang/Go%E8%AF%AD%E8%A8%80-6-grpc%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <id>https://xwjahahahaha.github.io/2021/07/08/%E6%8A%80%E6%9C%AF%E8%B4%B4/GoLang/Go%E8%AF%AD%E8%A8%80-6-grpc%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1/</id>
    <published>2021-07-08T07:24:51.000Z</published>
    <updated>2021-07-08T09:15:39.456Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习资料：</p><p><a href="https://www.cnblogs.com/wwkk/p/12634603.html" target="_blank" rel="noopener">https://www.cnblogs.com/wwkk/p/12634603.html</a></p><p><a href="https://www.bilibili.com/video/BV137411H7t9?p=3&amp;spm_id_from=pageDriver" target="_blank" rel="noopener">https://www.bilibili.com/video/BV137411H7t9?p=3&amp;spm_id_from=pageDriver</a></p></blockquote><h1 id="一、grpc"><a href="#一、grpc" class="headerlink" title="一、grpc"></a>一、grpc</h1><h2 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h2><p>学过网络编程的都知道tcp、http、socket，那么rpc是什么呢？grpc又是什么呢？</p><p>详细的可以看这篇文章： <a href="https://www.cnblogs.com/wwkk/p/12634603.html" target="_blank" rel="noopener">https://www.cnblogs.com/wwkk/p/12634603.html</a></p><p>这里直接给出总结：</p><table><thead><tr><th>名词</th><th>特点</th></tr></thead><tbody><tr><td>RPC</td><td>远程过程调用（分布式、微服务间的方法调用）</td></tr><tr><td>HTTP</td><td>无状态，每次请求都要发送一个request，服务器响应之后就断掉（http header中的keep-alive指的是tcp）</td></tr><tr><td>TCP</td><td>面向连接，三次握手保证通信可靠</td></tr><tr><td>UDP</td><td>非面向连接，不可靠，速度快（可以手动对数据收发进行验证，IM系统多采用，QQ）</td></tr><tr><td>socket</td><td>TCP协议的接口实现，面向传输层进行网络编程</td></tr></tbody></table><a id="more"></a><h3 id="1-1-1-rpc"><a href="#1-1-1-rpc" class="headerlink" title="1.1.1 rpc"></a>1.1.1 rpc</h3><p><font color='#e54d42'><strong>RPC是一种网络调用设计、框架，其面向服务而不是通信协议</strong>。使用的通讯协议只是其中的一部分，其中可能使用的就是Http协议，是在Http协议概念的上层，其主要<strong>在上层构建的一些优化通信</strong>，例如：负载均衡、寻址、序列化与反序列化</font></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/0d1zVk.png" alt="0d1zVk"></p><h3 id="1-1-2-grpc"><a href="#1-1-2-grpc" class="headerlink" title="1.1.2 grpc"></a>1.1.2 grpc</h3><p>gRPC是谷歌开源的一个 <strong>RPC 框架</strong>，面向移动和 <strong>HTTP/2</strong> 设计。</p><ul><li>内容交换格式采用<strong>ProtoBuf</strong>(Google Protocol Buffers)，开源已久，提供了一种灵活、高效、自动序列化结构数据的机制，作用与XML，Json类似，但使用二进制，（反）序列化速度快，压缩效率高。</li><li>传输协议 采用http2，性能比http1.1好了很多</li></ul><p>和很多RPC系统一样，服务端负责实现定义好的接口并处理客户端的请求，客户端根据接口描述直接调用需要的服务。客户端和服务端可以分别使用gPRC支持的不同语言实现。</p><p>ProtoBuf 具有强大的IDL（interface description language，接口描述语言）和相关工具集（主要是protoc）。用户写好.proto描述文件后，protoc可以将其编译成众多语言的接口代码。</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/L9rv1Z.png" alt="L9rv1Z"></p><h2 id="1-2-代码编写"><a href="#1-2-代码编写" class="headerlink" title="1.2 代码编写"></a>1.2 代码编写</h2><blockquote><p>golang自带的net/rpc使用encoding/<strong>gob编码</strong>，支持http、tcp的传输方式，但是<strong>其他语言不支持</strong>，所以<strong>golang的RPC只支持都为golang开发的客户端与服务端。</strong></p></blockquote><h3 id="1-2-1-编写规范"><a href="#1-2-1-编写规范" class="headerlink" title="1.2.1 编写规范"></a>1.2.1 编写规范</h3><h4 id="四个条件："><a href="#四个条件：" class="headerlink" title="四个条件："></a>四个条件：</h4><ol><li>结构体字段首字母大写（跨域访问）</li><li>函数名必须首字母大写（可以序列号导出）</li><li>函数的第一个参数必须是接受参数，第二个参数必须是返回客户端参数，且必须为指针类型</li><li>函数必须有一个返回值error</li></ol><h4 id="Demo示例"><a href="#Demo示例" class="headerlink" title="Demo示例"></a>Demo示例</h4><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">##### 客户端</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="keyword">go</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;学习资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/wwkk/p/12634603.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/wwkk/p/12634603.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV137411H7t9?p=3&amp;amp;spm_id_from=pageDriver&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/BV137411H7t9?p=3&amp;amp;spm_id_from=pageDriver&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、grpc&quot;&gt;&lt;a href=&quot;#一、grpc&quot; class=&quot;headerlink&quot; title=&quot;一、grpc&quot;&gt;&lt;/a&gt;一、grpc&lt;/h1&gt;&lt;h2 id=&quot;1-1-基本概念&quot;&gt;&lt;a href=&quot;#1-1-基本概念&quot; class=&quot;headerlink&quot; title=&quot;1.1 基本概念&quot;&gt;&lt;/a&gt;1.1 基本概念&lt;/h2&gt;&lt;p&gt;学过网络编程的都知道tcp、http、socket，那么rpc是什么呢？grpc又是什么呢？&lt;/p&gt;
&lt;p&gt;详细的可以看这篇文章： &lt;a href=&quot;https://www.cnblogs.com/wwkk/p/12634603.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/wwkk/p/12634603.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里直接给出总结：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名词&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;RPC&lt;/td&gt;
&lt;td&gt;远程过程调用（分布式、微服务间的方法调用）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;td&gt;无状态，每次请求都要发送一个request，服务器响应之后就断掉（http header中的keep-alive指的是tcp）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;面向连接，三次握手保证通信可靠&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UDP&lt;/td&gt;
&lt;td&gt;非面向连接，不可靠，速度快（可以手动对数据收发进行验证，IM系统多采用，QQ）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;socket&lt;/td&gt;
&lt;td&gt;TCP协议的接口实现，面向传输层进行网络编程&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/categories/technical/golang/"/>
    
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>日记_0194</title>
    <link href="https://xwjahahahaha.github.io/2021/07/05/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-07/%E6%97%A5%E8%AE%B0-0194/"/>
    <id>https://xwjahahahaha.github.io/2021/07/05/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-07/%E6%97%A5%E8%AE%B0-0194/</id>
    <published>2021-07-05T01:03:12.000Z</published>
    <updated>2021-07-06T00:59:05.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>每天</th><th>开发-云容器技术</th><th>项目与框架</th><th>科研-区块链(FL+BC)</th><th>预备事宜</th></tr></thead><tbody><tr><td>1.</td><td><strong>英语单词</strong></td><td>go基础</td><td>SimpleBitcoin</td><td>FL/分布式存储论文一周一篇细读</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>2.</td><td>语法课看完</td><td>go网络编程、Web框架</td><td>联邦学习框架</td><td>写专利</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>3.</td><td><font color='red'>六级</font></td><td>go数据库、ORM、go高级编程</td><td></td><td>机器学习课程</td><td>为<strong>研二实习</strong>做准备</td></tr><tr><td>4.</td><td>Leetcode</td><td>go容器技术docker、k8s</td><td></td><td></td><td></td></tr><tr><td>5.</td><td></td><td>go微服务与任务调度</td><td></td><td></td><td></td></tr><tr><td>6.</td><td></td><td>看源码docker、k8s、Fabric、以太坊、比特币等</td><td></td><td></td><td></td></tr><tr><td>7.</td><td></td><td>Linux、C++</td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li><li><input disabled="" type="checkbox"> Advances_and_Open_Problems_in_Federated_Learning</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input checked="" disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input checked="" disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input checked="" disabled="" type="checkbox"> Proof of Federated Learning: A Novel Energy-recycling Consensus Algorithm</li><li><input checked="" disabled="" type="checkbox"> Scalable and Communication-efficient Decentralized Federated Edge Learning with Multi-blockchain Framework</li><li><input checked="" disabled="" type="checkbox"> DEEP GRADIENT COMPRESSION:REDUCING THE COMMUNICATION BANDWIDTH FOR DISTRIBUTED TRAINING</li><li><input disabled="" type="checkbox"> BlockFLA:Accountable_Federated_Learning_via_Hybrid_Blockchain_Architecture</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li><del>学弟的cosmos隐私保护项目</del></li><li>第一篇论文FL+BC</li><li><del>科技部编程比赛</del></li><li>暑期实习准备(Go, 算法等)</li></ul><ul><li><input checked="" disabled="" type="checkbox"> cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></li><li><input checked="" disabled="" type="checkbox"> 科技部编程比赛项目实现(使用cosmos)</li><li><input checked="" disabled="" type="checkbox"> Go公链实现项目(simple_bitcoin)</li><li><input disabled="" type="checkbox"> 专利一篇(金链积分)</li><li><input disabled="" type="checkbox"> Go网络编程Base</li><li><input disabled="" type="checkbox"> Go网络编程(base、Echo、Gin)</li><li><input disabled="" type="checkbox"> 第一篇论文初稿(blockchain + FL)</li><li><input disabled="" type="checkbox"> 论文实验(编码实现)</li><li><input disabled="" type="checkbox"> 数据库(mysql, PostgreSQL), ORM(Gorm) 、Go设计模式  </li><li><input disabled="" type="checkbox"> Go设计模式 </li><li><input disabled="" type="checkbox"> docker </li><li><input disabled="" type="checkbox"> 容器编程k8s</li><li><input disabled="" type="checkbox"> 缓存、日志</li><li><input disabled="" type="checkbox"> 微服务(消息队列、任务调度、rpc)</li></ul><ul><li>Go开发走云容器技术</li><li>区块链开发走科研论文、Etherem、Fabric、源码分析、Cosmos使用</li></ul><p><strong>有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input disabled="" type="checkbox"> 英语</li><li><input disabled="" type="checkbox"> leetcode一题 剑指offer</li><li><input checked="" disabled="" type="checkbox"> 专利</li><li><input checked="" disabled="" type="checkbox"> 华为比赛</li><li><input disabled="" type="checkbox"> </li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每天&lt;/th&gt;
&lt;th&gt;开发-云容器技术&lt;/th&gt;
&lt;th&gt;项目与框架&lt;/th&gt;
&lt;th&gt;科研-区块链(FL+BC)&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go基础&lt;/td&gt;
&lt;td&gt;SimpleBitcoin&lt;/td&gt;
&lt;td&gt;FL/分布式存储论文一周一篇细读&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;go网络编程、Web框架&lt;/td&gt;
&lt;td&gt;联邦学习框架&lt;/td&gt;
&lt;td&gt;写专利&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;go数据库、ORM、go高级编程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;机器学习课程&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;研二实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;Leetcode&lt;/td&gt;
&lt;td&gt;go容器技术docker、k8s&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;go微服务与任务调度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码docker、k8s、Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux、C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>计算理论基础-3-图灵机与DFA最小化</title>
    <link href="https://xwjahahahaha.github.io/2021/06/26/%E7%9F%A5%E8%AF%86%E8%B4%B4/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80-3-%E5%9B%BE%E7%81%B5%E6%9C%BA%E4%B8%8EDFA%E6%9C%80%E5%B0%8F%E5%8C%96/"/>
    <id>https://xwjahahahaha.github.io/2021/06/26/%E7%9F%A5%E8%AF%86%E8%B4%B4/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80-3-%E5%9B%BE%E7%81%B5%E6%9C%BA%E4%B8%8EDFA%E6%9C%80%E5%B0%8F%E5%8C%96/</id>
    <published>2021-06-26T06:04:39.000Z</published>
    <updated>2021-06-27T12:03:53.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="七、Turing-Machine-图灵机"><a href="#七、Turing-Machine-图灵机" class="headerlink" title="七、Turing Machine 图灵机"></a>七、Turing Machine 图灵机</h1><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><p>$TM = (Q,\Sigma,\Gamma,\delta，q_0，q_{accept}， q_{reject})$</p><ol><li>Q ：有限状态集合</li><li>$\Sigma$ : 输入字母表, 不包括空白字符</li><li>$\Gamma$ ：磁带字母表 (tape alphabet),    $_ \in \Gamma, \Sigma \subseteq \Gamma$ （$_$就是空格）</li><li>$\delta$ : 转移函数</li><li>$q_0$ : 起始状态  $q_{0} \in Q$</li><li>$q_{accept}$ : 接受状态    $q_{accept} \in Q$</li><li>$q_{reject}$ : 拒绝状态， $q_{reject} \in Q,  \ q <em>{reject} \neq q</em>{accept}$</li></ol><a id="more"></a><h2 id="Configuration-of-a-TM-格局"><a href="#Configuration-of-a-TM-格局" class="headerlink" title="Configuration of a TM (格局)"></a>Configuration of a TM (格局)</h2><h3 id="定义：-1"><a href="#定义：-1" class="headerlink" title="定义："></a>定义：</h3><p>格局 = 状态 + 已处理部分 - 今后任务</p><p>组成：</p><ol><li>当前状态 $q \in Q$</li><li>当前带内容 $\in \Gamma^*$， 符号表示为$uv$  ($uv$由读取头分隔开)</li><li>读写头当前位置 $\in {0,1,2,3,…}$，也就是读取头当前位置即$v$的第一个符号</li></ol><p>所以格局的表示方法可以为: $uqv$</p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：<img src="http://xwjpics.gumptlu.work/qinniu_uPic/E2GxpY.png" alt="E2GxpY"></h3><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/ZF52Ys.png" alt="ZF52Ys"></p><h3 id="格局演进-格局转换"><a href="#格局演进-格局转换" class="headerlink" title="格局演进/格局转换"></a>格局演进/格局转换</h3><p>设$u,v \in \Gamma^*; a,b,c \in \Gamma; q_i,q_j \in Q, and \ M_a \ TM$</p><blockquote><p><font color='#39b54a'>解释： uv是当前带内容是字符串，abc是带字母表中的字母，两个q是两个状态，总体是一个图灵机$M_a$</font></p></blockquote><p>两个格局$C_1 = uaq_ibv, \  C_2=uq_jacv$</p><blockquote><p><font color='#39b54a'>解释：$C_1 = uaq_ibv$ 将a并入u，b并入v其实就是$uqv$</font></p></blockquote><p>$C_1$转换为$C_2$的转移函数为：</p><p>$Q \times \Gamma \rightarrow Q \times \Gamma \times {L, R}$</p><p>$\delta(q_i, b) = (q_j,c,L)$</p><blockquote><p><font color='#39b54a'>解释：</font></p><p><font color='#39b54a'>1.状态改变：$q_i =&gt; q_j$  </font></p><p><font color='#39b54a'>2.内容改变:$b =&gt; c$ </font></p><p><font color='#39b54a'>3.L代表left，读取头左移</font></p></blockquote><p>图示：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/9zhHaV.png" alt="9zhHaV"></p><p>根据状态转移图，输入格局序列，写出运行结果</p><p>例</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/NB2UyV.jpg" alt="NB2UyV"></p><h1 id="八、DFA的最小化（补充）"><a href="#八、DFA的最小化（补充）" class="headerlink" title="八、DFA的最小化（补充）"></a>八、DFA的最小化（补充）</h1><h2 id="概念与意义"><a href="#概念与意义" class="headerlink" title="概念与意义"></a>概念与意义</h2><p><em>DFA的<em>最小化就是寻求状态数最小的与原</em>DFA*等价的 *DFA</em></p><p>最小化<em>DFA</em>能够降低编译器构造的复杂度、提高编译速度</p><h2 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h2><ul><li>消除多余状态<ul><li>不可到达终态的点</li><li>不可被到达的点</li></ul></li><li>等价合并<ul><li>一致性条件： q和t同为终态或非终态</li><li>蔓延性条件：q和t同条件到达同状态</li></ul></li></ul><h2 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h2><p>对下图的DFA进行最小化</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/u7CPsi.png" alt="u7CPsi"></p><p>（<strong>图中红圈的是终态</strong>）</p><ol><li><p>将所有的状态划分为2个集合</p><ul><li>终态集合： $k_1 = {q_1,q_2,q_3,q_7}$</li><li>非终态集合： $k_2 = {q_4,q_5,q_6}$</li></ul></li><li><p>先划分非终态集合k2</p><p><strong>划分规则：根据字母表判断元素是否达到同一状态集合</strong></p><ul><li><p>字母表中的0：</p><p>$q_4 \xrightarrow{0} q_7 \in k_1$</p><p>$q_5 \xrightarrow{0} q_2 \in k_1$</p><p>$q_6 \xrightarrow{0} q_2 \in k_1$</p><p>计算得出三者都到达同一个状态集合k1，故不划分</p></li><li><p>字母表中的1：</p><p>$q_4 \xrightarrow{1} q_5 \in k_2$</p><p>$q_5 \xrightarrow{1} \varnothing \in \varnothing$</p><p>$q_6 \xrightarrow{1} \varnothing \in \varnothing$</p><p>计算的出$q_4$到达状态集合k2, $q_5,q_6$到达$\varnothing$</p><p>因此划分为$k_3 = {q_4}, k_4={q_5,q_6}$ (原来的$k_2$不存在了，现在是$k_1,k_3,k_4$三个集合)</p></li></ul><p>$k_3,k_4$仍然是非终态集合，如果还可以划分的话继续这样划分</p></li><li><p>再划分终态集合k1</p><p>划分规则同理：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/GkCr3H.png" alt="GkCr3H"></p><p>划分k8</p><p>$q_3 \xrightarrow{0} q_2 \in k_6$</p><p>$q_7 \xrightarrow{0} q_7 \in k_5$</p><p>所以，$k_8 = k_9 + k_{10}, k_9 = {q_3}, k_{10} = {q_7}$</p></li><li><p>划分完毕，拉伸合并得到最小化DFA图</p><p>最终的划分结果是：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/oygVRZ.png" alt="oygVRZ"></p><p>将原DFA图拉伸合并得到最小DFA图：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/PSX8bo.png" alt="PSX8bo"></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;七、Turing-Machine-图灵机&quot;&gt;&lt;a href=&quot;#七、Turing-Machine-图灵机&quot; class=&quot;headerlink&quot; title=&quot;七、Turing Machine 图灵机&quot;&gt;&lt;/a&gt;七、Turing Machine 图灵机&lt;/h1&gt;&lt;h2 id=&quot;定义：&quot;&gt;&lt;a href=&quot;#定义：&quot; class=&quot;headerlink&quot; title=&quot;定义：&quot;&gt;&lt;/a&gt;定义：&lt;/h2&gt;&lt;p&gt;$TM = (Q,\Sigma,\Gamma,\delta，q_0，q_{accept}， q_{reject})$&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Q ：有限状态集合&lt;/li&gt;
&lt;li&gt;$\Sigma$ : 输入字母表, 不包括空白字符&lt;/li&gt;
&lt;li&gt;$\Gamma$ ：磁带字母表 (tape alphabet),    $_ \in \Gamma, \Sigma \subseteq \Gamma$ （$_$就是空格）&lt;/li&gt;
&lt;li&gt;$\delta$ : 转移函数&lt;/li&gt;
&lt;li&gt;$q_0$ : 起始状态  $q_{0} \in Q$&lt;/li&gt;
&lt;li&gt;$q_{accept}$ : 接受状态    $q_{accept} \in Q$&lt;/li&gt;
&lt;li&gt;$q_{reject}$ : 拒绝状态， $q_{reject} \in Q,  \ q &lt;em&gt;{reject} \neq q&lt;/em&gt;{accept}$&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="knowledge" scheme="https://xwjahahahaha.github.io/categories/knowledge/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指Offer13.机器人的运动范围</title>
    <link href="https://xwjahahahaha.github.io/2021/06/26/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/%E5%89%91%E6%8C%87Offer13-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/"/>
    <id>https://xwjahahahaha.github.io/2021/06/26/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/%E5%89%91%E6%8C%87Offer13-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/</id>
    <published>2021-06-26T02:26:11.000Z</published>
    <updated>2021-06-26T03:29:39.750Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/" target="_blank" rel="noopener">剑指 Offer 13. 机器人的运动范围</a></p><p>难度中等</p><p>地上有一个m行n列的方格，从坐标 <code>[0,0]</code> 到坐标 <code>[m-1,n-1]</code> 。一个机器人从坐标 <code>[0, 0]</code>的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？</p> <a id="more"></a><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：m &#x3D; 2, n &#x3D; 3, k &#x3D; 1</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：m &#x3D; 3, n &#x3D; 1, k &#x3D; 0</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n,m &lt;= 100</code></li><li><code>0 &lt;= k &lt;= 20</code></li></ul><h2 id="解题思路及代码"><a href="#解题思路及代码" class="headerlink" title="解题思路及代码"></a>解题思路及代码</h2><h3 id="解法一-递归深度优先遍历"><a href="#解法一-递归深度优先遍历" class="headerlink" title="解法一:递归深度优先遍历"></a>解法一:递归深度优先遍历</h3><h4 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h4><ul><li><p>递归基本思路： 对于(i, j)位置，其可达的最大格子数量 = 如果其自身位置可达，那么计算其可达的子问题(i+1, j), (i-1, j), (i, j+1), (i, j-1)位置的最大格子数量 再 + 1</p><blockquote><p>当所有的子问题被求出，当前位置也可得出</p></blockquote></li><li><p>全局变量： 标记访问过的二维数组</p></li><li><p>题目隐含了优化条件： 从（0, 0）出发只往下、右走即可得到所有的格子。我们可以发现随着限制条件 k 的增大，(0, 0) 所在的蓝色方格区域内新加入的非障碍方格都可以由上方或左方的格子移动一步得到。而其他不连通的蓝色方格区域会随着 k 的增大而连通，且连通的时候也是由上方或左方的格子移动一步得到，因此我们可以将我们的搜索方向缩减为向右或向下。</p><p>具体可见： <a href="https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/solution/ji-qi-ren-de-yun-dong-fan-wei-by-leetcode-solution/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/solution/ji-qi-ren-de-yun-dong-fan-wei-by-leetcode-solution/</a></p></li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DFS</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">movingCount</span><span class="params">(m <span class="keyword">int</span>, n <span class="keyword">int</span>, k <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    visited := [][]<span class="keyword">bool</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;m; i++ &#123;</span><br><span class="line">        visited = <span class="built_in">append</span>(visited, <span class="built_in">make</span>([]<span class="keyword">bool</span>, n))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rollback(<span class="number">0</span>, <span class="number">0</span>, k, m, n, visited)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rollback</span><span class="params">(i, j, k, m, n <span class="keyword">int</span>, visited [][]<span class="keyword">bool</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// 当前位置/递归出口/结束情况</span></span><br><span class="line">    <span class="keyword">if</span> !checkNext(i ,j, k, m, n, visited) &#123;</span><br><span class="line">        <span class="comment">// 一旦当前位置不可达，则返回0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 标记当前位置已访问</span></span><br><span class="line">    visited[i][j] = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 下一位置</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + rollback(i+<span class="number">1</span>, j, k, m, n, visited) + rollback(i<span class="number">-1</span>, j, k, m, n, visited) + rollback(i, j+<span class="number">1</span>, k, m, n, visited) + rollback(i, j<span class="number">-1</span>, k, m, n, visited)</span><br><span class="line">  <span class="comment">// 优化</span></span><br><span class="line">  <span class="comment">// return 1 + rollback(i+1, j, k, m, n, visited) + rollback(i, j+1, k, m, n, visited) </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断当前位置是否可以走</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkNext</span><span class="params">(i, j, k, m, n <span class="keyword">int</span>, visited [][]<span class="keyword">bool</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">-1</span> &amp;&amp; i &lt; m &amp;&amp; j &gt; <span class="number">-1</span> &amp;&amp; j &lt; n &amp;&amp; !visited[i][j] &amp;&amp; (sumDigital(i) + sumDigital(j)) &lt;= k &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算位数之和</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumDigital</span><span class="params">(num <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> num &gt; <span class="number">0</span> &#123;</span><br><span class="line">        sum += num % <span class="number">10</span></span><br><span class="line">        num /= <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编码注意"><a href="#编码注意" class="headerlink" title="编码注意"></a>编码注意</h4><p><strong>不需要回退当前位置（即visited[i][j] = false）</strong>，因为题目是求能够到达的最大格子数，所以一个格子访问过就标记上不用回退</p><p>一般回退是在矩阵搜索中的最长/优路径问题，将之前的路径回退</p><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度O(mn)，一共有m*n个状态要计算，每一个计算递归的时间复杂度为1</li><li>空间复杂度O(mn)</li></ul><h3 id="解法二：广度优先遍历（队列）"><a href="#解法二：广度优先遍历（队列）" class="headerlink" title="解法二：广度优先遍历（队列）"></a>解法二：广度优先遍历（队列）</h3><h4 id="思路解析-1"><a href="#思路解析-1" class="headerlink" title="思路解析"></a>思路解析</h4><ul><li><p>BFS对于矩阵的遍历并不是很直观、友好，推荐还是DFS</p></li><li><p>将(i, j)所有相邻点(上下左右)加入队列，再不断的取出队列，计数</p></li><li><p>同样的，优化的解法可以只往下、右走，即只添加下、右节点入队</p></li></ul><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BFS</span></span><br><span class="line"><span class="keyword">type</span> local <span class="keyword">struct</span> &#123;</span><br><span class="line">    i <span class="keyword">int</span></span><br><span class="line">    j <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">movingCount</span><span class="params">(m <span class="keyword">int</span>, n <span class="keyword">int</span>, k <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; </span><br><span class="line">    account := <span class="number">0</span></span><br><span class="line">    <span class="comment">// 初始化全局访问数组</span></span><br><span class="line">    visited := [][]<span class="keyword">bool</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;m; i++ &#123;</span><br><span class="line">        visited = <span class="built_in">append</span>(visited, <span class="built_in">make</span>([]<span class="keyword">bool</span>, n))</span><br><span class="line">    &#125;</span><br><span class="line">    queue := []local&#123;&#125;</span><br><span class="line">    <span class="comment">// 初始化（0，0）节点</span></span><br><span class="line">    initLocal := local&#123;<span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">    queue = <span class="built_in">append</span>(queue, initLocal)</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">// 弹出</span></span><br><span class="line">        newLocal := queue[<span class="number">0</span>]</span><br><span class="line">        queue = queue[<span class="number">1</span>:]</span><br><span class="line">        <span class="comment">// 处理</span></span><br><span class="line">        <span class="comment">// 当前位置</span></span><br><span class="line">        <span class="keyword">if</span> checkNext(newLocal, m, n, k, visited) &#123;</span><br><span class="line">            account ++</span><br><span class="line">            visited[newLocal.i][newLocal.j] = <span class="literal">true</span></span><br><span class="line">            <span class="comment">//入队</span></span><br><span class="line">            queue = <span class="built_in">append</span>(queue, local&#123;newLocal.i + <span class="number">1</span>, newLocal.j&#125;)</span><br><span class="line">            queue = <span class="built_in">append</span>(queue, local&#123;newLocal.i - <span class="number">1</span>, newLocal.j&#125;)</span><br><span class="line">            queue = <span class="built_in">append</span>(queue, local&#123;newLocal.i, newLocal.j + <span class="number">1</span>&#125;)</span><br><span class="line">            queue = <span class="built_in">append</span>(queue, local&#123;newLocal.i, newLocal.j - <span class="number">1</span>&#125;)</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> account</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断当前位置是否可以走</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkNext</span><span class="params">(l local, m, n, k <span class="keyword">int</span>, visited [][]<span class="keyword">bool</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> l.i &gt; <span class="number">-1</span> &amp;&amp; l.i &lt; m &amp;&amp; l.j &gt; <span class="number">-1</span> &amp;&amp; l.j &lt; n &amp;&amp; !visited[l.i][l.j] &amp;&amp;(sumDigital(l.i) + sumDigital(l.j)) &lt;= k &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// // 计算位数之和</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumDigital</span><span class="params">(num <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> num &gt; <span class="number">0</span> &#123;</span><br><span class="line">        sum += num % <span class="number">10</span></span><br><span class="line">        num /= <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编码注意-1"><a href="#编码注意-1" class="headerlink" title="编码注意"></a>编码注意</h4><p>不要忘记维护一个全局访问标记数组</p><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度O(mn)</li><li>空间复杂度O(mn)</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;剑指 Offer 13. 机器人的运动范围&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;难度中等&lt;/p&gt;
&lt;p&gt;地上有一个m行n列的方格，从坐标 &lt;code&gt;[0,0]&lt;/code&gt; 到坐标 &lt;code&gt;[m-1,n-1]&lt;/code&gt; 。一个机器人从坐标 &lt;code&gt;[0, 0]&lt;/code&gt;的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="leetcode" scheme="https://xwjahahahaha.github.io/categories/technical/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>计算理论基础-2-上下文无关语言</title>
    <link href="https://xwjahahahaha.github.io/2021/06/24/%E7%9F%A5%E8%AF%86%E8%B4%B4/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80-2-%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E8%AF%AD%E8%A8%80/"/>
    <id>https://xwjahahahaha.github.io/2021/06/24/%E7%9F%A5%E8%AF%86%E8%B4%B4/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80-2-%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E8%AF%AD%E8%A8%80/</id>
    <published>2021-06-24T14:58:20.000Z</published>
    <updated>2021-06-27T07:23:04.328Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习资料：</p><p><a href="https://blog.csdn.net/happyeveryday62/article/details/103845740" target="_blank" rel="noopener">https://blog.csdn.net/happyeveryday62/article/details/103845740</a></p></blockquote><h1 id="六、上下文无关语言"><a href="#六、上下文无关语言" class="headerlink" title="六、上下文无关语言"></a>六、上下文无关语言</h1><h2 id="Conventions-约定规定"><a href="#Conventions-约定规定" class="headerlink" title="Conventions 约定规定"></a>Conventions 约定规定</h2><ul><li><p>字符A，B，C，… : Grammar Variables 文法变量（大写）</p></li><li><p>字符a, b, c, … : Grammar Terminals 文法终结符  (小写) </p><ul><li>一些字符串也可以作为文法终结符，例如num, id等</li></ul></li><li><p>$\alpha，\beta，\gamma，\delta …$ 表示一些符号标志字符串</p><ul><li>$\varepsilon$可以表示变量 和/或 终结符</li></ul></li></ul><a id="more"></a><h3 id="特定的文法规定："><a href="#特定的文法规定：" class="headerlink" title="特定的文法规定："></a><strong>特定的文法规定：</strong></h3><ul><li>最左侧的为最高规则</li><li>可以简写规则。例如：$A\rightarrow a, A \rightarrow \beta, A \rightarrow \gamma$ 可以总结为；$A \rightarrow \alpha | \beta |\gamma$</li><li>左侧规则（变量） =&gt; 右侧规则（变量/终结符）</li></ul><h2 id="CFG-Context-free-Grammar-上下文无关文法"><a href="#CFG-Context-free-Grammar-上下文无关文法" class="headerlink" title="CFG(Context-free Grammar)上下文无关文法"></a>CFG(Context-free Grammar)上下文无关文法</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/FhsyS1.png" alt="FhsyS1"></p><p>由文法生成的所有字符串的集合称为文法的语言</p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><ol><li><p>${a^nb^n|n\ge0}$</p><p>使用CFG表示其规则为：$A \rightarrow aAb|\varepsilon$</p><blockquote><p><font color='#39b54a'>解释： A可以递推为$aAb$可以为递归为空串$\varepsilon$，当仅递归一次且为空串时，就表示n=1即ab，当递归多次时，例如n=2，对应的推导过程就是： $A \rightarrow aAb \rightarrow aaAbb \rightarrow aabb $</font></p></blockquote></li><li><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/RDtniT.png" alt="RDtniT"></p></li></ol><h2 id="Grammar-in-Chomsky-Normal-Form-乔姆斯基范氏"><a href="#Grammar-in-Chomsky-Normal-Form-乔姆斯基范氏" class="headerlink" title="Grammar in Chomsky Normal Form 乔姆斯基范氏"></a>Grammar in Chomsky Normal Form 乔姆斯基范氏</h2><h3 id="定义：-1"><a href="#定义：-1" class="headerlink" title="定义："></a>定义：</h3><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/ZyCjqZ.png" alt="ZyCjqZ"></p><blockquote><p>首先必须是CFG，其次每个规则都满足如上范式那么就是乔姆斯基范式</p></blockquote><p>乔姆斯基范式有两个特点：<strong>1. 一分为二 2.终级化.</strong></p><h3 id="Normalization-of-a-CFG-标准化上下文无关文法"><a href="#Normalization-of-a-CFG-标准化上下文无关文法" class="headerlink" title="Normalization of a CFG 标准化上下文无关文法"></a>Normalization of a CFG 标准化上下文无关文法</h3><p>将<strong>任意</strong>一个上下文无关文法CFG转为乔姆斯基范式的步骤如下：</p><ol><li><p>引入新的起始变元</p><p>例如：原来为$S \rightarrow a$，现在为$S_0 \rightarrow S, S \rightarrow a$</p></li><li><p>从下往上删除 $A \rightarrow \varepsilon$规则</p><p>例如： 将$B \rightarrow xAy $和$A \rightarrow \varepsilon$改为 $B \rightarrow xAy | xy$</p></li><li><p>从上往下删除传递规则</p><p>例如：将$A \rightarrow B$和$B \rightarrow xCy$改为$A \rightarrow xCy$和$B \rightarrow xCy$</p></li><li><p>添加新变元，使得所有变量规则都是一分为二</p><p>例如：将$A\rightarrow B_1B_2…B_k$ 改为$A \rightarrow  B_1A_1, A_1 \rightarrow B_2A_2, …,A_{k-2} \rightarrow B_{k-1}B_k$</p></li><li><p>添加终结符规则</p><p>例如 : $a$改为$T_a \rightarrow a$</p></li></ol><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><ol><li><p>将$S \rightarrow aSb|\varepsilon$标准化</p><ol><li><p>第一步：引入新的起始变元</p><p> $S_0 \rightarrow S, S \rightarrow aSb|\varepsilon$</p></li><li><p>第二步：删除$\varepsilon$（从后往前）</p><p>$S \rightarrow aSb|\varepsilon$ 变为 $S \rightarrow aSb|ab$</p><p><strong>初始的不删除, 否则规则改变(没有$\varepsilon$)</strong>，变为 ：$S_0 \rightarrow S | \varepsilon$</p></li><li><p>第三步：从上往下删除传递规则</p><p>改变为：$S_0 \rightarrow aSb|ab｜\varepsilon, S \rightarrow aSb|ab$</p></li><li><p>第四步：添加新变元，使得所有变量规则都是一分为二</p><p>令$S_1= Sb$, 则变为$S_0 \rightarrow aS_1|ab｜\varepsilon, S \rightarrow aS_1|ab, S_1\rightarrow Sb$</p></li><li><p>第五步：添加终结符规则</p><p>令$T_a \rightarrow a, T_b \rightarrow b$, 则变为:$S_0 \rightarrow T_aS_1|T_aT_b｜\varepsilon, S \rightarrow T_aS_1|T_aT_b, S_1\rightarrow ST_b, T_a\rightarrow a, T_b \rightarrow b$</p></li></ol><p>至此，$S_0、S、S_1$均符合$A \rightarrow BC$, 且B、C即$T_a、T_b、S_1$均不为初始变元; $T_a、T_b符合A \rightarrow a$</p></li><li><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/y44Fj1.png" alt="y44Fj1"></p></li></ol><h2 id="DFA转换为CFG"><a href="#DFA转换为CFG" class="headerlink" title="DFA转换为CFG"></a>DFA转换为CFG</h2><p>因为$RL \subseteq CFG$， 所以DFA都可以转换成为CFG</p><p>$DFA = (Q,\Sigma,q_0,F,\delta)$, $CFG = (V,\Sigma,R,S)$</p><h4 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h4><ol><li><p>$V = Q, S = q_0$ </p></li><li><p>求CFG的规则：</p><p>根据转移函数的变换规则： $q_i \rightarrow x\delta(q_i,x) \ for \ all \ q_i \in V and \ all \ x\in \Sigma$ </p><p>根据终态的变换规则: $q_i \rightarrow \varepsilon \ for \ all \ q_i \ in \ F$</p></li></ol><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/eb38q5.png" alt="eb38q5"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;学习资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/happyeveryday62/article/details/103845740&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/happyeveryday62/article/details/103845740&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;六、上下文无关语言&quot;&gt;&lt;a href=&quot;#六、上下文无关语言&quot; class=&quot;headerlink&quot; title=&quot;六、上下文无关语言&quot;&gt;&lt;/a&gt;六、上下文无关语言&lt;/h1&gt;&lt;h2 id=&quot;Conventions-约定规定&quot;&gt;&lt;a href=&quot;#Conventions-约定规定&quot; class=&quot;headerlink&quot; title=&quot;Conventions 约定规定&quot;&gt;&lt;/a&gt;Conventions 约定规定&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;字符A，B，C，… : Grammar Variables 文法变量（大写）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字符a, b, c, … : Grammar Terminals 文法终结符  (小写) &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一些字符串也可以作为文法终结符，例如num, id等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$\alpha，\beta，\gamma，\delta …$ 表示一些符号标志字符串&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\varepsilon$可以表示变量 和/或 终结符&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="knowledge" scheme="https://xwjahahahaha.github.io/categories/knowledge/"/>
    
    
  </entry>
  
  <entry>
    <title>日记_0193</title>
    <link href="https://xwjahahahaha.github.io/2021/06/24/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-06/%E6%97%A5%E8%AE%B0-0193/"/>
    <id>https://xwjahahahaha.github.io/2021/06/24/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-06/%E6%97%A5%E8%AE%B0-0193/</id>
    <published>2021-06-24T06:11:45.000Z</published>
    <updated>2021-06-24T06:12:44.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>每天</th><th>开发-云容器技术</th><th>项目与框架</th><th>科研-区块链(FL+BC)</th><th>预备事宜</th></tr></thead><tbody><tr><td>1.</td><td><strong>英语单词</strong></td><td>go基础</td><td>SimpleBitcoin</td><td>FL/分布式存储论文一周一篇细读</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>2.</td><td>语法课看完</td><td>go网络编程、Web框架</td><td>联邦学习框架</td><td>写专利</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>3.</td><td><font color='red'>六级</font></td><td>go数据库、ORM、go高级编程</td><td></td><td>机器学习课程</td><td>为<strong>研二实习</strong>做准备</td></tr><tr><td>4.</td><td>Leetcode</td><td>go容器技术docker、k8s</td><td></td><td></td><td></td></tr><tr><td>5.</td><td></td><td>go微服务与任务调度</td><td></td><td></td><td></td></tr><tr><td>6.</td><td></td><td>看源码docker、k8s、Fabric、以太坊、比特币等</td><td></td><td></td><td></td></tr><tr><td>7.</td><td></td><td>Linux、C++</td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li><li><input disabled="" type="checkbox"> Advances_and_Open_Problems_in_Federated_Learning</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input checked="" disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input checked="" disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input checked="" disabled="" type="checkbox"> Proof of Federated Learning: A Novel Energy-recycling Consensus Algorithm</li><li><input checked="" disabled="" type="checkbox"> Scalable and Communication-efficient Decentralized Federated Edge Learning with Multi-blockchain Framework</li><li><input checked="" disabled="" type="checkbox"> DEEP GRADIENT COMPRESSION:REDUCING THE COMMUNICATION BANDWIDTH FOR DISTRIBUTED TRAINING</li><li><input disabled="" type="checkbox"> BlockFLA:Accountable_Federated_Learning_via_Hybrid_Blockchain_Architecture</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li><del>学弟的cosmos隐私保护项目</del></li><li>第一篇论文FL+BC</li><li><del>科技部编程比赛</del></li><li>暑期实习准备(Go, 算法等)</li></ul><ul><li><input checked="" disabled="" type="checkbox"> cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></li><li><input checked="" disabled="" type="checkbox"> 科技部编程比赛项目实现(使用cosmos)</li><li><input checked="" disabled="" type="checkbox"> Go公链实现项目(simple_bitcoin)</li><li><input disabled="" type="checkbox"> 专利一篇(金链积分)</li><li><input disabled="" type="checkbox"> Go网络编程Base</li><li><input disabled="" type="checkbox"> Go网络编程(base、Echo、Gin)</li><li><input disabled="" type="checkbox"> 第一篇论文初稿(blockchain + FL)</li><li><input disabled="" type="checkbox"> 论文实验(编码实现)</li><li><input disabled="" type="checkbox"> 数据库(mysql, PostgreSQL), ORM(Gorm) 、Go设计模式  </li><li><input disabled="" type="checkbox"> Go设计模式 </li><li><input disabled="" type="checkbox"> docker </li><li><input disabled="" type="checkbox"> 容器编程k8s</li><li><input disabled="" type="checkbox"> 缓存、日志</li><li><input disabled="" type="checkbox"> 微服务(消息队列、任务调度、rpc)</li></ul><ul><li>Go开发走云容器技术</li><li>区块链开发走科研论文、Etherem、Fabric、源码分析、Cosmos使用</li></ul><p><strong>有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input disabled="" type="checkbox"> 英语</li><li><input disabled="" type="checkbox"> leetcode一题 剑指offer</li><li><input checked="" disabled="" type="checkbox"> 计算理论基础</li><li><input disabled="" type="checkbox"> </li><li><input disabled="" type="checkbox"> </li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每天&lt;/th&gt;
&lt;th&gt;开发-云容器技术&lt;/th&gt;
&lt;th&gt;项目与框架&lt;/th&gt;
&lt;th&gt;科研-区块链(FL+BC)&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go基础&lt;/td&gt;
&lt;td&gt;SimpleBitcoin&lt;/td&gt;
&lt;td&gt;FL/分布式存储论文一周一篇细读&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;go网络编程、Web框架&lt;/td&gt;
&lt;td&gt;联邦学习框架&lt;/td&gt;
&lt;td&gt;写专利&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;go数据库、ORM、go高级编程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;机器学习课程&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;研二实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;Leetcode&lt;/td&gt;
&lt;td&gt;go容器技术docker、k8s&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;go微服务与任务调度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码docker、k8s、Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux、C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>日记_0192</title>
    <link href="https://xwjahahahaha.github.io/2021/06/23/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-06/%E6%97%A5%E8%AE%B0-0192/"/>
    <id>https://xwjahahahaha.github.io/2021/06/23/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-06/%E6%97%A5%E8%AE%B0-0192/</id>
    <published>2021-06-23T01:05:52.000Z</published>
    <updated>2021-06-24T06:11:36.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>每天</th><th>开发-云容器技术</th><th>项目与框架</th><th>科研-区块链(FL+BC)</th><th>预备事宜</th></tr></thead><tbody><tr><td>1.</td><td><strong>英语单词</strong></td><td>go基础</td><td>SimpleBitcoin</td><td>FL/分布式存储论文一周一篇细读</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>2.</td><td>语法课看完</td><td>go网络编程、Web框架</td><td>联邦学习框架</td><td>写专利</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>3.</td><td><font color='red'>六级</font></td><td>go数据库、ORM、go高级编程</td><td></td><td>机器学习课程</td><td>为<strong>研二实习</strong>做准备</td></tr><tr><td>4.</td><td>Leetcode</td><td>go容器技术docker、k8s</td><td></td><td></td><td></td></tr><tr><td>5.</td><td></td><td>go微服务与任务调度</td><td></td><td></td><td></td></tr><tr><td>6.</td><td></td><td>看源码docker、k8s、Fabric、以太坊、比特币等</td><td></td><td></td><td></td></tr><tr><td>7.</td><td></td><td>Linux、C++</td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li><li><input disabled="" type="checkbox"> Advances_and_Open_Problems_in_Federated_Learning</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input checked="" disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input checked="" disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input checked="" disabled="" type="checkbox"> Proof of Federated Learning: A Novel Energy-recycling Consensus Algorithm</li><li><input checked="" disabled="" type="checkbox"> Scalable and Communication-efficient Decentralized Federated Edge Learning with Multi-blockchain Framework</li><li><input checked="" disabled="" type="checkbox"> DEEP GRADIENT COMPRESSION:REDUCING THE COMMUNICATION BANDWIDTH FOR DISTRIBUTED TRAINING</li><li><input disabled="" type="checkbox"> BlockFLA:Accountable_Federated_Learning_via_Hybrid_Blockchain_Architecture</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li><del>学弟的cosmos隐私保护项目</del></li><li>第一篇论文FL+BC</li><li><del>科技部编程比赛</del></li><li>暑期实习准备(Go, 算法等)</li></ul><ul><li><input checked="" disabled="" type="checkbox"> cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></li><li><input checked="" disabled="" type="checkbox"> 科技部编程比赛项目实现(使用cosmos)</li><li><input checked="" disabled="" type="checkbox"> Go公链实现项目(simple_bitcoin)</li><li><input disabled="" type="checkbox"> 专利一篇(金链积分)</li><li><input disabled="" type="checkbox"> Go网络编程Base</li><li><input disabled="" type="checkbox"> Go网络编程(base、Echo、Gin)</li><li><input disabled="" type="checkbox"> 第一篇论文初稿(blockchain + FL)</li><li><input disabled="" type="checkbox"> 论文实验(编码实现)</li><li><input disabled="" type="checkbox"> 数据库(mysql, PostgreSQL), ORM(Gorm) 、Go设计模式  </li><li><input disabled="" type="checkbox"> Go设计模式 </li><li><input disabled="" type="checkbox"> docker </li><li><input disabled="" type="checkbox"> 容器编程k8s</li><li><input disabled="" type="checkbox"> 缓存、日志</li><li><input disabled="" type="checkbox"> 微服务(消息队列、任务调度、rpc)</li></ul><ul><li>Go开发走云容器技术</li><li>区块链开发走科研论文、Etherem、Fabric、源码分析、Cosmos使用</li></ul><p><strong>有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input disabled="" type="checkbox"> leetcode一题 剑指offer</li><li><input checked="" disabled="" type="checkbox"> 专利第一版结束</li><li><input checked="" disabled="" type="checkbox"> 复习计算理论基础</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每天&lt;/th&gt;
&lt;th&gt;开发-云容器技术&lt;/th&gt;
&lt;th&gt;项目与框架&lt;/th&gt;
&lt;th&gt;科研-区块链(FL+BC)&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go基础&lt;/td&gt;
&lt;td&gt;SimpleBitcoin&lt;/td&gt;
&lt;td&gt;FL/分布式存储论文一周一篇细读&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;go网络编程、Web框架&lt;/td&gt;
&lt;td&gt;联邦学习框架&lt;/td&gt;
&lt;td&gt;写专利&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;go数据库、ORM、go高级编程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;机器学习课程&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;研二实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;Leetcode&lt;/td&gt;
&lt;td&gt;go容器技术docker、k8s&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;go微服务与任务调度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码docker、k8s、Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux、C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>swarm-XDai主网免bzz质押和rpc全套搭建教程-windows</title>
    <link href="https://xwjahahahaha.github.io/2021/06/22/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Swarm/swarm-XDai%E4%B8%BB%E7%BD%91%E5%85%8Dbzz%E8%B4%A8%E6%8A%BC%E5%92%8Crpc%E5%85%A8%E5%A5%97%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B-windows/"/>
    <id>https://xwjahahahaha.github.io/2021/06/22/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Swarm/swarm-XDai%E4%B8%BB%E7%BD%91%E5%85%8Dbzz%E8%B4%A8%E6%8A%BC%E5%92%8Crpc%E5%85%A8%E5%A5%97%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B-windows/</id>
    <published>2021-06-22T02:58:10.000Z</published>
    <updated>2021-06-23T01:38:27.532Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本教程的最终效果是： 搭建一个Swarm主网节点，参与Swarm项目</p><p>文章不构成任何购买建议，请自行负责</p></blockquote><h1 id="一、清楚一些事情"><a href="#一、清楚一些事情" class="headerlink" title="一、清楚一些事情"></a>一、清楚一些事情</h1><ul><li><p>Swarm主网上线是在以太坊的POA侧链XDAI链上运行的，为了避免主网拥堵以及高额的gas</p><p><font color='#e54d42'><strong>所以之前空头一些相关Goerli测试网络的配置都不在适用</strong></font></p></li><li><p>XDAI链的主链币是XDAI，Bzz是其中的合约代币，类比理解：</p><table><thead><tr><th>区块链网络/链</th><th>以太坊主链</th><th>Goerli测试链（空头）</th><th>侧链XDAI（正式）</th></tr></thead><tbody><tr><td>主链币</td><td>ETH</td><td>gETH</td><td>XDAI</td></tr><tr><td>合约代币</td><td>BZZ</td><td>gBZZ</td><td>xBZZ</td></tr></tbody></table><ul><li>主链币是一条区块链的核心币，由交易转移、共识一致，数量依托整个区块链系统结构设计。交易的Gas费就是主链币</li><li>合约代币是区块链运行的合约逻辑中存储的一串数字，对，就是数字（虽然主链币也是数字），数量变化依托合约逻辑结构设计。</li></ul></li><li><p>Bee客户端是Swarm项目的客户端，在本地运行，<strong>很多配置可以通过配置文件修改运行</strong>。</p></li><li><p>整体结构大约如下所示：</p><p>（当然，现实不可能以太坊节点与Swarm节点完全分离，很可能有错综复杂的重叠）</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/nERnYe.png" alt="nERnYe"></p></li></ul><a id="more"></a><h1 id="二、RPC访问配置"><a href="#二、RPC访问配置" class="headerlink" title="二、RPC访问配置"></a>二、RPC访问配置</h1><h2 id="2-1-使用GetBlock（推荐）"><a href="#2-1-使用GetBlock（推荐）" class="headerlink" title="2.1 使用GetBlock（推荐）"></a>2.1 使用GetBlock（推荐）</h2><p>类似于之前测试网的<a href="https://infura.io，[Getblock](https://getblock.io/)也是一个提供在线PRC服务的网站，不用自建RPC">https://infura.io，[Getblock](https://getblock.io/)也是一个提供在线PRC服务的网站，不用自建RPC</a></p><p>使用方法：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/305O4A.png" alt="305O4A"></p><p>输入邮箱，名称注册</p><p>打开邮箱会看到注册的详细信息网站</p><p>注册成功后，进入控制台如图：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/z6hCnz.png" alt="z6hCnz"></p><p>就可以拿到你的API密钥了</p><p>最终你的的Swap-endpoint配置就是:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swap-endpoint:</span> <span class="string">https://stake.getblock.io/mainnet/?api_key=这里换成你的API密钥</span></span><br></pre></td></tr></table></figure><h2 id="2-2-搭建自己的RPC基站"><a href="#2-2-搭建自己的RPC基站" class="headerlink" title="2.2 搭建自己的RPC基站"></a>2.2 搭建自己的RPC基站</h2><p>玩过测试网的都知道，之前Swarm测试网(Goerli测试网络)用的RPC基站即Swap-endpoint是在<a href="https://infura.io上注册的，每天限制免费10万次请求，现在不用这个了。" target="_blank" rel="noopener">https://infura.io上注册的，每天限制免费10万次请求，现在不用这个了。</a></p><p>为了让我们的Bee客户端能够通过rpc请求获取到XDAI的链上数据并且没有请求次数的限制，我们可以运行一个自己的XDAI网络RPC基站</p><h3 id="2-2-1-下载工具Nethermind"><a href="#2-2-1-下载工具Nethermind" class="headerlink" title="2.2.1 下载工具Nethermind"></a>2.2.1 下载工具Nethermind</h3><p>Nethermind是以太坊客户端快速同步节点搭建工具，支持很多种测试网络，网址如下：</p><p><a href="https://docs.nethermind.io/nethermind/" target="_blank" rel="noopener">https://docs.nethermind.io/nethermind/</a></p><p>进入Download：</p><p><a href="https://docs.nethermind.io/nethermind/ethereum-client/download-sources" target="_blank" rel="noopener">https://docs.nethermind.io/nethermind/ethereum-client/download-sources</a></p><p>下载链接：</p><p><a href="https://downloads.nethermind.io/" target="_blank" rel="noopener">https://downloads.nethermind.io/</a></p><p>选择你的电脑操作系统版本</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/UvbZCE.png" alt="UvbZCE"></p><p>下载解压后如图：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/zQNNQG.png" alt="zQNNQG"></p><h3 id="2-2-2-设置WebSocket为启动"><a href="#2-2-2-设置WebSocket为启动" class="headerlink" title="2.2.2 设置WebSocket为启动"></a>2.2.2 设置WebSocket为启动</h3><p>打开配置文件夹configs找到xdai.cfg, 用记事本打开</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/TwbDti.png" alt="TwbDti"></p><p>修改webSocket为启用：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/74OoV0.png" alt="74OoV0"></p><p>保存退出</p><h3 id="2-2-3-启动节点，开始同步"><a href="#2-2-3-启动节点，开始同步" class="headerlink" title="2.2.3 启动节点，开始同步"></a>2.2.3 启动节点，开始同步</h3><p>双击Nethermind.Launcher.exe启动，上下左右移动选择，回车确定</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/g5NZt6.png" alt="g5NZt6"></p><p>选择以太坊节点</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/YBPIkb.png" alt="YBPIkb"></p><p>选择XDAI测试链</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/JbOVik.png" alt="JbOVik"></p><p>选择快速同步模式</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/x1syFS.png" alt="x1syFS"></p><p>接下来的一连串配置：</p><p>一般本地使用就是127.0.0.1, 服务器的话就用服务器的IP</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/IQsPU0.png" alt="IQsPU0"></p><p>启动后等待同步，同步的时间<strong>很长。。。。耐心等待</strong></p><p>默认就是8546端口，符合bee客户端swap-endpoint的默认配置，所以不需要改配置</p><p>打开浏览器访问<code>localhost:8546</code>出现<code>Nethermind JSON RPC</code>即可</p><p>最后你的Swap-endpoint应该是：（也就是默认的配置）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swap-endpoint:</span> <span class="string">ws://localhost:8546</span></span><br></pre></td></tr></table></figure><h1 id="三、获取XDAI"><a href="#三、获取XDAI" class="headerlink" title="三、获取XDAI"></a>三、获取XDAI</h1><p>部署支票簿合约就需要发起交易，发起交易就需要交易费，在XDAI链上，交易费就是XDAI币</p><p>XDAI是稳定币，目前交易所的价格等同与USDT<strong>大约一美元</strong>，所以<strong>如果找别人买最好看清楚给的价格</strong></p><p>购买之前，先配置一下MetaMask小狐狸钱包</p><h2 id="3-1-MetaMask小狐狸钱包的配置"><a href="#3-1-MetaMask小狐狸钱包的配置" class="headerlink" title="3.1 MetaMask小狐狸钱包的配置"></a>3.1 MetaMask小狐狸钱包的配置</h2><p>打开设置：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/U9vUzt.png" alt="U9vUzt"></p><p>下拉找到网络 =&gt; 添加网络</p><p>XDAI侧链网络配置如下：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/P0pxtb.png" alt="P0pxtb"></p><p>网络名词：xDAI Chain</p><p>新增RPC URL：<a href="https://rpc.xdaichain.com(注意标点符号的半角和全角，需要半角)" target="_blank" rel="noopener">https://rpc.xdaichain.com(注意标点符号的半角和全角，需要半角)</a></p><p>链ID：100</p><p>符号：xDAI</p><p>区块浏览器：<a href="https://blockscout.com/xdai/mainnet/" target="_blank" rel="noopener">https://blockscout.com/xdai/mainnet/</a></p><hr><h2 id="3-2-添加XDAI链的xBzz"><a href="#3-2-添加XDAI链的xBzz" class="headerlink" title="3.2 添加XDAI链的xBzz"></a>3.2 添加XDAI链的xBzz</h2><p>添加代币 =&gt; 代币合约地址</p><p>地址：0xdBF3Ea6F5beE45c02255B2c26a16F300502F68da</p><h2 id="3-3-交易所购买"><a href="#3-3-交易所购买" class="headerlink" title="3.3 交易所购买"></a>3.3 交易所购买</h2><p><a href="https://m.ascendex.com/register?inviteCode=UHCVPQPWA" target="_blank" rel="noopener">https://m.ascendex.com/register?inviteCode=UHCVPQPWA</a></p><p>点市场——右上角搜索——xDAI，就可以看到</p><p>如果从其他交易所提U进来，推荐走TRC20链。</p><p>由于erc20的手续费较高，提币可以选择TRC20，并且提币和充币，都要选择TRC20，切记一一对应，别搞错了。</p><p>购买后将你的XDAI转移到你的Bee账户中</p><h1 id="四、配置1-0版本Bee"><a href="#四、配置1-0版本Bee" class="headerlink" title="四、配置1.0版本Bee"></a>四、配置1.0版本Bee</h1><p>找一个空文件夹，在官网下载：</p><p>全部下载地址： <a href="https://github.com/ethersphere/bee/releases/tag/v1.0.0" target="_blank" rel="noopener">https://github.com/ethersphere/bee/releases/tag/v1.0.0</a></p><p>windows地址：<a href="https://github.com/ethersphere/bee/releases/download/v1.0.0/bee-windows-amd64.exe" target="_blank" rel="noopener">https://github.com/ethersphere/bee/releases/download/v1.0.0/bee-windows-amd64.exe</a></p><p>下载exe放入空文件夹</p><p>进入空文件夹创建一个文件, 文件全称：<code>bee.yaml</code> 注意拓展名是Yaml，如果没有设置显示拓展名，具体的windows显示文件拓展名见：</p><p><a href="https://jingyan.baidu.com/article/a3a3f811154df38da3eb8a51.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/a3a3f811154df38da3eb8a51.html</a></p><h2 id="4-1-零质押与Gas费的配置"><a href="#4-1-零质押与Gas费的配置" class="headerlink" title="4.1 零质押与Gas费的配置"></a>4.1 零质押与Gas费的配置</h2><h3 id="1-零质押配置"><a href="#1-零质押配置" class="headerlink" title="1. 零质押配置"></a>1. 零质押配置</h3><p>如果追求最小成本，可以将质押的初始Bzz设置为0</p><p>在<code>bee.yaml</code>文件中编辑</p><p><code>swap-initial-deposit: &quot;0&quot;</code></p><h3 id="2-提高Gas费配置"><a href="#2-提高Gas费配置" class="headerlink" title="2. 提高Gas费配置"></a>2. 提高Gas费配置</h3><p>为了加快支票薄合约的部署速度，也就是运行Bee的等待交易上链时间，可以提高Gas费也就是XDAI</p><p>配置如下：</p><p><code>swap-deployment-gas-price: &quot;修改你想要的gas费，也不要太大&quot;</code></p><h3 id="3-最终yaml整体配置"><a href="#3-最终yaml整体配置" class="headerlink" title="3. 最终yaml整体配置"></a>3. 最终yaml整体配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">api-addr:</span> <span class="string">:1633</span><span class="comment"># 端口可自行修改</span></span><br><span class="line"><span class="attr">cache-capacity:</span> <span class="string">"1000000"</span></span><br><span class="line"><span class="attr">config:</span> <span class="string">.\.bee.yaml</span></span><br><span class="line"><span class="attr">data-dir:</span> <span class="string">.\.bee</span><span class="comment"># 所有数据文件都在当前文件夹，如果有问题整体删除即可</span></span><br><span class="line"><span class="attr">debug-api-addr:</span> <span class="string">:1635</span></span><br><span class="line"><span class="attr">debug-api-enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">full-node:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mainnet:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">network-id:</span> <span class="string">"1"</span></span><br><span class="line"><span class="attr">network-id:</span> <span class="string">"100"</span></span><br><span class="line"><span class="attr">p2p-addr:</span> <span class="string">:1634</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">"xxxxxxx"</span></span><br><span class="line"><span class="attr">swap-deployment-gas-price:</span> <span class="string">"999999"</span><span class="comment"># 自行修改交易费</span></span><br><span class="line"><span class="attr">swap-enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">swap-endpoint:</span> <span class="string">https://stake.getblock.io/mainnet/?api_key=xxxxxxxxxxxxxxxxxxx</span><span class="comment"># 修改成你的api keys</span></span><br><span class="line"><span class="attr">swap-initial-deposit:</span> <span class="string">"0"</span><span class="comment"># 自行修改质押</span></span><br></pre></td></tr></table></figure><h3 id="4-单机多节点"><a href="#4-单机多节点" class="headerlink" title="4. 单机多节点"></a>4. 单机多节点</h3><p>这里的多节点是<strong>多端口</strong>，<strong>多个控制台启动</strong></p><p>端口避免重复例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一台节点</span></span><br><span class="line"><span class="attr">api-addr:</span> <span class="string">:1633</span></span><br><span class="line"><span class="attr">debug-api-addr:</span> <span class="string">:1635</span></span><br><span class="line"><span class="attr">debug-api-enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">p2p-addr:</span> <span class="string">:1634</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二台节点</span></span><br><span class="line"><span class="attr">api-addr:</span> <span class="string">:1643</span></span><br><span class="line"><span class="attr">debug-api-addr:</span> <span class="string">:1645</span></span><br><span class="line"><span class="attr">debug-api-enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">p2p-addr:</span> <span class="string">:1644</span></span><br></pre></td></tr></table></figure><p>多节点就是创建多个文件夹，多个cmd，多次启动</p><h1 id="五、启动Bee-1-0开始工作"><a href="#五、启动Bee-1-0开始工作" class="headerlink" title="五、启动Bee_1.0开始工作"></a>五、启动Bee_1.0开始工作</h1><p>在文件夹下启动cmd，输入如下命令启动：</p><p><code>bee-windows-amd64.exe start --config bee.yaml</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/phoBCw.png" alt="phoBCw"></p><h1 id="六、导出私钥"><a href="#六、导出私钥" class="headerlink" title="六、导出私钥"></a>六、导出私钥</h1><h2 id="6-1-不使用clef（推荐）"><a href="#6-1-不使用clef（推荐）" class="headerlink" title="6.1 不使用clef（推荐）"></a>6.1 不使用clef（推荐）</h2><p>教程不使用bee-clef，使用Bee默认会启动创建的一对公私钥，所以要将私钥导出来，加载到例如MetaMask钱包中</p><p><a href="https://github.com/jmozah/exportSwarmKey" target="_blank" rel="noopener">https://github.com/jmozah/exportSwarmKey</a> （要自行用go环境编译）</p><p>windows版本的编译完成main文件：</p><p>链接: <a href="https://pan.baidu.com/s/1EEEwxJ70ZrcUSbTS3AMHOQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1EEEwxJ70ZrcUSbTS3AMHOQ</a>  密码: tb09  （博主不负任何责任，自行考良）</p><p>在文件夹下运行：</p><p><code>exportKeys_windows.exe .bee/keys/ 你的密码(配置文件中配置)</code></p><p><strong>显示的第三个<code>.bee\keys\swarm_key</code>中的私钥就是目标私钥</strong></p><h2 id="6-2-使用bee-clef"><a href="#6-2-使用bee-clef" class="headerlink" title="6.2 使用bee-clef"></a>6.2 使用bee-clef</h2><p>使用clef在上面的配置文件加上配置：（具体配置方法见其他文章）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">clef-signer-enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">clef-signer-endpoint:</span> <span class="string">""</span></span><br><span class="line"><span class="attr">clef-signer-ethereum-address:</span> <span class="string">""</span></span><br></pre></td></tr></table></figure><p>将clef账户导入到MetaMask中</p><p><code>cd /var/lib/bee-clef</code></p><p>文件夹下:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/82lRk0.png" alt="82lRk0"></p><p>或者终端运行<code>bee-clef-keys</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/eydkFy.png" alt="eydkFy"></p><p>会自动导入到主目录下,txt中就是密码</p><p>打开MetaMask中导入:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/719qCf.png" alt="719qCf"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/fPc6RB.png" alt="fPc6RB"></p><h1 id="七、其他"><a href="#七、其他" class="headerlink" title="七、其他"></a>七、其他</h1><h2 id="XDAI浏览器地址"><a href="#XDAI浏览器地址" class="headerlink" title="XDAI浏览器地址"></a>XDAI浏览器地址</h2><p><a href="https://blockscout.com/xdai/mainnet/" target="_blank" rel="noopener">https://blockscout.com/xdai/mainnet/</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本教程的最终效果是： 搭建一个Swarm主网节点，参与Swarm项目&lt;/p&gt;
&lt;p&gt;文章不构成任何购买建议，请自行负责&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、清楚一些事情&quot;&gt;&lt;a href=&quot;#一、清楚一些事情&quot; class=&quot;headerlink&quot; title=&quot;一、清楚一些事情&quot;&gt;&lt;/a&gt;一、清楚一些事情&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Swarm主网上线是在以太坊的POA侧链XDAI链上运行的，为了避免主网拥堵以及高额的gas&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;#e54d42&#39;&gt;&lt;strong&gt;所以之前空头一些相关Goerli测试网络的配置都不在适用&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;XDAI链的主链币是XDAI，Bzz是其中的合约代币，类比理解：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;区块链网络/链&lt;/th&gt;
&lt;th&gt;以太坊主链&lt;/th&gt;
&lt;th&gt;Goerli测试链（空头）&lt;/th&gt;
&lt;th&gt;侧链XDAI（正式）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;主链币&lt;/td&gt;
&lt;td&gt;ETH&lt;/td&gt;
&lt;td&gt;gETH&lt;/td&gt;
&lt;td&gt;XDAI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;合约代币&lt;/td&gt;
&lt;td&gt;BZZ&lt;/td&gt;
&lt;td&gt;gBZZ&lt;/td&gt;
&lt;td&gt;xBZZ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;主链币是一条区块链的核心币，由交易转移、共识一致，数量依托整个区块链系统结构设计。交易的Gas费就是主链币&lt;/li&gt;
&lt;li&gt;合约代币是区块链运行的合约逻辑中存储的一串数字，对，就是数字（虽然主链币也是数字），数量变化依托合约逻辑结构设计。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bee客户端是Swarm项目的客户端，在本地运行，&lt;strong&gt;很多配置可以通过配置文件修改运行&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;整体结构大约如下所示：&lt;/p&gt;
&lt;p&gt;（当然，现实不可能以太坊节点与Swarm节点完全分离，很可能有错综复杂的重叠）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://xwjpics.gumptlu.work/qinniu_uPic/nERnYe.png&quot; alt=&quot;nERnYe&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    
  </entry>
  
</feed>
