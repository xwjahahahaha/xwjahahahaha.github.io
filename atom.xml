<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知识与头发不可兼得</title>
  
  <subtitle>文杰的博客</subtitle>
  <link href="https://xwjahahahaha.github.io/atom.xml" rel="self"/>
  
  <link href="https://xwjahahahaha.github.io/"/>
  <updated>2021-03-20T09:14:49.804Z</updated>
  <id>https://xwjahahahaha.github.io/</id>
  
  <author>
    <name>DDDemons hide</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《Federated_Machine_Learning:Concept_and_Applications》</title>
    <link href="https://xwjahahahaha.github.io/2021/03/20/%E7%9F%A5%E8%AF%86%E8%B4%B4/%E8%AE%BA%E6%96%87/%E3%80%8AFederated-Machine-Learning-Concept-and-Applications%E3%80%8B/"/>
    <id>https://xwjahahahaha.github.io/2021/03/20/%E7%9F%A5%E8%AF%86%E8%B4%B4/%E8%AE%BA%E6%96%87/%E3%80%8AFederated-Machine-Learning-Concept-and-Applications%E3%80%8B/</id>
    <published>2021-03-20T07:41:05.000Z</published>
    <updated>2021-03-20T09:14:49.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《Federated-Machine-Learning-Concept-and-Applications》"><a href="#《Federated-Machine-Learning-Concept-and-Applications》" class="headerlink" title="《Federated_Machine_Learning:Concept_and_Applications》"></a>《Federated_Machine_Learning:Concept_and_Applications》</h1><p>《联邦学习的概念和应用》论文的学习</p><h1 id="一、基本信息"><a href="#一、基本信息" class="headerlink" title="一、基本信息"></a>一、基本信息</h1><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/qSQV3b.png" alt="qSQV3b"></p><a id="more"></a><h1 id="二、学习记录"><a href="#二、学习记录" class="headerlink" title="二、学习记录"></a>二、学习记录</h1><h2 id="2-1-Introduction"><a href="#2-1-Introduction" class="headerlink" title="2.1 Introduction"></a>2.1 Introduction</h2><p>目前的数据共享两大问题</p><ol><li><p>data exists in the form of isolated islands</p></li><li><p>data privacy and security</p></li></ol><h2 id="2-2-An-overview-of-federated-learning"><a href="#2-2-An-overview-of-federated-learning" class="headerlink" title="2.2 An overview of federated learning"></a>2.2 An overview of federated learning</h2><p>联邦学习的三种框架</p><pre><code>  1. horizontal federated learning 2. vertical federated learning3. federated transfer learning</code></pre><h3 id="2-2-1-Definition-of-Federated-Learning"><a href="#2-2-1-Definition-of-Federated-Learning" class="headerlink" title="2.2.1 Definition of Federated Learning"></a>2.2.1 Definition of Federated Learning</h3><p>Define N data owners <code>{F1, . . . FN }</code>, all of whom wish to train a machine-learning model by consolidating their respective data <code>{D1, . . . DN }</code>. A conventional method is to put all data together and use <code>D=D1 ∪ ··· ∪ DN</code>to train a model <strong>M<del>SUM</del></strong>. A federated-learning system is a learning process in which the data owners collaboratively train a model <strong>M<del>FED</del></strong>, in which process any data owner<code>Fi</code>does not expose its data <code>Di</code>to others. In addition, the accuracy of <strong>M<del>FED</del></strong>, denoted as <strong>V<del>FED</del></strong>, should bevery close to the performance of <strong>M<del>SUM</del></strong>, *<em>V<del>SUM</del> *</em>. Formally,let <code>δ</code> be a non-negative real number;</p><p> if <code>|VFED−VSUM |&lt;δ</code>, </p><p>we say that the federated learning algorithm has δ -accuracy loss.</p><p>对于数据的拥有方<code>{F1, . . . FN }</code>, 传统的做法是集合所有的数据训练出模型<strong>M<del>SUM</del></strong>, ==联邦学习系统的训练过程中,所有的数据拥有者共同训练一个模型称之为<strong>M<del>FED</del></strong>,在整个训练的过程中,数据的拥有者<code>Fi</code>不会把自己的数据<code>Di</code>给其他人, 此外联邦学习的精准度<strong>V<del>FED</del></strong>表现需要非常接近于传统方式的精准度*<em>V<del>SUM</del> *</em>==, 设<code>δ</code>为一个非负的实数,则有<code>|VFED−VSUM |&lt;δ</code>, 这样我们称之为联邦学习算法有<code>δ</code>精准度的缺失.</p><h3 id="2-2-2-Privacy-of-Federated-Learning"><a href="#2-2-2-Privacy-of-Federated-Learning" class="headerlink" title="2.2.2 Privacy of Federated Learning"></a>2.2.2 Privacy of Federated Learning</h3><p>分析比较联邦学习中不同的隐私保护技术:</p><h4 id="1-SMC-Secure-Multiparty-Computation-安全多方计算"><a href="#1-SMC-Secure-Multiparty-Computation-安全多方计算" class="headerlink" title="1.SMC(Secure Multiparty Computation 安全多方计算)"></a>1.SMC(Secure Multiparty Computation 安全多方计算)</h4><p>安全多方计算包含: 多重部分(multiple parties)和基于良好模拟框架下的完全零知识隐私保护证明.这意味着每一个部分都只知道自己的输入与输出是什么,而其他的一概不知.</p><p>能够达到完全的零知识证明是最好的期望,但是其通常要求的复杂的计算协议框架可能导致难以高效的实现.在一些主要的场景中,已经给出了安全保证那么部分的透露‘知识’也是可以考虑的.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;《Federated-Machine-Learning-Concept-and-Applications》&quot;&gt;&lt;a href=&quot;#《Federated-Machine-Learning-Concept-and-Applications》&quot; class=&quot;headerlink&quot; title=&quot;《Federated_Machine_Learning:Concept_and_Applications》&quot;&gt;&lt;/a&gt;《Federated_Machine_Learning:Concept_and_Applications》&lt;/h1&gt;&lt;p&gt;《联邦学习的概念和应用》论文的学习&lt;/p&gt;
&lt;h1 id=&quot;一、基本信息&quot;&gt;&lt;a href=&quot;#一、基本信息&quot; class=&quot;headerlink&quot; title=&quot;一、基本信息&quot;&gt;&lt;/a&gt;一、基本信息&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://xwjpics.gumptlu.work/qinniu_uPic/qSQV3b.png&quot; alt=&quot;qSQV3b&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="knowledge" scheme="https://xwjahahahaha.github.io/categories/knowledge/"/>
    
    <category term="machine_learning" scheme="https://xwjahahahaha.github.io/categories/knowledge/machine-learning/"/>
    
    
    <category term="machine_learning" scheme="https://xwjahahahaha.github.io/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>49-字母异位词分组</title>
    <link href="https://xwjahahahaha.github.io/2021/03/20/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/49-%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/"/>
    <id>https://xwjahahahaha.github.io/2021/03/20/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/49-%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/</id>
    <published>2021-03-20T03:33:17.000Z</published>
    <updated>2021-03-20T05:15:58.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h4 id="49-字母异位词分组"><a href="#49-字母异位词分组" class="headerlink" title="49. 字母异位词分组"></a><a href="https://leetcode-cn.com/problems/group-anagrams/" target="_blank" rel="noopener">49. 字母异位词分组</a></h4><p>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],</span><br><span class="line">  [&quot;nat&quot;,&quot;tan&quot;],</span><br><span class="line">  [&quot;bat&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="解题思路及代码"><a href="#解题思路及代码" class="headerlink" title="解题思路及代码"></a>解题思路及代码</h2><p>视频：<a href="https://leetcode-cn.com/problems/group-anagrams/solution/zi-mu-yi-wei-ci-fen-zu-by-leetcode-solut-gyoc/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/group-anagrams/solution/zi-mu-yi-wei-ci-fen-zu-by-leetcode-solut-gyoc/</a></p><p>==<strong>在异构中寻找相同的点：</strong>==</p><p><strong>1. 异构单词的字母出现次数相同,</strong></p><p><strong>2. 如果排序字母后,每个异构单词都是相同的</strong></p><p><strong>==本题是根据特征进行分类问题,那么就应该想到使用散列表(哈希表)==</strong></p><p>根据第一个特点可以构建唯一字母出现次数字符串,根据第二个特点可以先对单词的字母排序作为key</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：根据排序后的字母顺序构建散列表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">groupAnagrams</span><span class="params">(strs []<span class="keyword">string</span>)</span> [][]<span class="title">string</span></span> &#123;</span><br><span class="line">    resMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span>)</span><br><span class="line">    res := [][]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 1. 遍历数组</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> strs &#123;</span><br><span class="line">        <span class="comment">// 2. 对每个单词的字母排序 =&gt; key (使用sort.Slice)</span></span><br><span class="line">        s := []<span class="keyword">byte</span>(v)</span><br><span class="line">        sort.Slice(s, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> s[i] &lt; s[j] &#125;)</span><br><span class="line">        key := <span class="keyword">string</span>(s)</span><br><span class="line">        <span class="comment">// 3. 相同的集合到value</span></span><br><span class="line">        resMap[key] = <span class="built_in">append</span>(resMap[key], v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4. 格式转换输出</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> resMap&#123;</span><br><span class="line">        res = <span class="built_in">append</span>(res, v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二：构造数量字符串作为key构建散列表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">groupAnagrams</span><span class="params">(strs []<span class="keyword">string</span>)</span> [][]<span class="title">string</span></span> &#123;</span><br><span class="line">    resMap := <span class="keyword">map</span>[[<span class="number">26</span>]<span class="keyword">int</span>][]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 1. 统计单词字母出现数量</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> strs &#123;</span><br><span class="line">        <span class="comment">// 2. 构建数量表达字符串 =&gt; key</span></span><br><span class="line">        key := makeSortedSymbol(v)</span><br><span class="line">        <span class="comment">// 3. 累加相同key的字符串</span></span><br><span class="line">        resMap[key] = <span class="built_in">append</span>(resMap[key], v)</span><br><span class="line">    &#125;</span><br><span class="line">    res := <span class="built_in">make</span>([][]<span class="keyword">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(resMap))</span><br><span class="line">    <span class="comment">// 4. 格式化结果</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> resMap &#123;</span><br><span class="line">        res = <span class="built_in">append</span>(res, v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeSortedSymbol</span><span class="params">(s <span class="keyword">string</span>)</span> [26]<span class="title">int</span></span>&#123;</span><br><span class="line">    cnt := [<span class="number">26</span>]<span class="keyword">int</span>&#123;&#125; </span><br><span class="line">    <span class="keyword">for</span> _, c := <span class="keyword">range</span> s &#123;</span><br><span class="line">        cnt[c - <span class="string">'a'</span>] ++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;h4 id=&quot;49-字母异位词分组&quot;&gt;&lt;a href=&quot;#49-字母异位词分组&quot; class=&quot;headerlink&quot; title=&quot;49. 字母异位词分组&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/group-anagrams/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;49. 字母异位词分组&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入: [&amp;quot;eat&amp;quot;, &amp;quot;tea&amp;quot;, &amp;quot;tan&amp;quot;, &amp;quot;ate&amp;quot;, &amp;quot;nat&amp;quot;, &amp;quot;bat&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&amp;quot;ate&amp;quot;,&amp;quot;eat&amp;quot;,&amp;quot;tea&amp;quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&amp;quot;nat&amp;quot;,&amp;quot;tan&amp;quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&amp;quot;bat&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="leetcode" scheme="https://xwjahahahaha.github.io/categories/technical/leetcode/"/>
    
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>日记_0140</title>
    <link href="https://xwjahahahaha.github.io/2021/03/20/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0140/"/>
    <id>https://xwjahahahaha.github.io/2021/03/20/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0140/</id>
    <published>2021-03-20T01:57:18.000Z</published>
    <updated>2021-03-20T05:16:08.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>英语</th><th>开发</th><th>项目</th><th><font color='red'>科研</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>go学习体系 go书看完</strong></td><td>区块链公链项目</td><td>论文一周两篇细读,每个月尝试写一篇</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td>语法课看完</td><td>区块链框架Cosmos</td><td>金窝窝项目需求准备cosmos</td><td>分布式课程论文</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>③</td><td>英文视频学习</td><td>Linux学完</td><td>本科毕业设计</td><td></td><td>为<strong>7月暑期实习</strong>做准备</td></tr><tr><td>④</td><td><font color='red'>六级</font></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td></td><td></td></tr><tr><td>⑤</td><td></td><td></td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li>学弟的cosmos隐私保护项目</li><li>第一篇论文</li><li>科技部编程比赛</li><li>暑期实习准备(Go, 算法等)</li></ul><p>三月 </p><ul><li><input disabled="" type="checkbox"> <p>3-3 ~ 3-7 cosmos项目架构熟悉,做完全部的案例,并且熟悉SDK</p></li><li><input disabled="" type="checkbox"> <p>3-8 ~ 3-20 科技部编程比赛项目实现(使用cosmos)</p></li><li><input disabled="" type="checkbox"> <p>3-20~3-31 Go公链实现项目</p></li><li><input disabled="" type="checkbox"> <p>确定研究主方向,第一篇论文初稿与老师讨论</p></li></ul><p>四月 主要准备算法与Go后端框架的学习</p><p>四五月中要好好准备六级, 这次要过.</p><p>五月~七月 算法、面试准备</p><p><strong>走go开发, 有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> <p>英语70词 + 两句子 + 并列句子P6结束</p></li><li><input checked="" disabled="" type="checkbox"> <p>leetcode</p></li><li><input disabled="" type="checkbox"> </li><li><input disabled="" type="checkbox"> </li><li><input disabled="" type="checkbox"> </li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;go学习体系 go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;区块链公链项目&lt;/td&gt;
&lt;td&gt;论文一周两篇细读,每个月尝试写一篇&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;区块链框架Cosmos&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;分布式课程论文&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;英文视频学习&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;7月暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>日记_0139</title>
    <link href="https://xwjahahahaha.github.io/2021/03/19/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0139/"/>
    <id>https://xwjahahahaha.github.io/2021/03/19/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0139/</id>
    <published>2021-03-19T00:32:05.000Z</published>
    <updated>2021-03-20T01:57:02.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>英语</th><th>开发</th><th>项目</th><th><font color='red'>科研</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>go学习体系 go书看完</strong></td><td>区块链公链项目</td><td>论文一周两篇细读,每个月尝试写一篇</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td>语法课看完</td><td>区块链框架Cosmos</td><td>金窝窝项目需求准备cosmos</td><td>分布式课程论文</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>③</td><td>英文视频学习</td><td>Linux学完</td><td>本科毕业设计</td><td></td><td>为<strong>7月暑期实习</strong>做准备</td></tr><tr><td>④</td><td><font color='red'>六级</font></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td></td><td></td></tr><tr><td>⑤</td><td></td><td></td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> <p>Cosmos whitepaper</p></li><li><input checked="" disabled="" type="checkbox"> <p>《区块链共识协议综述》</p></li><li><input checked="" disabled="" type="checkbox"> <p>《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</p><p>联邦学习与区块链</p></li><li><input disabled="" type="checkbox"> <p>Federated Machine Learning: Concept and Applications</p></li><li><input disabled="" type="checkbox"> <p>On-Device Federated Learning via Blockchain and its Latency Analysis.</p></li><li><input disabled="" type="checkbox"> <p>DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</p></li><li><input disabled="" type="checkbox"> <p>Decentralizing Privacy: Using Blockchain to Protect Personal Data</p></li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li>学弟的cosmos隐私保护项目</li><li>第一篇论文</li><li>科技部编程比赛</li><li>暑期实习准备(Go, 算法等)</li></ul><p>三月 </p><ul><li><input checked="" disabled="" type="checkbox"> <p>3-3 ~ 3-7 cosmos项目架构熟悉,做完全部的案例,<del>并且熟悉SDK</del></p></li><li><input checked="" disabled="" type="checkbox"> <p>3-8 ~ 3-20 科技部编程比赛项目实现(使用cosmos)</p></li><li><input disabled="" type="checkbox"> <p>3-20~3-31 Go公链实战项目，看论文，数字中国比赛</p></li><li><input disabled="" type="checkbox"> <p>确定研究主方向,第一篇论文初稿与老师讨论</p></li></ul><p>四月 主要准备算法与Go后端框架的学习</p><p>四五月中要好好准备六级, 这次要过.</p><p>五月~七月 算法、面试准备</p><p><strong>走go开发, 有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> <p>英语</p></li><li><input disabled="" type="checkbox"> <p>leetcode</p></li><li><input checked="" disabled="" type="checkbox"> <p>3.9～3.19：院系统开发竞赛结束</p></li><li><input checked="" disabled="" type="checkbox"> <p>部分论文</p></li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2><ul><li>抓紧时间！！信仰无法动摇   </li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;go学习体系 go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;区块链公链项目&lt;/td&gt;
&lt;td&gt;论文一周两篇细读,每个月尝试写一篇&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;区块链框架Cosmos&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;分布式课程论文&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;英文视频学习&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;7月暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>woodpecker啄米鸟医疗</title>
    <link href="https://xwjahahahaha.github.io/2021/03/14/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Cosmos/woodpecker%E5%95%84%E7%B1%B3%E9%B8%9F%E5%8C%BB%E7%96%97/"/>
    <id>https://xwjahahahaha.github.io/2021/03/14/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Cosmos/woodpecker%E5%95%84%E7%B1%B3%E9%B8%9F%E5%8C%BB%E7%96%97/</id>
    <published>2021-03-14T13:52:13.000Z</published>
    <updated>2021-03-19T00:24:45.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="啄木鸟-基于cosmos的电子病历管理系统"><a href="#啄木鸟-基于cosmos的电子病历管理系统" class="headerlink" title="啄木鸟-基于cosmos的电子病历管理系统"></a>啄木鸟-基于cosmos的电子病历管理系统</h1><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/xwjahahahaha/woodpecker.git</span><br><span class="line">starport serve -v</span><br></pre></td></tr></table></figure><a id="more"></a><p>实现链上的电子医疗病历的CRUD， 解决电子病历链上共享与隐私保护。</p><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p><strong>（仓库仅cosmos模块代码，但提供了接口可自行实现前端）</strong></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/tNlRRf.png" alt="tNlRRf"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/xyG4Ay.png" alt="xyG4Ay"></p><p>链上登陆</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/H0ifiT.png" alt="H0ifiT"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/fKMOSG.png" alt="fKMOSG"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/6wvFjD.png" alt="6wvFjD"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/MatrUX.png" alt="MatrUX"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/MXiIV8.png" alt="MXiIV8"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/IhZQmm.png" alt="IhZQmm"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>病历被分为三部分存储Attribute、MedicalHistory、BodyIndex</p><p>hashkey字段为病历唯一key，Attribute、BodyIndex没有创建create直接set即可，所以没有ID（没有创建就是创建，创建过了就是修改）</p><p>MedicalHistory创建需要使用create，其有ID字段，即表示一个病人的病历会有多个</p><h3 id="Attribute"><a href="#Attribute" class="headerlink" title="Attribute"></a>Attribute</h3><h4 id="1-cli客户端"><a href="#1-cli客户端" class="headerlink" title="1.cli客户端"></a>1.cli客户端</h4><h5 id="创建"><a href="#创建" class="headerlink" title="创建:"></a>创建:</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodpecker <span class="built_in">set</span>-attribute [name] [idNumber] [address] [job] [nation] [hashKey] [flags] --from user</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodpecker <span class="built_in">set</span>-attribute xwj 123 cq it china 1902 --from user1 -y</span></span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/Ag8dab.png" alt="Ag8dab"></p><h5 id="查询："><a href="#查询：" class="headerlink" title="查询："></a>查询：</h5><p>all：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli query woodpecker list-attribute</span></span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/pwUJ4H.png" alt="pwUJ4H"></p><p>one：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli query woodpecker list-attribute [hashKey]</span></span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/vH4D7Q.png" alt="vH4D7Q"></p><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodpecker <span class="built_in">set</span>-attribute [name] [idNumber] [address] [job] [nation] [hashKey] [flags] --from user</span></span><br></pre></td></tr></table></figure><p>同创建</p><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodpecker delete-attribute [hashKey]</span></span><br></pre></td></tr></table></figure><h4 id="2-Rest接口"><a href="#2-Rest接口" class="headerlink" title="2.Rest接口"></a>2.Rest接口</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> one</span></span><br><span class="line">your IP:1317/woodpecker/attribute/[hashKey]</span><br><span class="line"><span class="meta">#</span><span class="bash"> all</span></span><br><span class="line">your IP:1317/woodpecker/attribute</span><br></pre></td></tr></table></figure><p>交易通过接口无法签名，可以通过前端js实现<a href="https://github.com/cosmostation/cosmosjs" target="_blank" rel="noopener">cosmosJs</a></p><h3 id="MedicalHistory"><a href="#MedicalHistory" class="headerlink" title="MedicalHistory"></a>MedicalHistory</h3><h4 id="1-cli客户端-1"><a href="#1-cli客户端-1" class="headerlink" title="1.cli客户端"></a>1.cli客户端</h4><h5 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h5><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/fGXayh.png" alt="fGXayh"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodpecker create-medicalHistory 协和医院 2021/03/14 精神科 脑子 小阳 深井冰 放弃治疗 1902 --from user1 -y</span></span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/RWATVn.png" alt="RWATVn"></p><h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h5><h6 id="查询所有人的所有病历"><a href="#查询所有人的所有病历" class="headerlink" title="查询所有人的所有病历"></a>查询所有人的所有病历</h6><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/xxzvdR.png" alt="xxzvdR"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli query woodpecker list-all-medicalHistory</span></span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/kDTyct.png" alt="kDTyct"></p><h6 id="查询一个人的所有病历"><a href="#查询一个人的所有病历" class="headerlink" title="查询一个人的所有病历"></a>查询一个人的所有病历</h6><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/OS8Rzj.png" alt="OS8Rzj"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli query woodpecker list-medicalHistory 1902</span></span><br></pre></td></tr></table></figure><p>1902:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/xTsVU0.png" alt="xTsVU0"></p><p>xwj:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/AM0Byh.png" alt="AM0Byh"></p><h6 id="查询一个人的单个病历"><a href="#查询一个人的单个病历" class="headerlink" title="查询一个人的单个病历"></a>查询一个人的单个病历</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli query woodpecker get-medicalHistory [hashKey] [id]</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli query woodpecker get-medicalHistory 1902 0</span></span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/N7I2Ri.png" alt="N7I2Ri"></p><h5 id="修改-1"><a href="#修改-1" class="headerlink" title="修改"></a>修改</h5><h6 id="修改一个人的某个病历"><a href="#修改一个人的某个病历" class="headerlink" title="修改一个人的某个病历"></a>修改一个人的某个病历</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodpecker <span class="built_in">set</span>-medicalHistory [id]  [medicalInstitutionName] [diagnosisTime] [diagnosisDepartment] [diagnosisType] [diagnosisDoctor] [diagnosisResult] [treatmentOptions] [hashKey] [flags]</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodpecker <span class="built_in">set</span>-medicalHistory 0 北京医院 2021/4/10 骨科 骨质疏松 小阳 骨头坏死 截肢 1902 --from user1 -y</span></span><br></pre></td></tr></table></figure><p>再次查询:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/6uYHfr.png" alt="6uYHfr"></p><h5 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodpecker delete-medicalHistory [id] [hashKey]</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodpecker delete-medicalHistory 4 xwj --from user1 -y</span></span><br></pre></td></tr></table></figure><p>再次查询;</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/KlBMU4.png" alt="KlBMU4"></p><h4 id="2-rest接口测试"><a href="#2-rest接口测试" class="headerlink" title="2.rest接口测试"></a>2.rest接口测试</h4><p>注意：需要交易的方法（创建、修改、删除）都需要本地签名才会生效, 建议前端使用cosmosjs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Then sign this transaction</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NOTE: In a real environment the raw transaction should be signed on the client side. Also the sequence needs to be adjusted, depending on what the query of user2<span class="string">'s account has shown.</span></span></span><br><span class="line">woodpeckercli tx sign unsignedTx.json --from user1 --offline --chain-id namechain --sequence 1 --account-number 0 &gt; signedTx.json</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> And finally broadcast the signed transaction</span></span><br><span class="line">woodpeckercli tx broadcast signedTx.json</span><br></pre></td></tr></table></figure><h5 id="创建-2"><a href="#创建-2" class="headerlink" title="创建"></a>创建</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">URL :</span> <span class="string">IP</span> <span class="string">Address:1317/woodpecker/medicalHistory</span></span><br><span class="line"><span class="string">POST</span></span><br><span class="line"><span class="attr">Data Simple:</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="attr">"base_req":</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">"from":</span> <span class="string">"cosmos15qfsrthwsfu378m5epe2fzggsu5m7r7d0yexep"</span><span class="string">,</span></span><br><span class="line"><span class="attr">"chain_id":</span> <span class="string">"woodpacker"</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">"creator":</span> <span class="string">"cosmos15qfsrthwsfu378m5epe2fzggsu5m7r7d0yexep"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"medicalInstitutionName":</span> <span class="string">"南京和谐"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"diagnosisTime":</span> <span class="string">"2021/08/24"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"diagnosisDepartment":</span> <span class="string">"dkaskd"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"diagnosisType":</span> <span class="string">"脑壳"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"diagnosisDoctor":</span> <span class="string">"小样"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"diagnosisResult":</span> <span class="string">"deal"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"treatmentOptions":</span> <span class="string">"ldsl"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"hash_key":</span> <span class="string">"xwj"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h5><h6 id="查询所有人的所有病历-1"><a href="#查询所有人的所有病历-1" class="headerlink" title="查询所有人的所有病历"></a>查询所有人的所有病历</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">URL:</span> <span class="string">IP</span> <span class="string">Address:1317/woodpecker/medicalHistory</span></span><br><span class="line"><span class="string">GET</span></span><br></pre></td></tr></table></figure><p>result simple:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"height"</span>: <span class="string">"0"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"creator"</span>: <span class="string">"cosmos1r304rwx7z4vh6yz4wkp4utwchg03ymc6rw45je"</span>,</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"0"</span>,</span><br><span class="line">            <span class="attr">"medicalInstitutionName"</span>: <span class="string">"协和医院"</span>,</span><br><span class="line">            <span class="attr">"diagnosisTime"</span>: <span class="string">"2021/03/14"</span>,</span><br><span class="line">            <span class="attr">"diagnosisDepartment"</span>: <span class="string">"精神科"</span>,</span><br><span class="line">            <span class="attr">"diagnosisType"</span>: <span class="string">"脑子"</span>,</span><br><span class="line">            <span class="attr">"diagnosisDoctor"</span>: <span class="string">"小阳"</span>,</span><br><span class="line">            <span class="attr">"diagnosisResult"</span>: <span class="string">"深井冰"</span>,</span><br><span class="line">            <span class="attr">"treatmentOptions"</span>: <span class="string">"放弃治疗"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"creator"</span>: <span class="string">"cosmos1r304rwx7z4vh6yz4wkp4utwchg03ymc6rw45je"</span>,</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="attr">"medicalInstitutionName"</span>: <span class="string">"协和医院"</span>,</span><br><span class="line">            <span class="attr">"diagnosisTime"</span>: <span class="string">"2021/03/14"</span>,</span><br><span class="line">            <span class="attr">"diagnosisDepartment"</span>: <span class="string">"精神科"</span>,</span><br><span class="line">            <span class="attr">"diagnosisType"</span>: <span class="string">"脑子"</span>,</span><br><span class="line">            <span class="attr">"diagnosisDoctor"</span>: <span class="string">"小阳"</span>,</span><br><span class="line">            <span class="attr">"diagnosisResult"</span>: <span class="string">"深井冰"</span>,</span><br><span class="line">            <span class="attr">"treatmentOptions"</span>: <span class="string">"放弃治疗"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="查询一个人的所有病历-1"><a href="#查询一个人的所有病历-1" class="headerlink" title="查询一个人的所有病历"></a>查询一个人的所有病历</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">URL:</span> <span class="string">IP</span> <span class="string">Address:1317/woodpecker/medicalHistory/[hashKey]</span></span><br><span class="line"><span class="string">GET</span></span><br></pre></td></tr></table></figure><h6 id="查询一个人的单个病历-1"><a href="#查询一个人的单个病历-1" class="headerlink" title="查询一个人的单个病历"></a>查询一个人的单个病历</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">URL:</span> <span class="string">IP</span> <span class="string">Address:1317/woodpecker/medicalHistory/[hashKey]/[id]</span></span><br><span class="line"><span class="string">GET</span></span><br></pre></td></tr></table></figure><h5 id="修改-2"><a href="#修改-2" class="headerlink" title="修改"></a>修改</h5><h6 id="修改一个人的某个病历-1"><a href="#修改一个人的某个病历-1" class="headerlink" title="修改一个人的某个病历"></a>修改一个人的某个病历</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">URL:</span> <span class="string">IP</span> <span class="string">Address:1317/woodpecker/medicalHistory</span></span><br><span class="line"><span class="string">PUT</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Data Sample:</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="attr">"base_req":</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">"from":</span> <span class="string">"cosmos1x7acsyd53mmjc3znwt8xw2ju3vpwm6gku7muu0"</span><span class="string">,</span></span><br><span class="line"><span class="attr">"chain_id":</span> <span class="string">"woodpacker"</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">"creator":</span> <span class="string">"cosmos1x7acsyd53mmjc3znwt8xw2ju3vpwm6gku7muu0"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"medicalInstitutionName":</span> <span class="string">"xxxx"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"diagnosisTime":</span> <span class="string">"xxxxxs"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"diagnosisDepartment":</span> <span class="string">"dkaskd"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"diagnosisType":</span> <span class="string">"xxxxx"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"diagnosisDoctor":</span> <span class="string">"小样"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"diagnosisResult":</span> <span class="string">"deal"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"treatmentOptions":</span> <span class="string">"ldsl"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"hash_key":</span> <span class="string">"xwj"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"id":</span> <span class="string">"3"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">URL:</span> <span class="string">IP</span> <span class="string">Address:1317/woodpecker/medicalHistory</span></span><br><span class="line"><span class="string">DELET</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Data Sample:</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="attr">"base_req":</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">"from":</span> <span class="string">"cosmos1x7acsyd53mmjc3znwt8xw2ju3vpwm6gku7muu0"</span><span class="string">,</span></span><br><span class="line"><span class="attr">"chain_id":</span> <span class="string">"woodpacker"</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">"creator":</span> <span class="string">"cosmos1x7acsyd53mmjc3znwt8xw2ju3vpwm6gku7muu0"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"hash_key":</span> <span class="string">"xwj"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"id":</span> <span class="string">"3"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="BodyIndex"><a href="#BodyIndex" class="headerlink" title="BodyIndex"></a>BodyIndex</h3><p>参数较长建议使用文件</p><h4 id="1-cli"><a href="#1-cli" class="headerlink" title="1.cli"></a>1.cli</h4><h5 id="创建-更新"><a href="#创建-更新" class="headerlink" title="创建/更新"></a>创建/更新</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodpecker <span class="built_in">set</span>-bodyIndex [age] [sex] [nation] [weight] [height] [weightIndex] [obesityWaistline] [waistline] [maxBloodPressure] [minBloodPressure] [goodCholesterol] [batCholesterol] [totalCholesterol] [Dyslipidemia] [pvd] [sportActivities] [education] [marry] [income] [sourceCase] [visionBad] [drink] [highBloodPressure] [familialHighBloodPressure] [diabetes] [familialDiabetes] [hepatitis] [familialHepatitis] [chronicFatigue] [alf] [hashKey]</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodepecker <span class="built_in">set</span>-bodyIndex $(&lt;data.txt)</span></span><br></pre></td></tr></table></figure><h5 id="查询-2"><a href="#查询-2" class="headerlink" title="查询"></a>查询</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> all</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli query woodpecker list-bodyIndex</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> one</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli query woodpecker list-bodyIndex [hashKey]</span></span><br></pre></td></tr></table></figure><h5 id="删除-3"><a href="#删除-3" class="headerlink" title="删除"></a>删除</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodpecker delete-bodyIndex [hashKey]</span></span><br></pre></td></tr></table></figure><h4 id="2-Rest"><a href="#2-Rest" class="headerlink" title="2.Rest"></a>2.Rest</h4><h5 id="查询-3"><a href="#查询-3" class="headerlink" title="查询"></a>查询</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> all</span></span><br><span class="line">IP:1317/woodpecker/attribute</span><br><span class="line"><span class="meta">#</span><span class="bash"> one</span></span><br><span class="line">IP:1317/woodpecker/attribute/[hashKey]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;啄木鸟-基于cosmos的电子病历管理系统&quot;&gt;&lt;a href=&quot;#啄木鸟-基于cosmos的电子病历管理系统&quot; class=&quot;headerlink&quot; title=&quot;啄木鸟-基于cosmos的电子病历管理系统&quot;&gt;&lt;/a&gt;啄木鸟-基于cosmos的电子病历管理系统&lt;/h1&gt;&lt;h2 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https://github.com/xwjahahahaha/woodpecker.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;starport serve -v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="cosmos" scheme="https://xwjahahahaha.github.io/categories/technical/cosmos/"/>
    
    
    <category term="cosmos" scheme="https://xwjahahahaha.github.io/tags/cosmos/"/>
    
  </entry>
  
  <entry>
    <title>日记_0138</title>
    <link href="https://xwjahahahaha.github.io/2021/03/13/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0138/"/>
    <id>https://xwjahahahaha.github.io/2021/03/13/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0138/</id>
    <published>2021-03-13T00:48:41.000Z</published>
    <updated>2021-03-19T00:51:18.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>英语</th><th>开发</th><th>项目</th><th><font color='red'>科研</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>go学习体系 go书看完</strong></td><td>区块链公链项目</td><td>论文一周两篇细读,每个月尝试写一篇</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td>语法课看完</td><td>区块链框架Cosmos</td><td>金窝窝项目需求准备cosmos</td><td>分布式课程论文</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>③</td><td>英文视频学习</td><td>Linux学完</td><td>本科毕业设计</td><td></td><td>为<strong>7月暑期实习</strong>做准备</td></tr><tr><td>④</td><td><font color='red'>六级</font></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td></td><td></td></tr><tr><td>⑤</td><td></td><td></td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li>学弟的cosmos隐私保护项目</li><li>第一篇论文</li><li>科技部编程比赛</li><li>暑期实习准备(Go, 算法等)</li></ul><p>三月 </p><ul><li><input disabled="" type="checkbox"> <p>3-3 ~ 3-7 cosmos项目架构熟悉,做完全部的案例,并且熟悉SDK</p></li><li><input disabled="" type="checkbox"> <p>3-8 ~ 3-20 科技部编程比赛项目实现(使用cosmos)</p></li><li><input disabled="" type="checkbox"> <p>3-20~3-31 Go公链实现项目</p></li><li><input disabled="" type="checkbox"> <p>确定研究主方向,第一篇论文初稿与老师讨论</p></li></ul><p>四月 主要准备算法与Go后端框架的学习</p><p>四五月中要好好准备六级, 这次要过.</p><p>五月~七月 算法、面试准备</p><p><strong>走go开发, 有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> 英语60词</li><li><input checked="" disabled="" type="checkbox"> 项目开发</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;go学习体系 go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;区块链公链项目&lt;/td&gt;
&lt;td&gt;论文一周两篇细读,每个月尝试写一篇&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;区块链框架Cosmos&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;分布式课程论文&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;英文视频学习&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;7月暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Go语言-4-其他</title>
    <link href="https://xwjahahahaha.github.io/2021/03/06/%E6%8A%80%E6%9C%AF%E8%B4%B4/GoLang/Go%E8%AF%AD%E8%A8%80-4-%E5%85%B6%E4%BB%96/"/>
    <id>https://xwjahahahaha.github.io/2021/03/06/%E6%8A%80%E6%9C%AF%E8%B4%B4/GoLang/Go%E8%AF%AD%E8%A8%80-4-%E5%85%B6%E4%BB%96/</id>
    <published>2021-03-06T08:43:53.000Z</published>
    <updated>2021-03-06T09:13:56.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Goland-IDE"><a href="#Goland-IDE" class="headerlink" title="Goland IDE"></a>Goland IDE</h1><h2 id="goland无法识别go-mod的依赖包"><a href="#goland无法识别go-mod的依赖包" class="headerlink" title="goland无法识别go mod的依赖包"></a>goland无法识别go mod的依赖包</h2><p>解决方法: 在编辑器设置GOPROXY, 这样goland就会识别索引你项目使用go mod在<code>GOPATH/pkg/mod</code>文件夹下的依赖包</p><a id="more"></a><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/PtyEVd.png" alt="PtyEVd"></p><h2 id="使用go-mod模式导致本地包无法导入问题"><a href="#使用go-mod模式导致本地包无法导入问题" class="headerlink" title="使用go mod模式导致本地包无法导入问题"></a>使用go mod模式导致本地包无法导入问题</h2><p>因为使用go module进行包管理, 所以引用包路径不再是从<code>GOPATH/src</code>开始的相对位置</p><ol><li><p>查看你项目下的go.mod文件</p></li><li><p>第一行的modul名就是你本地原始包的前缀名</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/wfe1hF.png" alt="wfe1hF"></p></li><li><p>修改项目中的引用即可</p><p><code>import &quot;github.com/user/nameservice/[本地包名/路径]&quot;</code></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Goland-IDE&quot;&gt;&lt;a href=&quot;#Goland-IDE&quot; class=&quot;headerlink&quot; title=&quot;Goland IDE&quot;&gt;&lt;/a&gt;Goland IDE&lt;/h1&gt;&lt;h2 id=&quot;goland无法识别go-mod的依赖包&quot;&gt;&lt;a href=&quot;#goland无法识别go-mod的依赖包&quot; class=&quot;headerlink&quot; title=&quot;goland无法识别go mod的依赖包&quot;&gt;&lt;/a&gt;goland无法识别go mod的依赖包&lt;/h2&gt;&lt;p&gt;解决方法: 在编辑器设置GOPROXY, 这样goland就会识别索引你项目使用go mod在&lt;code&gt;GOPATH/pkg/mod&lt;/code&gt;文件夹下的依赖包&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/categories/technical/golang/"/>
    
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>日记_0137</title>
    <link href="https://xwjahahahaha.github.io/2021/03/06/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0137/"/>
    <id>https://xwjahahahaha.github.io/2021/03/06/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0137/</id>
    <published>2021-03-06T01:43:10.000Z</published>
    <updated>2021-03-07T00:48:29.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>英语</th><th>开发</th><th>项目</th><th><font color='red'>科研（No.1）</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>后端：go语言深化，框架gin等</strong>，<strong>go书看完</strong></td><td>区块链公链项目</td><td>论文一周两篇细读,每个月尝试写一篇</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td>英文视频(生活大爆炸开始)</td><td>区块链框架Cosmos</td><td>金窝窝项目需求准备cosmos</td><td>分布式课程论文</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>③</td><td></td><td>Linux学完</td><td>本科毕业设计</td><td></td><td>为<strong>暑期实习</strong>做准备</td></tr><tr><td>④</td><td></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td></td><td></td></tr><tr><td>⑤</td><td></td><td>有时间的话：Java</td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td>代客泊车项目申报书</td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input disabled="" type="checkbox"> <a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7467408" target="_blank" rel="noopener">Blockchains and Smart Contracts for the Internet of Things</a></li><li><input disabled="" type="checkbox"> Where Is Current Research on Blockchain Technology?-A Systematic Review</li><li><input disabled="" type="checkbox"> Blockstack: A Global Naming and Storage System Secured by Blockchains</li><li><input disabled="" type="checkbox"> Plasma </li><li><input disabled="" type="checkbox"> <a href="https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md" target="_blank" rel="noopener">EOS.IO Technical White Paper v2</a></li><li><input disabled="" type="checkbox"> Ocean Protocol: Tools for the Web3 Data Economy</li><li><input disabled="" type="checkbox"> Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts</li><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input disabled="" type="checkbox"> Decentralizing Privacy: Using Blockchain to Protect Personal Data</li><li><input disabled="" type="checkbox"> 《 Tendermint：关于拜占庭容错共识算法的最新进展》</li><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input disabled="" type="checkbox"> The Ripple Protocol Consensus Algorithm</li><li><input disabled="" type="checkbox"> <a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="noopener">以太坊白皮书</a></li><li><input disabled="" type="checkbox"> Hyperledger Fabric: A Distributed Operating System for Permissioned Blockchains</li><li><input disabled="" type="checkbox"> Secure Data Storage and Recovery in IndustrialBlockchain Network Environments</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li>学弟的cosmos隐私保护项目</li><li>第一篇论文</li><li>科技部编程比赛</li><li>暑期实习准备(Go, 算法等)</li></ul><p>三月 </p><ul><li><input disabled="" type="checkbox"> <p>3-3 ~ 3-7 cosmos项目架构熟悉,做完全部的案例,并且熟悉SDK</p></li><li><input disabled="" type="checkbox"> <p>3-8 ~ 3-20 科技部编程比赛项目实现(使用cosmos)</p></li><li><input disabled="" type="checkbox"> <p>3-20~3-31 Go公链实现项目</p></li><li><input disabled="" type="checkbox"> <p>确定研究主方向,第一篇论文初稿与老师讨论</p></li></ul><p>四月 主要准备算法与Go后端框架的学习</p><p>五月~七月 算法、面试准备</p><p><strong>走go开发, 有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> 英语60词 + 语法课复习</li><li><input checked="" disabled="" type="checkbox"> leetcode面试题库一题 (一种解法)</li><li><input checked="" disabled="" type="checkbox"> cosmos</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2><ul><li>时间把握还不够!</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研（No.1）&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;后端：go语言深化，框架gin等&lt;/strong&gt;，&lt;strong&gt;go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;区块链公链项目&lt;/td&gt;
&lt;td&gt;论文一周两篇细读,每个月尝试写一篇&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;英文视频(生活大爆炸开始)&lt;/td&gt;
&lt;td&gt;区块链框架Cosmos&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;分布式课程论文&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;有时间的话：Java&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;代客泊车项目申报书&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>golang坑与注意点</title>
    <link href="https://xwjahahahaha.github.io/2021/03/05/%E6%8A%80%E6%9C%AF%E8%B4%B4/GoLang/golang%E5%9D%91%E4%B8%8E%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
    <id>https://xwjahahahaha.github.io/2021/03/05/%E6%8A%80%E6%9C%AF%E8%B4%B4/GoLang/golang%E5%9D%91%E4%B8%8E%E6%B3%A8%E6%84%8F%E7%82%B9/</id>
    <published>2021-03-05T12:30:01.000Z</published>
    <updated>2021-03-05T12:40:26.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><a id="more"></a><h2 id="append陷阱"><a href="#append陷阱" class="headerlink" title="append陷阱"></a>append陷阱</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array =[]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;<span class="comment">// len:5,capacity:5</span></span><br><span class="line"><span class="keyword">var</span> newArray=array[<span class="number">1</span>:<span class="number">3</span>]<span class="comment">// len:2,capacity:4   (已经使用了两个位置，所以还空两位置可以append)</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>,array) <span class="comment">//0xc420098000</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>,newArray) <span class="comment">//0xc420098008 可以看到newArray的地址指向的是array[1]的地址，即他们底层使用的还是一个数组</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,array) <span class="comment">//[1 2 3 4 5]</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,newArray) <span class="comment">//[2 3]</span></span><br><span class="line"></span><br><span class="line">newArray[<span class="number">1</span>]=<span class="number">9</span> <span class="comment">//更改后array、newArray都改变了</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,array) <span class="comment">// [1 2 9 4 5]</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,newArray) <span class="comment">// [2 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重点1 : 对切片append可能会导致切片引用的数组改变</span></span><br><span class="line">newArray=<span class="built_in">append</span>(newArray,<span class="number">11</span>,<span class="number">12</span>)<span class="comment">//append 操作之后，array的len和capacity不变,newArray的len变为4，capacity：4。因为这是对newArray的操作</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,array) <span class="comment">//[1 2 9 11 12] //注意对newArray做append操作之后，array[3],array[4]的值也发生了改变</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,newArray) <span class="comment">//[2 9 11 12]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重点2 : append扩容可能会导致原底层数组的改变! </span></span><br><span class="line">newArray=<span class="built_in">append</span>(newArray,<span class="number">13</span>,<span class="number">14</span>) <span class="comment">// 因为newArray的len已经等于capacity，所以再次append就会超过capacity值，</span></span><br><span class="line"><span class="comment">// 此时，append函数内部会创建一个新的底层数组（是一个扩容过的数组），并将array指向的底层数组拷贝过去，然后在追加新的值。</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>,array) <span class="comment">//0xc420098000</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>,newArray) <span class="comment">//0xc4200a0000</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,array) <span class="comment">//[1 2 9 11 12]</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,newArray) <span class="comment">//[2 9 11 12 13 14]  他两已经不再是指向同一个底层数组y了</span></span><br></pre></td></tr></table></figure><p>==<strong>append操作可能会导致原本使用同一个底层数组的两个Slice变量变为使用不同的底层数组。</strong>==</p><p>==<strong>所以, 切片在作为函数传参时,要注意在函数中不能append越界</strong>==</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;headerlink&quot; title=&quot;基础语法&quot;&gt;&lt;/a&gt;基础语法&lt;/h1&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="Golang" scheme="https://xwjahahahaha.github.io/categories/technical/Golang/"/>
    
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>日记_0136</title>
    <link href="https://xwjahahahaha.github.io/2021/03/05/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0136/"/>
    <id>https://xwjahahahaha.github.io/2021/03/05/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0136/</id>
    <published>2021-03-05T06:58:26.000Z</published>
    <updated>2021-03-05T16:42:21.415Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>英语</th><th>开发</th><th>项目</th><th><font color='red'>科研（No.1）</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>后端：go语言深化，框架gin等</strong>，<strong>go书看完</strong></td><td>区块链公链项目</td><td>论文一周两篇细读,每个月尝试写一篇</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td>英文视频(生活大爆炸开始)</td><td>区块链框架Cosmos</td><td>金窝窝项目需求准备cosmos</td><td>分布式课程论文</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>③</td><td></td><td>Linux学完</td><td>本科毕业设计</td><td></td><td>为下学期的<strong>暑期实习</strong>做准备</td></tr><tr><td>④</td><td></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td></td><td></td></tr><tr><td>⑤</td><td></td><td>有时间的话：Java</td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td>代客泊车项目申报书</td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input disabled="" type="checkbox"> <a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7467408" target="_blank" rel="noopener">Blockchains and Smart Contracts for the Internet of Things</a></li><li><input disabled="" type="checkbox"> Where Is Current Research on Blockchain Technology?-A Systematic Review</li><li><input disabled="" type="checkbox"> Blockstack: A Global Naming and Storage System Secured by Blockchains</li><li><input disabled="" type="checkbox"> Plasma </li><li><input disabled="" type="checkbox"> <a href="https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md" target="_blank" rel="noopener">EOS.IO Technical White Paper v2</a></li><li><input disabled="" type="checkbox"> Ocean Protocol: Tools for the Web3 Data Economy</li><li><input disabled="" type="checkbox"> Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts</li><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input disabled="" type="checkbox"> Decentralizing Privacy: Using Blockchain to Protect Personal Data</li><li><input disabled="" type="checkbox"> 《 Tendermint：关于拜占庭容错共识算法的最新进展》</li><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input disabled="" type="checkbox"> The Ripple Protocol Consensus Algorithm</li><li><input disabled="" type="checkbox"> <a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="noopener">以太坊白皮书</a></li><li><input disabled="" type="checkbox"> Hyperledger Fabric: A Distributed Operating System for Permissioned Blockchains</li><li><input disabled="" type="checkbox"> Secure Data Storage and Recovery in IndustrialBlockchain Network Environments</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li>学弟的cosmos隐私保护项目</li><li>第一篇论文</li><li>科技部编程比赛</li><li>暑期实习准备(Go, 算法等)</li></ul><p>三月 </p><ul><li><input disabled="" type="checkbox"> <p>3-3 ~ 3-7 cosmos项目架构熟悉,做完全部的案例,并且熟悉SDK</p></li><li><input disabled="" type="checkbox"> <p>3-8 ~ 3-20 科技部编程比赛项目实现(使用cosmos)</p></li><li><input disabled="" type="checkbox"> <p>3-20~3-31 Go公链实现项目</p></li><li><input disabled="" type="checkbox"> <p>确定研究主方向,第一篇论文初稿与老师讨论</p></li></ul><p>四月 主要准备算法与Go后端框架的学习</p><p>五月~七月 算法、面试准备</p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> 英语50词</li><li><input disabled="" type="checkbox"> leetcode一题</li><li><input checked="" disabled="" type="checkbox"> goroutine的复习</li><li><input checked="" disabled="" type="checkbox"> cosmos nameservice项目的学习</li><li><input checked="" disabled="" type="checkbox"> goAdvance 视频课 p28</li><li><input checked="" disabled="" type="checkbox"> 比特币实战P10</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研（No.1）&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;后端：go语言深化，框架gin等&lt;/strong&gt;，&lt;strong&gt;go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;区块链公链项目&lt;/td&gt;
&lt;td&gt;论文一周两篇细读,每个月尝试写一篇&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;英文视频(生活大爆炸开始)&lt;/td&gt;
&lt;td&gt;区块链框架Cosmos&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;分布式课程论文&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;为下学期的&lt;strong&gt;暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;有时间的话：Java&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;代客泊车项目申报书&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Nameservice测试项目部署</title>
    <link href="https://xwjahahahaha.github.io/2021/03/04/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Cosmos/%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B%E5%BA%93/Nameservice%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    <id>https://xwjahahahaha.github.io/2021/03/04/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Cosmos/%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B%E5%BA%93/Nameservice%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</id>
    <published>2021-03-04T02:10:48.000Z</published>
    <updated>2021-03-19T00:47:03.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[TOC]</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h1 id="1-Getting-Started"><a href="#1-Getting-Started" class="headerlink" title="1.Getting Started"></a>1.Getting Started</h1><p>使用<strong>scratch</strong>部署区块链</p><p>项目最后会构建一个Nameservice, 就是一个映射关系 string-&gt;other string(<code>map[string]string</code>)</p><a id="more"></a><p>类似于Namecoin、EN、DNS等,用户创建需要使用的域名</p><p>前置要求:</p><ul><li><a href="https://golang.org/doc/install" target="_blank" rel="noopener"><code>golang</code> &gt;1.15 (opens new window)</a>installed</li><li>Github account and either <a href="https://hub.github.com/" target="_blank" rel="noopener">Github CLI (opens new window)</a>or <a href="https://help.github.com/en/desktop/getting-started-with-github-desktop/installing-github-desktop" target="_blank" rel="noopener">Github Desktop (64-bit required)(opens new window)</a></li><li>Desire to create your own blockchain!</li></ul><ul><li>==starport V0.13.1==注意版本, 可能默认下载的最新版. 各系统下载地址[install Starport (opens new window)](<a href="https://github.com/tendermint/starport/blob/develop/docs/1" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/1</a> Introduction/2 Install.md).</li></ul><h1 id="2-Application-Goals"><a href="#2-Application-Goals" class="headerlink" title="2.Application Goals"></a>2.Application Goals</h1><p>目标:用户购买域名,系统设置存储对应的value,域名都是最高出价售出</p><p>Here are the modules you will need for the nameservice application:</p><ul><li><p><code>auth</code>: This module defines accounts and fees and gives access to these functionalities to the rest of your application.</p><p><strong>定义账户和费用</strong></p></li><li><p><code>bank</code>: This module enables the application to create and manage tokens and token balances.</p><p><strong>使应用程序管理与创建tokens</strong></p></li><li><p><code>staking</code> : This module enables the application to have validators that people can delegate to.</p><p><strong>使得应用程序实现用户委托代理</strong></p></li><li><p><code>distribution</code> : This module give a functional way to passively distribute rewards between validators and delegators.</p><p><strong>在验证者与代理者之间分配奖励</strong></p></li><li><p><code>slashing</code> : This module disincentivizes people with value staked in the network, ie. Validators.</p><p>*<em>以削减质押金额(例如Validators)来惩罚 *</em></p></li><li><p><code>supply</code> : This module holds the total supply of the chain.</p><p><strong>控制区块链的总供应</strong></p></li><li><p><code>nameservice</code>: This module does not exist yet! It will handle the core logic for the <code>nameservice</code> application you are building. It is the main piece of software you have to work on to build your application.</p><p><strong>nameservice的核心逻辑,由开发人员自己编写</strong></p></li></ul><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>token和用户的状态都已经在auth和bank模块中定义了,所以我们无需操心.</p><p>但是我们需要定义部分特别的与nameservice相关的状态</p><p>在SDK,所有的数据存储在叫做multistore的数据库中(k/v数据库)</p><p>我们使用一个存储域名和其代表的人的映射,这个结构体包含了域名的值、拥有者以及余额</p><h2 id="Messages"><a href="#Messages" class="headerlink" title="Messages"></a>Messages</h2><p>==消息包含在交易中==,它们触发状态交易</p><p>每个模块都定义了一系列的消息和操作它们的方法</p><p>nameservice应用中需要定义的两类基本消息:</p><ul><li><code>MsgSetName</code>: This message allows name owners to set a value for a given name.</li><li><code>MsgBuyName</code>: This message allows accounts to buy a name and become its owner.<ul><li>购买当前的域名,你的价格要比前任支付的价格高才可以,如果该域名之前没有人购买,那么必须支付最小的金额即<code>MinPrice</code></li></ul></li></ul><p>==一般性过程:==</p><ol><li><p>已经打包进区块的交易到达Tendermint节点</p></li><li><p>节点通过ABCI与应用程序cosmos SDK交流,</p></li><li><p>cosmos SDK解码交易获取消息</p></li><li><p>SDK将消息路由到合适的模块去执行,执行遵循<code>Handler</code>(可认为是控制器)中的定义</p></li><li><p><code>Handler</code>运行<code>Keeper</code>(可认为是module)进行数据的更新或删除等操作</p></li></ol><h1 id="3-Start-your-application"><a href="#3-Start-your-application" class="headerlink" title="3.Start your application"></a>3.Start your application</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">starport app github.com/user/nameservice --sdk-version="launchpad"</span><br><span class="line">cd nameservice</span><br></pre></td></tr></table></figure><p>如果你克隆了项目,那么<code>user</code>字段可以换成自己的项目地址</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/iW71tT.png" alt="iW71tT"></p><p>==Tendermint通过来自网络的交易与应用程序交互的接口叫做 =&gt; ABCI==</p><p>结构如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+---------------------+</span><br><span class="line">|                     |</span><br><span class="line">|     Application     |</span><br><span class="line">|                     |</span><br><span class="line">+--------+---+--------+</span><br><span class="line">         ^   |</span><br><span class="line">         |   | ABCI</span><br><span class="line">         |   v</span><br><span class="line">+--------+---+--------+</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">|     Tendermint      |</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure><p><strong>这些接口cosmos SDK都提供了样板文件在<code>basseapp</code>中</strong>,baseapp的作用可见cosmos开发基础.</p><p>在这个案例中可以使用<code>nameservice</code> &amp; <code>NameServiceApp</code>这些types,这些type会嵌入到<code>baseapp</code>中</p><p>baseapp不能够识别用户自定义模块的路由和应用程序中自定义的用户接口, <strong>您的应用程序的主要作用是定义这些路由, 另一个作用是定义初始状态</strong>. 这些都要求在你的应用程序添加模块.</p><p> <code>auth</code>, <code>bank</code>, <code>staking</code>, <code>distribution</code>, <code>slashing</code> and <code>nameservice</code>. The first five already exist, but not the last! 后面需要修改.</p><h1 id="4-Types"><a href="#4-Types" class="headerlink" title="4.Types"></a>4.Types</h1><p>创建<code>whois</code>类型</p><p><code>starport type whois value price</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/qP4v1r.png" alt="qP4v1r"></p><p>目前我们只给whois类型添加了两个字段,我们还会对部分自动生成的字段进行修改, 删除<code>ID</code>字段, 代替<code>Creator</code>字段为<code>Owner</code></p><p>脚手架工具为我们自动创建了以下文件:</p><p>在 <code>./x/nameservice/types</code>目录下:</p><p> <code>MsgCreateWhois.go</code>, <code>MsgDeleteWhois.go</code>, <code>MsgSetWhois.go</code>, and <code>TypeWhois.go</code>.</p><h2 id="Whois"><a href="#Whois" class="headerlink" title="Whois"></a>Whois</h2><p>每一个域名都有三个字段</p><ul><li><p>Value - The value that a name resolves to. This is just an arbitrary string, but in the future you can modify this to require it fitting a specific format, such as an IP address, DNS Zone file, or blockchain address.</p><p><strong>域名解析的值,string类型,但是后面可以自己设置为特定的数据类型</strong></p></li><li><p>Owner - The address of the current owner of the name</p><p><strong>域名的主人</strong></p></li><li><p>Price - The price you will need to pay in order to buy the name</p><p><strong>购买的价格</strong></p></li></ul><p>To start your SDK module, define your <code>nameservice.Whois</code> struct in the <code>./x/nameservice/types/TypeWhois.go</code> file:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义最小域名转卖金额</span></span><br><span class="line"><span class="keyword">var</span> MinNamePrice = sdk.Coins&#123;sdk.NewInt64Coin(<span class="string">"nametoken"</span>, <span class="number">1</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Whois <span class="keyword">struct</span> &#123;</span><br><span class="line">Creator sdk.AccAddress <span class="string">`json:"creator" yaml:"creator"`</span></span><br><span class="line">ID      <span class="keyword">string</span>         <span class="string">`json:"id" yaml:"id"`</span></span><br><span class="line">    Value <span class="keyword">string</span> <span class="string">`json:"value" yaml:"value"`</span></span><br><span class="line">    Price <span class="keyword">string</span> <span class="string">`json:"price" yaml:"price"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回一个新的Whois，因为新的域名还没有人购买，所以设置金额为最小</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewWhois</span><span class="params">()</span> <span class="title">Whois</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> Whois&#123;</span><br><span class="line">Price:   MinNamePrice,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-Key"><a href="#5-Key" class="headerlink" title="5.Key"></a>5.Key</h1><p>在<code>key.go</code>文件中已经创建了模块需要的一些全局常量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// ModuleName is the name of the module</span></span><br><span class="line"><span class="comment">// 模块名</span></span><br><span class="line">ModuleName = <span class="string">"nameservice"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// StoreKey to be used when creating the KVStore</span></span><br><span class="line"><span class="comment">// 模块存储空间的键/key</span></span><br><span class="line">StoreKey = ModuleName</span><br><span class="line"></span><br><span class="line"><span class="comment">// RouterKey to be used for routing msgs</span></span><br><span class="line"><span class="comment">// 路由消息的键名</span></span><br><span class="line">RouterKey = ModuleName</span><br><span class="line"></span><br><span class="line"><span class="comment">// QuerierRoute to be used for querier msgs</span></span><br><span class="line"><span class="comment">// 查询消息的查询路由名</span></span><br><span class="line">QuerierRoute = ModuleName</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// whois结构体的前缀，即在模块空间中k/v的前缀key</span></span><br><span class="line">WhoisPrefix      = <span class="string">"whois-value-"</span></span><br><span class="line"><span class="comment">// 存储总记数的前缀key，是WhoisPrefix的特例</span></span><br><span class="line">WhoisCountPrefix = <span class="string">"whois-count-"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="6-Errors"><a href="#6-Errors" class="headerlink" title="6.Errors"></a>6.Errors</h1><p>定义了模块的自定义错误以及错误代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ErrNameDoesNotExist = sdkerrors.Register(ModuleName, <span class="number">1</span>, <span class="string">"name does not exist"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>你应该还定义错误的方法,当发生错误的时候.</p><h1 id="7-Keeper"><a href="#7-Keeper" class="headerlink" title="7.Keeper"></a>7.Keeper</h1><p>主要负责数据的增删改查</p><h2 id="Keeper-Struct"><a href="#Keeper-Struct" class="headerlink" title="Keeper Struct"></a>Keeper Struct</h2><p>Your <code>nameservice.Keeper</code> should already be defined in the <code>./x/nameservice/keeper/keeper.go</code> file. Let’s have a short introduction of the <code>keeper.go</code> file.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> keeper</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 1</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/tendermint/tendermint/libs/log"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/bank"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Keeper of the nameservice store</span></span><br><span class="line"><span class="comment">// Keeper结构体</span></span><br><span class="line"><span class="keyword">type</span> Keeper <span class="keyword">struct</span> &#123;</span><br><span class="line">CoinKeeper bank.Keeper<span class="comment">// bank模块, 底层管理token的模块</span></span><br><span class="line">storeKey   sdk.StoreKey<span class="comment">// cosmos-sdk/types的通用存储key类型</span></span><br><span class="line">cdc        *codec.Codec<span class="comment">// 底层编码模块</span></span><br><span class="line"><span class="comment">// paramspace types.ParamSubspace</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewKeeper creates a nameservice keeper</span></span><br><span class="line"><span class="comment">// 返回Keeper的对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewKeeper</span><span class="params">(coinKeeper bank.Keeper, cdc *codec.Codec, key sdk.StoreKey)</span> <span class="title">Keeper</span></span> &#123;</span><br><span class="line">keeper := Keeper&#123;</span><br><span class="line">CoinKeeper: coinKeeper,</span><br><span class="line">storeKey:   key,</span><br><span class="line">cdc:        cdc,</span><br><span class="line"><span class="comment">// paramspace: paramspace.WithKeyTable(types.ParamKeyTable()),</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> keeper</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logger returns a module-specific logger.</span></span><br><span class="line"><span class="comment">// 使用当前的模块名生成特定的log返回</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">Logger</span><span class="params">(ctx sdk.Context)</span> <span class="title">log</span>.<span class="title">Logger</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> ctx.Logger().With(<span class="string">"module"</span>, fmt.Sprintf(<span class="string">"x/%s"</span>, types.ModuleName))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于代码中import的两个不同的types:</p><ul><li><p><a href="https://godoc.org/github.com/cosmos/cosmos-sdk/types" target="_blank" rel="noopener"><code>types</code> (as sdk) (opens new window)</a>- this contains commonly used types throughout the SDK.</p><p><strong>包含整个sdk通常使用的类型</strong></p></li><li><p><code>types</code> - it contains <code>BankKeeper</code> you have defined in previous section.</p><p><strong>包含之前介绍的<code>BankKeeper</code></strong></p></li></ul><p>Keeper结构体解释:</p><ul><li><p><code>types.BankKeeper</code> - This is an interface you had defined on previous section to use <code>bank</code> module. Including it allows code in this module to call functions from the <code>bank</code> module. The SDK uses an <a href="https://en.wikipedia.org/wiki/Object-capability_model" target="_blank" rel="noopener">object capabilities (opens new window)</a>approach to accessing sections of the application state. This is to allow developers to employ a least authority approach, limiting the capabilities of a faulty or malicious module from affecting parts of state it doesn’t need access to.</p><p><strong>BankKeeper 这是在上一节介绍的bank,这里使用bank模块的接口。==它允许该模块中的代码调用bank模块中的函数==。SDK使用 object capabilities方法来访问应用程序状态的部分。这允许开发人员采用最小权限的方法，限制错误或恶意模块的功能，使其不影响它不需要访问的状态部分。</strong></p></li><li><p><a href="https://godoc.org/github.com/cosmos/cosmos-sdk/codec#Codec" target="_blank" rel="noopener"><code>*codec.Codec</code> (opens new window)</a>- This is a pointer to the codec that is used by Amino to encode and decode binary structs.</p><p><strong>这是Amino用于编码和解码二进制结构的编解码器的指针,用于编码/解码数据</strong></p></li><li><p><a href="https://godoc.org/github.com/cosmos/cosmos-sdk/types#StoreKey" target="_blank" rel="noopener"><code>sdk.StoreKey</code> (opens new window)</a>- This is a store key which gates access to a <code>sdk.KVStore</code>which persists the state of your application: the Whois struct that the name points to (i.e. <code>map[name]Whois</code>).</p><p><strong>==这是一个用于访问sdk 持久化应用程序状态的KVStore对应的key==。数据库存储也就是域名所指向的Whois结构体</strong></p></li></ul><h2 id="Getters-and-Setters"><a href="#Getters-and-Setters" class="headerlink" title="Getters and Setters"></a>Getters and Setters</h2><p>In our <code>keeper</code> directory we find the <code>whois.go</code> file which has been created with our <code>starport type</code> command.</p><p>我们需要修改部分, 使用<code>Name</code>作为key去查找每一个<code>Whois</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> keeper</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetWhoisCount get the total number of whois</span></span><br><span class="line"><span class="comment">// 获取whois的所有数量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">GetWhoisCount</span><span class="params">(ctx sdk.Context)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取keeper对象的key,也就是在key.go文件中定义的存储StoreKey常量</span></span><br><span class="line"><span class="comment">// 提取上下文中对应key的store</span></span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line"><span class="comment">// 将key.go中的数量统计前缀转换为byte数组</span></span><br><span class="line">byteKey := []<span class="keyword">byte</span>(types.WhoisCountPrefix)</span><br><span class="line"><span class="comment">// 根据WhoisCountPrefix查询存储的数量值</span></span><br><span class="line">bz := store.Get(byteKey)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Count doesn't exist: no element</span></span><br><span class="line"><span class="comment">// 不存在则返回默认的0</span></span><br><span class="line"><span class="keyword">if</span> bz == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parse bytes</span></span><br><span class="line"><span class="comment">// 解析字查询到的数量string =&gt; int</span></span><br><span class="line">count, err := strconv.ParseInt(<span class="keyword">string</span>(bz), <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// Panic because the count should be always formattable to int64</span></span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"cannot decode count"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetWhoisCount set the total number of whois</span></span><br><span class="line"><span class="comment">// 存储whois的总数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">SetWhoisCount</span><span class="params">(ctx sdk.Context, count <span class="keyword">int64</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取数据库 =&gt; 格式化key =&gt; 存储</span></span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line">byteKey := []<span class="keyword">byte</span>(types.WhoisCountPrefix)</span><br><span class="line">bz := []<span class="keyword">byte</span>(strconv.FormatInt(count, <span class="number">10</span>))</span><br><span class="line"><span class="comment">// 设置</span></span><br><span class="line">store.Set(byteKey, bz)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateWhois creates a whois. This function is included in starport type scaffolding.</span></span><br><span class="line"><span class="comment">// We won't use this function in our application, so it can be commented out.</span></span><br><span class="line"><span class="comment">// 脚手架自动创建的创建whois结构体的函数, 不想使用可以注释掉, 一般写在Tpye&#123;your type&#125;.go中,这里就是TypeWhois.go</span></span><br><span class="line"><span class="comment">// func (k Keeper) CreateWhois(ctx sdk.Context, whois types.Whois) &#123;</span></span><br><span class="line"><span class="comment">// store := ctx.KVStore(k.storeKey)</span></span><br><span class="line"><span class="comment">// key := []byte(types.WhoisPrefix + whois.Value)</span></span><br><span class="line"><span class="comment">// value := k.cdc.MustMarshalBinaryLengthPrefixed(whois)</span></span><br><span class="line"><span class="comment">// store.Set(key, value)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GetWhois returns the whois information</span></span><br><span class="line"><span class="comment">// 获取whois结构体数据, key就是域名的name</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">GetWhois</span><span class="params">(ctx sdk.Context, key <span class="keyword">string</span>)</span> <span class="params">(types.Whois, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 获取namservice数据库</span></span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line"><span class="keyword">var</span> whois types.Whois</span><br><span class="line"><span class="comment">// 2. 拼接key, whois前缀 + 获取参数key</span></span><br><span class="line">byteKey := []<span class="keyword">byte</span>(types.WhoisPrefix + key)</span><br><span class="line"><span class="comment">// 3. 使用keeper的codec类型cdc解码, 赋值给whois结构体</span></span><br><span class="line">err := k.cdc.UnmarshalBinaryLengthPrefixed(store.Get(byteKey), &amp;whois)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> whois, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4. 返回</span></span><br><span class="line"><span class="keyword">return</span> whois, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetWhois sets a whois. We modified this function to use the `name` value as the key instead of msg.ID</span></span><br><span class="line"><span class="comment">// 存储Whois, 我们修改了这个函数，使用' name '值作为键，而不是msg.ID</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">SetWhois</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>, whois types.Whois)</span></span> &#123;</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line"><span class="comment">// 使用cdc编码参数whois结构体返回的bz是byte切片</span></span><br><span class="line"><span class="comment">// MustMarshalBinaryLengthPrefixed 有Must代表不返回其错误直接Panic处理， 即使有err的话，没有的话返回可能的错误</span></span><br><span class="line">bz := k.cdc.MustMarshalBinaryLengthPrefixed(whois)</span><br><span class="line"><span class="comment">// 使用' name '值作为键，而不是msg.ID</span></span><br><span class="line">key := []<span class="keyword">byte</span>(types.WhoisPrefix + name)</span><br><span class="line"><span class="comment">// 存储</span></span><br><span class="line">store.Set(key, bz)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DeleteWhois deletes a whois</span></span><br><span class="line"><span class="comment">// 删除一个whois结构体</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">DeleteWhois</span><span class="params">(ctx sdk.Context, key <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line">store.Delete([]<span class="keyword">byte</span>(types.WhoisPrefix + key))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Functions used by querier  为用户查询的函数</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询whois的集合</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">listWhois</span><span class="params">(ctx sdk.Context, k Keeper)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> whoisList []types.Whois</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line"><span class="comment">// 根据前缀创建循环迭代器, 遍历所有包含此前缀字段的key对应的value</span></span><br><span class="line"><span class="comment">// KVStorePrefixIterator 按升序迭代所有带有特定前缀的键</span></span><br><span class="line">iterator := sdk.KVStorePrefixIterator(store, []<span class="keyword">byte</span>(types.WhoisPrefix))</span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span> ; iterator.Valid(); iterator.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> whois types.Whois</span><br><span class="line"><span class="comment">// 1. 迭代器获取包含特定前缀的完整key</span></span><br><span class="line"><span class="comment">// 2. 获取whois（[]byte）进行解码</span></span><br><span class="line"><span class="comment">// 3. 赋值给whois</span></span><br><span class="line">k.cdc.MustUnmarshalBinaryLengthPrefixed(store.Get(iterator.Key()), &amp;whois)</span><br><span class="line"><span class="comment">// 添加到集合中</span></span><br><span class="line">whoisList = <span class="built_in">append</span>(whoisList, whois)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 再将整个list解码/序列化成字节数组，</span></span><br><span class="line"><span class="comment">// MustMarshalJSONIndent有Must代表不返回其错误直接Panic处理， 即使有err的话，没有的话返回可能的错误</span></span><br><span class="line">res := codec.MustMarshalJSONIndent(k.cdc, whoisList)</span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询单个Whois</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getWhois</span><span class="params">(ctx sdk.Context, path []<span class="keyword">string</span>, k Keeper)</span> <span class="params">(res []<span class="keyword">byte</span>, sdkError error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取key, path的第一个参数(用户命令行输入)</span></span><br><span class="line">key := path[<span class="number">0</span>]</span><br><span class="line"><span class="comment">// 调用keeper的基本方法GetWhois(见上方)</span></span><br><span class="line">whois, err := k.GetWhois(ctx, key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编码/序列化为字节数组,</span></span><br><span class="line">res, err = codec.MarshalJSONIndent(k.cdc, whois)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrJSONMarshal, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Resolves a name, returns the value</span></span><br><span class="line"><span class="comment">// 解析域名对应的值,也就是whois中的字段value</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">resolveName</span><span class="params">(ctx sdk.Context, path []<span class="keyword">string</span>, keeper Keeper)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 直接调用keeper的解析函数(见下方), key是path[0]</span></span><br><span class="line">value := keeper.ResolveName(ctx, path[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> value == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">byte</span>&#123;&#125;, sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, <span class="string">"could not resolve name"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编码/序列化为字节数组</span></span><br><span class="line"><span class="comment">// QueryResResolve是types/querier文件下的函数, QueryResResolve就是解析值的一个结构体</span></span><br><span class="line"><span class="comment">// 因为MarshalJSONIndent解析需要一个结构体， 所以创建了这样的QueryResResolve结构体以赋值</span></span><br><span class="line">res, err := codec.MarshalJSONIndent(keeper.cdc, types.QueryResResolve&#123;Value: value&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrJSONMarshal, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get creator of the item</span></span><br><span class="line"><span class="comment">// 获取域名的创建者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">GetCreator</span><span class="params">(ctx sdk.Context, key <span class="keyword">string</span>)</span> <span class="title">sdk</span>.<span class="title">AccAddress</span></span> &#123;</span><br><span class="line">whois, _ := k.GetWhois(ctx, key)</span><br><span class="line"><span class="keyword">return</span> whois.Creator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if the key exists in the store</span></span><br><span class="line"><span class="comment">// 检查当前域名key/name是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">Exists</span><span class="params">(ctx sdk.Context, key <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line"><span class="keyword">return</span> store.Has([]<span class="keyword">byte</span>(types.WhoisPrefix + key))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ResolveName - returns the string that the name resolves to</span></span><br><span class="line"><span class="comment">// 获取域名的解析值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">ResolveName</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">whois, _ := k.GetWhois(ctx, name)</span><br><span class="line"><span class="keyword">return</span> whois.Value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetName - sets the value string that a name resolves to</span></span><br><span class="line"><span class="comment">// 设置域名对应的解析值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">SetName</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>, value <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">whois, _ := k.GetWhois(ctx, name)</span><br><span class="line">whois.Value = value</span><br><span class="line">k.SetWhois(ctx, name, whois)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HasOwner - returns whether or not the name already has an owner</span></span><br><span class="line"><span class="comment">// 检查当前域名是否有创建人</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">HasCreator</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">whois, _ := k.GetWhois(ctx, name)</span><br><span class="line"><span class="keyword">return</span> !whois.Creator.Empty()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetOwner - sets the current owner of a name</span></span><br><span class="line"><span class="comment">// 设置域名的当前拥有者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">SetCreator</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>, creator sdk.AccAddress)</span></span> &#123;</span><br><span class="line">whois, _ := k.GetWhois(ctx, name)</span><br><span class="line">whois.Creator = creator</span><br><span class="line">k.SetWhois(ctx, name, whois)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetPrice - gets the current price of a name</span></span><br><span class="line"><span class="comment">// 获取域名的价格</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">GetPrice</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>)</span> <span class="title">sdk</span>.<span class="title">Coins</span></span> &#123;</span><br><span class="line">whois, _ := k.GetWhois(ctx, name)</span><br><span class="line"><span class="keyword">return</span> whois.Price</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetPrice - sets the current price of a name</span></span><br><span class="line"><span class="comment">// 设置域名的价格</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">SetPrice</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>, price sdk.Coins)</span></span> &#123;</span><br><span class="line">whois, _ := k.GetWhois(ctx, name)</span><br><span class="line">whois.Price = price</span><br><span class="line">k.SetWhois(ctx, name, whois)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if the name is present in the store or not</span></span><br><span class="line"><span class="comment">// 检查当前的name参数是否存在于store中，注意于Exists函数的区别：没有加前缀</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">IsNamePresent</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line"><span class="keyword">return</span> store.Has([]<span class="keyword">byte</span>(name))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get an iterator over all names in which the keys are the names and the values are the whois</span></span><br><span class="line"><span class="comment">// 获取固定前缀的迭代器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">GetNamesIterator</span><span class="params">(ctx sdk.Context)</span> <span class="title">sdk</span>.<span class="title">Iterator</span></span> &#123;</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line"><span class="keyword">return</span> sdk.KVStorePrefixIterator(store, []<span class="keyword">byte</span>(types.WhoisPrefix))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get creator of the item</span></span><br><span class="line"><span class="comment">// 根据key = id获取whois的创建者， 但是可能会返回err</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">GetWhoisOwner</span><span class="params">(ctx sdk.Context, key <span class="keyword">string</span>)</span> <span class="title">sdk</span>.<span class="title">AccAddress</span></span> &#123;</span><br><span class="line">whois, err := k.GetWhois(ctx, key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> whois.Creator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if the key exists in the store</span></span><br><span class="line"><span class="comment">// 根绝key查询是否存在， key是域名结构体中的id</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">WhoisExists</span><span class="params">(ctx sdk.Context, key <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line"><span class="keyword">return</span> store.Has([]<span class="keyword">byte</span>(types.WhoisPrefix + key))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-Msgs-and-Handlers"><a href="#8-Msgs-and-Handlers" class="headerlink" title="8.Msgs and Handlers"></a>8.Msgs and Handlers</h1><h2 id="Msgs"><a href="#Msgs" class="headerlink" title="Msgs"></a>Msgs</h2><p>msgs触发状态交易,Msg包含在Tx接口中,Tx就是网络中用户提交的交易</p><p>Cosmos sdk中的源码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Tx defines the interface a transaction must fulfill.</span></span><br><span class="line">Tx <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// Gets the all the transaction's messages.</span></span><br><span class="line">GetMsgs() []Msg</span><br><span class="line"></span><br><span class="line"><span class="comment">// ValidateBasic does a simple and lightweight validation check that doesn't</span></span><br><span class="line"><span class="comment">// require access to any other information.</span></span><br><span class="line">ValidateBasic() error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作为开发者只需要定义Msg即可,Msg必须要满足以下接口:</p><p><code>./x/nameservice/types/msg.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Transactions messages must fulfill the Msg</span></span><br><span class="line"><span class="comment">// 实现接口必须实现所有的函数</span></span><br><span class="line"><span class="keyword">type</span> Msg <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// Return the message type.</span></span><br><span class="line"><span class="comment">// Must be alphanumeric or empty.</span></span><br><span class="line"><span class="comment">// 返回消息类型， 必须是字母或者空</span></span><br><span class="line">Type() <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns a human-readable string for the message, intended for utilization</span></span><br><span class="line"><span class="comment">// within tags</span></span><br><span class="line"><span class="comment">// 返回消息的可读string,用于在标签中使用</span></span><br><span class="line">Route() <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ValidateBasic does a simple validation check that</span></span><br><span class="line"><span class="comment">// doesn't require access to any other information.</span></span><br><span class="line"><span class="comment">// 做一些基本的验证, 不需要访问其他信息</span></span><br><span class="line">ValidateBasic() error</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the canonical byte representation of the Msg.</span></span><br><span class="line"><span class="comment">// 获取Msg的规范字节表示即字节数组</span></span><br><span class="line">GetSignBytes() []<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Signers returns the addrs of signers that must sign.</span></span><br><span class="line"><span class="comment">// CONTRACT: All signatures must be present to be valid.</span></span><br><span class="line"><span class="comment">// CONTRACT: Returns addrs in some deterministic order.</span></span><br><span class="line"><span class="comment">// 返回必须签名的签名者地址集合， 所有的签名必须在当下还有效， 返回的签名集合会以某种确定的顺序</span></span><br><span class="line">GetSigners() []sdk.AccAddress</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Handlers"><a href="#Handlers" class="headerlink" title="Handlers"></a>Handlers</h2><p>可看作为controller</p><p>定义了当接受到Msg时, 哪些数据存储需要更新,在什么样的环境下更新等</p><h1 id="9-Msgs"><a href="#9-Msgs" class="headerlink" title="9.Msgs"></a>9.Msgs</h1><p>现在开始编写本项目场景需要的Msg</p><h2 id="SetName"><a href="#SetName" class="headerlink" title="SetName"></a>SetName</h2><h3 id="MsgSetSetName"><a href="#MsgSetSetName" class="headerlink" title="MsgSetSetName"></a>MsgSetSetName</h3><p>首先实现<code>SetName</code>, 这个消息Msg允许域名的所有者在解析器中设置该域名的返回值</p><p>Start by renaming the <code>./x/nameservice/types/MsgSetWhois.go</code> file to <code>./x/nameservice/types/MsgSetName.go</code>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">  sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//const RouterKey = ModuleName // this was defined in your key.go file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MsgSetName defines a SetName message</span></span><br><span class="line"><span class="comment">// 定义MsgSetName的结构</span></span><br><span class="line"><span class="keyword">type</span> MsgSetName <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name  <span class="keyword">string</span>         <span class="string">`json:"name"`</span>    <span class="comment">// 目标域名</span></span><br><span class="line">  Value <span class="keyword">string</span>         <span class="string">`json:"value"`</span>   <span class="comment">// 对应的值/解析值</span></span><br><span class="line">  Owner sdk.AccAddress <span class="string">`json:"owner"`</span>   <span class="comment">// 拥有者</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewMsgSetName is a constructor function for MsgSetName</span></span><br><span class="line"><span class="comment">// MsgSetName构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMsgSetName</span><span class="params">(name <span class="keyword">string</span>, value <span class="keyword">string</span>, owner sdk.AccAddress)</span> <span class="title">MsgSetName</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> MsgSetName&#123;</span><br><span class="line">    Name:  name,</span><br><span class="line">    Value: value,</span><br><span class="line">    Owner: owner,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Route should return the name of the module</span></span><br><span class="line"><span class="comment">// 返回路由消息的键， 这里就是模块名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgSetName)</span> <span class="title">Route</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> RouterKey &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type should return the action</span></span><br><span class="line"><span class="comment">// 操作名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgSetName)</span> <span class="title">Type</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> <span class="string">"set_name"</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ValidateBasic runs stateless checks on the message</span></span><br><span class="line"><span class="comment">// 基本参数检测</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgSetName)</span> <span class="title">ValidateBasic</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> msg.Owner.Empty() &#123;</span><br><span class="line">    <span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidAddress, msg.Owner.String())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(msg.Name) == <span class="number">0</span> || <span class="built_in">len</span>(msg.Value) == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, <span class="string">"Name and/or Value cannot be empty"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetSignBytes encodes the message for signing</span></span><br><span class="line"><span class="comment">// GetSignBytes对整个MsgSetName消息本身进行编码、排序以进行后续的签名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgSetName)</span> <span class="title">GetSignBytes</span><span class="params">()</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">  <span class="comment">// MustMarshalJSON序列化msg为字节切片</span></span><br><span class="line">  <span class="comment">// MustSortJSON返回根据key排序的json</span></span><br><span class="line">  <span class="keyword">return</span> sdk.MustSortJSON(ModuleCdc.MustMarshalJSON(msg))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetSigners defines whose signature is required</span></span><br><span class="line"><span class="comment">// 定义该需要谁的签名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgSetName)</span> <span class="title">GetSigners</span><span class="params">()</span> []<span class="title">sdk</span>.<span class="title">AccAddress</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> []sdk.AccAddress&#123;msg.Owner&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>MsgSetName</code> has the three attributes needed to set the value for a name:</p><ul><li><code>name</code> - The name trying to be set. 域名</li><li><code>value</code> - What the name resolves to. 要解析的值</li><li><code>owner</code> - The owner of that name. 域名的使用者</li></ul><p><strong>==SDK使用上述函数将消息路由到适当的模块进行处理==</strong>。它们还将人类可读的操作名称添加到用于索引的数据库标签中。</p><p><code>GetSignBytes</code>定义了消息Msg怎样对自身进行编码以方便签名, 一般都是序列化+排序, 一般不需要改动.</p><p><code>GetSigners</code>定义了在Tx中那些人的签名是必须的,这样才能保证有效.</p><p>在此案例中, 当需要重新设置域名的解析时,<code>MsgSetName</code>需要Owner签名交易才能生效.</p><h3 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h3><p>目前<code>MsgSetName</code>已经规定好了, <strong>==当接收到了消息后<code>Handler</code>负责定义接下来的行动.==</strong> </p><p><code>NewHandler</code>本质上是一个子路由器，它将进入该模块的消息指示给适当的处理程序。目前，只有一个<code>Msg/Handler</code>。</p><p>Let’s rename our <code>x/nameservice/handlerMsgSetWhois.go</code> to <code>x/nameservice/handlerMsgSetName.go</code>.</p><p><code>mv x/nameservice/handlerMsgSetWhois.go x/nameservice/handlerMsgSetName.go</code></p><p>修改如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nameservice</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/keeper"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handle a message to set name</span></span><br><span class="line"><span class="comment">// 接受到msg， 进一步的处理，相当于controller层， 操作keeper层</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleMsgSetName</span><span class="params">(ctx sdk.Context, keeper keeper.Keeper, msg types.MsgSetName)</span> <span class="params">(*sdk.Result, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 检查MsgSetName的提供者是否为想要设置域名的域名拥有者， 即验证身份</span></span><br><span class="line"><span class="keyword">if</span> !msg.Owner.Equals(keeper.GetWhoisOwner(ctx, msg.Name)) &#123; <span class="comment">// Checks if the the msg sender is the same as the current owner</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrUnauthorized, <span class="string">"Incorrect Owner"</span>) <span class="comment">// If not, throw an error</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果是本人的话设置所规定的值</span></span><br><span class="line"><span class="comment">// 调用keeper进行域名的解析值设定</span></span><br><span class="line">keeper.SetName(ctx, msg.Name, msg.Value) <span class="comment">// If so, set the name to the value specified in the msg.</span></span><br><span class="line"><span class="keyword">return</span> &amp;sdk.Result&#123;&#125;, <span class="literal">nil</span>                <span class="comment">// return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the file (<code>./x/nameservice/handler.go</code>) make sure to replace the <code>types.MsgSetWhois</code> with the following code:</p><p>==<strong><code>handler.go</code>是各个handlerxxxx.go的总路由,  所以每一个对应的msg都需要在这里注册, 下面是修改完整的<code>handler.go</code>:</strong>==</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nameservice</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/keeper"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewHandler returns a handler for "nameservice" type messages.</span></span><br><span class="line"><span class="comment">// 返回一个操作nameservice各类消息的Handler对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewHandler</span><span class="params">(keeper keeper.Keeper)</span> <span class="title">sdk</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx sdk.Context, msg sdk.Msg)</span> <span class="params">(*sdk.Result, error)</span></span> &#123;</span><br><span class="line"><span class="comment">//.(type)获取接口实例实际的类型指针, 以此调用实例所有可调用的方法，包括接口方法及自有方法。</span></span><br><span class="line"><span class="comment">//需要注意的是该写法必须与switch case联合使用，case中列出实现该接口的类型。</span></span><br><span class="line"><span class="keyword">switch</span> msg := msg.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="comment">// 添加操作类型</span></span><br><span class="line"><span class="keyword">case</span> types.MsgSetName:</span><br><span class="line"><span class="keyword">return</span> handleMsgSetName(ctx, keeper, msg)</span><br><span class="line"><span class="keyword">case</span> types.MsgBuyName:</span><br><span class="line"><span class="keyword">return</span> handleMsgBuyName(ctx, keeper, msg)</span><br><span class="line"><span class="keyword">case</span> types.MsgDeleteName:</span><br><span class="line"><span class="keyword">return</span> handleMsgDeleteName(ctx, keeper, msg)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, fmt.Sprintf(<span class="string">"Unrecognized nameservice Msg type: %v"</span>, msg.Type()))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在, 拥有者可以设置域名的解析了, 但是如果是一个域名不存在拥有者的情况呢?</p><p>现在模块需要提供一种方式让用户去购买域名, 下面就定义<code>BuyName</code>消息</p><h2 id="Buy-Name"><a href="#Buy-Name" class="headerlink" title="Buy Name"></a>Buy Name</h2><h3 id="MsgBuyName"><a href="#MsgBuyName" class="headerlink" title="MsgBuyName"></a>MsgBuyName</h3><p><code>./x/nameservice/types/MsgBuyName.go</code>很类似于setName</p><p>We can replace the file <code>MsgCreateWhois.go</code>, as these two files are similar in nature, and we won’t be using <code>MsgCreateWhois</code>.</p><p><code>mv x/nameservice/types/MsgCreateWhois.go x/nameservice/types/MsgBuyName.go</code></p><p>Replace <code>handlerMsgCreateWhois</code> by <code>handlerMsgBuyName</code>:</p><p><code>mv x/nameservice/handlerMsgCreateWhois.go x/nameservice/handlerMsgBuyName.go</code></p><p><strong>MsgBuyName.go:</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Originally, this file was named MsgCreateWhois, and has been modified using search-and-replace to our Msg needs.</span></span><br><span class="line"><span class="comment">// 根据MsgCreateWhois文件改写</span></span><br><span class="line"><span class="comment">// MsgBuyName defines the BuyName message</span></span><br><span class="line"><span class="keyword">type</span> MsgBuyName <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span>         <span class="string">`json:"name"`</span><span class="comment">// 想购买的域名</span></span><br><span class="line">Bid   sdk.Coins      <span class="string">`json:"bid"`</span><span class="comment">// 出价</span></span><br><span class="line">Buyer sdk.AccAddress <span class="string">`json:"buyer"`</span><span class="comment">// 购买者</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewMsgBuyName is the constructor function for MsgBuyName</span></span><br><span class="line"><span class="comment">// MsgBuyName构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMsgBuyName</span><span class="params">(name <span class="keyword">string</span>, bid sdk.Coins, buyer sdk.AccAddress)</span> <span class="title">MsgBuyName</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> MsgBuyName&#123;</span><br><span class="line">Name:  name,</span><br><span class="line">Bid:   bid,</span><br><span class="line">Buyer: buyer,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Route should return the name of the module</span></span><br><span class="line"><span class="comment">// 路由返回模块名nameService</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgBuyName)</span> <span class="title">Route</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> RouterKey &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type should return the action</span></span><br><span class="line"><span class="comment">// 操作类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgBuyName)</span> <span class="title">Type</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> <span class="string">"buy_name"</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ValidateBasic runs stateless checks on the message</span></span><br><span class="line"><span class="comment">// 基本的检查</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgBuyName)</span> <span class="title">ValidateBasic</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> msg.Buyer.Empty() &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidAddress, msg.Buyer.String())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(msg.Name) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, <span class="string">"Name cannot be empty"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !msg.Bid.IsAllPositive() &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.ErrInsufficientFunds</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetSignBytes encodes the message for signing</span></span><br><span class="line"><span class="comment">// 返回消息的编码后格式[]byte</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgBuyName)</span> <span class="title">GetSignBytes</span><span class="params">()</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> sdk.MustSortJSON(ModuleCdc.MustMarshalJSON(msg))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetSigners defines whose signature is required</span></span><br><span class="line"><span class="comment">// 要求签名的对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgBuyName)</span> <span class="title">GetSigners</span><span class="params">()</span> []<span class="title">sdk</span>.<span class="title">AccAddress</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> []sdk.AccAddress&#123;msg.Buyer&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，更新执行由消息触发的状态转换的BuyName处理程序函数。请记住，此时消息已经运行了ValidateBasic函数，因此已经进行了一些输入验证。但是，==ValidateBasic不能查询应用程序状态。<strong>依赖于网络状态(如账户余额)的验证</strong>逻辑应该在handler函数中执行==</p><p>Let’s rename <code>handlerMsgCreateWhois.go</code> to <code>handlerMsgBuyName.go</code></p><p><code>mv x/nameservice/handlerMsgCreateWhois.go x/nameservice/handlerMsgBuyName.go</code></p><p>Go to <code>./x/nameservice/handlerMsgBuyName.go</code></p><p><strong><code>handlerMsgBuyName.go</code>:</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nameservice</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line"></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/keeper"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handle a message to buy name</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleMsgBuyName</span><span class="params">(ctx sdk.Context, k keeper.Keeper, msg types.MsgBuyName)</span> <span class="params">(*sdk.Result, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// Checks if the the bid price is greater than the price paid by the current owner</span></span><br><span class="line"><span class="comment">// 1.检查当前出价是否高于目前的价格, 注意Msg本身的检查只是简单的检查，这里需要额外数据的检查就只能在Handler中做</span></span><br><span class="line"><span class="comment">// GetPrice返回coin类型对象，其IsAllGT函数是比较大小（逐个字母比较，全部大于返回true）</span></span><br><span class="line"><span class="comment">// 当需要的价格 &gt; bid那么就返回错误</span></span><br><span class="line"><span class="keyword">if</span> k.GetPrice(ctx, msg.Name).IsAllGT(msg.Bid) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrInsufficientFunds, <span class="string">"Bid not high enough"</span>) <span class="comment">// If not, throw an error</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.检查当前域名是否已经有拥有者了</span></span><br><span class="line"><span class="comment">// 不论是已拥有或者没有人拥有， 如果购买者支付出价出现错误，那么都会造成资金的回滚</span></span><br><span class="line"><span class="keyword">if</span> k.HasCreator(ctx, msg.Name) &#123;</span><br><span class="line"><span class="comment">// 如果已经是别人拥有的，那么购买者支付对应的出价给域名原来的拥有者</span></span><br><span class="line"><span class="comment">// coin转移方向： msg.Buyer =&gt; Creator</span></span><br><span class="line"><span class="comment">// 金额： Bid</span></span><br><span class="line">err := k.CoinKeeper.SendCoins(ctx, msg.Buyer, k.GetCreator(ctx, msg.Name), msg.Bid)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 如果没有，那么从购买者处减去出价金额, 发送给一个不可回收的地址（burns）</span></span><br><span class="line">_, err := k.CoinKeeper.SubtractCoins(ctx, msg.Buyer, msg.Bid) <span class="comment">// If so, deduct the Bid amount from the sender</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 分别为域名设置新的所有者与金额</span></span><br><span class="line">k.SetCreator(ctx, msg.Name, msg.Buyer)</span><br><span class="line">k.SetPrice(ctx, msg.Name, msg.Bid)</span><br><span class="line"><span class="keyword">return</span> &amp;sdk.Result&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个处理程序使用来自<code>coinKeeper</code>的函数来执行货币操作。如果您的应用程序正在执行货币操作，您可能需要查看此模块的 <a href="https://godoc.org/github.com/cosmos/cosmos-sdk/x/bank#BaseKeeper" target="_blank" rel="noopener">godocs for this module (opens new window)</a>，看看它公开了哪些函数。</p><h2 id="Delete-Name"><a href="#Delete-Name" class="headerlink" title="Delete Name"></a>Delete Name</h2><h3 id="MsgDeleteName"><a href="#MsgDeleteName" class="headerlink" title="MsgDeleteName"></a>MsgDeleteName</h3><p>Now it is time to update the <code>Msg</code> for deleting names. Let’s rename our <code>MsgDeleteWhois.go</code> to <code>MsgDeleteName.go</code></p><p><code>mv x/nameservice/types/MsgDeleteWhois.go x/nameservice/types/MsgDeleteName.go</code></p><p>add it to the <code>./x/nameservice/types/MsgDeleteName.go</code> file.</p><p>Replace <code>MsgDeleteWhois</code> by <code>MsgDeleteName</code>:</p><p><code>mv x/nameservice/types/MsgDeleteWhois.go x/nameservice/types/MsgDeleteName.go</code></p><p><strong><code>MsgDeleteName.go</code>:</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ sdk.Msg = &amp;MsgDeleteName&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MsgDeleteName <span class="keyword">struct</span> &#123;</span><br><span class="line">ID      <span class="keyword">string</span>         <span class="string">`json:"id" yaml:"id"`</span></span><br><span class="line">Creator sdk.AccAddress <span class="string">`json:"creator" yaml:"creator"`</span><span class="comment">// 创建者</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMsgDeleteName</span><span class="params">(id <span class="keyword">string</span>, creator sdk.AccAddress)</span> <span class="title">MsgDeleteName</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> MsgDeleteName&#123;</span><br><span class="line">ID:      id,</span><br><span class="line">Creator: creator,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgDeleteName)</span> <span class="title">Route</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> RouterKey</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgDeleteName)</span> <span class="title">Type</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"DeleteName"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgDeleteName)</span> <span class="title">GetSigners</span><span class="params">()</span> []<span class="title">sdk</span>.<span class="title">AccAddress</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> []sdk.AccAddress&#123;msg.Creator&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgDeleteName)</span> <span class="title">GetSignBytes</span><span class="params">()</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">bz := ModuleCdc.MustMarshalJSON(msg)</span><br><span class="line"><span class="keyword">return</span> sdk.MustSortJSON(bz)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgDeleteName)</span> <span class="title">ValidateBasic</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> msg.Creator.Empty() &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidAddress, <span class="string">"creator can't be empty"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Replace <code>handlerMsgDeleteWhois</code> by <code>handlerMsgDeleteName</code>:</p><p><code>mv x/nameservice/handlerMsgDeleteWhois.go x/nameservice/handlerMsgDeleteName.go</code></p><p><strong><code>handlerMsgDeleteName.go</code>:</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nameservice</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/keeper"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handle a message to delete name</span></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleMsgDeleteName</span><span class="params">(ctx sdk.Context, k keeper.Keeper, msg types.MsgDeleteName)</span> <span class="params">(*sdk.Result, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 使用id检查是否存在该域名</span></span><br><span class="line"><span class="keyword">if</span> !k.WhoisExists(ctx, msg.ID) &#123;</span><br><span class="line"><span class="comment">// replace with ErrKeyNotFound for 0.39+</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, msg.ID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检查是否是本人</span></span><br><span class="line"><span class="keyword">if</span> !msg.Creator.Equals(k.GetWhoisOwner(ctx, msg.ID)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrUnauthorized, <span class="string">"Incorrect Owner"</span>)</span><br><span class="line">&#125;</span><br><span class="line">k.DeleteWhois(ctx, msg.ID)</span><br><span class="line"><span class="keyword">return</span> &amp;sdk.Result&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Afterwards, we’ll follow the same steps as earlier and add the <code>MsgDeleteName</code>handler to the module router in <code>./x/nameservice/handler.go</code>:</p><p>同样的要在Handler.go函数中注册这个子函数(在上面已经全部注册完毕了)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nameservice</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/keeper"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewHandler returns a handler for "nameservice" type messages.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewHandler</span><span class="params">(keeper keeper.Keeper)</span> <span class="title">sdk</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx sdk.Context, msg sdk.Msg)</span> <span class="params">(*sdk.Result, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> msg := msg.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="comment">// 添加操作类型</span></span><br><span class="line"><span class="keyword">case</span> types.MsgSetName:</span><br><span class="line"><span class="keyword">return</span> handleMsgSetName(ctx, keeper, msg)</span><br><span class="line"><span class="keyword">case</span> types.MsgBuyName:</span><br><span class="line"><span class="keyword">return</span> handleMsgBuyName(ctx, keeper, msg)</span><br><span class="line"><span class="keyword">case</span> types.MsgDeleteName:</span><br><span class="line"><span class="keyword">return</span> handleMsgDeleteName(ctx, keeper, msg)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, fmt.Sprintf(<span class="string">"Unrecognized nameservice Msg type: %v"</span>, msg.Type()))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-Queriers"><a href="#10-Queriers" class="headerlink" title="10.Queriers"></a>10.Queriers</h1><h2 id="Query-Types"><a href="#Query-Types" class="headerlink" title="Query Types"></a>Query Types</h2><p>Start by navigating to <code>./x/nameservice/types/querier.go</code> file. This is where you will define your querier types</p><p>查询模块.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"strings"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询常量，对应客户端输入的参数</span></span><br><span class="line"><span class="keyword">const</span> QueryListWhois = <span class="string">"list-whois"</span></span><br><span class="line"><span class="keyword">const</span> QueryGetWhois = <span class="string">"get-whois"</span></span><br><span class="line"><span class="keyword">const</span> QueryResolveName = <span class="string">"resolve-name"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// QueryResResolve Queries Result Payload for a resolve query</span></span><br><span class="line"><span class="comment">// 查询域名解析结果结构体函数</span></span><br><span class="line"><span class="comment">// 因为MarshalJSONIndent解析需要一个结构体， 所以创建了这样的QueryResResolve结构体以赋值</span></span><br><span class="line"><span class="keyword">type</span> QueryResResolve <span class="keyword">struct</span> &#123;</span><br><span class="line">Value <span class="keyword">string</span> <span class="string">`json:"value"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// implement fmt.Stringer</span></span><br><span class="line"><span class="comment">// 重写string方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r QueryResResolve)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.Value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// QueryResNames Queries Result Payload for a names query</span></span><br><span class="line"><span class="comment">// 查询域名群集合的解析结果，返回结果的切片</span></span><br><span class="line"><span class="keyword">type</span> QueryResNames []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// implement fmt.Stringer</span></span><br><span class="line"><span class="comment">// 格式化输出解析结果切片的数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n QueryResNames)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> strings.Join(n[:], <span class="string">"\n"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Querier"><a href="#Querier" class="headerlink" title="Querier"></a>Querier</h2><p>Now you can navigate to the <code>./x/nameservice/keeper/querier.go</code> file.</p><p>在这里可以定义<strong>针对应用程序状态用户可以进行哪些查询</strong></p><p>Your <code>nameservice</code> module will expose three queries:</p><ul><li><p><code>resolveName</code>: This takes a <code>name</code> and returns the <code>value</code> that is stored by the <code>nameservice</code>. This is similar to a DNS query.</p><p><strong>解析值</strong></p></li><li><p><code>getWhois</code>: This takes a <code>name</code> and returns the <code>price</code>, <code>value</code>, and <code>owner</code> of the name. Used for figuring out how much names cost when you want to buy them.</p><p><strong>查询域名的所有相关信息</strong></p></li><li><p><code>listWhois</code> : This does not take a parameter, it returns all the names stored in the <code>nameservice</code> store.</p><p><strong>查询所有的已存在域名</strong></p></li></ul><p>你需要修改switch语句的用例(它们不能从query .Route()函数中取出):</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> keeper</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 1</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line"></span><br><span class="line">abci <span class="string">"github.com/tendermint/tendermint/abci/types"</span></span><br><span class="line"></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewQuerier creates a new querier for nameservice clients.</span></span><br><span class="line"><span class="comment">// 创建了一个keeper层的查询对象给客户端</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewQuerier</span><span class="params">(k Keeper)</span> <span class="title">sdk</span>.<span class="title">Querier</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx sdk.Context, path []<span class="keyword">string</span>, req abci.RequestQuery)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> path[<span class="number">0</span>] &#123; <span class="comment">// 根据客户端输入的路径的第一个变量，确定查询的类型</span></span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 2</span></span><br><span class="line"><span class="comment">// 客户端输入的内容在types/querier.go中定义了常量作为路由</span></span><br><span class="line"><span class="keyword">case</span> types.QueryResolveName:</span><br><span class="line"><span class="keyword">return</span> resolveName(ctx, path[<span class="number">1</span>:], k)</span><br><span class="line"><span class="keyword">case</span> types.QueryListWhois:</span><br><span class="line"><span class="keyword">return</span> listWhois(ctx, k)</span><br><span class="line"><span class="keyword">case</span> types.QueryGetWhois:</span><br><span class="line"><span class="keyword">return</span> getWhois(ctx, path[<span class="number">1</span>:], k)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, <span class="string">"unknown nameservice query endpoint"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now that the router is defined, we can verify that our querier functions in <code>./x/nameservice/keeper/whois.go</code> looks like this:</p><p><strong>现在我们可以在上述文件中找到对应路由的实现:</strong></p><p><strong>之前在<code>./x/nameservice/keeper/whois.go</code>中可以找到的Functions used by querier部分(不是keeper方法的函数都是querier)</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Functions used by querier</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">listWhois</span><span class="params">(ctx sdk.Context, k Keeper)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> whoisList []types.Whois</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line">iterator := sdk.KVStorePrefixIterator(store, []<span class="keyword">byte</span>(types.WhoisPrefix))</span><br><span class="line"><span class="keyword">for</span> ; iterator.Valid(); iterator.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> whois types.Whois</span><br><span class="line">k.cdc.MustUnmarshalBinaryLengthPrefixed(store.Get(iterator.Key()), &amp;whois)</span><br><span class="line">whoisList = <span class="built_in">append</span>(whoisList, whois)</span><br><span class="line">&#125;</span><br><span class="line">res := codec.MustMarshalJSONIndent(k.cdc, whoisList)</span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getWhois</span><span class="params">(ctx sdk.Context, path []<span class="keyword">string</span>, k Keeper)</span> <span class="params">(res []<span class="keyword">byte</span>, sdkError error)</span></span> &#123;</span><br><span class="line">key := path[<span class="number">0</span>]</span><br><span class="line">whois, err := k.GetWhois(ctx, key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res, err = codec.MarshalJSONIndent(k.cdc, whois)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrJSONMarshal, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Resolves a name, returns the value</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">resolveName</span><span class="params">(ctx sdk.Context, path []<span class="keyword">string</span>, keeper Keeper)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">value := keeper.ResolveName(ctx, path[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> value == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">byte</span>&#123;&#125;, sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, <span class="string">"could not resolve name"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res, err := codec.MarshalJSONIndent(keeper.cdc, types.QueryResResolve&#123;Value: value&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrJSONMarshal, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that <code>listWhois</code> and <code>getWhois</code> should already be defined, so you would only need to add <code>resolveName</code>.</p><ul><li><p>在这里，你的Keeper的getter和setter被大量使用。当构建任何其他使用此模块的应用程序时，您可能需要返回并定义更多的getter /setter来访问您需要的状态片段。</p></li><li><p><strong>按照约定，==每个输出类型都应该是JSON可编组的和字符串可编的==(实现了Golang fmt接口)</strong>。<strong>返回的字节应该是输出结果的JSON编码。</strong></p></li><li><p>因此，对于resolve的输出类型，我们<strong>将解析字符串包装在一个名为QueryResResolve的结构中，该结构既可用于JSON编组，又有一个. string()方法。</strong></p></li><li><p>对于Whois的输出，<u>正常的Whois结构已经是可以JSON编组的，但是我们需要在其上添加一个. string()方法。</u></p><ul><li>对于names查询的输出也是一样的，<u>[]字符串已经是本机可编组的，但是我们想在其上添加一个. string()方法</u>。</li></ul></li><li><p>类型Whois没有在<code>./x/nameservice/types/</code>查询器中定义。因为它是在<code>./x/nameservice/types/TypeWhois. go</code>文件中创建的.go文件。</p></li></ul><h1 id="11-Codec-File"><a href="#11-Codec-File" class="headerlink" title="11.Codec File"></a>11.Codec File</h1><p>there is a bit of code that needs to be placed in <code>./x/nameservice/types/codec.go</code>. Any interface you create and any struct that implements an interface needs to be declared in the <code>RegisterCodec</code> function</p><p>一系列代码需要修改,许多实现的接口等函数和结构体都需要在RegisterCodec函数中申明</p><p> In this module the three <code>Msg</code>implementations (<code>SetName</code>, <code>BuyName</code> and <code>DeleteName</code>) have been registered, but your <code>Whois</code> query return type needs to be registered.</p><p>在此案例中,我们创建了三个Msg结构的实现:(<code>SetName</code>, <code>BuyName</code> and <code>DeleteName</code>) ,这些都需要被注册</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// RegisterCodec registers concrete types on codec</span></span><br><span class="line"><span class="comment">// codec上注册具体的类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterCodec</span><span class="params">(cdc *codec.Codec)</span></span> &#123;</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 1</span></span><br><span class="line">cdc.RegisterConcrete(MsgBuyName&#123;&#125;, <span class="string">"nameservice/BuyName"</span>, <span class="literal">nil</span>)</span><br><span class="line">cdc.RegisterConcrete(MsgSetName&#123;&#125;, <span class="string">"nameservice/SetName"</span>, <span class="literal">nil</span>)</span><br><span class="line">cdc.RegisterConcrete(MsgDeleteName&#123;&#125;, <span class="string">"nameservice/DeleteName"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ModuleCdc defines the module codec</span></span><br><span class="line"><span class="keyword">var</span> ModuleCdc *codec.Codec</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建实例codec</span></span><br><span class="line">ModuleCdc = codec.New()</span><br><span class="line">RegisterCodec(ModuleCdc)</span><br><span class="line"><span class="comment">// Register the go-crypto to the codec</span></span><br><span class="line"><span class="comment">// 注册加密函数信息</span></span><br><span class="line">codec.RegisterCrypto(ModuleCdc)</span><br><span class="line"><span class="comment">// 封装</span></span><br><span class="line">ModuleCdc.Seal()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This function should be used to register concrete types that will appear in</span></span><br><span class="line"><span class="comment">// interface fields/elements to be encoded/decoded by go-amino.</span></span><br><span class="line"><span class="comment">// Usage:</span></span><br><span class="line"><span class="comment">// `amino.RegisterConcrete(MyStruct1&#123;&#125;, "com.tendermint/MyStruct1", nil)`</span></span><br><span class="line"><span class="comment">//这个函数应该用来注册将出现在go-amino编码/解码的接口字段/元素中的具体类型。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cdc *Codec)</span> <span class="title">RegisterConcrete</span><span class="params">(o <span class="keyword">interface</span>&#123;&#125;, name <span class="keyword">string</span>, copts *ConcreteOptions)</span></span> &#123;...&#125;</span><br></pre></td></tr></table></figure><h1 id="12-Nameservice-Module-CLI"><a href="#12-Nameservice-Module-CLI" class="headerlink" title="12.Nameservice Module CLI"></a>12.Nameservice Module CLI</h1><p>cosmos sdk使用了 <a href="https://github.com/spf13/cobra" target="_blank" rel="noopener"><code>cobra</code> (opens new window)</a>客户端工具</p><p>This library makes it easy for each module to expose its own commands. The <code>type</code> command should have scaffolded the following files for us -</p><ul><li><code>./x/nameservice/client/cli/queryWhois.go</code></li><li><code>./x/nameservice/client/cli/txWhois.go</code></li></ul><h2 id="Queries"><a href="#Queries" class="headerlink" title="Queries"></a>Queries</h2><p>Start in <code>queryWhois.go</code>. Here, define <code>cobra.Command</code>s for each of your modules <code>Queriers</code> (<code>resolve</code>, and <code>whois</code>):</p><p>实现查询的客户端命令逻辑:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cli</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/context"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line"><span class="string">"github.com/spf13/cobra"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有的whois</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdListWhois</span><span class="params">(queryRoute <span class="keyword">string</span>, cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"list-whois"</span>,<span class="comment">// 使用的命令</span></span><br><span class="line">Short: <span class="string">"list all whois"</span>,<span class="comment">// 介绍</span></span><br><span class="line"><span class="comment">// 运行的内容</span></span><br><span class="line">RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line">res, _, err := cliCtx.QueryWithData(fmt.Sprintf(<span class="string">"custom/%s/%s"</span>, queryRoute, types.QueryListWhois), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"could not list Whois\n%s\n"</span>, err.Error())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> out []types.Whois</span><br><span class="line"><span class="comment">// 解码结果放到out中</span></span><br><span class="line">cdc.MustUnmarshalJSON(res, &amp;out)</span><br><span class="line"><span class="keyword">return</span> cliCtx.PrintOutput(out)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一个whois</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdGetWhois</span><span class="params">(queryRoute <span class="keyword">string</span>, cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"get-whois [key]"</span>,</span><br><span class="line">Short: <span class="string">"Query a whois by key"</span>,</span><br><span class="line">Args:  cobra.ExactArgs(<span class="number">1</span>),<span class="comment">// 参数对应key</span></span><br><span class="line">RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line">key := args[<span class="number">0</span>]<span class="comment">// 获取命令中的key</span></span><br><span class="line">res, _, err := cliCtx.QueryWithData(fmt.Sprintf(<span class="string">"custom/%s/%s/%s"</span>, queryRoute, types.QueryGetWhois, key), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"could not resolve whois %s \n%s\n"</span>, key, err.Error())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> out types.Whois</span><br><span class="line">cdc.MustUnmarshalJSON(res, &amp;out)</span><br><span class="line"><span class="keyword">return</span> cliCtx.PrintOutput(out)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetCmdResolveName queries information about a name</span></span><br><span class="line"><span class="comment">// 查询域名的解析值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdResolveName</span><span class="params">(queryRoute <span class="keyword">string</span>, cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"resolve [name]"</span>,</span><br><span class="line">Short: <span class="string">"resolve name"</span>,</span><br><span class="line">Args:  cobra.ExactArgs(<span class="number">1</span>),</span><br><span class="line">RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line">name := args[<span class="number">0</span>]</span><br><span class="line">res, _, err := cliCtx.QueryWithData(fmt.Sprintf(<span class="string">"custom/%s/%s/%s"</span>, queryRoute, types.QueryResolveName, name), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"could not resolve name - %s \n"</span>, name)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> out types.QueryResResolve</span><br><span class="line">cdc.MustUnmarshalJSON(res, &amp;out)</span><br><span class="line"><span class="keyword">return</span> cliCtx.PrintOutput(out)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>cli创建了一个新的<code>CLIContext</code>, 它携带了有关cli交互所需要的用户输入和应用程序配置的数据</p></li><li><p><code>cliCtx.QueryWithdata()</code>函数所需的路径直接映射到查询路由器中的名称。</p><ul><li>路径的第一部分用于区分SDK应用程序可能使用的查询类型:<code>custom</code> is for <code>Queriers</code>.</li><li>第二个部分是要查询路由的模块的名字</li><li>最后，模块中将有一个特定的查询器，该查询器将被调用</li><li>在本例中，第四部分是查询。这是因为查询参数是一个简单的字符串。要启用更复杂的查询输入，您需要使用querywithdata()函数的第二个参数来传递数据。有关此示例，请参阅Staking模块中的查询器.</li></ul></li></ul><p>在<code>cli/query.go</code>中添加子命令:</p><p>==<strong>这个文件官方没有写,但是需要改动!</strong>==</p><p> <strong>==注意一定添加<code>GetCmdResolveName(queryRoute, cdc),</code>, 不然的话使用命令行测试时resolve命令无法解析!!!==</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cli</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="comment">// "strings"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/spf13/cobra"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/flags"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// "github.com/cosmos/cosmos-sdk/client/context"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line"><span class="comment">// sdk "github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetQueryCmd returns the cli query commands for this module</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetQueryCmd</span><span class="params">(queryRoute <span class="keyword">string</span>, cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="comment">// Group nameservice queries under a subcommand</span></span><br><span class="line">nameserviceQueryCmd := &amp;cobra.Command&#123;</span><br><span class="line">Use:                        types.ModuleName,</span><br><span class="line">Short:                      fmt.Sprintf(<span class="string">"Querying commands for the %s module"</span>, types.ModuleName),</span><br><span class="line">DisableFlagParsing:         <span class="literal">true</span>,</span><br><span class="line">SuggestionsMinimumDistance: <span class="number">2</span>,</span><br><span class="line">RunE:                       client.ValidateCmd,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nameserviceQueryCmd.AddCommand(</span><br><span class="line">flags.GetCommands(</span><br><span class="line">      <span class="comment">// this line is used by starport scaffolding # 1</span></span><br><span class="line">GetCmdListWhois(queryRoute, cdc),</span><br><span class="line">GetCmdGetWhois(queryRoute, cdc),</span><br><span class="line">      <span class="comment">// 注意一定添加这个命令, 不然的话使用命令行测试时resolve命令无法解析!!!</span></span><br><span class="line">GetCmdResolveName(queryRoute, cdc),</span><br><span class="line">)...,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">return</span> nameserviceQueryCmd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h2><p>实现交易命令的客户端</p><p>Now that the query interactions are defined, it is time to move on to transaction generation in <code>txWhois.go</code>:</p><p><strong>NOTE</strong>: Your application needs to import the code you just wrote. Here the import path is set to this repository (<code>github.com/cosmos/sdk-tutorials/nameservice/x/nameservice</code>). If you are following along in your own repo you will need to change the import path to reflect that (<code>github.com/{ .Username }/{ .Project.Repo }/x/nameservice</code>). </p><p>如果你用的是自己的仓库记得改路径</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cli</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/spf13/cobra"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/context"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/auth"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/auth/client/utils"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 购买新域名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdBuyName</span><span class="params">(cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"buy-name [name] [price]"</span>,</span><br><span class="line">Short: <span class="string">"Buys a new name"</span>,</span><br><span class="line">Args:  cobra.ExactArgs(<span class="number">2</span>),</span><br><span class="line">RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">argsName := <span class="keyword">string</span>(args[<span class="number">0</span>])<span class="comment">//获取购买的名字name</span></span><br><span class="line"></span><br><span class="line">cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line"><span class="comment">// 获取标准读入</span></span><br><span class="line">inBuf := bufio.NewReader(cmd.InOrStdin())</span><br><span class="line"><span class="comment">// 创建交易创建器</span></span><br><span class="line">txBldr := auth.NewTxBuilderFromCLI(inBuf).WithTxEncoder(utils.GetTxEncoder(cdc))</span><br><span class="line"></span><br><span class="line">coins, err := sdk.ParseCoins(args[<span class="number">1</span>])<span class="comment">//解析出价</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 构建NewMsgBuyName实例</span></span><br><span class="line">msg := types.NewMsgBuyName(argsName, coins, cliCtx.GetFromAddress())</span><br><span class="line"><span class="comment">// 做基本的验证</span></span><br><span class="line">err = msg.ValidateBasic()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生成或广播交易</span></span><br><span class="line"><span class="keyword">return</span> utils.GenerateOrBroadcastMsgs(cliCtx, txBldr, []sdk.Msg&#123;msg&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置域名解析</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdSetWhois</span><span class="params">(cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"set-name [value] [name]"</span>,</span><br><span class="line">Short: <span class="string">"Set a new name"</span>,</span><br><span class="line">Args:  cobra.ExactArgs(<span class="number">2</span>),</span><br><span class="line">RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">argsValue := args[<span class="number">0</span>]</span><br><span class="line">argsName := args[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line">inBuf := bufio.NewReader(cmd.InOrStdin())</span><br><span class="line">txBldr := auth.NewTxBuilderFromCLI(inBuf).WithTxEncoder(utils.GetTxEncoder(cdc))</span><br><span class="line">msg := types.NewMsgSetName(argsName, argsValue, cliCtx.GetFromAddress())</span><br><span class="line">err := msg.ValidateBasic()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> utils.GenerateOrBroadcastMsgs(cliCtx, txBldr, []sdk.Msg&#123;msg&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除一个域名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdDeleteWhois</span><span class="params">(cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"delete-name [id]"</span>,</span><br><span class="line">Short: <span class="string">"Delete a new name by ID"</span>,</span><br><span class="line">Args:  cobra.ExactArgs(<span class="number">1</span>),</span><br><span class="line">RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line">cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line">inBuf := bufio.NewReader(cmd.InOrStdin())</span><br><span class="line">txBldr := auth.NewTxBuilderFromCLI(inBuf).WithTxEncoder(utils.GetTxEncoder(cdc))</span><br><span class="line"></span><br><span class="line">msg := types.NewMsgDeleteName(args[<span class="number">0</span>], cliCtx.GetFromAddress())</span><br><span class="line">err := msg.ValidateBasic()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> utils.GenerateOrBroadcastMsgs(cliCtx, txBldr, []sdk.Msg&#123;msg&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We also need to add the commands to our <code>tx</code> command in</p><p><code>x/nameservice/client/cli/tx.go</code> file:</p><p><code>./x/nameservice/client/cli/tx.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cli</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/spf13/cobra"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/flags"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetTxCmd returns the transaction commands for this module</span></span><br><span class="line"><span class="comment">// 返回模块的交易命令</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetTxCmd</span><span class="params">(cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line">nameserviceTxCmd := &amp;cobra.Command&#123;</span><br><span class="line">Use:                        types.ModuleName,</span><br><span class="line">Short:                      fmt.Sprintf(<span class="string">"%s transactions subcommands"</span>, types.ModuleName),</span><br><span class="line">DisableFlagParsing:         <span class="literal">true</span>,</span><br><span class="line">SuggestionsMinimumDistance: <span class="number">2</span>,</span><br><span class="line">RunE:                       client.ValidateCmd,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把txWhois.go中的命令都添加</span></span><br><span class="line">nameserviceTxCmd.AddCommand(flags.PostCommands(</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding</span></span><br><span class="line">GetCmdBuyName(cdc),</span><br><span class="line">GetCmdSetWhois(cdc),</span><br><span class="line">GetCmdDeleteWhois(cdc),</span><br><span class="line">)...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> nameserviceTxCmd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用的是authcmd包。它提供对CLI控制的帐户的访问，并方便签名。</p><h1 id="13-NameService-Module-Rest-Interface"><a href="#13-NameService-Module-Rest-Interface" class="headerlink" title="13.NameService Module Rest Interface"></a>13.NameService Module Rest Interface</h1><p>你的模型也可以使用REST接口实现命令行客户端</p><p>To get started navigate to <code>./x/nameservice/client/rest/rest.go</code> where HTTP handlers are held.</p><h2 id="RegisterRoutes"><a href="#RegisterRoutes" class="headerlink" title="RegisterRoutes"></a>RegisterRoutes</h2><p>首先定义REST接口在<code>RegisterRoutes</code>函数中</p><p>使路由全部以您的模块名称开头，以防止名称空间与其他模块的路由冲突</p><p><strong><code>./x/nameservice/client/rest/rest.go</code>：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gorilla/mux"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/context"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// RegisterRoutes registers nameservice-related REST handlers to a router</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterRoutes</span><span class="params">(cliCtx context.CLIContext, r *mux.Router)</span></span> &#123;</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding</span></span><br><span class="line">r.HandleFunc(<span class="string">"/nameservice/whois"</span>, buyNameHandler(cliCtx)).Methods(<span class="string">"POST"</span>)</span><br><span class="line">r.HandleFunc(<span class="string">"/nameservice/whois"</span>, listWhoisHandler(cliCtx, <span class="string">"nameservice"</span>)).Methods(<span class="string">"GET"</span>)</span><br><span class="line">r.HandleFunc(<span class="string">"/nameservice/whois/&#123;key&#125;"</span>, getWhoisHandler(cliCtx, <span class="string">"nameservice"</span>)).Methods(<span class="string">"GET"</span>)</span><br><span class="line">r.HandleFunc(<span class="string">"/nameservice/whois/&#123;key&#125;/resolve"</span>, resolveNameHandler(cliCtx, <span class="string">"nameservice"</span>)).Methods(<span class="string">"GET"</span>)</span><br><span class="line">r.HandleFunc(<span class="string">"/nameservice/whois"</span>, setWhoisHandler(cliCtx)).Methods(<span class="string">"PUT"</span>)</span><br><span class="line">r.HandleFunc(<span class="string">"/nameservice/whois"</span>, deleteWhoisHandler(cliCtx)).Methods(<span class="string">"DELETE"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Query-Handlers"><a href="#Query-Handlers" class="headerlink" title="Query Handlers"></a>Query Handlers</h2><p>Next, its time to define the handlers mentioned above in <code>queryWhois.go</code>. These will be very similar to the CLI methods defined earlier. <code>listWhoisHandler</code> and <code>getWhoisHandler</code> should already be defined, and you can use <code>getWhois</code> as a template to write the <code>resolveNameHandler</code> function.</p><p><strong>查询接口函数的编写(类似于cli的编写): <code>queryWhois.go</code></strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/context"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/types/rest"</span></span><br><span class="line"><span class="string">"github.com/gorilla/mux"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有的whois</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">listWhoisHandler</span><span class="params">(cliCtx context.CLIContext, storeName <span class="keyword">string</span>)</span> <span class="title">http</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">res, _, err := cliCtx.QueryWithData(fmt.Sprintf(<span class="string">"custom/%s/%s"</span>, storeName, types.QueryListWhois), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusNotFound, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">rest.PostProcessResponse(w, cliCtx, res)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一个域名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getWhoisHandler</span><span class="params">(cliCtx context.CLIContext, storeName <span class="keyword">string</span>)</span> <span class="title">http</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取参数</span></span><br><span class="line">vars := mux.Vars(r)</span><br><span class="line">key := vars[<span class="string">"key"</span>]</span><br><span class="line"></span><br><span class="line">res, _, err := cliCtx.QueryWithData(fmt.Sprintf(<span class="string">"custom/%s/%s/%s"</span>, storeName, types.QueryGetWhois, key), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusNotFound, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">rest.PostProcessResponse(w, cliCtx, res)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析域名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">resolveNameHandler</span><span class="params">(cliCtx context.CLIContext, storeName <span class="keyword">string</span>)</span> <span class="title">http</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">vars := mux.Vars(r)</span><br><span class="line">paramType := vars[<span class="string">"key"</span>]</span><br><span class="line"></span><br><span class="line">res, _, err := cliCtx.QueryWithData(fmt.Sprintf(<span class="string">"custom/%s/%s/%s"</span>, storeName, types.QueryResolveName, paramType), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusNotFound, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rest.PostProcessResponse(w, cliCtx, res)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notes on the above code:</p><ul><li>Notice we are using the same <code>cliCtx.QueryWithData</code> function to fetch the data</li><li>These functions are almost the same as the corresponding CLI functionality</li></ul><p>同样使用了QueryWithData函数,编写类似于cli</p><h2 id="Tx-Handlers"><a href="#Tx-Handlers" class="headerlink" title="Tx Handlers"></a>Tx Handlers</h2><p>Now define the <code>buyName</code>, <code>setName</code> and <code>deleteName</code> transaction routes in <code>txWhois.go</code> - you can replace the existing handlers that were generated by <code>starport type</code>. </p><p>请注意，这些实际上并没有执行购买，设置和删除名称的交易，因为在一般情况下，这需要某种形式的身份验证。取而代之的是，这些端点构建并返回每个特定的交易，然后可以以安全的方式对其进行签名，然后使用诸如<code>/txs</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/context"</span></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/types/rest"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/auth/client/utils"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> buyNameRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">BaseReq rest.BaseReq <span class="string">`json:"base_req"`</span><span class="comment">// 包含了创建交易的基本的请求字段</span></span><br><span class="line">Buyer   <span class="keyword">string</span>       <span class="string">`json:"buyer"`</span></span><br><span class="line">Name    <span class="keyword">string</span>       <span class="string">`json:"name"`</span></span><br><span class="line">Price   <span class="keyword">string</span>       <span class="string">`json:"price"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 购买域名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">buyNameHandler</span><span class="params">(cliCtx context.CLIContext)</span> <span class="title">http</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> req buyNameRequest</span><br><span class="line"><span class="comment">// 读取请求</span></span><br><span class="line"><span class="keyword">if</span> !rest.ReadRESTReq(w, r, cliCtx.Codec, &amp;req) &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusBadRequest, <span class="string">"failed to parse request"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">baseReq := req.BaseReq.Sanitize()</span><br><span class="line"><span class="comment">// 基本的验证</span></span><br><span class="line"><span class="keyword">if</span> !baseReq.ValidateBasic(w) &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// AccAddressFromBech32转换string为32位地址的方法</span></span><br><span class="line">addr, err := sdk.AccAddressFromBech32(req.Buyer)</span><br><span class="line">fmt.Println(addr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 解析金额</span></span><br><span class="line"><span class="comment">// ParseCoins 将字符串转为coin</span></span><br><span class="line">coins, err := sdk.ParseCoins(req.Price)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建NewMsgBuyName对象</span></span><br><span class="line">msg := types.NewMsgBuyName(req.Name, coins, addr)</span><br><span class="line"><span class="comment">// 简单的验证</span></span><br><span class="line">err = msg.ValidateBasic()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回响应</span></span><br><span class="line">utils.WriteGenerateStdTxResponse(w, cliCtx, baseReq, []sdk.Msg&#123;msg&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> setWhoisRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">BaseReq rest.BaseReq <span class="string">`json:"base_req"`</span></span><br><span class="line">Name    <span class="keyword">string</span>       <span class="string">`json:"name"`</span></span><br><span class="line">Value   <span class="keyword">string</span>       <span class="string">`json:"value"`</span></span><br><span class="line">Creator <span class="keyword">string</span>       <span class="string">`json:"creator"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置解析值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setWhoisHandler</span><span class="params">(cliCtx context.CLIContext)</span> <span class="title">http</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> req setWhoisRequest</span><br><span class="line"><span class="keyword">if</span> !rest.ReadRESTReq(w, r, cliCtx.Codec, &amp;req) &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusBadRequest, <span class="string">"failed to parse request"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">baseReq := req.BaseReq.Sanitize()</span><br><span class="line"><span class="keyword">if</span> !baseReq.ValidateBasic(w) &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">addr, err := sdk.AccAddressFromBech32(req.Creator)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">msg := types.NewMsgSetName(req.Name, req.Value, addr)</span><br><span class="line"></span><br><span class="line">err = msg.ValidateBasic()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">utils.WriteGenerateStdTxResponse(w, cliCtx, baseReq, []sdk.Msg&#123;msg&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> deleteWhoisRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">BaseReq rest.BaseReq <span class="string">`json:"base_req"`</span></span><br><span class="line">Owner   <span class="keyword">string</span>       <span class="string">`json:"owner"`</span></span><br><span class="line">Name    <span class="keyword">string</span>       <span class="string">`json:"name"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除消息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteWhoisHandler</span><span class="params">(cliCtx context.CLIContext)</span> <span class="title">http</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> req deleteWhoisRequest</span><br><span class="line"><span class="keyword">if</span> !rest.ReadRESTReq(w, r, cliCtx.Codec, &amp;req) &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusBadRequest, <span class="string">"failed to parse request"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">baseReq := req.BaseReq.Sanitize()</span><br><span class="line"><span class="keyword">if</span> !baseReq.ValidateBasic(w) &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">addr, err := sdk.AccAddressFromBech32(req.Owner)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">msg := types.NewMsgDeleteName(req.Name, addr)</span><br><span class="line"></span><br><span class="line">err = msg.ValidateBasic()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">utils.WriteGenerateStdTxResponse(w, cliCtx, baseReq, []sdk.Msg&#123;msg&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点:</p><ul><li><p><a href="https://godoc.org/github.com/cosmos/cosmos-sdk/client/utils#BaseReq" target="_blank" rel="noopener"><code>BaseReq</code> </a>包含了创建交易的基本的请求字段 (which key to use, how to decode it, which chain you are on, etc…)并且设计成嵌入</p></li><li><p><code>baseReq.ValidateBasic</code> handles setting the response code for you and therefore you don’t need to worry about handling errors or successes when using those functions.</p><p><strong><code>baseReq.ValidateBasic</code>为你设置了响应代码</strong></p></li></ul><h1 id="14-AppModule-Interface"><a href="#14-AppModule-Interface" class="headerlink" title="14.AppModule Interface"></a>14.AppModule Interface</h1><p>The Cosmos SDK provides a standard interface for modules. This <a href="https://github.com/cosmos/cosmos-sdk/blob/master/types/module.go" target="_blank" rel="noopener"><code>AppModule</code> (opens new window)</a>interface requires modules to provide a set of methods used by the <code>ModuleBasicsManager</code> to incorporate them into your application.</p><p>We should already have a <code>module.go</code> file in <code>./nameservice</code>, and we don’t need to change anything, but it should look like this.</p><p>Cosmos SDK为模块提供了一个标准接口。这个AppModule接口要求模块提供一组ModuleBasicsManager使用的方法，以便将它们合并到你的应用程序中。</p><p>我们应该已经有一个模块了。进入<code>./nameservice</code>文件，我们不需要修改任何东西，但它应该是这样的。</p><p><strong><code>x/nameservice/module.go</code>:</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nameservice</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/gorilla/mux"</span></span><br><span class="line"><span class="string">"github.com/spf13/cobra"</span></span><br><span class="line"></span><br><span class="line">abci <span class="string">"github.com/tendermint/tendermint/abci/types"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/context"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/types/module"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/bank"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/client/cli"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/client/rest"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/keeper"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type check to ensure the interface is properly implemented</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">_ module.AppModule      = AppModule&#123;&#125;</span><br><span class="line">_ module.AppModuleBasic = AppModuleBasic&#123;&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// AppModuleBasic defines the basic application module used by the nameservice module.</span></span><br><span class="line"><span class="keyword">type</span> AppModuleBasic <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Name returns the nameservice module's name.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(AppModuleBasic)</span> <span class="title">Name</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> types.ModuleName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RegisterCodec registers the nameservice module's types for the given codec.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(AppModuleBasic)</span> <span class="title">RegisterCodec</span><span class="params">(cdc *codec.Codec)</span></span> &#123;</span><br><span class="line">types.RegisterCodec(cdc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DefaultGenesis returns default genesis state as raw bytes for the nameservice</span></span><br><span class="line"><span class="comment">// module.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(AppModuleBasic)</span> <span class="title">DefaultGenesis</span><span class="params">()</span> <span class="title">json</span>.<span class="title">RawMessage</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> types.ModuleCdc.MustMarshalJSON(types.DefaultGenesisState())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ValidateGenesis performs genesis state validation for the nameservice module.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(AppModuleBasic)</span> <span class="title">ValidateGenesis</span><span class="params">(bz json.RawMessage)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> data types.GenesisState</span><br><span class="line">err := types.ModuleCdc.UnmarshalJSON(bz, &amp;data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> types.ValidateGenesis(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RegisterRESTRoutes registers the REST routes for the nameservice module.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(AppModuleBasic)</span> <span class="title">RegisterRESTRoutes</span><span class="params">(ctx context.CLIContext, rtr *mux.Router)</span></span> &#123;</span><br><span class="line">rest.RegisterRoutes(ctx, rtr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetTxCmd returns the root tx command for the nameservice module.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(AppModuleBasic)</span> <span class="title">GetTxCmd</span><span class="params">(cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> cli.GetTxCmd(cdc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetQueryCmd returns no root query command for the nameservice module.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(AppModuleBasic)</span> <span class="title">GetQueryCmd</span><span class="params">(cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> cli.GetQueryCmd(types.StoreKey, cdc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//____________________________________________________________________________</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// AppModule implements an application module for the nameservice module.</span></span><br><span class="line"><span class="keyword">type</span> AppModule <span class="keyword">struct</span> &#123;</span><br><span class="line">AppModuleBasic</span><br><span class="line"></span><br><span class="line">keeper     keeper.Keeper</span><br><span class="line">coinKeeper bank.Keeper</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Add keepers that your application depends on</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewAppModule creates a new AppModule object</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewAppModule</span><span class="params">(k keeper.Keeper, bankKeeper bank.Keeper)</span> <span class="title">AppModule</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> AppModule&#123;</span><br><span class="line">AppModuleBasic: AppModuleBasic&#123;&#125;,</span><br><span class="line">keeper:         k,</span><br><span class="line">coinKeeper:     bankKeeper,</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Add keepers that your application depends on</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Name returns the nameservice module's name.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(AppModule)</span> <span class="title">Name</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> types.ModuleName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RegisterInvariants registers the nameservice module invariants.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(am AppModule)</span> <span class="title">RegisterInvariants</span><span class="params">(_ sdk.InvariantRegistry)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Route returns the message routing key for the nameservice module.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(AppModule)</span> <span class="title">Route</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> types.RouterKey</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewHandler returns an sdk.Handler for the nameservice module.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(am AppModule)</span> <span class="title">NewHandler</span><span class="params">()</span> <span class="title">sdk</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> NewHandler(am.keeper)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// QuerierRoute returns the nameservice module's querier route name.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(AppModule)</span> <span class="title">QuerierRoute</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> types.QuerierRoute</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewQuerierHandler returns the nameservice module sdk.Querier.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(am AppModule)</span> <span class="title">NewQuerierHandler</span><span class="params">()</span> <span class="title">sdk</span>.<span class="title">Querier</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> keeper.NewQuerier(am.keeper)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// InitGenesis performs genesis initialization for the nameservice module. It returns</span></span><br><span class="line"><span class="comment">// no validator updates.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(am AppModule)</span> <span class="title">InitGenesis</span><span class="params">(ctx sdk.Context, data json.RawMessage)</span> []<span class="title">abci</span>.<span class="title">ValidatorUpdate</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> genesisState types.GenesisState</span><br><span class="line">types.ModuleCdc.MustUnmarshalJSON(data, &amp;genesisState)</span><br><span class="line">InitGenesis(ctx, am.keeper, genesisState)</span><br><span class="line"><span class="keyword">return</span> []abci.ValidatorUpdate&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExportGenesis returns the exported genesis state as raw bytes for the nameservice</span></span><br><span class="line"><span class="comment">// module.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(am AppModule)</span> <span class="title">ExportGenesis</span><span class="params">(ctx sdk.Context)</span> <span class="title">json</span>.<span class="title">RawMessage</span></span> &#123;</span><br><span class="line">gs := ExportGenesis(ctx, am.keeper)</span><br><span class="line"><span class="keyword">return</span> types.ModuleCdc.MustMarshalJSON(gs)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BeginBlock returns the begin blocker for the nameservice module.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(am AppModule)</span> <span class="title">BeginBlock</span><span class="params">(ctx sdk.Context, req abci.RequestBeginBlock)</span></span> &#123;</span><br><span class="line">BeginBlocker(ctx, req, am.keeper)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EndBlock returns the end blocker for the nameservice module. It returns no validator</span></span><br><span class="line"><span class="comment">// updates.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(AppModule)</span> <span class="title">EndBlock</span><span class="params">(_ sdk.Context, _ abci.RequestEndBlock)</span> []<span class="title">abci</span>.<span class="title">ValidatorUpdate</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> []abci.ValidatorUpdate&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="15-Genesis"><a href="#15-Genesis" class="headerlink" title="15.Genesis"></a>15.Genesis</h1><p>AppModule接口包含了许多用于初始化和导出初始化状态的区块链函数。当启动、停止或导出链时，ModuleBasicManager在每个模块上调用这些函数。下面是一个非常基本的实现，您可以对其进行扩展。</p><p>在 <code>x/nameservice/types/genesis.go</code>。我们会定义初始状态是什么，默认的初始状态以及验证它的方法这样我们就不会遇到任何错误当我们以预先存在的状态开始链的时候。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GenesisState - all nameservice state that must be provided at genesis</span></span><br><span class="line"><span class="keyword">type</span> GenesisState <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Fill out what is needed by the module for genesis</span></span><br><span class="line">WhoisRecords []Whois <span class="string">`json:"whois_records"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewGenesisState creates a new GenesisState object</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGenesisState</span><span class="params">( /* TODO: Fill out with what is needed <span class="keyword">for</span> genesis state */ )</span> <span class="title">GenesisState</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> GenesisState&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Fill out according to your genesis state</span></span><br><span class="line">WhoisRecords: <span class="literal">nil</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DefaultGenesisState - default GenesisState used by Cosmos Hub</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DefaultGenesisState</span><span class="params">()</span> <span class="title">GenesisState</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> GenesisState&#123;</span><br><span class="line">WhoisRecords: []Whois&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ValidateGenesis validates the nameservice genesis parameters</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ValidateGenesis</span><span class="params">(data GenesisState)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Create a sanity check to make sure the state conforms to the modules needs</span></span><br><span class="line"><span class="keyword">for</span> _, record := <span class="keyword">range</span> data.WhoisRecords &#123;</span><br><span class="line"><span class="keyword">if</span> record.Creator == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"invalid WhoisRecord: Creator: %s. Error: Missing Creator"</span>, record.Creator)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> record.Value == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"invalid WhoisRecord: Value: %s. Error: Missing Value"</span>, record.Value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> record.Price == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"invalid WhoisRecord: Price: %s. Error: Missing Price"</span>, record.Price)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next we can update our <code>x/nameservice/genesis.go</code> file, and modify the functions <code>InitGenesis</code> and <code>ExportGenesis</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nameservice</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/keeper"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line"><span class="comment">// abci "github.com/tendermint/tendermint/abci/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// InitGenesis initialize default parameters</span></span><br><span class="line"><span class="comment">// and the keeper's address to pubkey map</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitGenesis</span><span class="params">(ctx sdk.Context, keeper keeper.Keeper, data types.GenesisState)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, record := <span class="keyword">range</span> data.WhoisRecords &#123;</span><br><span class="line">keeper.SetWhois(ctx, record.Value, record)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExportGenesis writes the current store values</span></span><br><span class="line"><span class="comment">// to a genesis file, which can be imported again</span></span><br><span class="line"><span class="comment">// with InitGenesis</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExportGenesis</span><span class="params">(ctx sdk.Context, k keeper.Keeper)</span> <span class="title">types</span>.<span class="title">GenesisState</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> records []types.Whois</span><br><span class="line">iterator := k.GetNamesIterator(ctx)</span><br><span class="line"><span class="keyword">for</span> ; iterator.Valid(); iterator.Next() &#123;</span><br><span class="line"></span><br><span class="line">name := <span class="keyword">string</span>(iterator.Key())</span><br><span class="line">whois, _ := k.GetWhois(ctx, name)</span><br><span class="line">records = <span class="built_in">append</span>(records, whois)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> types.GenesisState&#123;WhoisRecords: records&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于上述代码的一些注意事项:</p><ul><li><code>ValidateGenesis()</code>验证提供的生成状态，以确保所期望的不变量保持不变</li><li><code>DefaultGenesisState()</code>主要用于测试。这提供了一个最小的起源状态。</li><li>在链启动时调用<code>InitGenesis()</code>，该函数将生成状态导入到keeper中。</li><li><code>ExportGenesis()</code>在停止链后被调用，此函数将应用程序状态加载到GenesisState结构中，以便稍后导出到<code>genesis.json</code>以及来自其他模块的数据。</li></ul><p><strong>==用来配置区块数据保存/再记载的逻辑==</strong></p><h1 id="16-Complete-App"><a href="#16-Complete-App" class="headerlink" title="16 Complete App"></a>16 Complete App</h1><p>When you used the <code>starport type</code> command, your application has already been incorporated in the <code>.app/app.go</code> file.</p><p>在<code>app/app.go</code>文件，它做了以下改变:</p><ul><li><p>从每个需要的模块实例化所需的保存器。</p></li><li><p>生成每个管理员Keeper所需的storekey。</p></li><li><p>从每个模块注册处理程序。baseapp路由器的AddRoute()方法用于此目的。</p></li><li><p>从每个模块注册查询器。baseapp的queryRouter中的AddRoute()方法用于此目的。</p></li><li><p>将KVStores挂载到baseApp多存储区中提供的密钥。</p></li><li><p>设置initChainer以定义初始应用程序状态。</p></li></ul><p>因此，该文件应该如下所示</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"></span><br><span class="line">abci <span class="string">"github.com/tendermint/tendermint/abci/types"</span></span><br><span class="line"><span class="string">"github.com/tendermint/tendermint/libs/log"</span></span><br><span class="line">tmos <span class="string">"github.com/tendermint/tendermint/libs/os"</span></span><br><span class="line">dbm <span class="string">"github.com/tendermint/tm-db"</span></span><br><span class="line"></span><br><span class="line">bam <span class="string">"github.com/cosmos/cosmos-sdk/baseapp"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/simapp"</span></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/types/module"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/version"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/auth"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/bank"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/genutil"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/params"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/staking"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/supply"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice"</span></span><br><span class="line">nameservicekeeper <span class="string">"github.com/user/nameservice/x/nameservice/keeper"</span></span><br><span class="line">nameservicetypes <span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line"><span class="comment">// this line is used by starport scaffolding</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> appName = <span class="string">"nameservice"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// 在用户目录创建两个命令文件</span></span><br><span class="line"><span class="comment">// 客户端执行文件</span></span><br><span class="line">DefaultCLIHome  = os.ExpandEnv(<span class="string">"$HOME/.nameservicecli"</span>)</span><br><span class="line"><span class="comment">// 节点执行文件</span></span><br><span class="line">DefaultNodeHome = os.ExpandEnv(<span class="string">"$HOME/.nameserviced"</span>)</span><br><span class="line"><span class="comment">// 模型的基本模块引入</span></span><br><span class="line">ModuleBasics    = module.NewBasicManager(</span><br><span class="line">genutil.AppModuleBasic&#123;&#125;,</span><br><span class="line">auth.AppModuleBasic&#123;&#125;,</span><br><span class="line">bank.AppModuleBasic&#123;&#125;,</span><br><span class="line">staking.AppModuleBasic&#123;&#125;,</span><br><span class="line">params.AppModuleBasic&#123;&#125;,</span><br><span class="line">supply.AppModuleBasic&#123;&#125;,</span><br><span class="line">nameservice.AppModuleBasic&#123;&#125;,</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">maccPerms = <span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span>&#123;</span><br><span class="line">auth.FeeCollectorName:     <span class="literal">nil</span>,</span><br><span class="line">staking.BondedPoolName:    &#123;supply.Burner, supply.Staking&#125;,</span><br><span class="line">staking.NotBondedPoolName: &#123;supply.Burner, supply.Staking&#125;,</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建codec</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MakeCodec</span><span class="params">()</span> *<span class="title">codec</span>.<span class="title">Codec</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> cdc = codec.New()</span><br><span class="line"></span><br><span class="line">ModuleBasics.RegisterCodec(cdc)</span><br><span class="line">sdk.RegisterCodec(cdc)</span><br><span class="line">codec.RegisterCrypto(cdc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> cdc.Seal()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新的app结构体</span></span><br><span class="line"><span class="keyword">type</span> NewApp <span class="keyword">struct</span> &#123;</span><br><span class="line">*bam.BaseApp</span><br><span class="line">cdc *codec.Codec</span><br><span class="line"></span><br><span class="line">invCheckPeriod <span class="keyword">uint</span></span><br><span class="line"></span><br><span class="line">keys  <span class="keyword">map</span>[<span class="keyword">string</span>]*sdk.KVStoreKey</span><br><span class="line">tKeys <span class="keyword">map</span>[<span class="keyword">string</span>]*sdk.TransientStoreKey</span><br><span class="line"></span><br><span class="line">subspaces <span class="keyword">map</span>[<span class="keyword">string</span>]params.Subspace</span><br><span class="line"></span><br><span class="line">accountKeeper     auth.AccountKeeper</span><br><span class="line">bankKeeper        bank.Keeper</span><br><span class="line">stakingKeeper     staking.Keeper</span><br><span class="line">supplyKeeper      supply.Keeper</span><br><span class="line">paramsKeeper      params.Keeper</span><br><span class="line">nameserviceKeeper nameservicekeeper.Keeper</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 3</span></span><br><span class="line">mm *module.Manager</span><br><span class="line"></span><br><span class="line">sm *module.SimulationManager</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ simapp.App = (*NewApp)(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化app</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewInitApp</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">logger log.Logger, db dbm.DB, traceStore io.Writer, loadLatest <span class="keyword">bool</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">invCheckPeriod <span class="keyword">uint</span>, baseAppOptions ...<span class="keyword">func</span>(*bam.BaseApp)</span>,</span></span><br><span class="line">) *NewApp &#123;</span><br><span class="line">cdc := MakeCodec()</span><br><span class="line"></span><br><span class="line">bApp := bam.NewBaseApp(appName, logger, db, auth.DefaultTxDecoder(cdc), baseAppOptions...)</span><br><span class="line">bApp.SetCommitMultiStoreTracer(traceStore)</span><br><span class="line">bApp.SetAppVersion(version.Version)</span><br><span class="line"></span><br><span class="line">keys := sdk.NewKVStoreKeys(</span><br><span class="line">bam.MainStoreKey,</span><br><span class="line">auth.StoreKey,</span><br><span class="line">staking.StoreKey,</span><br><span class="line">supply.StoreKey,</span><br><span class="line">params.StoreKey,</span><br><span class="line">nameservicetypes.StoreKey,</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 5</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">tKeys := sdk.NewTransientStoreKeys(staking.TStoreKey, params.TStoreKey)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = &amp;NewApp&#123;</span><br><span class="line">BaseApp:        bApp,</span><br><span class="line">cdc:            cdc,</span><br><span class="line">invCheckPeriod: invCheckPeriod,</span><br><span class="line">keys:           keys,</span><br><span class="line">tKeys:          tKeys,</span><br><span class="line">subspaces:      <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]params.Subspace),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.paramsKeeper = params.NewKeeper(app.cdc, keys[params.StoreKey], tKeys[params.TStoreKey])</span><br><span class="line">app.subspaces[auth.ModuleName] = app.paramsKeeper.Subspace(auth.DefaultParamspace)</span><br><span class="line">app.subspaces[bank.ModuleName] = app.paramsKeeper.Subspace(bank.DefaultParamspace)</span><br><span class="line">app.subspaces[staking.ModuleName] = app.paramsKeeper.Subspace(staking.DefaultParamspace)</span><br><span class="line"></span><br><span class="line">app.accountKeeper = auth.NewAccountKeeper(</span><br><span class="line">app.cdc,</span><br><span class="line">keys[auth.StoreKey],</span><br><span class="line">app.subspaces[auth.ModuleName],</span><br><span class="line">auth.ProtoBaseAccount,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app.bankKeeper = bank.NewBaseKeeper(</span><br><span class="line">app.accountKeeper,</span><br><span class="line">app.subspaces[bank.ModuleName],</span><br><span class="line">app.ModuleAccountAddrs(),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app.supplyKeeper = supply.NewKeeper(</span><br><span class="line">app.cdc,</span><br><span class="line">keys[supply.StoreKey],</span><br><span class="line">app.accountKeeper,</span><br><span class="line">app.bankKeeper,</span><br><span class="line">maccPerms,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">stakingKeeper := staking.NewKeeper(</span><br><span class="line">app.cdc,</span><br><span class="line">keys[staking.StoreKey],</span><br><span class="line">app.supplyKeeper,</span><br><span class="line">app.subspaces[staking.ModuleName],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app.stakingKeeper = *stakingKeeper.SetHooks(</span><br><span class="line">staking.NewMultiStakingHooks(),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app.nameserviceKeeper = nameservicekeeper.NewKeeper(</span><br><span class="line">app.bankKeeper,</span><br><span class="line">app.cdc,</span><br><span class="line">keys[nameservicetypes.StoreKey],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 4</span></span><br><span class="line"></span><br><span class="line">app.mm = module.NewManager(</span><br><span class="line">genutil.NewAppModule(app.accountKeeper, app.stakingKeeper, app.BaseApp.DeliverTx),</span><br><span class="line">auth.NewAppModule(app.accountKeeper),</span><br><span class="line">bank.NewAppModule(app.bankKeeper, app.accountKeeper),</span><br><span class="line">supply.NewAppModule(app.supplyKeeper, app.accountKeeper),</span><br><span class="line">nameservice.NewAppModule(app.nameserviceKeeper, app.bankKeeper),</span><br><span class="line">staking.NewAppModule(app.stakingKeeper, app.accountKeeper, app.supplyKeeper),</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 6</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app.mm.SetOrderEndBlockers(staking.ModuleName)</span><br><span class="line"></span><br><span class="line">app.mm.SetOrderInitGenesis(</span><br><span class="line">staking.ModuleName,</span><br><span class="line">auth.ModuleName,</span><br><span class="line">bank.ModuleName,</span><br><span class="line">nameservicetypes.ModuleName,</span><br><span class="line">supply.ModuleName,</span><br><span class="line">genutil.ModuleName,</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 7</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app.mm.RegisterRoutes(app.Router(), app.QueryRouter())</span><br><span class="line"></span><br><span class="line">app.SetInitChainer(app.InitChainer)</span><br><span class="line">app.SetBeginBlocker(app.BeginBlocker)</span><br><span class="line">app.SetEndBlocker(app.EndBlocker)</span><br><span class="line"></span><br><span class="line">app.SetAnteHandler(</span><br><span class="line">auth.NewAnteHandler(</span><br><span class="line">app.accountKeeper,</span><br><span class="line">app.supplyKeeper,</span><br><span class="line">auth.DefaultSigVerificationGasConsumer,</span><br><span class="line">),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app.MountKVStores(keys)</span><br><span class="line">app.MountTransientStores(tKeys)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> loadLatest &#123;</span><br><span class="line">err := app.LoadLatestVersion(app.keys[bam.MainStoreKey])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">tmos.Exit(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GenesisState <span class="keyword">map</span>[<span class="keyword">string</span>]json.RawMessage</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDefaultGenesisState</span><span class="params">()</span> <span class="title">GenesisState</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> ModuleBasics.DefaultGenesis()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(app *NewApp)</span> <span class="title">InitChainer</span><span class="params">(ctx sdk.Context, req abci.RequestInitChain)</span> <span class="title">abci</span>.<span class="title">ResponseInitChain</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> genesisState simapp.GenesisState</span><br><span class="line"></span><br><span class="line">app.cdc.MustUnmarshalJSON(req.AppStateBytes, &amp;genesisState)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> app.mm.InitGenesis(ctx, genesisState)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(app *NewApp)</span> <span class="title">BeginBlocker</span><span class="params">(ctx sdk.Context, req abci.RequestBeginBlock)</span> <span class="title">abci</span>.<span class="title">ResponseBeginBlock</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> app.mm.BeginBlock(ctx, req)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(app *NewApp)</span> <span class="title">EndBlocker</span><span class="params">(ctx sdk.Context, req abci.RequestEndBlock)</span> <span class="title">abci</span>.<span class="title">ResponseEndBlock</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> app.mm.EndBlock(ctx, req)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(app *NewApp)</span> <span class="title">LoadHeight</span><span class="params">(height <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> app.LoadVersion(height, app.keys[bam.MainStoreKey])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(app *NewApp)</span> <span class="title">ModuleAccountAddrs</span><span class="params">()</span> <span class="title">map</span>[<span class="title">string</span>]<span class="title">bool</span></span> &#123;</span><br><span class="line">modAccAddrs := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span>)</span><br><span class="line"><span class="keyword">for</span> acc := <span class="keyword">range</span> maccPerms &#123;</span><br><span class="line">modAccAddrs[supply.NewModuleAddress(acc).String()] = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> modAccAddrs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(app *NewApp)</span> <span class="title">Codec</span><span class="params">()</span> *<span class="title">codec</span>.<span class="title">Codec</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> app.cdc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(app *NewApp)</span> <span class="title">SimulationManager</span><span class="params">()</span> *<span class="title">module</span>.<span class="title">SimulationManager</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> app.sm</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetMaccPerms</span><span class="params">()</span> <span class="title">map</span>[<span class="title">string</span>][]<span class="title">string</span></span> &#123;</span><br><span class="line">modAccPerms := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> maccPerms &#123;</span><br><span class="line">modAccPerms[k] = v</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> modAccPerms</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面提到的TransientStore是KVStore的内存中实现，用于不持久的状态。</p><p>注意<strong>模块的启动方式</strong>：顺序很重要！在这里，<strong>序列是Auth-&gt; Bank-&gt; Feecollection-&gt; Stake-&gt; Distribution-&gt; Slashing，</strong>然后为stake模块设置了钩子。这是因为其中一些模块在使用之前就依赖于其他现有模块</p><p>您将注意到文件末尾有几个函数。<strong>initChainer在生成中定义帐户</strong>。json在初始链启动时映射到应用程序状态。<strong>ExportAppStateAndValidators函数帮助引导应用程序的初始状态。**</strong>BeginBlocker和EndBlocker是可选的方法，开发者可以在他们的模块中实现**。当从底层共识引擎接收到BeginBlock和EndBlock ABCI消息时，它们将分别在每个块的开始和结束被触发。</p><h1 id="17-Entry-points"><a href="#17-Entry-points" class="headerlink" title="17.Entry points"></a>17.Entry points</h1><p>In Golang the convention is to place files that compile to a binary in the <code>./cmd</code>folder of a project. For your application there are 2 binaries that you want to create:</p><p>根据golang的规则, 需要编译可执行程序到cmd目录下, 这个项目需要编译创建两个二进制文件</p><p>nameservicecli:这个二进制文件提供了==允许用户与应用程序交互的命令==。</p><p>nameserviced:这个二进制文件与bitcoind或其他加密货币守护进程类似，==因为它维护p2p连接、传播事务、处理本地存储并提供RPC接口来与网络交互==。在这种情况下，使用Tendermint进行联网和交易排序。</p><p>我们应该已经为我们搭建了以下两个文件:</p><ul><li><code>./cmd/nameserviced/main.go</code></li><li><code>./cmd/nameservicecli/main.go</code></li></ul><h2 id="nameserviced"><a href="#nameserviced" class="headerlink" title="nameserviced"></a>nameserviced</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/spf13/cobra"</span></span><br><span class="line"><span class="string">"github.com/spf13/viper"</span></span><br><span class="line"></span><br><span class="line">abci <span class="string">"github.com/tendermint/tendermint/abci/types"</span></span><br><span class="line"><span class="string">"github.com/tendermint/tendermint/libs/cli"</span></span><br><span class="line"><span class="string">"github.com/tendermint/tendermint/libs/log"</span></span><br><span class="line">tmtypes <span class="string">"github.com/tendermint/tendermint/types"</span></span><br><span class="line">dbm <span class="string">"github.com/tendermint/tm-db"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/user/nameservice/app"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/baseapp"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/debug"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/flags"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/server"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/store"</span></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/auth"</span></span><br><span class="line">genutilcli <span class="string">"github.com/cosmos/cosmos-sdk/x/genutil/client/cli"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/staking"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> flagInvCheckPeriod = <span class="string">"inv-check-period"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> invCheckPeriod <span class="keyword">uint</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cdc := app.MakeCodec()</span><br><span class="line"></span><br><span class="line">app.SetConfig()</span><br><span class="line"></span><br><span class="line">ctx := server.NewDefaultContext()</span><br><span class="line">cobra.EnableCommandSorting = <span class="literal">false</span></span><br><span class="line">rootCmd := &amp;cobra.Command&#123;</span><br><span class="line">Use:               <span class="string">"nameserviced"</span>,</span><br><span class="line">Short:             <span class="string">"app Daemon (server)"</span>,</span><br><span class="line">PersistentPreRunE: server.PersistentPreRunEFn(ctx),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rootCmd.AddCommand(genutilcli.InitCmd(ctx, cdc, app.ModuleBasics, app.DefaultNodeHome))</span><br><span class="line">rootCmd.AddCommand(genutilcli.CollectGenTxsCmd(ctx, cdc, auth.GenesisAccountIterator&#123;&#125;, app.DefaultNodeHome))</span><br><span class="line">rootCmd.AddCommand(genutilcli.MigrateGenesisCmd(ctx, cdc))</span><br><span class="line">rootCmd.AddCommand(</span><br><span class="line">genutilcli.GenTxCmd(</span><br><span class="line">ctx, cdc, app.ModuleBasics, staking.AppModuleBasic&#123;&#125;,</span><br><span class="line">auth.GenesisAccountIterator&#123;&#125;, app.DefaultNodeHome, app.DefaultCLIHome,</span><br><span class="line">),</span><br><span class="line">)</span><br><span class="line">rootCmd.AddCommand(genutilcli.ValidateGenesisCmd(ctx, cdc, app.ModuleBasics))</span><br><span class="line">rootCmd.AddCommand(AddGenesisAccountCmd(ctx, cdc, app.DefaultNodeHome, app.DefaultCLIHome))</span><br><span class="line">rootCmd.AddCommand(flags.NewCompletionCmd(rootCmd, <span class="literal">true</span>))</span><br><span class="line">rootCmd.AddCommand(debug.Cmd(cdc))</span><br><span class="line"></span><br><span class="line">server.AddCommands(ctx, cdc, rootCmd, newApp, exportAppStateAndTMValidators)</span><br><span class="line"></span><br><span class="line"><span class="comment">// prepare and add flags</span></span><br><span class="line">executor := cli.PrepareBaseCmd(rootCmd, <span class="string">"AU"</span>, app.DefaultNodeHome)</span><br><span class="line">rootCmd.PersistentFlags().UintVar(&amp;invCheckPeriod, flagInvCheckPeriod,</span><br><span class="line"><span class="number">0</span>, <span class="string">"Assert registered invariants every N blocks"</span>)</span><br><span class="line">err := executor.Execute()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newApp</span><span class="params">(logger log.Logger, db dbm.DB, traceStore io.Writer)</span> <span class="title">abci</span>.<span class="title">Application</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> cache sdk.MultiStorePersistentCache</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> viper.GetBool(server.FlagInterBlockCache) &#123;</span><br><span class="line">cache = store.NewCommitKVStoreCacheManager()</span><br><span class="line">&#125;</span><br><span class="line">pruningOpts, err := server.GetPruningOptionsFromFlags()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> app.NewInitApp(</span><br><span class="line">logger, db, traceStore, <span class="literal">true</span>, invCheckPeriod,</span><br><span class="line">baseapp.SetPruning(pruningOpts),</span><br><span class="line">baseapp.SetMinGasPrices(viper.GetString(server.FlagMinGasPrices)),</span><br><span class="line">baseapp.SetHaltHeight(viper.GetUint64(server.FlagHaltHeight)),</span><br><span class="line">baseapp.SetHaltTime(viper.GetUint64(server.FlagHaltTime)),</span><br><span class="line">baseapp.SetInterBlockCache(cache),</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exportAppStateAndTMValidators</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">logger log.Logger, db dbm.DB, traceStore io.Writer, height <span class="keyword">int64</span>, forZeroHeight <span class="keyword">bool</span>, jailWhiteList []<span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> <span class="params">(json.RawMessage, []tmtypes.GenesisValidator, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> height != <span class="number">-1</span> &#123;</span><br><span class="line">aApp := app.NewInitApp(logger, db, traceStore, <span class="literal">false</span>, <span class="keyword">uint</span>(<span class="number">1</span>))</span><br><span class="line">err := aApp.LoadHeight(height)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> aApp.ExportAppStateAndValidators(forZeroHeight, jailWhiteList)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">aApp := app.NewInitApp(logger, db, traceStore, <span class="literal">true</span>, <span class="keyword">uint</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> aApp.ExportAppStateAndValidators(forZeroHeight, jailWhiteList)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>•上面的大多数代码结合了Tendermint的CLI命令，•Cosmos-SDK和您的Nameservice模块</p><h2 id="nameservicecli"><a href="#nameservicecli" class="headerlink" title="nameservicecli"></a>nameservicecli</h2><p>Finish up by confirming your <code>nameservicecli</code> command looks as follows:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"path"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/flags"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/keys"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/lcd"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/rpc"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/version"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/auth"</span></span><br><span class="line">authcmd <span class="string">"github.com/cosmos/cosmos-sdk/x/auth/client/cli"</span></span><br><span class="line">authrest <span class="string">"github.com/cosmos/cosmos-sdk/x/auth/client/rest"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/bank"</span></span><br><span class="line">bankcmd <span class="string">"github.com/cosmos/cosmos-sdk/x/bank/client/cli"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/spf13/cobra"</span></span><br><span class="line"><span class="string">"github.com/spf13/viper"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/tendermint/go-amino"</span></span><br><span class="line"><span class="string">"github.com/tendermint/tendermint/libs/cli"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/user/nameservice/app"</span></span><br><span class="line"><span class="comment">// this line is used by starport scaffolding</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Configure cobra to sort commands</span></span><br><span class="line">cobra.EnableCommandSorting = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Instantiate the codec for the command line application</span></span><br><span class="line">cdc := app.MakeCodec()</span><br><span class="line"></span><br><span class="line">app.SetConfig()</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> setup keybase, viper object, etc. to be passed into</span></span><br><span class="line"><span class="comment">// the below functions and eliminate global vars, like we do</span></span><br><span class="line"><span class="comment">// with the cdc</span></span><br><span class="line"></span><br><span class="line">rootCmd := &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"nameservicecli"</span>,</span><br><span class="line">Short: <span class="string">"Command line interface for interacting with nameserviced"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add --chain-id to persistent flags and mark it required</span></span><br><span class="line">rootCmd.PersistentFlags().String(flags.FlagChainID, <span class="string">""</span>, <span class="string">"Chain ID of tendermint node"</span>)</span><br><span class="line">rootCmd.PersistentPreRunE = <span class="function"><span class="keyword">func</span><span class="params">(_ *cobra.Command, _ []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> initConfig(rootCmd)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Construct Root Command</span></span><br><span class="line">rootCmd.AddCommand(</span><br><span class="line">rpc.StatusCommand(),</span><br><span class="line">client.ConfigCmd(app.DefaultCLIHome),</span><br><span class="line">queryCmd(cdc),</span><br><span class="line">txCmd(cdc),</span><br><span class="line">flags.LineBreak,</span><br><span class="line">lcd.ServeCommand(cdc, registerRoutes),</span><br><span class="line">flags.LineBreak,</span><br><span class="line">keys.Commands(),</span><br><span class="line">flags.LineBreak,</span><br><span class="line">version.Cmd,</span><br><span class="line">flags.NewCompletionCmd(rootCmd, <span class="literal">true</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add flags and prefix all env exposed with AA</span></span><br><span class="line">executor := cli.PrepareMainCmd(rootCmd, <span class="string">"AA"</span>, app.DefaultCLIHome)</span><br><span class="line"></span><br><span class="line">err := executor.Execute()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Failed executing CLI command: %s, exiting...\n"</span>, err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryCmd</span><span class="params">(cdc *amino.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line">queryCmd := &amp;cobra.Command&#123;</span><br><span class="line">Use:     <span class="string">"query"</span>,</span><br><span class="line">Aliases: []<span class="keyword">string</span>&#123;<span class="string">"q"</span>&#125;,</span><br><span class="line">Short:   <span class="string">"Querying subcommands"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">queryCmd.AddCommand(</span><br><span class="line">authcmd.GetAccountCmd(cdc),</span><br><span class="line">flags.LineBreak,</span><br><span class="line">rpc.ValidatorCommand(cdc),</span><br><span class="line">rpc.BlockCommand(),</span><br><span class="line">authcmd.QueryTxsByEventsCmd(cdc),</span><br><span class="line">authcmd.QueryTxCmd(cdc),</span><br><span class="line">flags.LineBreak,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// add modules' query commands</span></span><br><span class="line">app.ModuleBasics.AddQueryCommands(queryCmd, cdc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> queryCmd</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">txCmd</span><span class="params">(cdc *amino.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line">txCmd := &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"tx"</span>,</span><br><span class="line">Short: <span class="string">"Transactions subcommands"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">txCmd.AddCommand(</span><br><span class="line">bankcmd.SendTxCmd(cdc),</span><br><span class="line">flags.LineBreak,</span><br><span class="line">authcmd.GetSignCommand(cdc),</span><br><span class="line">authcmd.GetMultiSignCommand(cdc),</span><br><span class="line">flags.LineBreak,</span><br><span class="line">authcmd.GetBroadcastCommand(cdc),</span><br><span class="line">authcmd.GetEncodeCommand(cdc),</span><br><span class="line">authcmd.GetDecodeCommand(cdc),</span><br><span class="line">flags.LineBreak,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// add modules' tx commands</span></span><br><span class="line">app.ModuleBasics.AddTxCommands(txCmd, cdc)</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove auth and bank commands as they're mounted under the root tx command</span></span><br><span class="line"><span class="keyword">var</span> cmdsToRemove []*cobra.Command</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, cmd := <span class="keyword">range</span> txCmd.Commands() &#123;</span><br><span class="line"><span class="keyword">if</span> cmd.Use == auth.ModuleName || cmd.Use == bank.ModuleName &#123;</span><br><span class="line">cmdsToRemove = <span class="built_in">append</span>(cmdsToRemove, cmd)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">txCmd.RemoveCommand(cmdsToRemove...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> txCmd</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// registerRoutes registers the routes from the different modules for the LCD.</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> details on the routes added for each module are in the module documentation</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> If making updates here you also need to update the test helper in client/lcd/test_helper.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">registerRoutes</span><span class="params">(rs *lcd.RestServer)</span></span> &#123;</span><br><span class="line">client.RegisterRoutes(rs.CliCtx, rs.Mux)</span><br><span class="line">authrest.RegisterTxRoutes(rs.CliCtx, rs.Mux)</span><br><span class="line">app.ModuleBasics.RegisterRESTRoutes(rs.CliCtx, rs.Mux)</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initConfig</span><span class="params">(cmd *cobra.Command)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">home, err := cmd.PersistentFlags().GetString(cli.HomeFlag)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cfgFile := path.Join(home, <span class="string">"config"</span>, <span class="string">"config.toml"</span>)</span><br><span class="line"><span class="keyword">if</span> _, err := os.Stat(cfgFile); err == <span class="literal">nil</span> &#123;</span><br><span class="line">viper.SetConfigFile(cfgFile)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := viper.ReadInConfig(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := viper.BindPFlag(flags.FlagChainID, cmd.PersistentFlags().Lookup(flags.FlagChainID)); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := viper.BindPFlag(cli.EncodingFlag, cmd.PersistentFlags().Lookup(cli.EncodingFlag)); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> viper.BindPFlag(cli.OutputFlag, cmd.PersistentFlags().Lookup(cli.OutputFlag))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:</p><p>代码结合了来自Tendermint、Cosmos-SDK和Nameservice模块的CLI命令。<br>cobra CLI文档(打开新窗口)将有助于理解上述代码。<br>您可以在这里看到早些时候定义的ModuleClient。<br>注意这些路由是如何包含在registerRoutes函数中的。</p><h1 id="18-go-mod-and-Makefile"><a href="#18-go-mod-and-Makefile" class="headerlink" title="18.go.mod and Makefile"></a>18.go.mod and Makefile</h1><h2 id="Starport-serve"><a href="#Starport-serve" class="headerlink" title="Starport serve"></a>Starport serve</h2><p>Having bootstrapped your application with starport you can use the Starport utility <code>starport serve</code> to get your blockchain running. Make sure to include your <code>nametoken</code> into your <code>config.yml</code> file</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="number">1</span></span><br><span class="line">accounts:</span><br><span class="line">  - name: user1</span><br><span class="line">    coins: [<span class="string">"1000token"</span>, <span class="string">"100000000stake"</span>, <span class="string">"10000nametoken"</span>]</span><br><span class="line">  - name: user2</span><br><span class="line">    coins: [<span class="string">"500token"</span>, <span class="string">"1000nametoken"</span>]</span><br><span class="line">validator:</span><br><span class="line">  name: user1</span><br><span class="line">  staked: <span class="string">"100000000stake"</span></span><br></pre></td></tr></table></figure><h2 id="go-mod-and-Makefile"><a href="#go-mod-and-Makefile" class="headerlink" title="go.mod and Makefile"></a>go.mod and Makefile</h2><h3 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h3><p>Help users build your application by writing a <code>./Makefile</code> in the root directory that includes common commands. The scaffolding tool has created a generic makefile that you will be able to use:</p><p>通过在包含常用命令的根目录中编写./Makefile来帮助用户构建应用程序。 脚手架工具已经创建了一个通用的makefile，您将可以使用：</p><p><strong>NOTE</strong>: The below Makefile contains some of same commands as the Cosmos SDK and Tendermint Makefiles.</p><p>下面的Makefile包含与Cosmos SDK和Tendermint Makefile相同的命令。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PACKAGES=$(shell <span class="keyword">go</span> list ./... | grep -v <span class="string">'/simulation'</span>)</span><br><span class="line"></span><br><span class="line">VERSION := $(shell echo $(shell git describe --tags) | sed <span class="string">'s/^v//'</span>)</span><br><span class="line">COMMIT := $(shell git log <span class="number">-1</span> --format=<span class="string">'%H'</span>)</span><br><span class="line"></span><br><span class="line">ldflags = -X github.com/cosmos/cosmos-sdk/version.Name=NameService \</span><br><span class="line">-X github.com/cosmos/cosmos-sdk/version.ServerName=nameserviced \</span><br><span class="line">-X github.com/cosmos/cosmos-sdk/version.ClientName=nameservicecli \</span><br><span class="line">-X github.com/cosmos/cosmos-sdk/version.Version=$(VERSION) \</span><br><span class="line">-X github.com/cosmos/cosmos-sdk/version.Commit=$(COMMIT) </span><br><span class="line"></span><br><span class="line">BUILD_FLAGS := -ldflags <span class="string">'$(ldflags)'</span></span><br><span class="line"></span><br><span class="line">all: install</span><br><span class="line"></span><br><span class="line">install: <span class="keyword">go</span>.sum</span><br><span class="line">@echo <span class="string">"--&gt; Installing nameserviced &amp; nameservicecli"</span></span><br><span class="line">@<span class="keyword">go</span> install -mod=readonly $(BUILD_FLAGS) ./cmd/nameserviced</span><br><span class="line">@<span class="keyword">go</span> install -mod=readonly $(BUILD_FLAGS) ./cmd/nameservicecli</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span>.sum: <span class="keyword">go</span>.mod</span><br><span class="line">@echo <span class="string">"--&gt; Ensure dependencies have not been modified"</span></span><br><span class="line">GO111MODULE=on <span class="keyword">go</span> mod verify</span><br><span class="line"></span><br><span class="line">test:</span><br><span class="line">@<span class="keyword">go</span> test -mod=readonly $(PACKAGES)</span><br></pre></td></tr></table></figure><h4 id="How-about-including-Ledger-Nano-S-support"><a href="#How-about-including-Ledger-Nano-S-support" class="headerlink" title="How about including Ledger Nano S support?"></a>How about including Ledger Nano S support?</h4><p>This requires a few small changes:</p><ul><li><p>Create a file <code>Makefile.ledger</code> with the following content:</p><p><code>404: Not Found</code></p></li><li><p>Add <code>include Makefile.ledger</code> at the beginning of the Makefile:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BUILD_FLAGS := -ldflags <span class="string">'$(ldflags)'</span></span><br><span class="line"></span><br><span class="line">include Makefile.ledger</span><br><span class="line">all: install</span><br></pre></td></tr></table></figure></li></ul><h3 id="go-mod"><a href="#go-mod" class="headerlink" title="go.mod"></a>go.mod</h3><p>Cosmos SDK apps currently depend on specific versions of some libraries. The below manifest contains all the necessary versions. To get started replace the contents of the <code>./go.mod</code> file with the <code>constraints</code> and <code>overrides</code> below:</p><p>Golang有一些依赖管理工具。 在本教程中，您将使用Go模块。 Go Modules在存储库的根目录中使用go.mod文件来定义应用程序需要的依赖项。 Cosmos SDK应用程序当前取决于某些库的特定版本。 以下清单包含所有必需的版本。 首先，将./go.mod文件的内容替换为以下约束和替代：</p><ul><li>You will have to run <code>go get ./...</code> to get all the modules the application is using. This command will get the dependency version stated in the <code>go.mod</code> file.</li><li>If you would like to use a specific version of a dependency then you have to run <code>go get github.com/&lt;github_org&gt;/&lt;repo_name&gt;@&lt;version&gt;</code></li></ul><h4 id="Building-the-app"><a href="#Building-the-app" class="headerlink" title="Building the app"></a>Building the app</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Install the app into your $GOBIN</span><br><span class="line"><span class="built_in">make</span> install</span><br><span class="line"></span><br><span class="line"># Now you should be able to run the following commands:</span><br><span class="line">nameserviced help</span><br><span class="line">nameservicecli help</span><br></pre></td></tr></table></figure><p><strong>mac M1 Big Sur 11.2.1 make install 会报错:</strong> </p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/kGFHvi.png" alt="kGFHvi"></p><p>unbutu服务器环境没问题:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/uLBvnx.png" alt="uLBvnx"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/W4IGk9.png" alt="W4IGk9"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/1ZdPsS.png" alt="1ZdPsS"></p><h1 id="19-Build-and-run-the-app"><a href="#19-Build-and-run-the-app" class="headerlink" title="19 Build and run the app"></a>19 Build and run the app</h1><h2 id="Building-the-nameservice-application"><a href="#Building-the-nameservice-application" class="headerlink" title="Building the nameservice application"></a>Building the <code>nameservice</code> application</h2><p>This repo contains a complete <code>nameservice</code> application, scaffolded with starport. You should be able to run the application using <code>starport serve</code> in the home directory:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ starport serve</span><br><span class="line"></span><br><span class="line">📦 Installing dependencies...</span><br><span class="line">🛠️  Building the app...</span><br><span class="line">🙂 Created an account. Password (mnemonic): insane flash movie sketch saddle antique mean season damp thunder tag reunion quantum sock cube early glimpse cabbage smile photo hill relax couch sweet</span><br><span class="line">🙂 Created an account. Password (mnemonic): whip bone crane flag lesson mule valley soup faith include october monkey volume iron mushroom cry acid <span class="keyword">case</span> village clog abstract antenna wife eyebrow</span><br><span class="line">🌍 Running a Cosmos <span class="string">'nameservice'</span> app with Tendermint at http:<span class="comment">//localhost:26657.</span></span><br><span class="line">🌍 Running a server at http:<span class="comment">//localhost:1317 (LCD)</span></span><br><span class="line"></span><br><span class="line">🚀 Get started: http:<span class="comment">//localhost:12345/</span></span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/fRB7hY.png" alt="fRB7hY"></p><p>Now, you can install and run the application.</p><p>If you have not completed the tutorial then you can follow the below cloning instructions:</p><p>tutorial的所有项目完整代码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Clone the source of the tutorial repository</span><br><span class="line">git clone https:<span class="comment">//github.com/cosmos/sdk-tutorials.git</span></span><br><span class="line">cd sdk-tutorials</span><br><span class="line">cd nameservice/nameservice</span><br><span class="line">starport serve</span><br></pre></td></tr></table></figure><p>注意: 如果你有用于ledger的Cosmos应用，你想使用它，当你用nameservicecli键创建键时，只需在末尾添加——ledger即可。这就是你所需要的。当您签名时，user1将被识别为分类帐密钥，并将需要一个设备。</p><p>After you have generated a genesis transaction, you will have to input the genTx into the genesis file, so that your nameservice chain is aware of the validators. To do so, run:</p><p>在生成了一个创世交易之后，您必须将genTx输入到生成文件中，这样您的<strong>namesservice链才能知道验证器</strong>。为此，运行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserviced collect-gentxs</span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/7lmvlW.png" alt="7lmvlW"></p><p>格式化以后内容为:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"app_message"</span>: &#123;</span><br><span class="line"><span class="attr">"auth"</span>: &#123;</span><br><span class="line"><span class="attr">"accounts"</span>: [&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"cosmos-sdk/Account"</span>,</span><br><span class="line"><span class="attr">"value"</span>: &#123;</span><br><span class="line"><span class="attr">"account_number"</span>: <span class="string">"0"</span>,</span><br><span class="line"><span class="attr">"address"</span>: <span class="string">"cosmos108egxhu7u7c63erhkxqr23zuydh07zhuner794"</span>,</span><br><span class="line"><span class="attr">"coins"</span>: [&#123;</span><br><span class="line"><span class="attr">"amount"</span>: <span class="string">"10000"</span>,</span><br><span class="line"><span class="attr">"denom"</span>: <span class="string">"nametoken"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">"amount"</span>: <span class="string">"100000000"</span>,</span><br><span class="line"><span class="attr">"denom"</span>: <span class="string">"stake"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">"amount"</span>: <span class="string">"1000"</span>,</span><br><span class="line"><span class="attr">"denom"</span>: <span class="string">"token"</span></span><br><span class="line">&#125;],</span><br><span class="line"><span class="attr">"public_key"</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">"sequence"</span>: <span class="string">"0"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"cosmos-sdk/Account"</span>,</span><br><span class="line"><span class="attr">"value"</span>: &#123;</span><br><span class="line"><span class="attr">"account_number"</span>: <span class="string">"0"</span>,</span><br><span class="line"><span class="attr">"address"</span>: <span class="string">"cosmos1ynhnxn39c5w00p4qh3647c35k4gjgq4cprgvza"</span>,</span><br><span class="line"><span class="attr">"coins"</span>: [&#123;</span><br><span class="line"><span class="attr">"amount"</span>: <span class="string">"1000"</span>,</span><br><span class="line"><span class="attr">"denom"</span>: <span class="string">"nametoken"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">"amount"</span>: <span class="string">"500"</span>,</span><br><span class="line"><span class="attr">"denom"</span>: <span class="string">"token"</span></span><br><span class="line">&#125;],</span><br><span class="line"><span class="attr">"public_key"</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">"sequence"</span>: <span class="string">"0"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;],</span><br><span class="line"><span class="attr">"params"</span>: &#123;</span><br><span class="line"><span class="attr">"max_memo_characters"</span>: <span class="string">"256"</span>,</span><br><span class="line"><span class="attr">"sig_verify_cost_ed25519"</span>: <span class="string">"590"</span>,</span><br><span class="line"><span class="attr">"sig_verify_cost_secp256k1"</span>: <span class="string">"1000"</span>,</span><br><span class="line"><span class="attr">"tx_sig_limit"</span>: <span class="string">"7"</span>,</span><br><span class="line"><span class="attr">"tx_size_cost_per_byte"</span>: <span class="string">"10"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"bank"</span>: &#123;</span><br><span class="line"><span class="attr">"send_enabled"</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"genutil"</span>: &#123;</span><br><span class="line"><span class="attr">"gentxs"</span>: [&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"cosmos-sdk/StdTx"</span>,</span><br><span class="line"><span class="attr">"value"</span>: &#123;</span><br><span class="line"><span class="attr">"fee"</span>: &#123;</span><br><span class="line"><span class="attr">"amount"</span>: [],</span><br><span class="line"><span class="attr">"gas"</span>: <span class="string">"200000"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"memo"</span>: <span class="string">"70dfc95d3f9869145d79387c201eae58399074d8@172.17.59.2:26656"</span>,</span><br><span class="line"><span class="attr">"msg"</span>: [&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"cosmos-sdk/MsgCreateValidator"</span>,</span><br><span class="line"><span class="attr">"value"</span>: &#123;</span><br><span class="line"><span class="attr">"commission"</span>: &#123;</span><br><span class="line"><span class="attr">"max_change_rate"</span>: <span class="string">"0.010000000000000000"</span>,</span><br><span class="line"><span class="attr">"max_rate"</span>: <span class="string">"0.200000000000000000"</span>,</span><br><span class="line"><span class="attr">"rate"</span>: <span class="string">"0.100000000000000000"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"delegator_address"</span>: <span class="string">"cosmos108egxhu7u7c63erhkxqr23zuydh07zhuner794"</span>,</span><br><span class="line"><span class="attr">"description"</span>: &#123;</span><br><span class="line"><span class="attr">"details"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"identity"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"moniker"</span>: <span class="string">"mynode"</span>,</span><br><span class="line"><span class="attr">"security_contact"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"website"</span>: <span class="string">""</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"min_self_delegation"</span>: <span class="string">"1"</span>,</span><br><span class="line"><span class="attr">"pubkey"</span>: <span class="string">"cosmosvalconspub1zcjduepq2ndyr7spzqr0u3pufhdwmqlxkcg9cww3ywesywvn376h4aheqdfqqgjsue"</span>,</span><br><span class="line"><span class="attr">"validator_address"</span>: <span class="string">"cosmosvaloper108egxhu7u7c63erhkxqr23zuydh07zhukdhtfx"</span>,</span><br><span class="line"><span class="attr">"value"</span>: &#123;</span><br><span class="line"><span class="attr">"amount"</span>: <span class="string">"100000000"</span>,</span><br><span class="line"><span class="attr">"denom"</span>: <span class="string">"stake"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;],</span><br><span class="line"><span class="attr">"signatures"</span>: [&#123;</span><br><span class="line"><span class="attr">"pub_key"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"tendermint/PubKeySecp256k1"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"A0ETGI578auv3BEwLbbDJwtLF3A+2MnWLtjexi1f/r5G"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"signature"</span>: <span class="string">"WtBOWmg6ZI5cywhQQFbJ8bBNUODESALzwnXXXRmeb8U672UkX1y6xNSl4L8tj+mxLgDcpndprqhgTVK5gE+wKA=="</span></span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"nameservice"</span>: &#123;</span><br><span class="line"><span class="attr">"whois_records"</span>: []</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"params"</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">"staking"</span>: &#123;</span><br><span class="line"><span class="attr">"delegations"</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">"exported"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"last_total_power"</span>: <span class="string">"0"</span>,</span><br><span class="line"><span class="attr">"last_validator_powers"</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">"params"</span>: &#123;</span><br><span class="line"><span class="attr">"bond_denom"</span>: <span class="string">"stake"</span>,</span><br><span class="line"><span class="attr">"historical_entries"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"max_entries"</span>: <span class="number">7</span>,</span><br><span class="line"><span class="attr">"max_validators"</span>: <span class="number">100</span>,</span><br><span class="line"><span class="attr">"unbonding_time"</span>: <span class="string">"1814400000000000"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"redelegations"</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">"unbonding_delegations"</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">"validators"</span>: <span class="literal">null</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"supply"</span>: &#123;</span><br><span class="line"><span class="attr">"supply"</span>: []</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"chain_id"</span>: <span class="string">"nameservice"</span>,</span><br><span class="line"><span class="attr">"gentxs_dir"</span>: <span class="string">"/root/.nameserviced/config/gentx"</span>,</span><br><span class="line"><span class="attr">"moniker"</span>: <span class="string">"mynode"</span>,</span><br><span class="line"><span class="attr">"node_id"</span>: <span class="string">"70dfc95d3f9869145d79387c201eae58399074d8"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and to make sure your genesis file is correct, run:</p><p>并且确定你的创世文件是正确的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserviced validate-genesis</span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/KRO6CI.png" alt="KRO6CI"></p><p>You can now start <code>nameserviced</code> by calling <code>nameserviced start</code>. You will see logs begin streaming that represent blocks being produced, this will take a couple of seconds.</p><p>你现在可以通过调用’ nameserviced start ‘来启动’ nameserviced ‘。您将看到表示正在生成的块的日志流开始，这需要几秒钟的时间。</p><p><strong>==注意官方有命令(set-name)写反了~!!!==</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> First check the accounts to ensure they have funds</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查资金余额</span></span><br><span class="line">nameservicecli query account $(nameservicecli keys show user1 -a)</span><br><span class="line">nameservicecli query account $(nameservicecli keys show user2 -a)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Buy your first name using your coins from the genesis file</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用coins购买域名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 发起购买域名交易</span></span><br><span class="line">nameservicecli tx nameservice buy-name user1.id 5nametoken --from user1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set the value <span class="keyword">for</span> the name you just bought</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置域名的解析值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置域名解析值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意官方写反了!!!!!!</span></span><br><span class="line">nameservicecli tx nameservice set-name 8.8.8.8 user1.id --from user1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Try out a resolve query against the name you registered</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 针对您注册的名称尝试一个resolve查询</span></span><br><span class="line">nameservicecli query nameservice resolve user1.id</span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt; 8.8.8.8</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Try out a whois query against the name you just registered</span></span><br><span class="line">nameservicecli query nameservice get-whois user1.id</span><br><span class="line"><span class="meta">#</span><span class="bash"> whois查询</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt; &#123;<span class="string">"value"</span>:<span class="string">"8.8.8.8"</span>,<span class="string">"owner"</span>:<span class="string">"cosmos1l7k5tdt2qam0zecxrx78yuw447ga54dsmtpk2s"</span>,<span class="string">"price"</span>:[&#123;<span class="string">"denom"</span>:<span class="string">"nametoken"</span>,<span class="string">"amount"</span>:<span class="string">"5"</span>&#125;]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> user2 buys name from user1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> user2买user1的域名</span></span><br><span class="line">nameservicecli tx nameservice buy-name user1.id 10nametoken --from user2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> user2 decides to delete the name she just bought from user1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> use2删除域名</span></span><br><span class="line">nameservicecli tx nameservice delete-name user1.id --from user2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Try out a whois query against the name you just deleted</span></span><br><span class="line">nameservicecli query nameservice get-whois user1.id</span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt; &#123;<span class="string">"value"</span>:<span class="string">""</span>,<span class="string">"owner"</span>:<span class="string">""</span>,<span class="string">"price"</span>:[&#123;<span class="string">"denom"</span>:<span class="string">"nametoken"</span>,<span class="string">"amount"</span>:<span class="string">"1"</span>&#125;]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有的nameservice域名</span></span><br><span class="line">nameservicecli query nameservice list-whois</span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/E8GyGu.png" alt="E8GyGu"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/E4LXXw.png" alt="E4LXXw"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/HvLCWY.png" alt="HvLCWY"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/6NfJan.png" alt="6NfJan"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/s8W6Lp.png" alt="s8W6Lp"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/OgInYy.png" alt="OgInYy"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/npCWzq.png" alt="npCWzq"></p><p><strong>检查一下user2是否成功购买:</strong></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/mxpNfQ.png" alt="mxpNfQ"></p><p>余额检查:</p><ul><li><p>购买前: user1: 9990, user2: 1000</p></li><li><p>购买后: user1: 9990 - 5 + 50 = 10035 , user2: 1000 - 50 = 950</p></li></ul><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/MWdcH3.png" alt="MWdcH3"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/TOzYHX.png" alt="TOzYHX"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/V7Jmds.png" alt="V7Jmds"></p><h2 id="Run-second-node-on-another-machine-Optional"><a href="#Run-second-node-on-another-machine-Optional" class="headerlink" title="Run second node on another machine (Optional)"></a>Run second node on another machine (Optional)</h2><p>Open terminal to run commands against that just created to install nameserviced and nameservicecli</p><p>打开终端，对刚刚创建的用于安装nameserviced和nameservicecli的终端运行命令</p><p>复制项目, 进入目录:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="init-use-another-moniker-绰号-and-same-namechain"><a href="#init-use-another-moniker-绰号-and-same-namechain" class="headerlink" title="init use another moniker(绰号) and same namechain"></a>init use another moniker(绰号) and same namechain</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserviced init &lt;moniker<span class="number">-2</span>&gt; --chain-id namechain</span><br></pre></td></tr></table></figure><h3 id="overwrite-nameserviced-config-genesis-json-with-first-node’s-genesis-json"><a href="#overwrite-nameserviced-config-genesis-json-with-first-node’s-genesis-json" class="headerlink" title="overwrite ~/.nameserviced/config/genesis.json with first node’s genesis.json"></a>overwrite ~/.nameserviced/config/genesis.json with first node’s genesis.json</h3><h3 id="change-persistent-peers"><a href="#change-persistent-peers" class="headerlink" title="change persistent_peers"></a>change persistent_peers</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /.nameserviced/config/config.toml</span><br><span class="line">persistent_peers = "id@first_node_ip:26656"</span><br></pre></td></tr></table></figure><p>To find the node id of the first machine, run the following command on that machine:</p><p><code>nameserviced tendermint show-node-id</code></p><h3 id="start-this-second-node"><a href="#start-this-second-node" class="headerlink" title="start this second node"></a>start this second node</h3><p><code>nameserviced start</code></p><h1 id="20-Run-REST-routes"><a href="#20-Run-REST-routes" class="headerlink" title="20 Run REST routes"></a>20 Run REST routes</h1><p>==<strong>对于Rest接口，发送需要签名的交易需要本地签名，所以只有查询接口能够立即看到效果，其他接口都要等待签名</strong>==</p><p>==<strong>我的做法是使用前端cosmosjs：<a href="https://github.com/cosmostation/cosmosjs==" target="_blank" rel="noopener">https://github.com/cosmostation/cosmosjs==</a></strong></p><p>Now that you tested your CLI queries and transactions, time to test same things in the REST server. Leave the <code>nameserviced</code> that you had running earlier and start by gathering your addresses:</p><p>现在您已经测试了CLI查询和事务，现在可以在REST服务器中测试相同的内容了。离开你之前运行的’ nameserviced ‘，开始收集你的地址:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看用户的完整信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nameservicecli keys show 用户名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有的账户信息</span></span><br><span class="line">nameservicecli keys list</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nameservicecli keys show user1 --address</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nameservicecli keys show user2 --address</span></span><br></pre></td></tr></table></figure><p>Now its time to start the <code>rest-server</code> in another terminal window:</p><p>开启rest服务在另一个客户端:</p><p><strong>==注意,如果你的app已经开启了(即starport serve),那么默认的1317端口的rest服务已经打开,所以不需要使用以下命令.==</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nameservicecli rest-server --chain-id namechain --trust-node</span></span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/i6Skw9.png" alt="i6Skw9"></p><p>Then you can construct and run the following queries:</p><p>接下来就可以开始查询:</p><blockquote><p>NOTE: Be sure to substitute your password and buyer/owner addresses for the ones listed below!</p><p>请务必将您的密码和buyer/owner地址替换为下面列出的那些!</p></blockquote><p>==<strong>注意:此处官方文档的测试参数也有错误!!!, 参数amount要换成price</strong>==</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Get the sequence and account numbers <span class="keyword">for</span> user1 to construct the below requests</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取user1的序列和账号来构造下面的请求</span></span><br><span class="line">curl -s http://localhost:1317/auth/accounts/$(nameservicecli keys show user1 -a)</span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt; &#123;<span class="string">"type"</span>:<span class="string">"auth/Account"</span>,<span class="string">"value"</span>:&#123;<span class="string">"address"</span>:<span class="string">"cosmos127qa40nmq56hu27ae263zvfk3ey0tkapwk0gq6"</span>,<span class="string">"coins"</span>:[&#123;<span class="string">"denom"</span>:<span class="string">"jackCoin"</span>,<span class="string">"amount"</span>:<span class="string">"1000"</span>&#125;,&#123;<span class="string">"denom"</span>:<span class="string">"nametoken"</span>,<span class="string">"amount"</span>:<span class="string">"1010"</span>&#125;],<span class="string">"public_key"</span>:&#123;<span class="string">"type"</span>:<span class="string">"tendermint/PubKeySecp256k1"</span>,<span class="string">"value"</span>:<span class="string">"A9YxyEbSWzLr+IdK/PuMUYmYToKYQ3P/pM8SI1Bxx3wu"</span>&#125;,<span class="string">"account_number"</span>:<span class="string">"0"</span>,<span class="string">"sequence"</span>:<span class="string">"1"</span>&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Get the sequence and account numbers <span class="keyword">for</span> user2 to construct the below requests</span></span><br><span class="line">curl -s http://localhost:1317/auth/accounts/$(nameservicecli keys show user2 -a)</span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt; &#123;<span class="string">"type"</span>:<span class="string">"auth/Account"</span>,<span class="string">"value"</span>:&#123;<span class="string">"address"</span>:<span class="string">"cosmos1h7ztnf2zkf4558hdxv5kpemdrg3tf94hnpvgsl"</span>,<span class="string">"coins"</span>:[&#123;<span class="string">"denom"</span>:<span class="string">"aliceCoin"</span>,<span class="string">"amount"</span>:<span class="string">"1000"</span>&#125;,&#123;<span class="string">"denom"</span>:<span class="string">"nametoken"</span>,<span class="string">"amount"</span>:<span class="string">"980"</span>&#125;],<span class="string">"public_key"</span>:&#123;<span class="string">"type"</span>:<span class="string">"tendermint/PubKeySecp256k1"</span>,<span class="string">"value"</span>:<span class="string">"Avc7qwecLHz5qb1EKDuSTLJfVOjBQezk0KSPDNybLONJ"</span>&#125;,<span class="string">"account_number"</span>:<span class="string">"1"</span>,<span class="string">"sequence"</span>:<span class="string">"2"</span>&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Buy another name <span class="keyword">for</span> user1, first create the raw transaction</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NOTE: Be sure to specialize this request <span class="keyword">for</span> your specific environment, also the <span class="string">"buyer"</span> and <span class="string">"from"</span> should be the same address</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为user1购买另一个名称，首先创建原始交易</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意:请确保针对您的特定环境专门处理此请求，而且“buyer”和“from”应该是相同的地址</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意此处不是官方的amount,而是price, 在官网有错</span></span><br><span class="line">curl -X POST -s http://localhost:1317/nameservice/whois --data-binary '&#123;"base_req":&#123;"from":"'$(nameservicecli keys show user1 -a)'","chain_id":"namechain"&#125;,"name":"user1.id","price":"5nametoken","buyer":"'$(nameservicecli keys show user1 -a)'"&#125;' &gt; unsignedTx.json</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Then sign this transaction</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NOTE: In a real environment the raw transaction should be signed on the client side. Also the sequence needs to be adjusted, depending on what the query of user2<span class="string">'s account has shown.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后签署该事务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意:在真实环境中，原始交易应该在客户端签名。此外，还需要根据user2帐户的查询显示的内容调整序列。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意. 这里的sequence、account-number都是第一步查询序号和账户号的得到的,下面的命令自行替换</span></span><br><span class="line">nameservicecli tx sign unsignedTx.json --from user1 --offline --chain-id namechain --sequence 1 --account-number 0 &gt; signedTx.json</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 不使用离线模式进行签名</span></span><br><span class="line">nameservicecli tx sign unsignedTx.json --from user1 --chain-id namechain &gt; signedTx.json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> And finally broadcast the signed transaction</span></span><br><span class="line">nameservicecli tx broadcast signedTx.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt; &#123; <span class="string">"height"</span>: <span class="string">"266"</span>, <span class="string">"txhash"</span>: <span class="string">"C041AF0CE32FBAE5A4DD6545E4B1F2CB786879F75E2D62C79D690DAE163470BC"</span>, <span class="string">"logs"</span>: [  &#123;   <span class="string">"msg_index"</span>: <span class="string">"0"</span>,   <span class="string">"success"</span>: <span class="literal">true</span>,   <span class="string">"log"</span>: <span class="string">""</span>  &#125; ],<span class="string">"gas_wanted"</span>:<span class="string">"200000"</span>, <span class="string">"gas_used"</span>: <span class="string">"41510"</span>, <span class="string">"tags"</span>: [  &#123;   <span class="string">"key"</span>: <span class="string">"action"</span>,   <span class="string">"value"</span>: <span class="string">"buy_name"</span>  &#125; ]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set the data <span class="keyword">for</span> that name that user1 just bought</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NOTE: Be sure to specialize this request <span class="keyword">for</span> your specific environment, also the <span class="string">"owner"</span> and <span class="string">"from"</span> should be the same address</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为user1刚刚购买的名称设置数据</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意:请确保为您的特定环境专门化此请求，而且“owner”和“from”应该是相同的地址</span></span><br><span class="line">curl -X PUT -s http://localhost:1317/nameservice/whois --data-binary '&#123;"base_req":&#123;"from":"'$(nameservicecli keys show user1 -a)'","chain_id":"namechain","sequence": "1","account_number": "2"&#125;,"name":"user1.id","value":"8.8.4.4","owner":"'$(nameservicecli keys show user1 -a)'"&#125;' &gt; unsignedTx.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt; &#123;<span class="string">"check_tx"</span>:&#123;<span class="string">"gasWanted"</span>:<span class="string">"200000"</span>,<span class="string">"gasUsed"</span>:<span class="string">"1242"</span>&#125;,<span class="string">"deliver_tx"</span>:&#123;<span class="string">"log"</span>:<span class="string">"Msg 0: "</span>,<span class="string">"gasWanted"</span>:<span class="string">"200000"</span>,<span class="string">"gasUsed"</span>:<span class="string">"1352"</span>,<span class="string">"tags"</span>:[&#123;<span class="string">"key"</span>:<span class="string">"YWN0aW9u"</span>,<span class="string">"value"</span>:<span class="string">"c2V0X25hbWU="</span>&#125;]&#125;,<span class="string">"hash"</span>:<span class="string">"B4DF0105D57380D60524664A2E818428321A0DCA1B6B2F091FB3BEC54D68FAD7"</span>,<span class="string">"height"</span>:<span class="string">"26"</span>&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Again we need to sign and broadcast</span></span><br><span class="line">nameservicecli tx sign unsignedTx.json --from user1 --offline --chain-id namechain --sequence 2 --account-number 0 &gt; signedTx.json</span><br><span class="line">nameservicecli tx broadcast signedTx.json</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Query the value <span class="keyword">for</span> the name user1 just <span class="built_in">set</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -s http://localhost:1317/nameservice/whois/user1.id/resolve</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 8.8.4.4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Query whois <span class="keyword">for</span> the name user1 just bought</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -s http://localhost:1317/nameservice/whois/user1.id</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt; &#123;<span class="string">"value"</span>:<span class="string">"8.8.8.8"</span>,<span class="string">"owner"</span>:<span class="string">"cosmos127qa40nmq56hu27ae263zvfk3ey0tkapwk0gq6"</span>,<span class="string">"price"</span>:[&#123;<span class="string">"denom"</span>:<span class="string">"STAKE"</span>,<span class="string">"amount"</span>:<span class="string">"10"</span>&#125;]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> user2 buys name from user1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -X POST -s http://localhost:1317/nameservice/whois --data-binary <span class="string">'&#123;"base_req":&#123;"from":"'</span>$(nameservicecli keys show user2 -a)<span class="string">'","chain_id":"namechain"&#125;,"name":"user1.id","price":"10nametoken","buyer":"'</span>$(nameservicecli keys show user2 -a)<span class="string">'"&#125;'</span> &gt; unsignedTx.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Again we need to sign and broadcast</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NOTE: The account number has changed to 1 and the sequence is now 2, according to the query of user2<span class="string">'s account</span></span></span><br><span class="line">nameservicecli tx sign unsignedTx.json --from user2 --offline --chain-id namechain --sequence 2 --account-number 1 &gt; signedTx.json</span><br><span class="line">nameservicecli tx broadcast signedTx.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt; &#123; <span class="string">"height"</span>: <span class="string">"1515"</span>, <span class="string">"txhash"</span>: <span class="string">"C9DCC423E10E7E5E40A549057A4AA060DA6D6A885A394F6ED5C0E40AEE984A77"</span>, <span class="string">"logs"</span>: [  &#123;   <span class="string">"msg_index"</span>: <span class="string">"0"</span>,   <span class="string">"success"</span>: <span class="literal">true</span>,   <span class="string">"log"</span>: <span class="string">""</span>  &#125; ],<span class="string">"gas_wanted"</span>: <span class="string">"200000"</span>, <span class="string">"gas_used"</span>: <span class="string">"42375"</span>, <span class="string">"tags"</span>: [  &#123;   <span class="string">"key"</span>: <span class="string">"action"</span>,   <span class="string">"value"</span>: <span class="string">"buy_name"</span>  &#125; ]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Now, user2 no longer needs the name she bought from jack and hence deletes it</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NOTE: Only the owner can delete the name. Since she is one, she can delete the name she bought from jack</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -XDELETE -s http://localhost:1317/nameservice/names --data-binary <span class="string">'&#123;"base_req":&#123;"from":"'</span>$(nameservicecli keys show user2 -a)<span class="string">'","chain_id":"namechain"&#125;,"name":"user1.id","owner":"'</span>$(nameservicecli keys show user2 -a)<span class="string">'"&#125;'</span> &gt; unsignedTx.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> And a final time sign and broadcast</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NOTE: The account number is still 1, but the sequence is changed to 3, according to the query of user2<span class="string">'s account</span></span></span><br><span class="line">nameservicecli tx sign unsignedTx.json --from user2 --offline --chain-id namechain --sequence 3 --account-number 1 &gt; signedTx.json</span><br><span class="line">nameservicecli tx broadcast signedTx.json</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Query whois <span class="keyword">for</span> the name user2 just deleted</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -s http://localhost:1317/nameservice/names/user1.id/whois</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt; &#123;<span class="string">"value"</span>:<span class="string">""</span>,<span class="string">"owner"</span>:<span class="string">""</span>,<span class="string">"price"</span>:[&#123;<span class="string">"denom"</span>:<span class="string">"STAKE"</span>,<span class="string">"amount"</span>:<span class="string">"1"</span>&#125;]&#125;</span></span><br></pre></td></tr></table></figure><h2 id="1-开启rest服务"><a href="#1-开启rest服务" class="headerlink" title="1.开启rest服务"></a>1.开启rest服务</h2><p><strong>如果已经开启整个项目(即starport serve)那么此步骤可以不需要做</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameservicecli rest-server --chain-id namechain --trust-node</span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/CjF66E.png" alt="CjF66E"></p><h2 id="2-查询账户信息"><a href="#2-查询账户信息" class="headerlink" title="2.查询账户信息"></a>2.查询账户信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Get the sequence and account numbers <span class="keyword">for</span> user1 to construct the below requests</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取user1的序列和账号来构造下面的请求</span></span><br><span class="line">curl -s http://localhost:1317/auth/accounts/$(nameservicecli keys show user1 -a)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Get the sequence and account numbers <span class="keyword">for</span> user2 to construct the below requests</span></span><br><span class="line">curl -s http://localhost:1317/auth/accounts/$(nameservicecli keys show user2 -a)</span><br></pre></td></tr></table></figure><p>这些信息用于完成下面的请求参数</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/1NI6dR.png" alt="1NI6dR"></p><p>psotman:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/90EpOV.png" alt="90EpOV"></p><h2 id="3-购买域名"><a href="#3-购买域名" class="headerlink" title="3.购买域名"></a>3.购买域名</h2><p>user1购买域名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -s http://localhost:1317/nameservice/whois --data-binary '&#123;"base_req":&#123;"from":"'$(nameservicecli keys show user1 -a)'","chain_id":"namechain"&#125;,"name":"user1.id","price":"5nametoken","buyer":"'$(nameservicecli keys show user1 -a)'"&#125;' &gt; unsignedTx.json</span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/KkukAm.png" alt="KkukAm"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/OITmtI.png" alt="OITmtI"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"cosmos-sdk/StdTx"</span>,</span><br><span class="line">    <span class="attr">"value"</span>: &#123;</span><br><span class="line">        <span class="attr">"msg"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"nameservice/BuyName"</span>,</span><br><span class="line">                <span class="attr">"value"</span>: &#123;</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"www.baidu.com"</span>,</span><br><span class="line">                    <span class="attr">"bid"</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">"denom"</span>: <span class="string">"nametoken"</span>,</span><br><span class="line">                            <span class="attr">"amount"</span>: <span class="string">"5"</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ],</span><br><span class="line">                    <span class="attr">"buyer"</span>: <span class="string">"cosmos170ca57fje9tcjapjeaeyk36xzzdfatlru06ju0"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"fee"</span>: &#123;</span><br><span class="line">            <span class="attr">"amount"</span>: [],</span><br><span class="line">            <span class="attr">"gas"</span>: <span class="string">"200000"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"signatures"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"memo"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-本地进行签名"><a href="#4-本地进行签名" class="headerlink" title="4.本地进行签名"></a>4.本地进行签名</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 然后签署该事务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意:在真实环境中，原始交易应该在客户端签名。此外，还需要根据user2帐户的查询显示的内容调整序列。</span></span><br><span class="line">nameservicecli tx sign unsignedTx.json --from user1 --offline --chain-id namechain --sequence 1 --account-number 0 &gt; signedTx.json</span><br></pre></td></tr></table></figure><p>signedTx.json:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  2   "type": "cosmos-sdk/StdTx",</span><br><span class="line">  3   "value": &#123;</span><br><span class="line">  4     "msg": [</span><br><span class="line">  <span class="number">5</span>       &#123;</span><br><span class="line">  6         "type": "nameservice/BuyName",</span><br><span class="line">  7         "value": &#123;</span><br><span class="line">  8           "name": "user1.id",</span><br><span class="line">  9           "bid": [</span><br><span class="line"> <span class="number">10</span>             &#123;</span><br><span class="line"> 11               "denom": "nametoken",</span><br><span class="line"> 12               "amount": "5"</span><br><span class="line"> 13             &#125;</span><br><span class="line"> 14           ],</span><br><span class="line"> 15           "buyer": "cosmos128su4wssj7dcmcsa2mr00pu4c0520fq5lcsd5m"</span><br><span class="line"> 16         &#125;</span><br><span class="line"> 17       &#125;</span><br><span class="line"> 18     ],</span><br><span class="line"> 19     "fee": &#123;</span><br><span class="line"> 20       "amount": [],</span><br><span class="line"> 21       "gas": "200000"</span><br><span class="line">22     &#125;,</span><br><span class="line"> 23     "signatures": [</span><br><span class="line"> <span class="number">24</span>       &#123;</span><br><span class="line"> 25         "pub_key": &#123;</span><br><span class="line"> 26           "type": "tendermint/PubKeySecp256k1",</span><br><span class="line"> 27           "value": "A7vz4G+HsxMmbd/19PAzIOfZro6xgRjgBZyb04H1tZRJ"</span><br><span class="line"> 28         &#125;,</span><br><span class="line"> 29         "signature": "k6Cq6DF1bbZRxUqFYeDteUt889HN1DwDULxQUS9QuTlXoFpl04U+Ge87jqjh6fv8mDrJLASu56rRt6vv7NtoPA=="</span><br><span class="line"> 30       &#125;</span><br><span class="line"> 31     ],</span><br><span class="line"> 32     "memo": ""</span><br><span class="line"> 33   &#125;</span><br><span class="line"> 34 &#125;</span><br></pre></td></tr></table></figure><h2 id="5-广播交易"><a href="#5-广播交易" class="headerlink" title="5.广播交易"></a>5.广播交易</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> And finally broadcast the signed transaction</span></span><br><span class="line">nameservicecli tx broadcast signedTx.json</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;h1 id=&quot;1-Getting-Started&quot;&gt;&lt;a href=&quot;#1-Getting-Started&quot; class=&quot;headerlink&quot; title=&quot;1.Getting Started&quot;&gt;&lt;/a&gt;1.Getting Started&lt;/h1&gt;&lt;p&gt;使用&lt;strong&gt;scratch&lt;/strong&gt;部署区块链&lt;/p&gt;
&lt;p&gt;项目最后会构建一个Nameservice, 就是一个映射关系 string-&amp;gt;other string(&lt;code&gt;map[string]string&lt;/code&gt;)&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="cosmos" scheme="https://xwjahahahaha.github.io/categories/technical/cosmos/"/>
    
    
    <category term="cosmos" scheme="https://xwjahahahaha.github.io/tags/cosmos/"/>
    
  </entry>
  
  <entry>
    <title>mac使用Homebrew下载旧版本/历史版本项目</title>
    <link href="https://xwjahahahaha.github.io/2021/03/04/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%B0%8F%E6%8A%80%E5%B7%A7/mac%E4%BD%BF%E7%94%A8Homebrew%E4%B8%8B%E8%BD%BD%E6%97%A7%E7%89%88%E6%9C%AC-%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC%E9%A1%B9%E7%9B%AE/"/>
    <id>https://xwjahahahaha.github.io/2021/03/04/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%B0%8F%E6%8A%80%E5%B7%A7/mac%E4%BD%BF%E7%94%A8Homebrew%E4%B8%8B%E8%BD%BD%E6%97%A7%E7%89%88%E6%9C%AC-%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-03-04T01:36:38.000Z</published>
    <updated>2021-03-04T01:45:29.178Z</updated>
    
    <content type="html"><![CDATA[<p>mac中使用brew下载软件都是默认下载的最新版本,下载旧版本时需要一定的方法</p><p>以我下载starport软件为例,默认下载0.14.0 ,但是我需要0.13.1版本</p><h1 id="一、找到From的-rb文件"><a href="#一、找到From的-rb文件" class="headerlink" title="一、找到From的.rb文件"></a>一、找到From的.rb文件</h1><p>查看brew安装的软件源:</p><p><code>brew info 你的软件名</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/3KapYY.png" alt="3KapYY"></p><a id="more"></a><p>可以看到默认为最新版本,==找到From的地址==</p><h2 id="二、打开From地址查看-rb文件"><a href="#二、打开From地址查看-rb文件" class="headerlink" title="二、打开From地址查看.rb文件"></a>二、打开From地址查看.rb文件</h2><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/9Dp1cs.png" alt="9Dp1cs"></p><p>其实brew就是通过此地址进行下载的,打开该地址</p><h1 id="三、找到对应的版本"><a href="#三、找到对应的版本" class="headerlink" title="三、找到对应的版本"></a>三、找到对应的版本</h1><p>根据上面的地址,找到你需要的版本下载对应的旧版本压缩包即可!</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/wL1SNe.png" alt="wL1SNe"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;mac中使用brew下载软件都是默认下载的最新版本,下载旧版本时需要一定的方法&lt;/p&gt;
&lt;p&gt;以我下载starport软件为例,默认下载0.14.0 ,但是我需要0.13.1版本&lt;/p&gt;
&lt;h1 id=&quot;一、找到From的-rb文件&quot;&gt;&lt;a href=&quot;#一、找到From的-rb文件&quot; class=&quot;headerlink&quot; title=&quot;一、找到From的.rb文件&quot;&gt;&lt;/a&gt;一、找到From的.rb文件&lt;/h1&gt;&lt;p&gt;查看brew安装的软件源:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;brew info 你的软件名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://xwjpics.gumptlu.work/qinniu_uPic/3KapYY.png&quot; alt=&quot;3KapYY&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    
  </entry>
  
  <entry>
    <title>日记_0135</title>
    <link href="https://xwjahahahaha.github.io/2021/03/04/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0135/"/>
    <id>https://xwjahahahaha.github.io/2021/03/04/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0135/</id>
    <published>2021-03-04T00:32:08.000Z</published>
    <updated>2021-03-04T15:52:36.255Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>英语</th><th>开发</th><th>项目</th><th><font color='red'>科研（No.1）</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>后端：go语言深化，框架gin等</strong>，<strong>go书看完</strong></td><td>区块链公链项目</td><td>论文一周两篇细读,每个月尝试写一篇</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td>英文视频(生活大爆炸开始)</td><td>区块链框架Cosmos</td><td>金窝窝项目需求准备cosmos</td><td>分布式课程论文</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>③</td><td></td><td>Linux学完</td><td>本科毕业设计</td><td></td><td>为下学期的<strong>暑期实习</strong>做准备</td></tr><tr><td>④</td><td></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td></td><td></td></tr><tr><td>⑤</td><td></td><td>有时间的话：Java</td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td>代客泊车项目申报书</td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input disabled="" type="checkbox"> <a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7467408" target="_blank" rel="noopener">Blockchains and Smart Contracts for the Internet of Things</a></li><li><input disabled="" type="checkbox"> Where Is Current Research on Blockchain Technology?-A Systematic Review</li><li><input disabled="" type="checkbox"> Blockstack: A Global Naming and Storage System Secured by Blockchains</li><li><input disabled="" type="checkbox"> Plasma </li><li><input disabled="" type="checkbox"> <a href="https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md" target="_blank" rel="noopener">EOS.IO Technical White Paper v2</a></li><li><input disabled="" type="checkbox"> Ocean Protocol: Tools for the Web3 Data Economy</li><li><input disabled="" type="checkbox"> Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts</li><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input disabled="" type="checkbox"> Decentralizing Privacy: Using Blockchain to Protect Personal Data</li><li><input disabled="" type="checkbox"> 《 Tendermint：关于拜占庭容错共识算法的最新进展》</li><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input disabled="" type="checkbox"> The Ripple Protocol Consensus Algorithm</li><li><input disabled="" type="checkbox"> <a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="noopener">以太坊白皮书</a></li><li><input disabled="" type="checkbox"> Hyperledger Fabric: A Distributed Operating System for Permissioned Blockchains</li><li><input disabled="" type="checkbox"> Secure Data Storage and Recovery in IndustrialBlockchain Network Environments</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li>学弟的cosmos隐私保护项目</li><li>第一篇论文</li><li>科技部编程比赛</li><li>暑期实习准备(Go, 算法等)</li></ul><p>三月 </p><ul><li><input disabled="" type="checkbox"> <p>3-3 ~ 3-7 cosmos项目架构熟悉,做完全部的案例,并且熟悉SDK</p></li><li><input disabled="" type="checkbox"> <p>3-8 ~ 3-20 科技部编程比赛项目实现(使用cosmos)</p></li><li><input disabled="" type="checkbox"> <p>3-20~3-31 Go公链实现项目</p></li><li><input disabled="" type="checkbox"> <p>确定研究主方向,第一篇论文初稿与老师讨论</p></li></ul><p>四月 主要准备算法与Go后端框架的学习</p><p>五月~七月 算法、面试准备</p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> 英语50词</li><li><input disabled="" type="checkbox"> leetcode一题</li><li><input checked="" disabled="" type="checkbox"> nameservice项目</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2><ul><li>做事总是半途而废, 三分钟热度</li><li>想好做什么再去做</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研（No.1）&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;后端：go语言深化，框架gin等&lt;/strong&gt;，&lt;strong&gt;go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;区块链公链项目&lt;/td&gt;
&lt;td&gt;论文一周两篇细读,每个月尝试写一篇&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;英文视频(生活大爆炸开始)&lt;/td&gt;
&lt;td&gt;区块链框架Cosmos&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;分布式课程论文&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;为下学期的&lt;strong&gt;暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;有时间的话：Java&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;代客泊车项目申报书&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>日记_0134</title>
    <link href="https://xwjahahahaha.github.io/2021/03/03/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0134/"/>
    <id>https://xwjahahahaha.github.io/2021/03/03/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0134/</id>
    <published>2021-03-03T02:37:23.000Z</published>
    <updated>2021-03-04T00:34:08.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>英语</th><th>开发</th><th>项目</th><th><font color='red'>科研（No.1）</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>后端：go语言深化，框架gin等</strong>，<strong>go书看完</strong></td><td>区块链公链项目</td><td>论文一周一篇细读,每个月尝试写一篇,尝试写</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td>英文视频(生活大爆炸开始)</td><td>区块链框架Cosmos</td><td>金窝窝项目需求准备cosmos</td><td>分布式课程论文</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>③</td><td></td><td>Linux学完</td><td>本科毕业设计</td><td></td><td>为下学期的<strong>暑期实习</strong>做准备</td></tr><tr><td>④</td><td></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td></td><td></td></tr><tr><td>⑤</td><td></td><td>有时间的话：Java</td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td>代客泊车项目申报书</td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input disabled="" type="checkbox"> <a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7467408" target="_blank" rel="noopener">Blockchains and Smart Contracts for the Internet of Things</a></li><li><input disabled="" type="checkbox"> Where Is Current Research on Blockchain Technology?-A Systematic Review</li><li><input disabled="" type="checkbox"> Blockstack: A Global Naming and Storage System Secured by Blockchains</li><li><input disabled="" type="checkbox"> Plasma </li><li><input disabled="" type="checkbox"> <a href="https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md" target="_blank" rel="noopener">EOS.IO Technical White Paper v2</a></li><li><input disabled="" type="checkbox"> Ocean Protocol: Tools for the Web3 Data Economy</li><li><input disabled="" type="checkbox"> Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts</li><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input disabled="" type="checkbox"> Decentralizing Privacy: Using Blockchain to Protect Personal Data</li><li><input disabled="" type="checkbox"> 《 Tendermint：关于拜占庭容错共识算法的最新进展》</li><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input disabled="" type="checkbox"> The Ripple Protocol Consensus Algorithm</li><li><input disabled="" type="checkbox"> <a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="noopener">以太坊白皮书</a></li><li><input disabled="" type="checkbox"> Hyperledger Fabric: A Distributed Operating System for Permissioned Blockchains</li><li><input disabled="" type="checkbox"> Secure Data Storage and Recovery in IndustrialBlockchain Network Environments</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li>学弟的cosmos隐私保护项目</li><li>第一篇论文</li><li>科技部编程比赛</li><li>暑期实习准备(Go, 算法等)</li></ul><p>三月 </p><ul><li><input disabled="" type="checkbox"> <p>3-3 ~ 3-7 cosmos项目架构熟悉,做完全部的案例,并且熟悉SDK</p></li><li><input disabled="" type="checkbox"> <p>3-8 ~ 3-20 科技部编程比赛项目实现(使用cosmos)</p></li><li><input disabled="" type="checkbox"> <p>3-20~3-31 Go公链实现项目</p></li><li><input disabled="" type="checkbox"> <p>确定研究主方向,第一篇论文初稿与老师讨论</p></li></ul><p>四月 主要准备算法与Go后端框架的学习</p><p>五月~七月 算法、面试准备</p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> <p>英语50词</p></li><li><input disabled="" type="checkbox"> <p>leetcode一题</p></li><li><input checked="" disabled="" type="checkbox"> <p>cosmos游戏案例做完</p></li><li><input checked="" disabled="" type="checkbox"> <p>区块链数据安全论文部分</p></li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研（No.1）&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;后端：go语言深化，框架gin等&lt;/strong&gt;，&lt;strong&gt;go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;区块链公链项目&lt;/td&gt;
&lt;td&gt;论文一周一篇细读,每个月尝试写一篇,尝试写&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;英文视频(生活大爆炸开始)&lt;/td&gt;
&lt;td&gt;区块链框架Cosmos&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;分布式课程论文&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;为下学期的&lt;strong&gt;暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;有时间的话：Java&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;代客泊车项目申报书&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>日记_0133</title>
    <link href="https://xwjahahahaha.github.io/2021/03/02/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0133/"/>
    <id>https://xwjahahahaha.github.io/2021/03/02/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0133/</id>
    <published>2021-03-02T00:24:10.000Z</published>
    <updated>2021-03-03T02:13:19.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>英语</th><th>开发</th><th>项目</th><th><font color='red'>科研（No.1）</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>后端：go语言深化，框架gin等</strong>，<strong>go书看完</strong></td><td>区块链公链项目</td><td>论文一周两篇细读,每个月尝试写一篇</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td>英文视频(生活大爆炸开始)</td><td>区块链框架Cosmos</td><td>金窝窝项目需求准备cosmos</td><td>分布式课程论文</td><td>看比赛资讯，准备明年的<strong>区块链比赛</strong></td></tr><tr><td>③</td><td></td><td>Linux学完</td><td>本科毕业设计</td><td></td><td>为下学期的<strong>暑期实习</strong>做准备</td></tr><tr><td>④</td><td></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td></td><td></td></tr><tr><td>⑤</td><td></td><td>有时间的话：Java</td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td>代客泊车项目申报书</td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input disabled="" type="checkbox"> <p><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7467408" target="_blank" rel="noopener">Blockchains and Smart Contracts for the Internet of Things</a></p></li><li><input disabled="" type="checkbox"> <p>Where Is Current Research on Blockchain Technology?-A Systematic Review</p></li><li><input disabled="" type="checkbox"> <p>Blockstack: A Global Naming and Storage System Secured by Blockchains</p></li><li><input disabled="" type="checkbox"> <p>Plasma </p></li><li><input disabled="" type="checkbox"> <p><a href="https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md" target="_blank" rel="noopener">EOS.IO Technical White Paper v2</a></p></li><li><input disabled="" type="checkbox"> <p>Ocean Protocol: Tools for the Web3 Data Economy</p></li><li><input disabled="" type="checkbox"> <p>Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts</p></li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input disabled="" type="checkbox"> Decentralizing Privacy: Using Blockchain to Protect Personal Data</li><li><input disabled="" type="checkbox"> 《 Tendermint：关于拜占庭容错共识算法的最新进展》</li><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input disabled="" type="checkbox"> The Ripple Protocol Consensus Algorithm</li><li><input disabled="" type="checkbox"> <a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="noopener">以太坊白皮书</a></li><li><input disabled="" type="checkbox"> Hyperledger Fabric: A Distributed Operating System for Permissioned Blockchains</li><li><input disabled="" type="checkbox"> Secure Data Storage and Recovery in IndustrialBlockchain Network Environments</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li></ul><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> <p>英语50词 + 英语视频</p></li><li><input disabled="" type="checkbox"> <p>leetcode一题</p></li><li><input checked="" disabled="" type="checkbox"> <p>闪电网络看完</p></li><li><input checked="" disabled="" type="checkbox"> <p>Cosmos环境</p></li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研（No.1）&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;后端：go语言深化，框架gin等&lt;/strong&gt;，&lt;strong&gt;go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;区块链公链项目&lt;/td&gt;
&lt;td&gt;论文一周两篇细读,每个月尝试写一篇&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;英文视频(生活大爆炸开始)&lt;/td&gt;
&lt;td&gt;区块链框架Cosmos&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;分布式课程论文&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备明年的&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;为下学期的&lt;strong&gt;暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;有时间的话：Java&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;代客泊车项目申报书&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>scavenger_hunt_game测试项目部署</title>
    <link href="https://xwjahahahaha.github.io/2021/03/01/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Cosmos/%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B%E5%BA%93/scavenger-hunt-game%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    <id>https://xwjahahahaha.github.io/2021/03/01/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Cosmos/%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B%E5%BA%93/scavenger-hunt-game%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</id>
    <published>2021-03-01T07:07:45.000Z</published>
    <updated>2021-03-04T02:08:22.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="scavenger-hunt-game"><a href="#scavenger-hunt-game" class="headerlink" title="scavenger hunt game"></a><strong>scavenger hunt</strong> game</h1><p>cosmos官方给出的拾荒者狩猎游戏运行<strong>部署细节/重点记录,以及文档翻译</strong></p><p>官方地址:<a href="https://tutorials.cosmos.network/scavenge/tutorial/02-the-game.html" target="_blank" rel="noopener">The Game | Cosmos SDK Tutorials</a></p><p>文档翻译部分来源于:<a href="https://blog.csdn.net/lk2684753/article/details/113849468" target="_blank" rel="noopener">https://blog.csdn.net/lk2684753/article/details/113849468</a></p><a id="more"></a><h2 id="1-安装starport"><a href="#1-安装starport" class="headerlink" title="1.安装starport"></a>1.安装starport</h2><p>starport是cosmos官方的项目部署脚手架工具</p><p>Mac下的安装:</p><p>==注意⚠️:要安装0.13.1版本==,因为官网的教程安装的是0.13.1</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/YmWghE.png" alt="YmWghE"></p><p>不会安装旧版本可见:<a href="https://blog.csdn.net/weixin_43988498/article/details/114359578?spm=1001.2014.3001.5501" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43988498/article/details/114359578?spm=1001.2014.3001.5501</a></p><p>不能直接用如下命令,Homebrew会默认安装最新版</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tendermint/tap/starport</span><br></pre></td></tr></table></figure><p>其他安装:[starport/2 Install.md at develop · tendermint/starport (github.com)](<a href="https://github.com/tendermint/starport/blob/develop/docs/1" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/1</a> Introduction/2 Install.md)</p><h2 id="2-创建-拷贝项目"><a href="#2-创建-拷贝项目" class="headerlink" title="2.创建/拷贝项目"></a>2.创建/拷贝项目</h2><p>初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> starport app --<span class="built_in">help</span></span></span><br><span class="line">Generates an empty application</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  starport app [github.com/org/repo] [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --address-prefix string   Address prefix (default "cosmos")</span><br><span class="line">  -h, --help                    help for app</span><br><span class="line">      --sdk-version string      Target Cosmos-SDK Version -launchpad -stargate (default "stargate")</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> starport app github.com/github-username/scavenge --sdk-version=<span class="string">"launchpad"</span></span></span><br><span class="line"></span><br><span class="line">⭐️ Successfully created a Cosmos app 'scavenge'.</span><br><span class="line">👉 Get started with the following commands:</span><br><span class="line"></span><br><span class="line"><span class="meta"> %</span><span class="bash"> <span class="built_in">cd</span> scavenge</span></span><br><span class="line"><span class="meta"> %</span><span class="bash"> starport serve</span></span><br><span class="line"></span><br><span class="line">NOTE: add --verbose flag for verbose (detailed) output.</span><br></pre></td></tr></table></figure><p>出现的问题:</p><ul><li><p>问题一:</p><p>starport requires protoc installed.</p><p>Please, follow instructions on <a href="https://grpc.io/docs/protoc-installation" target="_blank" rel="noopener">https://grpc.io/docs/protoc-installation</a></p><p>原因:环境未安装protoc</p><p>解决:<code>brew install protobuf</code></p></li><li><p>问题二</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">scavenge/query.proto:4:1: warning: Import google/api/annotations.proto is unused.</span><br><span class="line"></span><br><span class="line">scavenge/query.proto:5:1: warning: Import cosmos/base/query/v1beta1/pagination.proto is unused.</span><br><span class="line"></span><br><span class="line">protoc-gen-gocosmos: program not found or is not executable</span><br><span class="line"></span><br><span class="line">Please specify a program using absolute path or make sure the program is available in your PATH system variable</span><br><span class="line"></span><br><span class="line">--gocosmos_out: protoc-gen-gocosmos: Plugin failed with status code 1.</span><br><span class="line"></span><br><span class="line">: exit status 1</span><br></pre></td></tr></table></figure><p>原因:没有把<code>GOPATH/bin</code>加入到环境变量中,导致protoc-gen-gocosmos等无法编译可执行程序到bin目录下</p><p>解决:添加环境变量,再次运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export GOPATH&#x3D;&quot;&#x2F;Users&#x2F;XXXX&#x2F;projects&#x2F;go_projects&quot;</span><br><span class="line">export PATH&#x3D;$PATH:$GOROOT&#x2F;bin:$GOPATH&#x2F;src:$GOPATH&#x2F;bin</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-启动项目"><a href="#3-启动项目" class="headerlink" title="3.启动项目"></a>3.启动项目</h2><p><code>starport serve</code></p><ul><li><p>问题一</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm ERR! code E404</span><br><span class="line">npm ERR! 404 Not Found - GET https://registry.npm.taobao.org/@types/node/-/node-13.13.36.tgz - [not_found] document not found</span><br><span class="line">npm ERR! 404 </span><br><span class="line">npm ERR! 404  '@types/node@https://registry.npm.taobao.org/@types/node/-/node-13.13.36.tgz' is not in the npm registry.</span><br><span class="line">npm ERR! 404 You should bug the author to publish it (or use the name yourself!)</span><br><span class="line">npm ERR! 404 </span><br><span class="line">npm ERR! 404 Note that you can also install from a</span><br><span class="line">npm ERR! 404 tarball, folder, http url, or git url.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /Users/xwj/.npm/_logs/2021-03-01T07_24_26_696Z-debug.log</span><br></pre></td></tr></table></figure><p>原因:部分依赖包淘宝镜像中不存在</p><p>解决:修改为原始的源<code>npm config set registry https://registry.npmjs.org/</code>再次启动</p><p>淘宝源<code>npm config set registry https://registry.npmjs.org/</code></p></li></ul><h2 id="4-成功启动"><a href="#4-成功启动" class="headerlink" title="4.成功启动"></a>4.成功启动</h2><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/ebEzzD.png" alt="ebEzzD"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/5wjuhQ.png" alt="5wjuhQ"></p><p>如果启动界面不是如上所示,那么请检查starport的版本号要 &gt;v0.14.0</p><p>最新版下载命令<code>curl https://get.starport.network/starport! | bash</code></p><h2 id="5-添加脚手架类型"><a href="#5-添加脚手架类型" class="headerlink" title="5.添加脚手架类型"></a>5.添加脚手架类型</h2><p>命令<code>starport type</code>,作用:<strong>给每一个type生成CRUD的操作</strong></p><p>在项目文件夹下打开一个新终端，然后运行以下starport type命令来生成我们的scavenge类型</p><p><code>starport type scavenge description solutionHash reward solution scavenger</code></p><p>我们还要创建第二种类型，Commit以防止前面提到的提交的解决方案在前端运行</p><p><code>starport type commit solutionHash solutionScavengerHash</code></p><p>到目前为止,Starport脚手架帮助我们搭建了必须的文件和函数</p><p>下面将会根据游戏的需求更改这些函数与文件.</p><ul><li><p>问题一</p><p><code>open go.mod: no such file or directory</code></p><p>执行的路径不对,需要在scavenge文件夹下执行,不然会提示找不到go.mod文件夹</p></li></ul><h2 id="6-Message模块"><a href="#6-Message模块" class="headerlink" title="6.Message模块"></a>6.Message模块</h2><p>开始第一个模块的编写,CRUD</p><p>Create</p><p>Messages type已经创建在<code>./x/scavenge/types/</code>文件夹下的<code>MsgCommitSolution</code>,但是我们要在中删除掉一些我们不需要的字段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ sdk.Msg = &amp;MsgCreateScavenge&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MsgCreateScavenge <span class="keyword">struct</span> &#123;</span><br><span class="line">Creator sdk.AccAddress <span class="string">`json:"creator" yaml:"creator"`</span></span><br><span class="line">Description <span class="keyword">string</span> <span class="string">`json:"description" yaml:"description"`</span></span><br><span class="line">SolutionHash <span class="keyword">string</span> <span class="string">`json:"solution_hash" yaml:"solution_hash"`</span></span><br><span class="line">Reward sdk.Coins <span class="string">`json:"reward" yaml:"reward"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMsgCreateScavenge</span><span class="params">(creator sdk.AccAddress, description <span class="keyword">string</span>, solutionHash <span class="keyword">string</span>, reward sdk.Coins)</span> *<span class="title">MsgCreateScavenge</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;MsgCreateScavenge&#123;</span><br><span class="line">Creator:      creator,</span><br><span class="line">Description:  description,</span><br><span class="line">SolutionHash: solutionHash,</span><br><span class="line">Reward:       reward,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg *MsgCreateScavenge)</span> <span class="title">Route</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> RouterKey</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg *MsgCreateScavenge)</span> <span class="title">Type</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"CreateScavenge"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg *MsgCreateScavenge)</span> <span class="title">GetSigners</span><span class="params">()</span> []<span class="title">sdk</span>.<span class="title">AccAddress</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> []sdk.AccAddress&#123;msg.Creator&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg *MsgCreateScavenge)</span> <span class="title">GetSignBytes</span><span class="params">()</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">bz := ModuleCdc.MustMarshalJSON(msg)</span><br><span class="line"><span class="keyword">return</span> sdk.MustSortJSON(bz)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基本验证</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg *MsgCreateScavenge)</span> <span class="title">ValidateBasic</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> msg.Creator.Empty() &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidAddress, <span class="string">"creator can't be empty"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> msg.SolutionHash == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, <span class="string">"solutionHash can't be empty"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意,所有的Message都需要继承<code>sdk.Msg</code>接口</p><p>==<strong>MsgCreateScavenge结构</strong>==</p><ul><li><p><code>Creator</code> - Who created it. This uses the <code>sdk.AccAddress</code> type which represents an account in the app controlled by public key cryptograhy.</p><p><strong>Message的创建者,<code>sdk.AccAddress</code>代表由公钥密码体系创建的应用程序账户</strong></p></li><li><p><code>Description</code> - The question to be solved or description of the challenge.</p><p><strong>要解决的问题以及挑战的描述</strong></p></li><li><p><code>SolutionHash</code> - The scrambled solution.</p><p><strong>混乱的解决方案</strong></p></li><li><p><code>Reward</code> - This is the bounty that is awarded to whoever submits the answer first.</p><p><strong>奖励给第一个提交答案的人的奖赏</strong></p></li></ul><p>该<code>Msg</code>界面还需要设置其他方法，例如，验证的内容<code>struct</code>以及确认消息是由创建者签名并提交的。</p><p>既然可以创建清除方法，那么唯一的其他基本操作就是能够解决它。如前所述，这应分为两个单独的操作：<code>MsgCommitSolution</code>和<code>MsgRevealSolution</code></p><p>==<strong>MsgCommitSolution结构</strong>==</p><p> <strong>重命名<code>./x/scavenge/types/MsgCreateCommit.go</code>为<code>./x/scavenge/types/MsgCommitSolution.go</code></strong></p><p>修改后为如下内容:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ sdk.Msg = &amp;MsgCommitSolution&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MsgCommitSolution <span class="keyword">struct</span> &#123;</span><br><span class="line">Scavenger             sdk.AccAddress <span class="string">`json:"scavenger" yaml:"scavenger"`</span>                         <span class="comment">// address of the scavenger</span></span><br><span class="line">SolutionHash          <span class="keyword">string</span>         <span class="string">`json:"solutionhash" yaml:"solutionhash"`</span>                   <span class="comment">// solutionhash of the scavenge</span></span><br><span class="line">SolutionScavengerHash <span class="keyword">string</span>         <span class="string">`json:"solutionScavengerHash" yaml:"solutionScavengerHash"`</span> <span class="comment">// solution hash of the scavenge</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewMsgCommitSolution creates a new MsgCommitSolution instance</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMsgCommitSolution</span><span class="params">(scavenger sdk.AccAddress, solutionHash <span class="keyword">string</span>, solutionScavengerHash <span class="keyword">string</span>)</span> <span class="title">MsgCommitSolution</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> MsgCommitSolution&#123;</span><br><span class="line">Scavenger:             scavenger,</span><br><span class="line">SolutionHash:          solutionHash,</span><br><span class="line">SolutionScavengerHash: solutionScavengerHash,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgCommitSolution)</span> <span class="title">Route</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> RouterKey</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgCommitSolution)</span> <span class="title">Type</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"CreateCommit"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgCommitSolution)</span> <span class="title">GetSigners</span><span class="params">()</span> []<span class="title">sdk</span>.<span class="title">AccAddress</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> []sdk.AccAddress&#123;sdk.AccAddress(msg.Scavenger)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgCommitSolution)</span> <span class="title">GetSignBytes</span><span class="params">()</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">bz := ModuleCdc.MustMarshalJSON(msg)</span><br><span class="line"><span class="keyword">return</span> sdk.MustSortJSON(bz)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgCommitSolution)</span> <span class="title">ValidateBasic</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> msg.Scavenger.Empty() &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidAddress, <span class="string">"scavenger can't be empty"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息struct包含揭示解决方案时的所有必要信息：</p><ul><li><p>Scavenger -谁在透露解决方案。</p></li><li><p>SolutionHash -混乱的解决方案（哈希）。</p></li><li><p>SolutionScavengerHash -这是解决方案和解决方案的人的哈希组合。</p></li></ul><p>该消息也实现了sdk.Msg接口。</p><p>==<strong>MsgRevealSolution</strong>==</p><p>此消息类型应该存在<code>./x/scavenge/types/MsgRevealSolution.go</code>,将该文件修改为:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"crypto/sha256"</span></span><br><span class="line"><span class="string">"encoding/hex"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// MsgRevealSolution</span></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">var</span> _ sdk.Msg = &amp;MsgRevealSolution&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MsgRevealSolution - struct for unjailing jailed validator</span></span><br><span class="line"><span class="keyword">type</span> MsgRevealSolution <span class="keyword">struct</span> &#123;</span><br><span class="line">Scavenger    sdk.AccAddress <span class="string">`json:"scavenger" yaml:"scavenger"`</span>       <span class="comment">// address of the scavenger scavenger</span></span><br><span class="line">SolutionHash <span class="keyword">string</span>         <span class="string">`json:"solutionHash" yaml:"solutionHash"`</span> <span class="comment">// SolutionHash of the scavenge</span></span><br><span class="line">Solution     <span class="keyword">string</span>         <span class="string">`json:"solution" yaml:"solution"`</span>         <span class="comment">// solution of the scavenge</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewMsgRevealSolution creates a new MsgRevealSolution instance</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMsgRevealSolution</span><span class="params">(scavenger sdk.AccAddress, solution <span class="keyword">string</span>)</span> <span class="title">MsgRevealSolution</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> solutionHash = sha256.Sum256([]<span class="keyword">byte</span>(solution))</span><br><span class="line"><span class="keyword">var</span> solutionHashString = hex.EncodeToString(solutionHash[:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> MsgRevealSolution&#123;</span><br><span class="line">Scavenger:    scavenger,</span><br><span class="line">SolutionHash: solutionHashString,</span><br><span class="line">Solution:     solution,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RevealSolutionConst is RevealSolution Constant</span></span><br><span class="line"><span class="keyword">const</span> RevealSolutionConst = <span class="string">"RevealSolution"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// nolint</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgRevealSolution)</span> <span class="title">Route</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> RouterKey &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgRevealSolution)</span> <span class="title">Type</span><span class="params">()</span> <span class="title">string</span></span>  &#123; <span class="keyword">return</span> RevealSolutionConst &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgRevealSolution)</span> <span class="title">GetSigners</span><span class="params">()</span> []<span class="title">sdk</span>.<span class="title">AccAddress</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> []sdk.AccAddress&#123;sdk.AccAddress(msg.Scavenger)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetSignBytes gets the bytes for the message signer to sign on</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgRevealSolution)</span> <span class="title">GetSignBytes</span><span class="params">()</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">bz := ModuleCdc.MustMarshalJSON(msg)</span><br><span class="line"><span class="keyword">return</span> sdk.MustSortJSON(bz)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ValidateBasic validity check for the AnteHandler</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgRevealSolution)</span> <span class="title">ValidateBasic</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> msg.Scavenger.Empty() &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidAddress, <span class="string">"scavenger can't be empty"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> msg.SolutionHash == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, <span class="string">"solutionScavengerHash can't be empty"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> msg.Solution == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, <span class="string">"solutionHash can't be empty"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> solutionHash = sha256.Sum256([]<span class="keyword">byte</span>(msg.Solution))</span><br><span class="line"><span class="keyword">var</span> solutionHashString = hex.EncodeToString(solutionHash[:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> msg.SolutionHash != solutionHashString &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, fmt.Sprintf(<span class="string">"Hash of solution (%s) doesn't equal solutionHash (%s)"</span>, msg.SolutionHash, solutionHashString))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息<code>struct</code>包含揭示解决方案时的所有必要信息：</p><ul><li><code>Scavenger</code> -谁在透露解决方案。</li><li><code>SolutionHash</code> -混乱的解决方案。</li><li><code>Solution</code> -解决方案的纯文本版本。</li></ul><p>该消息也实现了<code>sdk.Msg</code>接口。</p><p>特别是看<code>ValidateBasic</code>功能。它验证是否进行了所有必要的输入以显示解决方案，并从提交的解决方案中创建了sha256哈希。</p><p>==MsgSetScavenge、MsgDeleteScavenge、MsgSetCommit、MsgDeleteCommit==</p><p>按文档一致即可</p><p>==Codec==</p><p>定义消息后，我们需要向编码器描述如何将其存储为字节。为此，我们编辑位于的文件<code>./x/scavenge/types/codec.go</code>。通过如下描述我们的类型，它们将与我们的编码库一起使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// RegisterCodec registers concrete types on codec</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterCodec</span><span class="params">(cdc *codec.Codec)</span></span> &#123;</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 1</span></span><br><span class="line">cdc.RegisterConcrete(MsgCommitSolution&#123;&#125;, <span class="string">"scavenge/CreateCommit"</span>, <span class="literal">nil</span>)</span><br><span class="line">cdc.RegisterConcrete(MsgSetCommit&#123;&#125;, <span class="string">"scavenge/SetCommit"</span>, <span class="literal">nil</span>)</span><br><span class="line">cdc.RegisterConcrete(MsgDeleteCommit&#123;&#125;, <span class="string">"scavenge/DeleteCommit"</span>, <span class="literal">nil</span>)</span><br><span class="line">cdc.RegisterConcrete(MsgCreateScavenge&#123;&#125;, <span class="string">"scavenge/CreateScavenge"</span>, <span class="literal">nil</span>)</span><br><span class="line">cdc.RegisterConcrete(MsgSetScavenge&#123;&#125;, <span class="string">"scavenge/SetScavenge"</span>, <span class="literal">nil</span>)</span><br><span class="line">cdc.RegisterConcrete(MsgDeleteScavenge&#123;&#125;, <span class="string">"scavenge/DeleteScavenge"</span>, <span class="literal">nil</span>)</span><br><span class="line">cdc.RegisterConcrete(MsgRevealSolution&#123;&#125;, <span class="string">"scavenge/MsgRevealSolution"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ModuleCdc defines the module codec</span></span><br><span class="line"><span class="keyword">var</span> ModuleCdc *codec.Codec</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">ModuleCdc = codec.New()</span><br><span class="line">RegisterCodec(ModuleCdc)</span><br><span class="line">codec.RegisterCrypto(ModuleCdc)</span><br><span class="line">ModuleCdc.Seal()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完这些文件后再次启动<code>starport serve</code>会出现错误,不用担心,后续全部修改完毕之后就ok了</p><p>我们已经拥有Message模块了,但是<strong>我们需要一些地方去存储他们发送的信息.所有相关的静态数据都与Keeper模块相关</strong></p><h2 id="7-Keep模块"><a href="#7-Keep模块" class="headerlink" title="7.Keep模块"></a>7.Keep模块</h2><p>使用该<code>starport</code>命令后，您应该<code>Keeper</code>在处有一个样板<code>./x/scavenge/keeper/keeper.go</code>。它包含了像基本功能引用一个基本的函数<code>Set</code>，<code>Get</code>和<code>Delete</code>。</p><p>管理器Keeper将所有数据存储在模块中。<strong>有时一个模块会导入另一个模块的管理器Keeper。这将允许在模块之间共享和修改状态</strong>。由于我们在处理模块中的coin作为赏金奖励，因此我们需要访问<code>bank</code>模块的管理员（我们称之为CoinKeeper）。看看我们完成的<code>Keeper</code>文件，你可以看到那里的<code>bank</code>管理员被引用，以及如何<code>Set</code>，<code>Get</code>以及<code>Delete</code></p><p><strong>Keeper、scavenge、commit详细代码见文档</strong></p><p>您可能会注意到<code>types.Commit</code>和<code>types.Scavenge</code>贯穿了整个参考Keeper。这些是定义的新结构，<code>./x/scavenge/types/type&lt;Type&gt;.go</code>(<code>typeCommit 、typeScavenge</code>)其中包含有关不同Scavenge挑战和针对这些挑战的不同已提交解决方案的所有必要信息。它们看起来类似于Msg我们之前看到的类型，因为它们包含相似的信息。我们将对模版文件进行一些修改。</p><p>在<code>TypeScavenge.go</code>文件中，我们需要删除该<code>ID</code>字段，因为我们将使用<code>SolutionHash</code>键作为键。我们还需要更新<code>Reward</code>到<code>sdk.Coins</code>，以及<code>Scavenger</code>到<code>sdk.AccAddress</code>，所以我们可以一次性解决。</p><p>修改完成后的结果:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Scavenge <span class="keyword">struct</span> &#123;</span><br><span class="line">Creator sdk.AccAddress <span class="string">`json:"creator" yaml:"creator"`</span></span><br><span class="line">    Description <span class="keyword">string</span> <span class="string">`json:"description" yaml:"description"`</span></span><br><span class="line">    SolutionHash <span class="keyword">string</span> <span class="string">`json:"solutionHash" yaml:"solutionHash"`</span></span><br><span class="line">    Reward sdk.Coins <span class="string">`json:"reward" yaml:"reward"`</span></span><br><span class="line">    Solution <span class="keyword">string</span> <span class="string">`json:"solution" yaml:"solution"`</span></span><br><span class="line">    Scavenger sdk.AccAddress <span class="string">`json:"scavenger" yaml:"scavenger"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>TypeCommit.go</code>文件我们需要删除ID字段,并且重命名Creator字段为Scavenger</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Commit <span class="keyword">struct</span> &#123;</span><br><span class="line">Scavenger sdk.AccAddress <span class="string">`json:"scavenger" yaml:"scavenger"`</span></span><br><span class="line">    SolutionHash <span class="keyword">string</span> <span class="string">`json:"solutionHash" yaml:"solutionHash"`</span></span><br><span class="line">    SolutionScavengerHash <span class="keyword">string</span> <span class="string">`json:"solutionScavengerHash" yaml:"solutionScavengerHash"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可以想象，未解决的字段<code>Scavenge</code>将包含<code>Solution</code>和<code>Scavenger</code>字段的空值。您可能还注意到每种类型都有该<code>String</code>方法。这有助于将结构呈现为字符串</p><h3 id="Prefixes"><a href="#Prefixes" class="headerlink" title="Prefixes"></a><strong>Prefixes</strong></h3><p>您可能会注意到的使用<code>types.ScavengePrefix</code>，<code>types.ScavengeCountPrefix</code>以及<code>types.CommitPrefix</code>或<code>types.CommitCountPrefix</code>。这些定义在一个名为的文件中<code>./x/scavenge/types/key.go</code>，可帮助我们保持Keeper组织良好。该Keeper实际上只是一个键值存储。这意味着，与Object<code>javascript</code>中的相似，所有值都在键下引用。要访问值，您需要知道存储它的键。这有点像唯一标识符（UID）。</p><p>在存储a时，==<code>Scavenge</code>我们使用的密钥<code>SolutionHash</code>作为唯一ID==，对于a时，==<code>Commit</code>我们使用的密钥<code>SolutionScavengeHash</code>==。但是，由于我们将这两种数据类型存储在同一位置，因此我们可能<strong>希望区分用作键的哈希类型。我们可以通过在散列上添加前缀来做到这一点</strong>，从而使我们能够识别出哪一个。因为<code>Scavenge</code>我们看到了前缀<code>scavenge-value</code>和<code>scavenge-count</code>，所以<code>Commit</code>我们看到了前缀<code>commit-value</code>和<code>commit-count</code>。<br>所以在<code>key.go</code>文件中可以看到如下内容:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// ModuleName is the name of the module</span></span><br><span class="line">ModuleName = <span class="string">"scavenge"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// StoreKey to be used when creating the KVStore</span></span><br><span class="line">StoreKey = ModuleName</span><br><span class="line"></span><br><span class="line"><span class="comment">// RouterKey to be used for routing msgs</span></span><br><span class="line">RouterKey = ModuleName</span><br><span class="line"></span><br><span class="line"><span class="comment">// QuerierRoute to be used for querier msgs</span></span><br><span class="line">QuerierRoute = ModuleName</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">ScavengePrefix = <span class="string">"scavenge-value-"</span></span><br><span class="line">ScavengeCountPrefix = <span class="string">"scavenge-count-"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">CommitPrefix = <span class="string">"commit-value-"</span></span><br><span class="line">CommitCountPrefix = <span class="string">"commit-count-"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Iterators"><a href="#Iterators" class="headerlink" title="Iterators"></a><strong>Iterators</strong></h3><p>有时，您可能想直接通过其键访问一个 <code>Commit</code>或一个 <code>Scavenge</code>。这就是为什么我们有方法<code>GetCommit</code>和的原因<code>GetScavenge</code>。</p><p>但是，有时您会想要<code>Scavenge</code>一次或一次获取所有内容<code>Commit</code>。为此，我们使用称为的迭代器<code>KVStorePrefixIterator</code>。此实用程序来自<code>cosmos sdk</code>并在密钥存储上进行迭代。如果提供前缀，它将仅对包含该前缀的键进行迭代。由于我们为<code>Scavenge</code>和<code>Commit</code>定义了前缀，因此我们可以在此处使用它们以仅返回所需的数据类型。</p><p>目前你已经知道了<code>Commit</code>和<code>Scavenge</code>的存储位置,我们需要将Messages连接到此存储.这个过程叫做<code>handling</code>消息,并且它是实现在<code>Handler</code>中.</p><h2 id="8-Handler模块"><a href="#8-Handler模块" class="headerlink" title="8.Handler模块"></a>8.Handler模块</h2><p>为了使消息到达<code>Keeper</code>，它必须经过<code>Handler</code>。在这里可以应用逻辑来允许或拒绝一个 <code>Message</code>成功。这也是逻辑准确显示状态更改应如何在<code>Keeper</code>中进行的地方。<strong>==如果您熟悉Model View Controller（MVC）架构，Keeper有点像Model，Handler有点像Controller==</strong>。如果您熟悉<code>React / Redux</code> 或<code>Vue / Vuex</code>架构，Keeper有点像<code>Reducer / Store</code>，而<code>Handler</code>有点像<code>Actions</code>。</p><p>我们的处理程序Handler将进入<code>./x/scavenge/handler.go</code>并遵循样板中列出的建议。我们将创建一个名为单独的文件处理功能，<code>handler&lt;Action.go</code>为我们的每一个三种<code>Message</code>类型<code>MsgCreateScavenge</code>，<code>MsgCommitSolution</code>和<code>MsgRevealSolution</code>。</p><p>运行<code>starport type</code>命令应该已经添加了<code>handlerMsgCreateScavenge.go</code>和<code>handlerMsgCreateCommit.go</code>文件。本质上，您可以重命名<code>handlerMsgCreateCommit</code>为<code>handlerMsgCommitSolution</code>。制作一份副本并将其用作的模板<code>handlerMsgRevealSolution</code>。</p><p>文件修改见官方文档</p><h3 id="moduleAcct"><a href="#moduleAcct" class="headerlink" title="moduleAcct"></a>moduleAcct</h3><p>你可能注意到handlerMsgCreateScavenge和handlerMsgRevealSolution处理函数中使用了moduleAcct。<strong>该帐户不受公钥对控制，而是对该实际模块拥有的帐户的引用</strong>。它被用来持有与scavenge连接的赏金，直到该scavenge被解决，在这一点上，赏金支付给解决了scavenge的帐户。</p><h3 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h3><p>每个处理程序的末尾是一个EventManager，它将在事务内<strong>创建日志</strong>，以显示有关在处理此消息期间发生的情况的信息。这对于希望确切了解状态转换结果发生的客户端软件很有用。这些事件使用一系列预定义的类型，可以在<code>./x/scavenge/types/events.go</code>以下类型中找到它们</p><p>现在我们创建了必要的管道去更新状态,我们需要考虑用什么方法去查询它们. 通常，这是通过REST端点或CLI完成的.这两个客户端都与查询状态的应用程序部分交互，称为<code>Querier</code></p><h2 id="9-Querier"><a href="#9-Querier" class="headerlink" title="9.Querier"></a>9.Querier</h2><p>为了查询应用程序的数据，我们需要使用来使其可访问<code>Querier</code>。该应用程序的一部分<code>Keeper</code>与访问状态并返回状态一起工作。<code>Querier</code>定义在<code>./x/scavenge/keeper/querier.go</code>。我们的<code>starport</code>工具为我们提供了一些外观方面的建议，类似于<code>Handler</code>我们想要处理不同查询路线的建议。</p><p>您可以<code>Querier</code>针对许多不同类型的查询在内建立许多不同的路由，但我们将只进行三个：</p><ul><li><p><code>listCommit</code> 将列出所有提交</p></li><li><p><code>getCommit</code> 将得到一个提交 solutionScavengerHash</p></li><li><p><code>listScavenge</code> 将列出所有Scavenge</p></li><li><p><code>getScavenge</code> 将会得到一次Scavenge 的 solutionHash</p></li></ul><p>合并到switch语句中，并充实每个函数，该文件应如下所示</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> keeper</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="comment">// this line is used by starport scaffolding # 1</span></span><br><span class="line"><span class="string">"github.com/github-username/scavenge/x/scavenge/types"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">abci <span class="string">"github.com/tendermint/tendermint/abci/types"</span></span><br><span class="line"></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewQuerier creates a new querier for scavenge clients.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewQuerier</span><span class="params">(k Keeper)</span> <span class="title">sdk</span>.<span class="title">Querier</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx sdk.Context, path []<span class="keyword">string</span>, req abci.RequestQuery)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> path[<span class="number">0</span>] &#123;</span><br><span class="line">    <span class="comment">// this line is used by starport scaffolding # 2</span></span><br><span class="line"><span class="keyword">case</span> types.QueryListCommit:</span><br><span class="line"><span class="keyword">return</span> listCommit(ctx, k)</span><br><span class="line"><span class="keyword">case</span> types.QueryGetCommit:</span><br><span class="line"><span class="keyword">return</span> getCommit(ctx, path[<span class="number">1</span>:], k)</span><br><span class="line"><span class="keyword">case</span> types.QueryListScavenge:</span><br><span class="line"><span class="keyword">return</span> listScavenge(ctx, k)</span><br><span class="line"><span class="keyword">case</span> types.QueryGetScavenge:</span><br><span class="line"><span class="keyword">return</span> getScavenge(ctx, path[<span class="number">1</span>:], k)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, <span class="string">"unknown scavenge query endpoint"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h3><p>您可能会注意到，我们在初始<code>switch</code>语句中使用了四种不同的导入类型。这些在我们的<code>./x/scavenge/types/querier.go</code>文件中定义为简单字符串。该文件应如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">QueryListScavenge = <span class="string">"list-scavenge"</span></span><br><span class="line">QueryGetScavenge  = <span class="string">"get-scavenge"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">QueryListCommit = <span class="string">"list-commit"</span></span><br><span class="line">QueryGetCommit  = <span class="string">"get-commit"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>我们的查询非常简单，因为我们已经<code>Keeper</code>为访问状态配备了所有必需的功能。您也可以在这里看到正在使用的迭代器。</p><p>现在，我们已经创建了模块的所有基本操作，我们希望使它们可访问。我们可以使用CLI客户端和REST客户端来做到这一点。在本教程中，我们将创建一个CLI客户端</p><h2 id="10-CLI"><a href="#10-CLI" class="headerlink" title="10.CLI"></a>10.CLI</h2><p>命令行界面（CLI）将在应用程序在某处机器上运行后帮助我们与它进行交互。<strong>每个模块在CLI内都有自己的名称空间，这使它能够创建和签名要由该模块处理的消息。</strong>它还具有查询该模块状态的功能。与该应用程序的其余部分结合使用时，CLI将允许您执行诸如为新帐户生成密钥或检查您已经与该应用程序进行交互的状态之类的操作</p><p>我们的模块CLI被分成两个文件名为<code>tx.go</code>以及<code>query.go</code>分别位于<code>./x/scavenge/client/cli/</code>。一个文件用于进行<strong>包含消息的事务</strong>，这些消息最终将更新我们的状态。另一个是进行<strong>查询</strong>，这将使我们能够从状态中读取信息</p><h3 id="tx-go"><a href="#tx-go" class="headerlink" title="tx.go"></a><strong>tx.go</strong></h3><p>该tx.go文件包含GetTxCmdCosmos SDK中的标准方法。稍后在module.go文件中引用该文件，该文件准确描述了模块具有的属性。这使得在实际应用程序级别更容易合并出于不同原因的不同模块。毕竟，我们现在将重点放在模块上，但是稍后我们将创建一个利用该模块以及Cosmos SDK中已经可用的其他模块的应用程序。</p><p>在内部，GetTxCmd我们创建一个新的模块特定命令并调用它scavenge。在此命令中，我们为定义的每种消息类型添加一个子命令：</p><p>GetCmdCreateScavenge<br>GetCmdCommitSolution<br>GetCmdRevealSolution<br>每个函数都从Cobra CLI工具中获取参数以创建一个新的msg，对其进行签名并将其提交给要处理的应用程序。这些函数应该放在<code>tx.go</code>和<code>tx&lt;Type&gt;.go</code>文件中</p><h3 id="query-go"><a href="#query-go" class="headerlink" title="query.go"></a>query.go</h3><p>该query.go文件包含类似的Cobra命令，这些命令保留了一个新的名称空间来引用我们的scavenge模块。但是，<code>query.go</code>和<code>query&lt;Type&gt;.go</code>文件不是创建和提交消息，而是创建查询并以人类可读的形式返回结果。它处理的查询与我们querier.go先前在文件中定义的查询相同：</p><ul><li><p>GetCmdListCommit</p></li><li><p>GetCmdGetCommit</p></li><li><p>GetCmdListScavenge</p></li><li><p>GetCmdGetScavenge</p></li></ul><h3 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h3><p>按照文档修改</p><h2 id="11-运行游戏"><a href="#11-运行游戏" class="headerlink" title="11.运行游戏"></a>11.运行游戏</h2><p><code>scavengecli tx scavenge create-scavenge &quot;What&#39;s brown and sticky?&quot; &quot;A stick&quot; 69token --from user1</code></p><p>问题:What’s brown and sticky</p><p>答案:A stick</p><p>并且设置69的奖励金</p><p>成功上链返回:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/Ggcayy.png" alt="Ggcayy"></p><p>查询你的交易</p><p><code>scavengecli q tx &lt;txhash&gt;</code> (txhash是你的hash,注意不要带&lt;&gt;)</p><p>返回结果会显示高度</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/34mTUt.png" alt="34mTUt"></p><p>另一个用户回答:</p><p><code>scavengecli tx scavenge commit-solution &quot;A stick&quot; --from user2 -y</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/s2KMUL.png" alt="s2KMUL"></p><p>查询:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/boIm78.png" alt="boIm78"></p><p>solutionScavengerHash是solution和自己账户的组合</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/dycrHP.png" alt="dycrHP"></p><p>游戏的思路:</p><p>scavenge可以看做问题,而solution就是答案, 问题的提出者给出问题与答案, 对应的取Hash,如果其他人给出的答案与问题相hash的结果与正确答案一致,那么就说明回答正确.</p><p>user2回答正确后,查询其余额变化</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/BoEqk5.png" alt="BoEqk5"></p><p>增加了69</p><p>如果您想看一下已完成的scavenge工作，可以先查询<strong>所有</strong>scavenge工作</p><p><code>scavengecli q scavenge list-scavenge</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/M6mvbq.png" alt="M6mvbq"></p><p>单独查询某个scavenge:</p><p><code>scavengecli q scavenge get-scavenge 2f9457a6e8fb202f9e10389a143a383106268c460743dd59d723c0f82d9ba906</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/BVKXln.png" alt="BVKXln"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;scavenger-hunt-game&quot;&gt;&lt;a href=&quot;#scavenger-hunt-game&quot; class=&quot;headerlink&quot; title=&quot;scavenger hunt game&quot;&gt;&lt;/a&gt;&lt;strong&gt;scavenger hunt&lt;/strong&gt; game&lt;/h1&gt;&lt;p&gt;cosmos官方给出的拾荒者狩猎游戏运行&lt;strong&gt;部署细节/重点记录,以及文档翻译&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;官方地址:&lt;a href=&quot;https://tutorials.cosmos.network/scavenge/tutorial/02-the-game.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Game | Cosmos SDK Tutorials&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文档翻译部分来源于:&lt;a href=&quot;https://blog.csdn.net/lk2684753/article/details/113849468&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/lk2684753/article/details/113849468&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="cosmos" scheme="https://xwjahahahaha.github.io/categories/technical/cosmos/"/>
    
    
    <category term="cosmos" scheme="https://xwjahahahaha.github.io/tags/cosmos/"/>
    
  </entry>
  
  <entry>
    <title>nodejs踩坑记录</title>
    <link href="https://xwjahahahaha.github.io/2021/03/01/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%89%8D%E7%AB%AF/Nodejs/nodejs%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://xwjahahahaha.github.io/2021/03/01/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%89%8D%E7%AB%AF/Nodejs/nodejs%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</id>
    <published>2021-03-01T04:41:22.000Z</published>
    <updated>2021-03-01T04:45:26.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="npm运行出错Missing-required-argument-1"><a href="#npm运行出错Missing-required-argument-1" class="headerlink" title="npm运行出错Missing required argument #1"></a>npm运行出错Missing required argument #1</h1><p>原因:目前的nodejs过时了,与npm不匹配</p><p>更新nodejs到最新版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1) sudo npm install -g n</span><br><span class="line">2) sudo n latest</span><br><span class="line">3) sudo npm install -g npm</span><br><span class="line">4) hash -d npm</span><br><span class="line">5) npm i</span><br></pre></td></tr></table></figure><a id="more"></a><p>原文:<a href="https://www.cyberhour.com/community/threads/how-to-fix-npm-err-typeerror-error-missing-required-argument-1.262/" target="_blank" rel="noopener">How to fix npm ERR! typeerror Error: Missing required argument #1 | Web Hosting Forum (cyberhour.com)</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;npm运行出错Missing-required-argument-1&quot;&gt;&lt;a href=&quot;#npm运行出错Missing-required-argument-1&quot; class=&quot;headerlink&quot; title=&quot;npm运行出错Missing required argument #1&quot;&gt;&lt;/a&gt;npm运行出错Missing required argument #1&lt;/h1&gt;&lt;p&gt;原因:目前的nodejs过时了,与npm不匹配&lt;/p&gt;
&lt;p&gt;更新nodejs到最新版本&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1) sudo npm install -g n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2) sudo n latest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3) sudo npm install -g npm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4) hash -d npm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5) npm i&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="nodejs" scheme="https://xwjahahahaha.github.io/categories/technical/nodejs/"/>
    
    
    <category term="nodejs" scheme="https://xwjahahahaha.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>日记_0132</title>
    <link href="https://xwjahahahaha.github.io/2021/03/01/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0132/"/>
    <id>https://xwjahahahaha.github.io/2021/03/01/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0132/</id>
    <published>2021-03-01T02:18:13.000Z</published>
    <updated>2021-03-02T00:23:46.266Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>英语</th><th>开发</th><th>项目</th><th><font color='red'>科研（No.1）</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>后端：go语言深化，框架gin等</strong>，<strong>go书看完</strong></td><td>区块链公链项目</td><td>论文一周两篇细读,每个月尝试写一篇</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td>英文视频(生活大爆炸开始)</td><td>区块链框架Cosmos</td><td>金窝窝项目需求准备cosmos</td><td>分布式课程论文</td><td>看比赛资讯，准备明年的<strong>区块链比赛</strong></td></tr><tr><td>③</td><td></td><td>Linux学完</td><td>本科毕业设计</td><td></td><td>为下学期的<strong>暑期实习</strong>做准备</td></tr><tr><td>④</td><td></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td></td><td></td></tr><tr><td>⑤</td><td></td><td>有时间的话：Java</td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td>代客泊车项目申报书</td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input disabled="" type="checkbox"> <p><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7467408" target="_blank" rel="noopener">Blockchains and Smart Contracts for the Internet of Things</a></p></li><li><input disabled="" type="checkbox"> <p>Where Is Current Research on Blockchain Technology?-A Systematic Review</p></li><li><input disabled="" type="checkbox"> <p>Blockstack: A Global Naming and Storage System Secured by Blockchains</p></li><li><input disabled="" type="checkbox"> <p>Plasma </p></li><li><input disabled="" type="checkbox"> <p><a href="https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md" target="_blank" rel="noopener">EOS.IO Technical White Paper v2</a></p></li><li><input disabled="" type="checkbox"> <p>Ocean Protocol: Tools for the Web3 Data Economy</p></li><li><input disabled="" type="checkbox"> <p>Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts</p></li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input disabled="" type="checkbox"> Decentralizing Privacy: Using Blockchain to Protect Personal Data</li><li><input disabled="" type="checkbox"> 《 Tendermint：关于拜占庭容错共识算法的最新进展》</li><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input disabled="" type="checkbox"> The Ripple Protocol Consensus Algorithm</li><li><input disabled="" type="checkbox"> <a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="noopener">以太坊白皮书</a></li><li><input disabled="" type="checkbox"> Hyperledger Fabric: A Distributed Operating System for Permissioned Blockchains</li><li><input disabled="" type="checkbox"> Secure Data Storage and Recovery in IndustrialBlockchain Network Environments</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li></ul><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> cosmos官方demo</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2><ul><li><p>近期感情维护较少,导致难堪,需要认真维护</p></li><li><p>按计划节奏来,不要忘记初心</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研（No.1）&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;后端：go语言深化，框架gin等&lt;/strong&gt;，&lt;strong&gt;go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;区块链公链项目&lt;/td&gt;
&lt;td&gt;论文一周两篇细读,每个月尝试写一篇&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;英文视频(生活大爆炸开始)&lt;/td&gt;
&lt;td&gt;区块链框架Cosmos&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;分布式课程论文&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备明年的&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;为下学期的&lt;strong&gt;暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;有时间的话：Java&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;代客泊车项目申报书&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>cosmos-2-开发基础</title>
    <link href="https://xwjahahahaha.github.io/2021/02/28/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Cosmos/cosmos-2-%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/"/>
    <id>https://xwjahahahaha.github.io/2021/02/28/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Cosmos/cosmos-2-%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</id>
    <published>2021-02-28T06:39:07.000Z</published>
    <updated>2021-03-13T04:46:51.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二、开发基础"><a href="#二、开发基础" class="headerlink" title="二、开发基础"></a>二、开发基础</h1><h2 id="2-1-Cosmos-SDK"><a href="#2-1-Cosmos-SDK" class="headerlink" title="2.1. Cosmos SDK"></a>2.1. Cosmos SDK</h2><p>Cosmos  SDK是方便区块链应用开发的基础框架,方便程序员实现基于Tendermint的安全状态机.它将实现多重数据的持久化存储以及交易处理的路由功能.</p><h3 id="2-1-1-application-specific-blockchains"><a href="#2-1-1-application-specific-blockchains" class="headerlink" title="2.1.1 application-specific blockchains"></a>2.1.1 application-specific blockchains</h3><p>就是尽量让一个区块链应用使用单独的一条链,不会与其他的应用共享资源,拥有对该条链的完全主权.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">                ^  +-------------------------------+  ^</span><br><span class="line">                |  |                               |  |   Built <span class="keyword">with</span> Cosmos SDK</span><br><span class="line">                |  |  State-machine = Application  |  |</span><br><span class="line">                |  |                               |  v</span><br><span class="line">                |  +-------------------------------+</span><br><span class="line">                |  |                               |  ^</span><br><span class="line">Blockchain node |  |           Consensus           |  |</span><br><span class="line">                |  |                               |  |</span><br><span class="line">                |  +-------------------------------+  |   Tendermint Core</span><br><span class="line">                |  |                               |  |</span><br><span class="line">                |  |           Networking          |  |</span><br><span class="line">                |  |                               |  |</span><br><span class="line">                v  +-------------------------------+  v</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-1-2-BlockChain-Architecture"><a href="#2-1-2-BlockChain-Architecture" class="headerlink" title="2.1.2 BlockChain Architecture"></a>2.1.2 BlockChain Architecture</h3><p>区块链是重复储存的确定性状态机</p><p>Given a state S and a block of transactions B, the state machine will return a new state S’.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+--------+                              +--------+</span><br><span class="line">|        |                              |        |</span><br><span class="line">|   S    +----------------------------&gt; |   S<span class="string">'   |</span></span><br><span class="line"><span class="string">|        |   For each T in B: apply(T)  |        |</span></span><br><span class="line"><span class="string">+--------+                              +--------+</span></span><br></pre></td></tr></table></figure><h3 id="2-1-3-Main-Components-of-the-Cosmos-SDK"><a href="#2-1-3-Main-Components-of-the-Cosmos-SDK" class="headerlink" title="2.1.3 Main Components of the Cosmos SDK"></a>2.1.3 Main Components of the Cosmos SDK</h3><p>SDK是使用Golang执行ABCI的基本样板程序框架</p><p>Cosmos SDK 交易处理的一般简化过程:</p><ol><li>解码来自Tendermint共识引擎的交易</li><li>提取交易信息并且对交易做初步的合法检查</li><li>将各个消息发送给适合的模块进行执行</li><li>确认状态改变</li></ol><h4 id="baseapp"><a href="#baseapp" class="headerlink" title="baseapp"></a>baseapp</h4><p>作用: 执行ABCI连接基础共识引擎的样板文件</p><p>cosmos SDK继承baseapp实现了app.go</p><p>baseapp的目标是在<strong>数据存储store和可扩展状态机之间提供安全的接口</strong>，同时尽可能少地定义状态机。</p><p>baseapp的工作</p><ul><li><p>Decode transactions received from the Tendermint consensus engine.</p><p><strong>解码接受的交易</strong></p></li><li><p>Extract messages from transactions and do basic sanity checks.</p><p><strong>在交易中提取消息,并且做一些简单的验证</strong></p></li><li><p>Route the message to the appropriate module so that it can be processed. Note that <code>baseapp</code> has no knowledge of the specific modules you want to use. It is your job to declare such modules in <code>app.go</code>, as you will see later in this tutorial. <code>baseapp</code> only implements the core routing logic that can be applied to any module.</p><p><strong>路由消息到适合的模块, ==如果有自定义的特殊模块需要在app.go中申明,否则baseapp是无法自动识别的==,baseap只是实现了核心的路由逻辑</strong></p></li><li><p>Commit if the ABCI message is <a href="https://docs.tendermint.com/master/spec/abci/abci.html#delivertx" target="_blank" rel="noopener"><code>DeliverTx</code> (opens new window)</a>(<a href="https://docs.tendermint.com/master/spec/abci/abci.html#checktx" target="_blank" rel="noopener"><code>CheckTx</code> (opens new window)</a>changes are not persistent).</p></li></ul><ul><li><p>Help set up <a href="https://docs.tendermint.com/master/spec/abci/abci.html#beginblock" target="_blank" rel="noopener"><code>BeginBlock</code> (opens new window)</a>and <a href="https://docs.tendermint.com/master/spec/abci/abci.html#endblock" target="_blank" rel="noopener"><code>Endblock</code> (opens new window)</a>, two messages that enable you to define logic executed at the beginning and end of each block. In practice, each module implements its own <code>BeginBlock</code> and <code>EndBlock</code> sub-logic, and the role of the app is to aggregate everything together (<em>Note: you won’t be using these messages in your application</em>).</p><p><strong>根据两个消息的定义从区块链的开始区块执行到末尾区块,每一个模块都有自己的执行子逻辑,app的作用就是将其汇总</strong>==(这些消息在你的应用程序中不会使用)==</p></li><li><p>Help initialize your state.</p><p><strong>帮助初始化状态</strong></p></li><li><p>Help set up queries.</p><p><strong>帮助建立查询</strong>·</p></li></ul><h4 id="Multistore"><a href="#Multistore" class="headerlink" title="Multistore"></a>Multistore</h4><p>多样存储Multistore允许开发人员声明任意数量的kvstore数据库,但是kvstore的value只能是[]byte,在存储时一些特定的结构可能还需要先序列化</p><p><strong>Multistore抽象的理解就是分离各个状态,每一种状态都由自己的模块管理</strong></p><h4 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h4><p>cosmos的强大依赖于模块化,SDK应用就是基于一系列集合的互操作模块,每一个模块都定义了状态的子集和包含自己交易/消息的处理逻辑.而SDK的责任就在于作为转发各种消息的路由</p><p>每个模块可以看作一个小型的状态机,开发人员需要定义模块处理的状态的子集以及更改状态的特殊消息类型,<strong>每个模块在多存储Multistore中声明自己的KVStore，以持久化它定义的状态子集。</strong></p><p>开发者开发时会用到其他人开发的模块即第三方模块,但是安全性是不一定能够得到保证的,所以在 <a href="https://docs.cosmos.network/v0.41/core/ocap.html" target="_blank" rel="noopener">object-capabilities</a>上做了规则,这意味着，与让每个模块为其他模块保留访问控制列表不同，<strong>每个模块实现了称为keepers的特殊对象</strong>，<strong>可以将其传递给其他模块以授予预定义的功能集</strong>。</p><p>Here is a simplified view of how a transaction is processed by the application of each full-node when it is received in a valid block:</p><figure class="highlight js"><figcaption><span>+</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">                                      |</span><br><span class="line">                                      |  Transaction relayed <span class="keyword">from</span> the full-node<span class="string">'s Tendermint engine</span></span><br><span class="line"><span class="string">                                      |  to the node'</span>s application via DeliverTx</span><br><span class="line">                                      |</span><br><span class="line">                                      |</span><br><span class="line">                                      |</span><br><span class="line">                +---------------------v--------------------------+</span><br><span class="line">                |                 APPLICATION                    |</span><br><span class="line">                |                                                |</span><br><span class="line">                |     Using baseapp<span class="string">'s methods: Decode the Tx,    |</span></span><br><span class="line"><span class="string">                |     extract and route the message(s)           |</span></span><br><span class="line"><span class="string">                |                                                |</span></span><br><span class="line"><span class="string">                +---------------------+--------------------------+</span></span><br><span class="line"><span class="string">                                      |</span></span><br><span class="line"><span class="string">                                      |</span></span><br><span class="line"><span class="string">                                      |</span></span><br><span class="line"><span class="string">                                      +---------------------------+</span></span><br><span class="line"><span class="string">                                                                  |</span></span><br><span class="line"><span class="string">                                                                  |</span></span><br><span class="line"><span class="string">                                                                  |</span></span><br><span class="line"><span class="string">                                                                  |  Message routed to the correct</span></span><br><span class="line"><span class="string">                                                                  |  module to be processed</span></span><br><span class="line"><span class="string">                                                                  |</span></span><br><span class="line"><span class="string">                                                                  |</span></span><br><span class="line"><span class="string">+----------------+  +---------------+  +----------------+  +------v----------+</span></span><br><span class="line"><span class="string">|                |  |               |  |                |  |                 |</span></span><br><span class="line"><span class="string">|  AUTH MODULE   |  |  BANK MODULE  |  | STAKING MODULE |  |   GOV MODULE    |</span></span><br><span class="line"><span class="string">|                |  |               |  |                |  |                 |</span></span><br><span class="line"><span class="string">|                |  |               |  |                |  | Handles message,|</span></span><br><span class="line"><span class="string">|                |  |               |  |                |  | Updates state   |</span></span><br><span class="line"><span class="string">|                |  |               |  |                |  |                 |</span></span><br><span class="line"><span class="string">+----------------+  +---------------+  +----------------+  +------+----------+</span></span><br><span class="line"><span class="string">                                                                  |</span></span><br><span class="line"><span class="string">                                                                  |</span></span><br><span class="line"><span class="string">                                                                  |</span></span><br><span class="line"><span class="string">                                                                  |</span></span><br><span class="line"><span class="string">                                       +--------------------------+</span></span><br><span class="line"><span class="string">                                       |</span></span><br><span class="line"><span class="string">                                       | Return result to Tendermint</span></span><br><span class="line"><span class="string">                                       | (0=Ok, 1=Err)</span></span><br><span class="line"><span class="string">                                       v</span></span><br></pre></td></tr></table></figure><p>SDK modules are defined in the <code>x/</code> folder of the SDK. Some core modules include:</p><ul><li><code>x/auth</code>: Used to manage accounts and signatures.</li><li><code>x/bank</code>: Used to enable tokens and token transfers.</li><li><code>x/staking</code> + <code>x/slashing</code>: Used to build Proof-Of-Stake blockchains.</li></ul><h2 id="2-2-starport"><a href="#2-2-starport" class="headerlink" title="2.2 starport"></a>2.2 starport</h2><h3 id="2-2-1-Introduction"><a href="#2-2-1-Introduction" class="headerlink" title="2.2.1 Introduction"></a>2.2.1 Introduction</h3><h4 id="什么是starport"><a href="#什么是starport" class="headerlink" title="什么是starport"></a>什么是starport</h4><p>搭建cosmos的脚手架工具</p><p>只需几个命令，您就可以创建区块链、启动区块链、在云上提供服务，并准备好一个 GUI 开始测试您的应用程序。</p><p>There are many projects already showcasing that the Tendermint BFT Consensus Engine and the Cosmos SDK.</p><p>The following projects are using the technology:</p><ul><li><a href="https://github.com/cosmos/gaia" target="_blank" rel="noopener">Cosmos</a> (Main IBC Hub and “Rolemodel” of the Cosmos SDK)</li><li><a href="https://github.com/binance-chain" target="_blank" rel="noopener">Binance Chain</a> (DEX and utility token)</li><li><a href="https://github.com/crypto-com/chain-main" target="_blank" rel="noopener">Crypto.com Chain</a> (Payments, DeFi, and utility token)</li><li><a href="https://github.com/irisnet" target="_blank" rel="noopener">IRIS</a> (IBC Hub and developer oriented)</li><li><a href="https://github.com/Kava-Labs/kava" target="_blank" rel="noopener">Kava</a> (DeFi and Stable Coins)</li><li><a href="https://docs.chain.aragon.org/" target="_blank" rel="noopener">Aragon</a> (DAO catalyst)</li><li><a href="https://cosmwasm.com/" target="_blank" rel="noopener">CosmWasm</a> (smart contracts using WASM)</li><li>==<a href="https://ethermint.zone/" target="_blank" rel="noopener">Ethermint</a> (Ethereum virtual machine)==</li></ul><p><a href="https://cosmonauts.world/" target="_blank" rel="noopener">See the full list here</a>.</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><a href="https://github.com/tendermint/starport/blob/develop/docs/1%20Introduction/2%20Install.md" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/1%20Introduction/2%20Install.md</a></p><h4 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h4><p>With <code>starport</code> installed on your machine, you can now build your very first blockchain!</p><p><strong>创建项目的命令格式:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">starport app github.com&#x2F;username&#x2F;myapp &amp;&amp; cd myapp:</span><br></pre></td></tr></table></figure><p>This command will create a directory <code>myapp</code> and scaffold a Cosmos SDK blockchain.</p><hr><p><strong>下面的命令开启服务:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">starport serve</span><br></pre></td></tr></table></figure><p><code>serve</code> will install dependencies, build, initialise and run your blokchain.</p><hr><p><strong>创建类型 , starport会自动对应的创建CRUD的操作</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">starport type post title body</span><br></pre></td></tr></table></figure><p><code>type</code> scaffolds functionality to create, read, update and delete for a custom type.</p><h4 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h4><h5 id="config-yaml"><a href="#config-yaml" class="headerlink" title="config.yaml"></a>config.yaml</h5><p>When creating a new app with starport, you will see a <code>config.yml</code> file in your blockchain folder. This file defines the genesis file, the network you will be using and the first validators of your blockchain.</p><p><code>config.yaml</code>文件定义了创世文件, 需要使用的网络以及网络中的第一个Validator</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前的版本</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># 定义区块链上代币的初始分布, 这些账户被定义在创世块中, 并且这些账户会在区块链中生成对应的公私钥对,在命令行中可以访问</span></span><br><span class="line"></span><br><span class="line"><span class="attr">accounts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">user1</span></span><br><span class="line">    <span class="attr">coins:</span> <span class="string">["1000token",</span> <span class="string">"100000000stake"</span><span class="string">]</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">user2</span></span><br><span class="line">  <span class="comment"># coins在区块链上标明coin的数量和面额。你可以在这里列出你的区块链上使用的各种面值的硬币和它们各自的金额。</span></span><br><span class="line">    <span class="attr">coins:</span> <span class="string">["500token"]</span></span><br><span class="line"><span class="comment"># 定义验证者的时候可以直接使用上面的账户,并且绑定权益</span></span><br><span class="line"><span class="comment"># 绑定权益即stake必须等于或小于accounts参数中给出的权益。</span></span><br><span class="line"><span class="attr">validator:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">user1</span></span><br><span class="line">  <span class="attr">staked:</span> <span class="string">"100000000stake"</span></span><br></pre></td></tr></table></figure><p><code>config.yaml</code>可选字段:</p><ul><li><p>genesis</p><p>可以直接定义创世纪文件中的参数，例如链ID：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">genesis:</span><br><span class="line">  chain_id: &quot;foobar&quot;</span><br></pre></td></tr></table></figure><p>您还可以操作不同模块的参数。例如，如果您想要更改模块，其中包含标注参数，例如哪个令牌被押注，您将向”config.yml”添加以下内容<code>staking</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">genesis:</span><br><span class="line">  app_state:</span><br><span class="line">    staking:</span><br><span class="line">      params:</span><br><span class="line">        bond_denom: &quot;denom&quot;</span><br></pre></td></tr></table></figure><p>运行<code>starport serve</code>后, 这些配置参数将会创建于创世文件中, 其创建（或覆盖）位于用户目录下的文件夹</p></li></ul><p>This will create (or override) the folder located at your user homefolder <code>~/.myappd</code> (the name of your application with a <code>d</code> for <code>daemon</code> attached) and initiate your blockchain with the genesis file. </p><p>创世文件的目录结构:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/pYgbSb.png" alt="pYgbSb"></p><p>其他的一些文件创建在<code>~/.[你的app名]cli</code>下,其中包含当前命令行接口的配置文件,如<code>chain-id</code>，一些输出参数,如<code>json</code>或<code>indent</code>模式(排版模式)。</p><p>如果您想确保从区块链设置中删除所有数据，请务必删除该文件夹和文件夹。<code>~/.myappd</code> <code>~/.myappcli</code></p><h5 id="账户地址前缀"><a href="#账户地址前缀" class="headerlink" title="账户地址前缀"></a>账户地址前缀</h5><p>您可以更改区块链应用程序中的地址外观。即他们在开头附加其他的内容。在cosmos Main Hub地址前面有一个地址前缀，例如<code>cosmos12fjzdtqfrrve7zyg9sv8j25azw2ua6tvu07ypf</code></p><p>您可以通过更改创建的application的<code>/app/prefix.go</code>中的<code>AccountAddressPrefix</code>变量来更改第一个前缀。建议您保留其他变量，因为它们是Cosmos SDK链中使用的标准，因此可以被识别。这有安全隐患，如不发送到可能无法使用它的地址。</p><p>要让您的前端正确地使用新命名，您需要更改<code>/vue/.env</code>中的<code>VUE_APP_ADDRESS_PREFIX</code>变量。</p><p>为了自动完成这一切，<strong>在使用命令<code>starport app github.com/foo/bar</code>创建应用程序时，只需添加<code>--address-prefix</code>前缀参数。</strong></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>定义您的起源帐户和验证器。<code>config.yml</code></li><li>它允许您使用不同的代币激励区块链，并指定第一个区块中每个初始帐户的金额。</li><li>更改地址的前缀可以在文件<code>/app/prefix.go</code>中完成。或者在启动时添加前缀参数</li></ul><h4 id="创世文件genesis-json"><a href="#创世文件genesis-json" class="headerlink" title="创世文件genesis.json"></a>创世文件genesis.json</h4><p>创世块是区块链的第一个区块,创世区块通常是区块链中唯一无法在您即将启动的同一 P2P 网络上找到的块，它必须以不同的方式共享 - 我们将查看在另一个教程中共享生成文件的方法</p><p>因为它是区块链的起点，尤其是在风险证明POS区块链中，它包含初始地址和余额列表。此外，大多数情况下，创世块定义了区块链使用的区块链网络。</p><p>使用 Starport，您将从您的文件中创建一个创世纪文件<code>.myappd/config/genesis.json</code>，它通常看起来类似于此：<code>config.yml</code></p><p>具体文件见项目;</p><p>仔细观察创世纪文件，您可以观察到它包含区块链应用程序的初始状态参数，此外还包含您正在使用的模块的定义和参数。</p><p>除了模块定义和配置外，<strong>生成文件还保留区块链初始利益相关者和验证者的地址</strong>。<strong>这些位于<code>gentx</code>参数中，这是<code>genutil</code>的一部分</strong>。启动区块链时，<strong>这些验证器应是网络的一部分，以便让网络运行。或者至少 66% 的验证器应该可用</strong>，以便启动 BFT 共识。</p><p>为了正确设置您的起源文件，重要的是要了解<code>config.yml</code>，下面将会详细的介绍.</p><h4 id="Starport-IBC"><a href="#Starport-IBC" class="headerlink" title="Starport IBC"></a>Starport IBC</h4><p>区块链之间的通行协议是IBC, IBC 允许两个链条之间可靠且安全的连接，可用于传输令牌、多链智能合约、原子交换或数据以及任何类型的代码分片。</p><p>为了在链条之间进行通信，使用 Starport 引导两个区块链将让我们了解其工作原理以及通信过程中每个区块链应用程序上发生的情况。在此教程中，我们将创建两个区块链，连接这些区块链并通过 IBC 传输令牌。</p><h6 id="Scaffolding-chain-foo"><a href="#Scaffolding-chain-foo" class="headerlink" title="Scaffolding chain foo"></a>Scaffolding chain <code>foo</code></h6><p><strong>在在线环境创建第一个项目foo</strong></p><p>To start using IBC with Starport open up a <a href="https://gitpod.io/#https://github.com/tendermint/starport/" target="_blank" rel="noopener">web-based development environment</a>, then scaffold and launch a Stargate chain:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">starport app github.com&#x2F;foo&#x2F;foo</span><br><span class="line"></span><br><span class="line">cd foo</span><br><span class="line"></span><br><span class="line">starport serve</span><br></pre></td></tr></table></figure><p>You now have a blockchain <code>foo</code> running, but it’s not connected to anything yet.</p><h6 id="Scaffolding-chain-bar"><a href="#Scaffolding-chain-bar" class="headerlink" title="Scaffolding chain bar"></a>Scaffolding chain <code>bar</code></h6><p>要将此区块链连接到另一个区块链，请打开另一个<a href="https://gitpod.io/#https://github.com/tendermint/starport/" target="_blank" rel="noopener">基于 Web 的开发环境</a>实例，并按照上面的步骤设置脚手架并启动另一个链条（让我们称之为）<code>bar</code></p><p>为了连接我们的区块链，我们将使用<a href="https://github.com/cosmos/ics/tree/master/spec/ics-018-relayer-algorithms" target="_blank" rel="noopener">中继器</a>。中继器是我们两个区块链之间的”物理”连接。它负责监控两个区块链，在它们之间中继数据，构建适当的图表，并在两个区块链上相应地执行它们。链条运行后，您将在终端输出中看到”中继器信息”字符串（您的字符串将有所不同）：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/bCt32L.png" alt="bCt32L"></p><p>这是一个<code>base64</code>编码的 JSON，包含有关链 ID、中继器帐户 mnemonic 和 RPC URL 的信息。 </p><p>==如果没有Relayer输出, 原因是relayer的版本太低! (官方文档中给的在线环境版本是开发版,如果relayer版本太低不会报错!), 检查starport的版本(使用0.14.0), 如果是本地环境,那么就手动下载rly==</p><p>问题详细见: <a href="https://github.com/tendermint/starport/pull/385" target="_blank" rel="noopener">https://github.com/tendermint/starport/pull/385</a></p><p>安装rly: <a href="https://stackoverflow.com/questions/64651914/how-to-install-relayer-for-cosmos-sdk-starport-chain" target="_blank" rel="noopener">https://stackoverflow.com/questions/64651914/how-to-install-relayer-for-cosmos-sdk-starport-chain</a></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/zlJ78C.png" alt="zlJ78C"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">✨ Relayer info: eyJDaGFpbklEIjoiYmFyIiwiTW5lbW9uaWMiOiJhbW9uZyBibHVyIG5lc3QgYm9keSBmcm9udCBicmlkZ2Ugc25ha2UgYmFsYW5jZSB5b3VuZyBzeW1ib2wgdHJpbSBjaGVmIHByb3BlcnR5IGZyb3plbiB3ZWVrZW5kIG1pZG5pZ2h0IGJyYXZlIHdpbmcgZGVwYXJ0IGh1YiBoYW1zdGVyIHN1cGVyIHZlbmRvciByZWFsIiwiUlBDQWRkcmVzcyI6Imh0dHBzOi8vMjY2NTctY3JpbXNvbi1zcXVpZC1janFkeWQ0YS53cy11czAzLmdpdHBvZC5pbzo0NDMifQ</span><br></pre></td></tr></table></figure><h6 id="Connecting-foo-with-bar"><a href="#Connecting-foo-with-bar" class="headerlink" title="Connecting foo with bar"></a>Connecting <code>foo</code> with <code>bar</code></h6><p>To connect these chains together, copy the relayer info of chain <code>bar</code>, switch to the terminal of chain <code>foo</code> and run the following command (use your own string):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">starport chain add eyJDaGFpbklEIjoiYmFyIiwiTW5lbW9uaWMiOiJhbW9uZyBibHVyIG5lc3QgYm9keSBmcm9udCBicmlkZ2Ugc25ha2UgYmFsYW5jZSB5b3VuZyBzeW1ib2wgdHJpbSBjaGVmIHByb3BlcnR5IGZyb3plbiB3ZWVrZW5kIG1pZG5pZ2h0IGJyYXZlIHdpbmcgZGVwYXJ0IGh1YiBoYW1zdGVyIHN1cGVyIHZlbmRvciByZWFsIiwiUlBDQWRkcmVzcyI6Imh0dHBzOi8vMjY2NTctY3JpbXNvbi1zcXVpZC1janFkeWQ0YS53cy11czAzLmdpdHBvZC5pbzo0NDMifQ</span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/yaarO9.png" alt="yaarO9"></p><p>Chain <code>foo</code> will now restart and you should see information about two being connected:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Detected chains, linking them...</span><br><span class="line">Linked foo &lt;--&gt; bar</span><br></pre></td></tr></table></figure><p>The two chains are now connected via IBC and you have successfully created a relayer.</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/6b9lkS.png" alt="6b9lkS"></p><h6 id="Sending-tokens-from-foo-to-bar"><a href="#Sending-tokens-from-foo-to-bar" class="headerlink" title="Sending tokens from foo to bar"></a>Sending tokens from <code>foo</code> to <code>bar</code></h6><p><strong>跨链发送代币foo =&gt; bar</strong>, 使用<code>rly</code>客户端创建一个IBC Token</p><p>Once the chains are connected, you can use a <a href="https://github.com/cosmos/relayer" target="_blank" rel="noopener">relayer</a> CLI <code>rly</code> to create an IBC token send transaction:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rly tx transfer foo bar 5token $(rly chains address bar)</span><br></pre></td></tr></table></figure><p>After a transaction is successfully created, you can now relay it to a connected chain:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rly tx relay foo-bar</span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/3bXHTB.png" alt="3bXHTB"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/asR993.png" alt="asR993"></p><h6 id="Checking-token-balances-on-chain-bar"><a href="#Checking-token-balances-on-chain-bar" class="headerlink" title="Checking token balances on chain bar"></a>Checking token balances on chain <code>bar</code></h6><p>To verify that an IBC transaction was relayed correctly, let’s check the balances of our relayer account:</p><p><strong>要验证 IBC 交易的中继正确，让我们检查我们的中继器帐户的余额：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bard q bank balances $(bard keys show bar -a --keyring-backend test)</span><br></pre></td></tr></table></figure><p>This command will output token balances for the relayer account and you should see 5 token transferred with IBC.</p><p>此命令将输出中继器帐户的令牌余额，您应该看到5个token通过IBC传输。</p><p><u><em>提示没有bard命令???</em></u></p><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h4><p>Inside your chain’s project directory you will see <code>secret.yml</code>. This file contains information about the local chain’s relayer account (under <code>accounts</code> property) and relayer accounts of connected chains (under <code>relayer</code> property).</p><p>此文件包含有关本地链的中继器帐户和连接链中继器帐户的信息。</p><p>foo下的secret.yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">accounts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">foo</span></span><br><span class="line">  <span class="attr">coins:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">800token</span></span><br><span class="line">  <span class="attr">mnemonic:</span> <span class="string">fly</span> <span class="string">nerve</span> <span class="string">endless</span> <span class="string">pistol</span> <span class="string">spread</span> <span class="string">harsh</span> <span class="string">derive</span> <span class="string">assume</span> <span class="string">grass</span> <span class="string">hybrid</span> <span class="string">pink</span> <span class="string">ancient</span> <span class="string">number</span> <span class="string">monster</span> <span class="string">dice</span> <span class="string">error</span> <span class="string">diagram</span> <span class="string">discover</span> <span class="string">ribbon</span> <span class="string">hold</span> <span class="string">drink</span> <span class="string">vast</span> <span class="string">toy</span> <span class="string">animal</span></span><br><span class="line"><span class="attr">relayer:</span></span><br><span class="line">  <span class="attr">accounts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">bar</span></span><br><span class="line">    <span class="attr">mnemonic:</span> <span class="string">among</span> <span class="string">blur</span> <span class="string">nest</span> <span class="string">body</span> <span class="string">front</span> <span class="string">bridge</span> <span class="string">snake</span> <span class="string">balance</span> <span class="string">young</span> <span class="string">symbol</span> <span class="string">trim</span> <span class="string">chef</span> <span class="string">property</span> <span class="string">frozen</span> <span class="string">weekend</span> <span class="string">midnight</span> <span class="string">brave</span> <span class="string">wing</span> <span class="string">depart</span> <span class="string">hub</span> <span class="string">hamster</span> <span class="string">super</span> <span class="string">vendor</span> <span class="string">real</span></span><br><span class="line">    <span class="attr">rpc_address:</span> <span class="string">https://26657-crimson-squid-cjqdyd4a.ws-us03.gitpod.io:443</span></span><br></pre></td></tr></table></figure><p>bar下的secret.yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">accounts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">bar</span></span><br><span class="line">  <span class="attr">coins:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">800token</span></span><br><span class="line">  <span class="attr">mnemonic:</span> <span class="string">among</span> <span class="string">blur</span> <span class="string">nest</span> <span class="string">body</span> <span class="string">front</span> <span class="string">bridge</span> <span class="string">snake</span> <span class="string">balance</span> <span class="string">young</span> <span class="string">symbol</span> <span class="string">trim</span> <span class="string">chef</span> <span class="string">property</span> <span class="string">frozen</span> <span class="string">weekend</span> <span class="string">midnight</span> <span class="string">brave</span> <span class="string">wing</span> <span class="string">depart</span> <span class="string">hub</span> <span class="string">hamster</span> <span class="string">super</span> <span class="string">vendor</span> <span class="string">real</span></span><br><span class="line"><span class="attr">relayer:</span></span><br><span class="line">  <span class="attr">accounts:</span> <span class="string">[]</span></span><br></pre></td></tr></table></figure><p>Once the chain is launched with <code>starport serve</code>, Starport uses information from <code>secret.yml</code> to create a relayer config in <code>~/.relayer/</code>. Every time the chain is restarted relayer config is reset, and connections are re-established.</p><h3 id="2-2-2-Architecture"><a href="#2-2-2-Architecture" class="headerlink" title="2.2.2 Architecture"></a>2.2.2 Architecture</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p><strong>需要提前安装golang和starport, 对于运行的机器没有特别的要求, Linux或者Mac操作系统或者树莓派均可</strong></p><p>Starport creates a blockchain for you in Golang. Requirements for this is to have Golang installed. You can get all the information here <a href="https://golang.org/doc/install" target="_blank" rel="noopener">https://golang.org/doc/install</a>.</p><p>Starport installation instructions can be found here: <a href="https://github.com/tendermint/starport#install" target="_blank" rel="noopener">https://github.com/tendermint/starport#install</a></p><p>To the machine you are executing on there are not many requirements. It runs on Linux or Mac Operating Systems and can be run from a Raspberry Pi.</p><h5 id="Your-blockchain-application"><a href="#Your-blockchain-application" class="headerlink" title="Your blockchain application"></a>Your blockchain application</h5><p>To create a blockchain application we use the command <code>app</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">starport app github.com&#x2F;username&#x2F;myapp</span><br></pre></td></tr></table></figure><table><thead><tr><th>Flag</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>--address-prefix</code></td><td><code>cosmos</code></td><td>Prefix, used for addresses <strong>指定地址前缀</strong></td></tr><tr><td><code>--sdk-version</code></td><td><code>stargate</code></td><td>Version of Cosmos SDK: <code>launchpad</code> or <code>stargate</code><strong>指定CosmosSDK</strong></td></tr></tbody></table><p>This will create the folder <code>myapp</code> and is a usable blockchain blueprint. If you want to dive directly into looking at the details of your blockchain you can run it with entering your <code>myapp</code> folder and use the command <code>serve</code> to initialise your blockchain and start it.</p><h5 id="Serve"><a href="#Serve" class="headerlink" title="Serve"></a>Serve</h5><p><code>starport serve</code></p><p><strong>以上命令会安装依赖,编译以及初始化</strong></p><p>To start the server, go into you application’s directory and run <code>starport serve</code>. This commands installs dependencies, builds and initializes the app and runs both Tendermint RPC server (by default on <code>localhost:26657</code>) as well as LCD (by default on <code>localhost:1317</code>) with hot reloading enabled.</p><p><strong><code>starport serve</code> uses <code>config.yml</code> to initialize your application, make sure you have it in your project directory (see [Configure](<a href="https://github.com/tendermint/starport/blob/develop/docs/2" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/2</a> Architecture/1 Introduction.md#configure)).</strong></p><p><strong>项目启动会使用config.yml文件,必须存在</strong></p><p>Note: depending on your OS and firewall settings, you may have to accept a prompt asking if your application’s binary (<code>blogd</code> in this case) can accept external connections.</p><p>根据您的操作系统和防火墙设置，您可能需要接受提示，询问您的申请的二进制（在此例中<code>blogd</code>）是否可以接受外部连接。</p><table><thead><tr><th>Flag</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>--verbose</code></td><td><code>false</code></td><td>Enable verbose output from processes <strong>输出运行细节 -v</strong></td></tr><tr><td><code>--path</code></td><td></td><td>Path to the project <strong>路径</strong></td></tr></tbody></table><p>The first step of your own blockchain is already done. Using the default settings, a blockchain that has networking, consensus protocol with an own token is hereby established. From here on, you can implement logic that makes your own blockchain unique.</p><h5 id="The-Key-Value-Store-KV"><a href="#The-Key-Value-Store-KV" class="headerlink" title="The Key-Value Store (KV)"></a>The Key-Value Store (KV)</h5><h6 id="How-to-use-types"><a href="#How-to-use-types" class="headerlink" title="==How to use types=="></a>==<strong>How to use types</strong>==</h6><p>In the SDK, data is stored in the multistore(多重存储). Key-Value pairs are saved in the KVStores. Multiple stores can be created and managed at the same time. We will use the store to save our data to the blockchain. Starport assists us in setting up the Key-Value Store with the command <code>type</code>. In order to use <code>type</code> we should give our type a fitting <code>typeName</code> with the intended fields that we want to use. If we wanted to store user with username and age, we would use the command</p><p>多样的存储可以同时的创建和管理, 使用type创建KV数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">starport type [typeName] [field1] [field2:bool] ...More specific</span><br></pre></td></tr></table></figure><p>以user结构体举例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">  username <span class="keyword">string</span>,<span class="comment">// 默认是string</span></span><br><span class="line">  age <span class="keyword">int</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">starport type user username age:int</span><br></pre></td></tr></table></figure><p><strong>This command generates messages, handlers, keepers, CLI and REST clients and type definition for <code>typeName</code> type</strong>. A type can have any number of <code>field</code> arguments. <strong>By default fields are strings, but <code>bool</code> and <code>int</code> are supported.</strong></p><p>==<strong>默认创建的field是string类型,但是支持bool和int类型</strong>==</p><p>Now a Key-Value Store for the user with fields username and age is created. We can create a new user with the command</p><p><strong>创建user实例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myappcli tx myapp create-user &quot;my-first-username&quot; 35</span><br></pre></td></tr></table></figure><p>Which creates the user with username <code>my-first-username</code> and age of <code>35</code>.</p><p>Another example,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">starport type post title body</span><br></pre></td></tr></table></figure><p>This command generates a type <code>Post</code> with two fields: <code>title</code> and <code>body</code>.</p><p>To add a post run <code>blogcli tx blog create-post &quot;My title&quot; &quot;This is a blog&quot; --from=user1</code>.</p><p>These are the basic commands for getting started with starport. From creating a first blockchain to adding your own data types and accessing the User Interface. In the next two chapters, we will be looking closer at th<u>e initial setup for starport and how to configure it</u>. Afterwards, we will be looking into more complex usecases, where each of the commands and more will be explained in detail.</p><h6 id="Accounts-on-your-blockchain"><a href="#Accounts-on-your-blockchain" class="headerlink" title="==Accounts on your blockchain=="></a>==Accounts on your blockchain==</h6><p>An account on the blockchain is a <strong>keypair(密钥对)</strong> of private and public keys. <strong>When you start your blockchain with starport, you can define the name of the keys and the amount of coins they start with.</strong> The keys are created for you and displayed on startup. You can use these keys when interacting with your blockchain. <strong>A list of user accounts is created during genesis of your application</strong>. You can define them as follows in your <code>config.yml</code> file. See an example in chapter <a href="https://github.com/tendermint/starport/blob/develop/docs/03_configuration/03_configuration.md" target="_blank" rel="noopener">configuration</a>.<br>*<em>账户的体现是一对公私钥, 在开始启动区块链的时候可以定义你的账户keys以及初始coins, 初始化可以创建一系列的账户,你可以在config.yaml中进行定义.  *</em></p><table><thead><tr><th>Key</th><th>Required</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td>Y</td><td>String</td><td>Local name of the key pair</td></tr><tr><td>coins</td><td>Y</td><td>List of Strings</td><td>Initial coins with denominations (e.g. “100coin”)</td></tr></tbody></table><h6 id="The-initial-validator"><a href="#The-initial-validator" class="headerlink" title="The initial validator"></a>The initial validator</h6><p>Blocks on a tendermint blockchain are created and <strong>validated</strong> by the so called <code>validators</code>. You can define the set of validators your blockchain starts with in your <code>config.yml</code>. The validator property describes your set of validators. Use a <code>name</code> that you have specified in the <code>accounts</code> array. The account should have enough tokens for staking purposes. See an example in chapter <a href="https://github.com/tendermint/starport/blob/develop/docs/03_configuration/03_configuration.md" target="_blank" rel="noopener">configuration</a>.</p><p><strong>项目初始化也可以创建Validator, 同样的在config.yaml中定义,该帐户应有足够的tokens用于投注目的</strong></p><table><thead><tr><th>Key</th><th>Required</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td>Y</td><td>String</td><td>Name of one the accounts</td></tr><tr><td>staked</td><td>Y</td><td>String</td><td>Amount of coins staked by your validator, should be &gt;= 10^6 (e.g. “100000000stake”)</td></tr></tbody></table><h5 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h5><ul><li>With the command <code>starport app</code> a new blockchain can be initialised.</li><li>A combination <code>starport app</code> and <code>starport serve</code> already let’s you manage your blockchain out of the box.</li><li>The default blockchain includes networking and a consensus protocol with your own token.</li><li>Data is managed with the Key-Value Store and data types can be added with <code>starport type</code>.</li><li>Accounts are created during genesis of the application. These can be configured in the <code>config.yml</code>.</li></ul><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">x/&#123;module&#125;</span><br><span class="line">├── client</span><br><span class="line">│   ├── cli</span><br><span class="line">│   │   ├── query.go</span><br><span class="line">│   │   └── tx.go</span><br><span class="line">│   └── rest</span><br><span class="line">│       ├── query.go</span><br><span class="line">│       └── tx.go</span><br><span class="line">├── exported</span><br><span class="line">│   └── exported.go</span><br><span class="line">├── keeper</span><br><span class="line">│   ├── invariants.go</span><br><span class="line">│   ├── genesis.go</span><br><span class="line">│   ├── keeper.go</span><br><span class="line">│   ├── ...</span><br><span class="line">│   └── querier.go</span><br><span class="line">│   └── grpc_query.go</span><br><span class="line">├── types</span><br><span class="line">│   ├── codec.go</span><br><span class="line">│   ├── errors.go</span><br><span class="line">│   ├── events.go</span><br><span class="line">│   ├── expected_keepers.go</span><br><span class="line">│   ├── genesis.go</span><br><span class="line">│   ├── keys.go</span><br><span class="line">│   ├── msgs.go</span><br><span class="line">│   ├── params.go</span><br><span class="line">│   ├── types.proto</span><br><span class="line">│   ├── ...</span><br><span class="line">│   └── querier.go</span><br><span class="line">│   └── &#123;module_name&#125;.pb.go</span><br><span class="line">│   └── query.pb.go</span><br><span class="line">│   └── genesis.pb.go</span><br><span class="line">├── simulation</span><br><span class="line">│   ├── decoder.go</span><br><span class="line">│   ├── genesis.go</span><br><span class="line">│   ├── operations.go</span><br><span class="line">│   ├── params.go</span><br><span class="line">│   └── proposals.go</span><br><span class="line">├── abci.go</span><br><span class="line">├── handler.go</span><br><span class="line">├── ...</span><br><span class="line">└── module.go</span><br></pre></td></tr></table></figure><p><code>abci.go</code>: The module’s BeginBlocker and EndBlocker implementations (if any).<strong>模块的开始块与结束块实现</strong></p><p><code>client/</code>: The module’s CLI and REST client functionality implementation and testing.<strong>客户端</strong></p><p><code>exported/</code>: The module’s exported types – typically type interfaces. <strong>If a module relies on other module keepers, it is expected to receive them as interface contracts through the expected_keepers.go</strong> (which are detailed below下文详述) design to <strong>avoid having a direct dependency on the implementing module</strong>. However, these contracts can define methods that operate on and/or return types that are specific to the contract’s implementing module and this is where exported/ comes into play. Types defined here allow for expected_keepers.go in other modules to define contracts that use single canonical types. This pattern allows for code to remain DRY and also alleviates import cycle chaos.</p><p><strong>如果当前模块依赖其他模块的keeper,那么通过expected_keepers.go使之相关联,以此来避免直接依赖模块,然而，这些契约可以定义对特定于契约实现模块的和/或返回类型进行操作的方法，这就是export /comes发挥作用的地方。这里定义的类型允许使用expected_keepers。在其他模块中定义使用单一规范类型的契约。这种模式允许代码保持整洁，并且还减轻了导入周期的混乱。</strong></p><p><code>handler.go</code>: The module’s message handlers.</p><p><code>keeper/</code>: The module’s keeper implementation along with any auxiliary implementations such as the querier and invariants.</p><p><code>types/</code>: The module’s type definitions such as *<em>messages, KVStore keys, parameter types, Protocol Buffer definitions, and expected_keepers.go contracts.  *</em></p><p><code>module.go</code>: The module’s implementation of the <strong>AppModule and AppModuleBasic interfaces.</strong></p><h4 id="标准模块"><a href="#标准模块" class="headerlink" title="标准模块"></a>标准模块</h4><h5 id="What-are-modules"><a href="#What-are-modules" class="headerlink" title="What are modules"></a>What are modules</h5><p>In the Cosmos SDK modules are the basis for the logic of your blockchain. Each module serves specific purposes and functions. The Cosmos SDK offers a variety of native modules to make a blockchain work. These modules handle authentication for users, token transfers, governance functions, staking of tokens, supply of tokens and many more.</p><p>If you want to change the default functionality of a module or just change certain hardcoded parameter, you can fork a module and change it, therefore owning your own logic for your blockchain. While forking and editing a module should be done carefully, this approach marks the Cosmos SDK as especially powerful, as you can experiment with different parameters as the standard implementation suggests.</p><p>Modules do not need to be created by a specific company or individual. They can be created by anyone and offered for general use to the public. Although there do exist standards that projects look into before integrating a module to their blockchain. It is recommended that a module has understandable specifications, handles one thing good and is well tested - optimally battle-tested on a live blockchain. When growing more complex, sometimes it makes more sense to have two modules instead of one module trying to “solve-it-all”, this consideration can make it more attractive for other projects to use a module in their blockchain project.</p><p>在Cosmos中，SDK模块是区块链逻辑的基础。每个模块都有特定的用途和功能。Cosmos SDK提供了各种原生模块来让区块链工作。这些模块处理用户身份验证、令牌传输、治理功能、令牌权益、令牌供应等等。</p><p>如果你想改变一个模块的默认功能或者只是改变某个硬编码的参数，<strong>你可以分叉一个模块并改变它，因此拥有你自己的区块链逻辑</strong>。分叉和编辑模块应该小心，但这种方法标志着Cosmos SDK特别强大，因为你可以试验标准实现建议的不同参数。</p><p>模块不需要由特定的公司或个人创建。它们可以由任何人创建并提供给公众使用。尽管项目在将模块集成到他们的区块链之前确实存在一些标准。建议一个模块有可理解的规格，能很好地处理一件事，并且经过了很好的测试——最好是在实时的区块链上进行战斗测试。当变得更复杂时，有时使用两个模块比一个模块试图“解决所有问题”更有意义，这种考虑可以使其他项目在区块链项目中使用一个模块更有吸引力。</p><h5 id="Standard-modules"><a href="#Standard-modules" class="headerlink" title="Standard modules"></a>Standard modules</h5><p>When creating a blockchain with starport or manually with the Cosmos SDK, there is a set of modules that you should be using in order to have a set of rules that define a blockchain in the first place. These modules are</p><p><strong>目录</strong></p><ul><li>What are modules<ul><li>[Standard modules](<a href="https://github.com/tendermint/starport/blob/develop/docs/2" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/2</a> Architecture/3 Standard Modules.md#standard-modules)</li><li>[Auth](<a href="https://github.com/tendermint/starport/blob/develop/docs/2" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/2</a> Architecture/3 Standard Modules.md#auth)</li><li>[Bank](<a href="https://github.com/tendermint/starport/blob/develop/docs/2" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/2</a> Architecture/3 Standard Modules.md#bank)</li><li>[Capability](<a href="https://github.com/tendermint/starport/blob/develop/docs/2" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/2</a> Architecture/3 Standard Modules.md#capability)</li><li>[Staking](<a href="https://github.com/tendermint/starport/blob/develop/docs/2" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/2</a> Architecture/3 Standard Modules.md#staking)</li><li>[Mint](<a href="https://github.com/tendermint/starport/blob/develop/docs/2" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/2</a> Architecture/3 Standard Modules.md#mint)</li><li>[Distribution](<a href="https://github.com/tendermint/starport/blob/develop/docs/2" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/2</a> Architecture/3 Standard Modules.md#distribution)</li><li>[Params](<a href="https://github.com/tendermint/starport/blob/develop/docs/2" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/2</a> Architecture/3 Standard Modules.md#params)</li><li>[Governance](<a href="https://github.com/tendermint/starport/blob/develop/docs/2" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/2</a> Architecture/3 Standard Modules.md#governance)</li><li>[Crisis](<a href="https://github.com/tendermint/starport/blob/develop/docs/2" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/2</a> Architecture/3 Standard Modules.md#crisis)</li><li>[Slashing](<a href="https://github.com/tendermint/starport/blob/develop/docs/2" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/2</a> Architecture/3 Standard Modules.md#slashing)</li><li>[IBC](<a href="https://github.com/tendermint/starport/blob/develop/docs/2" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/2</a> Architecture/3 Standard Modules.md#ibc)</li><li>[Upgrade](<a href="https://github.com/tendermint/starport/blob/develop/docs/2" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/2</a> Architecture/3 Standard Modules.md#upgrade)</li><li>[Evidence](<a href="https://github.com/tendermint/starport/blob/develop/docs/2" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/2</a> Architecture/3 Standard Modules.md#evidence)</li><li>[Using modules](<a href="https://github.com/tendermint/starport/blob/develop/docs/2" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/2</a> Architecture/3 Standard Modules.md#using-modules)</li><li>[Summary](<a href="https://github.com/tendermint/starport/blob/develop/docs/2" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/2</a> Architecture/3 Standard Modules.md#summary)</li></ul></li></ul><h6 id="Auth"><a href="#Auth" class="headerlink" title="Auth"></a>Auth</h6><p>The <code>auth</code> module is responsible for accounts on the blockchain and basic transaction types that accounts can use.</p><p><strong>该模块负责处理区块链上的帐户和帐户可以使用的基本交易类型</strong></p><p>It introduces Gas and Fees as concepts in order to prevent the blockchain to bloat by not-identifyable accounts, as on public blockchains you do not have more information about accounts as the public key or balance of an account or the previous transaction history.</p><p>它引入Gas和费用作为概念，以防止区块链因无法识别的账户而膨胀，因为在公共区块链上，您没有更多关于账户的信息，如公钥、账户余额或以前的交易历史。</p><p>帐户的接口定义为</p><p>The interface of an Account is defined as</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BaseAccount defines a base account type. It contains all the necessary fields</span></span><br><span class="line"><span class="comment">// for basic account functionality. Any custom account type should extend this</span></span><br><span class="line"><span class="comment">// 基本的账户函数, 没一个特定的账户类型都继承于此</span></span><br><span class="line"><span class="comment">// type for additional functionality (e.g. vesting).</span></span><br><span class="line">message BaseAccount &#123;</span><br><span class="line">  option (gogoproto.goproto_getters)  = <span class="literal">false</span>;</span><br><span class="line">  option (gogoproto.goproto_stringer) = <span class="literal">false</span>;</span><br><span class="line">  option (gogoproto.equal)            = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  option (cosmos_proto.implements_interface) = <span class="string">"AccountI"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">string</span>              address = <span class="number">1</span>;</span><br><span class="line">  google.protobuf.Any pub_key = <span class="number">2</span></span><br><span class="line">      [(gogoproto.jsontag) = <span class="string">"public_key,omitempty"</span>, (gogoproto.moretags) = <span class="string">"yaml:\"public_key\""</span>];</span><br><span class="line">  <span class="keyword">uint64</span> account_number = <span class="number">3</span> [(gogoproto.moretags) = <span class="string">"yaml:\"account_number\""</span>];</span><br><span class="line">  <span class="keyword">uint64</span> sequence       = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>auth</code> module exposes the account keeper where accounts can be stored or changed. Furthermore it exposes the types for Standard transactions, fees, signatures or replay-prevention. It also allows for vesting accounts, as that certain coins can be made accessible over a period of time to an entity. The vesting logic is mostly used for unbonding of staking but can also be used for other purposes.</p><p>auth模块公开帐户管理员，<strong>帐户可以存储或更改</strong>。此外，它还公开了标准事务、费用、签名或重放预防的类型。它还允许对账户进行归属，因为某个实体可以在一段时间内访问某些货币。归属逻辑主要用于权益的解绑定，但也可以用于其他目的。</p><p><em>Read the <a href="https://github.com/cosmos/cosmos-sdk/blob/master/x/auth/spec/README.md" target="_blank" rel="noopener">specification</a></em></p><h6 id="Bank"><a href="#Bank" class="headerlink" title="Bank"></a>Bank</h6><p>The <code>bank</code> module has its name because it acts as the module that allows for token transfers and checks for the validity of each transfer. Furthermore, it is responsible for checking the whole supply of the chain, the sum of all account balances.</p><p>bank模块之所以有自己的名称，是因为它充当了允许令牌转账和检查每个转账有效性的模块。此外，它还负责检查整个供应链，即所有帐户余额的总和。</p><p><em>Read the <a href="https://github.com/cosmos/cosmos-sdk/blob/master/x/bank/spec/README.md" target="_blank" rel="noopener">specification</a></em></p><h6 id="Capability"><a href="#Capability" class="headerlink" title="Capability"></a>Capability</h6><p>Full implementation of the IBC specification requires the ability to <strong>create and authenticate object-capability keys at runtime</strong> (i.e., during transaction execution), as described in ICS 5. In the IBC specification, capability keys are created for each newly initialised port &amp; channel, and are used to authenticate future usage of the port or channel. Since channels and potentially ports can be initialised during transaction execution, the state machine must be able to create object-capability keys at this time.</p><p>IBC规范的完整实现需要在运行时(即交易执行期间)创建和验证对象功能键的能力，如ICS 5中所述。在IBC规范中，将为每个新初始化的端口和通道创建功能键，并用于验证端口port或通道channel未来的使用情况。由于通道和潜在的端口可以在事务执行期间初始化，因此状态机必须能够在此时创建对象功能键。</p><p><em>Read the <a href="https://github.com/cosmos/cosmos-sdk/blob/master/x/capability/spec/README.md" target="_blank" rel="noopener">specification</a></em></p><h6 id="Staking"><a href="#Staking" class="headerlink" title="Staking"></a>Staking</h6><p>The <code>staking</code> module allows for an advanced Proof of Stake system, where validators can be created and tokens delegated to validators.</p><p><strong>权益模块支持高级的权益证明POS系统，在该系统中可以创建验证器Validator，并将令牌委托给验证器。</strong></p><p><em>Read the <a href="https://github.com/cosmos/cosmos-sdk/blob/master/x/staking/spec/02_state_transitions.md#slashing" target="_blank" rel="noopener">specification</a></em></p><h6 id="Mint"><a href="#Mint" class="headerlink" title="Mint"></a>Mint</h6><p>The minting mechanism is designed to allow for a flexible inflation rate determined by market demand targeting a particular bonded-stake ratio effect a balance between market liquidity and staked supply.</p><p>It can be broken down in the following way:</p><p>If the inflation rate is below the goal %-bonded the inflation rate will increase until a maximum value is reached If the goal % bonded (67% in Cosmos-Hub) is maintained, then the inflation rate will stay constant If the inflation rate is above the goal %-bonded the inflation rate will decrease until a minimum value is reached</p><p>铸币机制的目的是允许由市场需求决定的灵活通货膨胀率，以特定的债券比率为目标，以平衡市场流动性和债券供应。</p><p>它可以通过以下方式进行分解:</p><p>如果通货膨胀率低于%保税目标通货膨胀率会增加,直到达到最大值,如果目标%保税Cosmos-Hub(67%),那么通货膨胀率将保持不变,如果通货膨胀率高于目标%保税通货膨胀率会降低,直到达到最小值</p><p><em>Read the <a href="https://github.com/cosmos/cosmos-sdk/blob/master/x/mint/spec/README.md" target="_blank" rel="noopener">specification</a></em></p><h6 id="Distribution"><a href="#Distribution" class="headerlink" title="Distribution"></a>Distribution</h6><p>The <code>distribution</code> module is responsible to distribute the inflation of a Token. When new Tokens get created, they get distributed to the validators and their respective delegators, with a potential commission the validator takes. Each validator can choose a commission of those Token when creating a validator, this commission is editable.</p><p>分发模块负责分发令牌的膨胀。当新的令牌被创建时，它们被分发给验证器和它们各自的委托者，验证器接受潜在的委托。当创建一个验证器时，这个验证器是可编辑的。</p><p><em>Read the <a href="https://github.com/cosmos/cosmos-sdk/blob/master/x/distribution/spec/README.md" target="_blank" rel="noopener">specification</a></em></p><h6 id="Params"><a href="#Params" class="headerlink" title="Params"></a>Params</h6><p>The <code>params</code> module allows for a global parameter store in your blockchain application. It is designed to hold the chain parameters so that they can be changed during runtime by governance. It allows to upgrade the blockchain parameters via the <code>government</code> module and take effect on an agreed upon time when the majority of the shareholders decide to make a change.</p><p><em>Read the <a href="https://github.com/cosmos/cosmos-sdk/blob/master/x/params/spec/README.md" target="_blank" rel="noopener">specification</a></em></p><p>Those modules are typically installed on default when using starport. There are a range of modules that are also part of the Cosmos SDK, additionally some other public modules have already reached a major level of usage and acceptance. We will look at more advanced modules in the next Chapter.</p><p><strong>params模块允许在区块链应用程序中存储全局参数</strong>。<strong>它被设计用来保存链参数</strong>，以便在运行时通过治理更改它们。它允许通过政府模块升级区块链参数，并在多数股东决定更改时约定时间生效。</p><p>这些模块通常在使用starport时默认安装。还有一系列模块也是Cosmos SDK的一部分，另外一些公共模块已经达到了主要的使用和接受水平。我们将在下一章讨论更高级的模块。</p><h6 id="Governance"><a href="#Governance" class="headerlink" title="Governance"></a>Governance</h6><p>The module enables Cosmos-SDK based blockchains to support an on-chain governance system. In this system, holders of the native staking token of the chain can vote on proposals on a 1 token 1 vote basis (from there it can be parameterized). Next is a list of features the module currently supports:</p><ul><li>Proposal submission: Users can submit proposals with a deposit. Once the minimum deposit is reached, proposal enters voting period</li><li>Vote: Participants can vote on proposals that reached MinDeposit</li><li>Inheritance and penalties: Delegators inherit their validator’s vote if they don’t vote themselves.</li><li>Claiming deposit: Users that deposited on proposals can recover their deposits if the proposal was accepted OR if the proposal never entered voting period.</li></ul><p>该模块使基于Cosmos-SDK的区块链能够支持链上治理系统。在这个系统中，链上本地下注令牌的持有者可以在1个令牌1个投票的基础上对提议投票(从那里可以参数化它)。下面是该模块当前支持的特性列表:</p><ul><li><p>提案提交:用户可以提交提交提案的定金。一旦最低存款达到，提案进入表决期</p></li><li><p>投票:参与者可以对达到最低存款的提案进行投票</p></li><li><p>继承和惩罚:委托者如果自己不投票，就继承验证者的投票。</p></li><li><p>认领押金:如果提案被接受或者提案从未进入投票期，对提案进行押金认领的用户可以收回押金。</p></li></ul><p><em>Read the <a href="https://github.com/cosmos/cosmos-sdk/blob/master/x/gov/spec/README.md" target="_blank" rel="noopener">specification</a></em></p><h6 id="Crisis"><a href="#Crisis" class="headerlink" title="Crisis"></a>Crisis</h6><p>The crisis module halts the blockchain under the circumstance that a blockchain invariant is broken. Invariants can be registered with the application during the application initialization process.</p><p>危机模块在区块链不变式被打破的情况下<strong>停止区块链</strong>。在应用程序初始化过程中，可以向应用程序注册不变量。</p><p><em>Read the <a href="https://github.com/cosmos/cosmos-sdk/blob/master/x/crisis/spec/README.md" target="_blank" rel="noopener">specification</a></em></p><h6 id="Slashing"><a href="#Slashing" class="headerlink" title="Slashing"></a>Slashing</h6><p>The slashing module enables Cosmos SDK-based blockchains to disincentivize any attributable action by a protocol-recognized actor with value at stake by penalizing them (“slashing”).</p><p>Penalties may include, but are not limited to:</p><p>Burning some amount of their stake Removing their ability to vote on future blocks for a period of time. This module will be used by the Cosmos Hub, the first hub in the Cosmos ecosystem.</p><p>削减模块使Cosmos基于sdk的区块链能够通过<strong>惩罚协议认可的参与者(“削减”)来阻止任何可归责的行为。</strong></p><p>罚款可包括但不限于:</p><p>烧了一些他们的股份，在一段时间内取消他们对未来区块的投票能力。这个模块将被宇宙中心Hub使用，宇宙生态系统中的第一个中心。</p><p><em>Read the <a href="https://github.com/cosmos/cosmos-sdk/blob/master/x/slashing/spec/README.md" target="_blank" rel="noopener">specification</a></em></p><h6 id="IBC"><a href="#IBC" class="headerlink" title="IBC"></a>IBC</h6><p>IBC allows to relay packets between chains and could be used with any compatible modules between two chains. The <code>IBC</code> module, as Inter-blockchain Communication, enables for example sending native tokens between blockchains. It is divided by a subset of specifications.</p><p>IBC允许<strong>在链之间中继信息包</strong>，可以与<strong>两个链之间的任何兼容模块一起使用</strong>。作为区块链间通信，IBC模块支持在区块链之间发送本地令牌。它被规范的子集所分割。</p><p><em>Read the <a href="https://github.com/cosmos/cosmos-sdk/blob/master/x/ibc/spec/README.md" target="_blank" rel="noopener">specifications</a></em></p><h6 id="Upgrade"><a href="#Upgrade" class="headerlink" title="Upgrade"></a>Upgrade</h6><p><code>x/upgrade</code> is an implementation of a Cosmos SDK module that facilitates smoothly upgrading a live Cosmos chain to a new (breaking) software version. It accomplishes this by providing a BeginBlocker hook that prevents the blockchain state machine from proceeding once a pre-defined upgrade block time or height has been reached.</p><p>x/upgrade是Cosmos SDK模块的一个实现，它有助于将一个活生生的Cosmos链顺利<strong>升级</strong>到<strong>一个新的(中断的)软件版本</strong>。它通过提供一个BeginBlocker钩子来实现这一点，一旦达到预定义的升级块时间或高度，它就阻止区块链状态机继续运行。</p><p><em>Read the <a href="https://github.com/cosmos/cosmos-sdk/blob/master/x/upgrade/spec/README.md" target="_blank" rel="noopener">specification</a></em></p><h6 id="Evidence"><a href="#Evidence" class="headerlink" title="Evidence"></a>Evidence</h6><p><code>x/evidence</code> is an implementation of a Cosmos SDK module, per ADR 009, that allows for the submission and handling of arbitrary evidence of misbehavior such as equivocation and counterfactual signing.</p><p>The evidence module differs from standard evidence handling which typically expects the underlying consensus engine, e.g. Tendermint, to automatically submit evidence when it is discovered by allowing clients and foreign chains to submit more complex evidence directly.</p><p>x/evidence是Cosmos SDK模块的一个实现，根据ADR 009，<strong>允许提交和处理不当行为的任意证据</strong>，如含糊入词和反事实签署。</p><p>证据模块不同于标准的证据处理，后者通常期望底层的共识引擎(如Tendermint)在证据被发现时自动提交证据，允许客户和外国链直接提交更复杂的证据。</p><p><em>Read the <a href="https://github.com/cosmos/cosmos-sdk/blob/master/x/evidence/spec/README.md" target="_blank" rel="noopener">specification</a></em></p><h6 id="Using-modules"><a href="#Using-modules" class="headerlink" title="==Using modules=="></a>==Using modules==</h6><p>With starport you can add a module with the command <code>starport module create modulename</code>. When adding a module manually to a blockchain application, it requires to edit the <code>app/app.go</code> and the <code>myappcli/main.go</code> with the according entries. Starport manages the code edits and additions for you conveniently.</p><p>使用starport，<strong>==您可以使用<code>starport module create modulename</code>命令添加模块。==</strong>当手动添加一个模块到区块链应用程序时，它需要编辑<code>app/app.go</code>和<code>myappcli/main.go</code>,按照相应的条目去做。Starport为您方便地管理代码编辑和添加。</p><h5 id="Summary-1"><a href="#Summary-1" class="headerlink" title="Summary"></a>Summary</h5><ul><li>Importing modules in a Cosmos SDK built blockchain exposes new functionalities for the blockchain.</li><li>Any combination of modules is allowed.</li><li>The modules define what can be done on the blockchain.</li><li>Modules are editable, but the success of your blockchain will be dependend on choosing the correct modules for your blockchain, for functionality and security sake.</li><li>==<strong><code>starport module import &lt;modulename&gt;</code> lets you import modules into your blockchain application.</strong>==</li></ul><h4 id="编写自定义模块"><a href="#编写自定义模块" class="headerlink" title="编写自定义模块"></a><strong>编写自定义模块</strong></h4><h5 id="Writing-custom-modules"><a href="#Writing-custom-modules" class="headerlink" title="Writing custom modules"></a>Writing custom modules</h5><p>Starport allows you to jump directly into creating your own module. With the before described <code>type</code> function you can add new transaction types to your application. Under the hood, starport creates a handler, types and messages for you.</p><p><strong>Starport允许你直接创建你自己的模块。使用前面描述的<code>type</code>类型函数，您可以向应用程序添加新的交易类型。在底层，starport为您创建一个处理程序、类型和消息。</strong></p><p>Without using starport, you would need to manipulate these functions yourself. Here is what starport does when you add a <code>type</code>. Understanding what starport does might help in order to either add more complex structures or debug in case something does not work as it should.</p><p><strong>如果不使用starport，您将需要自己操作这些函数。以下是starport在添加类型时所做的。理解starport所做的可能有助于添加更复杂的结构或调试，以防某些东西不能正常工作。</strong></p><h6 id="Proto"><a href="#Proto" class="headerlink" title="Proto"></a>Proto</h6><p>When using the type command a Protobuffer definition is created for you in the <code>proto</code> directory.</p><p>当使用type命令时，将在proto目录中为您创建一个Protobuffer定义。</p><p>It contains messages for full CRUD (Create, Read, Update, Delete) operations for your created transaction type.</p><p>它包含针对您创建的事务类型的完整CRUD(创建、读取、更新、删除)操作的消息。</p><h6 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h6><p>Once you have created your starport blockchain application, you will have your own module resident of <code>yourapp/x/yourmodule</code>, it comes predefined with a couple of files and folders which define types, functions and messages of your module.</p><p>一旦你创建了你的starport区块链应用程序，你就会在<code>yourapp/x/yourmodule</code>中拥有自己的模块，它预先定义了一些文件和文件夹，这些文件和文件夹定义了你的模块的类型、函数和消息。</p><h6 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h6><p>The <code>types</code> folder defines structures of your golang blockchain application. Here you can define your basic or more advanced types which will later be data and functions usable on your blockchain.</p><p>The message types are defined in the file <code>types/messages_type</code>, or other functions that you are planning to use.</p><p><code>types</code><strong>文件夹定义了golang区块链应用程序的结构</strong>。在这里，你可以定义你的基本类型或更高级的类型，这些类型以后会成为区块链上可用的数据和函数。</p><p>消息类型message types在文件<code>types/messages_type</code>中定义，或者在计划使用的其他函数中定义。</p><h6 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h6><p>There is a <code>rest</code> folder that takes care of the rest API that your module exposes.</p><p>The <code>cli</code> folder with the contents take care of the Command line interface commands that will be available to the user.</p><p>有一个rest文件夹负责模块<strong>公开的rest API</strong></p><p>包含内容的命令行文件夹负责<strong>用户可以使用的命令行接口命令。</strong></p><h6 id="Frontend"><a href="#Frontend" class="headerlink" title="Frontend"></a>Frontend</h6><p>Currently starport provides a basic Vue User-Interface that you can get inspired by or build ontop on. The source code is available in the <code>vue</code> folder. Written in JavaScript you can hop directly into writing the frontend for your application.</p><p>目前starport提供了一个基本的Vue用户界面，你可以从中得到启发，也可以在此基础上进行构建。源代码可以在vue文件夹中找到。用JavaScript编写，您可以直接跳到编写应用程序的前端。</p><p><a href="https://vuejs.org/" target="_blank" rel="noopener">Learn more about Vue.</a></p><h5 id="Summary-2"><a href="#Summary-2" class="headerlink" title="Summary"></a>Summary</h5><ul><li>Starport bootstraps a module for you.</li><li>You can change a module by modifying the files in <code>yourapp/x/</code> or the <code>proto</code> diretory.</li><li>Starport has a Vue frontend where you can start to work immediately.</li></ul><h4 id="config-yaml配置"><a href="#config-yaml配置" class="headerlink" title="config.yaml配置"></a>config.yaml配置</h4><p>With Starport your blockchain can be configured with <code>config.yml</code>.</p><h5 id="accounts"><a href="#accounts" class="headerlink" title="accounts"></a><code>accounts</code></h5><p>A list of user accounts created during genesis of your application.</p><table><thead><tr><th>Key</th><th>Required</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td>Y</td><td>String</td><td>Local name of a key pair</td></tr><tr><td>coins</td><td>Y</td><td>List of Strings</td><td>Initial coins with denominations (e.g. “100coin”)</td></tr><tr><td>address</td><td>N</td><td>String</td><td>Address of the account in bech32</td></tr></tbody></table><p>Example</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">accounts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">alice</span></span><br><span class="line">    <span class="attr">coins:</span> <span class="string">["1000token",</span> <span class="string">"100000000stake"</span><span class="string">]</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">bob</span></span><br><span class="line">    <span class="attr">coins:</span> <span class="string">["500token"]</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">cosmos1adn9gxjmrc3hrsdx5zpc9sj2ra7kgqkmphf8yw</span></span><br></pre></td></tr></table></figure><h5 id="build"><a href="#build" class="headerlink" title="build"></a><code>build</code></h5><table><thead><tr><th>Key</th><th>Required</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>binary</td><td>N</td><td>String</td><td>Name of the node binary that will be built and used by Starport。 <strong>Starport将构建和使用的节点二进制文件的名称</strong></td></tr></tbody></table><p>Example</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">build:</span><br><span class="line">  binary: &quot;mychaind&quot;</span><br></pre></td></tr></table></figure><h5 id="build-proto"><a href="#build-proto" class="headerlink" title="build.proto"></a><code>build.proto</code></h5><table><thead><tr><th>Key</th><th>Required</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>path</td><td>N</td><td>String</td><td>Path to protocol buffer files (default: <code>&quot;proto&quot;</code>)</td></tr><tr><td>third_party_paths</td><td>N</td><td>List of Strings</td><td>Path to thid-party protocol buffer files (default: <code>[&quot;third_party/proto&quot;, &quot;proto_vendor&quot;]</code>)</td></tr></tbody></table><h5 id="faucet"><a href="#faucet" class="headerlink" title="faucet"></a><code>faucet</code></h5><p>A faucet service that <strong>sends tokens to addresses</strong>. Web UI is available by default on <a href="http://localhost:4500/" target="_blank" rel="noopener">http://localhost:4500</a>.</p><p><strong>给用户拿初始货币的水龙头服务</strong></p><table><thead><tr><th>Key</th><th>Required</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td>Y</td><td>String</td><td>Name of a key pair. <code>name</code> must be in <code>accounts</code></td></tr><tr><td>coins</td><td>Y</td><td>List of Strings</td><td>Coins with denominations sent per request  <strong>每次给节点对应需要的coins值</strong></td></tr><tr><td>coins_max</td><td>N</td><td>List of Strings</td><td>Maximum amount of tokens sent per address  <strong>每个节点所要的token最大值</strong></td></tr><tr><td>port</td><td>N</td><td>Integer</td><td>Port number (default: <code>4500</code>)。端口号</td></tr></tbody></table><p>Example</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">faucet:</span><br><span class="line">  name: faucet</span><br><span class="line">  coins: [&quot;100token&quot;, &quot;5foo&quot;]</span><br><span class="line">  coins_max: [&quot;2000token&quot;, &quot;1000foo&quot;]</span><br><span class="line">  port: 4500</span><br></pre></td></tr></table></figure><h5 id="validator"><a href="#validator" class="headerlink" title="validator"></a><code>validator</code></h5><p>A blockchain has to <strong>have at least one validator-node.</strong> <code>validator</code> specifies the account that will be used to initialize the validator and parameters of the validator.</p><table><thead><tr><th>Key</th><th>Required</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td>Y</td><td>String</td><td>Name of a key pair. <code>name</code> must be in <code>accounts</code></td></tr><tr><td>staked</td><td>Y</td><td>String</td><td>Amount of coins to bond质押. Must be less or equal to the amount of coins account has</td></tr></tbody></table><p>Example</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">accounts:</span><br><span class="line">  - name: alice</span><br><span class="line">    coins: [&quot;1000token&quot;, &quot;100000000stake&quot;]</span><br><span class="line">validator:</span><br><span class="line">  name: user1</span><br><span class="line">  staked: &quot;100000000stake&quot;</span><br></pre></td></tr></table></figure><h5 id="init-home"><a href="#init-home" class="headerlink" title="init.home"></a><code>init.home</code></h5><p>A blockchain stores data and configuration in a data directory. This property specifies a path to the data directory.</p><p><strong>区块存储数据位置配置</strong></p><p>Example</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">init:</span><br><span class="line">  home: &quot;~&#x2F;.myblockchain&quot;</span><br></pre></td></tr></table></figure><h5 id="init-config"><a href="#init-config" class="headerlink" title="init.config"></a><code>init.config</code></h5><p>Overwrites properties in <code>config/config.toml</code> in the data directory.</p><p><strong>重写<code>config/config.toml</code>的参数</strong></p><h5 id="init-app"><a href="#init-app" class="headerlink" title="init.app"></a><code>init.app</code></h5><p>Overwrites properties in <code>config/app.toml</code> in the data directory.</p><p><strong>重写<code>config/app.toml</code>的参数</strong></p><h5 id="init-keyring-backend"><a href="#init-keyring-backend" class="headerlink" title="init.keyring-backend"></a><code>init.keyring-backend</code></h5><p>Specifies a <a href="https://docs.cosmos.network/master/run-node/keyring.html" target="_blank" rel="noopener">keyring backend</a>.</p><p><strong>初始化钥匙串</strong></p><p>钥匙圈具有用于与节点交互的私钥/公共密钥调配。例如，<strong>在运行区块链节点之前需要设置验证器密钥，以便正确签名块。</strong>私钥可以存储在不同的位置，称为”后端”，例如文件或操作系统自己的密钥存储。</p><p>从 v0.38.0 版本开始，Cosmos SDK 附带了一个新的钥匙圈实现，它提供了一组命令，以安全的方式管理加密密钥。新的钥匙圈支持多个存储后端，其中一些可能不适用于所有操作系统。</p><p>Example</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">init:</span><br><span class="line">  keyring-backend: &quot;os&quot;</span><br></pre></td></tr></table></figure><h5 id="genesis"><a href="#genesis" class="headerlink" title="genesis"></a><code>genesis</code></h5><p>Overwrites properties in <code>config.genesis.json</code> in the data directory.</p><p>重写 <code>config.genesis.json</code> 的所有参数</p><p>Example</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">genesis:</span><br><span class="line">  chain-id: &quot;foobar&quot;</span><br></pre></td></tr></table></figure><h4 id="starport"><a href="#starport" class="headerlink" title="starport"></a>starport</h4><h5 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h5><p>Scaffolding a project using Starport is done with the <code>starport app</code> command.</p><p>Currently, there are two versions of projects that can be scaffolded, which include a Launchpad version, or a Stargate version. The version can be specified by passing the <code>sdk-version</code> flag, followed by either <code>stargate</code> or <code>launchpad</code>.</p><p>目前，有两个版本的项目可以搭建，其中包括一个发射台版本，或一个星际之门版本。版本可以通过传递sdk-version标志来指定，然后是stargate或launchpad。</p><p>ie.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">starport app github.com&#x2F;user&#x2F;app --sdk-version&#x3D;stargate</span><br></pre></td></tr></table></figure><p>==<strong>SDK版本:</strong>==</p><p><strong>Scaffolding a Stargate app currently uses version <code>^0.40</code> of the Cosmos SDK. ==星际之门使用0.40的cosmos版本==</strong></p><p><strong>Scaffolding a Launchpad app is currently the default that is being used by Starport, and uses version <code>0.39.x</code> of the Cosmos SDK.==发射台使用0.39.x版本==</strong></p><p>具体的架构是不同的, <strong>开发注意版本</strong>, 具体架构见:<a href="https://github.com/tendermint/starport/blob/develop/docs/3%20Starport/2%20Project%20Scaffolding.md" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/3%20Starport/2%20Project%20Scaffolding.md</a></p><h5 id="Type架构"><a href="#Type架构" class="headerlink" title="Type架构"></a>Type架构</h5><p>You can scaffold types within Starport by running a command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">starport type [type-name] [field1:type1] [field2:type2] ...</span><br></pre></td></tr></table></figure><p>具体文件架构见:<a href="https://github.com/tendermint/starport/blob/develop/docs/3%20Starport/3%20Type%20Scaffolding.md" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/3%20Starport/3%20Type%20Scaffolding.md</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;二、开发基础&quot;&gt;&lt;a href=&quot;#二、开发基础&quot; class=&quot;headerlink&quot; title=&quot;二、开发基础&quot;&gt;&lt;/a&gt;二、开发基础&lt;/h1&gt;&lt;h2 id=&quot;2-1-Cosmos-SDK&quot;&gt;&lt;a href=&quot;#2-1-Cosmos-SDK&quot; class=&quot;headerlink&quot; title=&quot;2.1. Cosmos SDK&quot;&gt;&lt;/a&gt;2.1. Cosmos SDK&lt;/h2&gt;&lt;p&gt;Cosmos  SDK是方便区块链应用开发的基础框架,方便程序员实现基于Tendermint的安全状态机.它将实现多重数据的持久化存储以及交易处理的路由功能.&lt;/p&gt;
&lt;h3 id=&quot;2-1-1-application-specific-blockchains&quot;&gt;&lt;a href=&quot;#2-1-1-application-specific-blockchains&quot; class=&quot;headerlink&quot; title=&quot;2.1.1 application-specific blockchains&quot;&gt;&lt;/a&gt;2.1.1 application-specific blockchains&lt;/h3&gt;&lt;p&gt;就是尽量让一个区块链应用使用单独的一条链,不会与其他的应用共享资源,拥有对该条链的完全主权.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;                ^  +-------------------------------+  ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                |  |                               |  |   Built &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; Cosmos SDK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                |  |  State-machine = Application  |  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                |  |                               |  v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                |  +-------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                |  |                               |  ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Blockchain node |  |           Consensus           |  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                |  |                               |  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                |  +-------------------------------+  |   Tendermint Core&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                |  |                               |  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                |  |           Networking          |  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                |  |                               |  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                v  +-------------------------------+  v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="block_chain" scheme="https://xwjahahahaha.github.io/categories/block-chain/"/>
    
    
    <category term="cosmos" scheme="https://xwjahahahaha.github.io/tags/cosmos/"/>
    
  </entry>
  
  <entry>
    <title>日记_0131</title>
    <link href="https://xwjahahahaha.github.io/2021/02/22/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-02/%E6%97%A5%E8%AE%B0-0131/"/>
    <id>https://xwjahahahaha.github.io/2021/02/22/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-02/%E6%97%A5%E8%AE%B0-0131/</id>
    <published>2021-02-22T09:10:30.000Z</published>
    <updated>2021-02-22T09:02:29.429Z</updated>
    
    <content type="html"><![CDATA[<h2 id="寒假待办任务："><a href="#寒假待办任务：" class="headerlink" title="寒假待办任务："></a>寒假待办任务：</h2><table><thead><tr><th>任务</th><th>每日任务（必须每天完成）</th><th>开发</th><th>项目</th><th><font color='red'>科研（No.1）</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>后端：go语言深化，框架gin等</strong>，<strong>go书看完</strong></td><td>博客小项目</td><td>区块链知识面拓展</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td><strong>leetcode每日一题</strong></td><td>前端：Vue</td><td>金窝窝项目需求准备cosmos</td><td><font color='red'><strong>论文粗读10篇，细读5篇，做好笔记</strong></font></td><td>看比赛资讯，准备明年的<strong>区块链比赛</strong></td></tr><tr><td>③</td><td></td><td>Linux学完</td><td>本科毕业设计</td><td><font color='red'><strong>核心: 产生自己的构思</strong></font></td><td>为下学期的<strong>暑期实习</strong>做准备</td></tr><tr><td>④</td><td></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td>分布式课程</td><td></td></tr><tr><td>⑤</td><td></td><td>有时间的话：Java</td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td><font color='red'><strong>代客泊车项目申报书</strong></font></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="每日时段划分"><a href="#每日时段划分" class="headerlink" title="每日时段划分"></a>每日时段划分</h2><table><thead><tr><th>时段</th><th>任务</th><th>S/F</th></tr></thead><tbody><tr><td>9:00~10:00</td><td>英语单词+语法课</td><td></td></tr><tr><td>10:00~1:00</td><td>算法</td><td></td></tr><tr><td>1:30~5:00</td><td>看论文</td><td></td></tr><tr><td>6:00~9:00</td><td>开发</td><td></td></tr><tr><td>9:00+</td><td>运动锻炼</td><td></td></tr></tbody></table><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input disabled="" type="checkbox"> <p><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7467408" target="_blank" rel="noopener">Blockchains and Smart Contracts for the Internet of Things</a></p></li><li><input disabled="" type="checkbox"> <p>Where Is Current Research on Blockchain Technology?-A Systematic Review</p></li><li><input disabled="" type="checkbox"> <p>Blockstack: A Global Naming and Storage System Secured by Blockchains</p></li><li><input disabled="" type="checkbox"> <p>Plasma </p></li><li><input disabled="" type="checkbox"> <p><a href="https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md" target="_blank" rel="noopener">EOS.IO Technical White Paper v2</a></p></li><li><input disabled="" type="checkbox"> <p>Ocean Protocol: Tools for the Web3 Data Economy</p></li><li><input disabled="" type="checkbox"> <p>Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts</p></li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input disabled="" type="checkbox"> Decentralizing Privacy: Using Blockchain to Protect Personal Data</li><li><input disabled="" type="checkbox"> 《 Tendermint：关于拜占庭容错共识算法的最新进展》</li><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input disabled="" type="checkbox"> The Ripple Protocol Consensus Algorithm</li><li><input disabled="" type="checkbox"> <a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="noopener">以太坊白皮书</a></li><li><input disabled="" type="checkbox"> Hyperledger Fabric: A Distributed Operating System for Permissioned Blockchains</li><li><input disabled="" type="checkbox"> Secure Data Storage and Recovery in IndustrialBlockchain Network Environments</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li></ul><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> V2X项目申报书</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2><ul><li>写申报书太累了，再也不想写了</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;寒假待办任务：&quot;&gt;&lt;a href=&quot;#寒假待办任务：&quot; class=&quot;headerlink&quot; title=&quot;寒假待办任务：&quot;&gt;&lt;/a&gt;寒假待办任务：&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每日任务（必须每天完成）&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研（No.1）&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;后端：go语言深化，框架gin等&lt;/strong&gt;，&lt;strong&gt;go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;博客小项目&lt;/td&gt;
&lt;td&gt;区块链知识面拓展&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;leetcode每日一题&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;前端：Vue&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;&lt;strong&gt;论文粗读10篇，细读5篇，做好笔记&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备明年的&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;&lt;strong&gt;核心: 产生自己的构思&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;为下学期的&lt;strong&gt;暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;分布式课程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;有时间的话：Java&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;&lt;strong&gt;代客泊车项目申报书&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
</feed>
