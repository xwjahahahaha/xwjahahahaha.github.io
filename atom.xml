<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知识与头发不可兼得</title>
  
  <subtitle>文杰的博客</subtitle>
  <link href="https://xwjahahahaha.github.io/atom.xml" rel="self"/>
  
  <link href="https://xwjahahahaha.github.io/"/>
  <updated>2021-07-12T06:38:35.867Z</updated>
  <id>https://xwjahahahaha.github.io/</id>
  
  <author>
    <name>DDDemons hide</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>拒绝年费自己组建MarkdownNice转微信公众号格式神器</title>
    <link href="https://xwjahahahaha.github.io/2021/07/12/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%B0%8F%E6%8A%80%E5%B7%A7/%E6%8B%92%E7%BB%9D%E5%B9%B4%E8%B4%B9%E8%87%AA%E5%B7%B1%E7%BB%84%E5%BB%BAMarkdownNice%E8%BD%AC%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%A0%BC%E5%BC%8F%E7%A5%9E%E5%99%A8/"/>
    <id>https://xwjahahahaha.github.io/2021/07/12/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%B0%8F%E6%8A%80%E5%B7%A7/%E6%8B%92%E7%BB%9D%E5%B9%B4%E8%B4%B9%E8%87%AA%E5%B7%B1%E7%BB%84%E5%BB%BAMarkdownNice%E8%BD%AC%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%A0%BC%E5%BC%8F%E7%A5%9E%E5%99%A8/</id>
    <published>2021-07-12T06:12:29.000Z</published>
    <updated>2021-07-12T06:38:35.867Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>资料来源：</p><p><a href="https://cloud.tencent.com/developer/article/1811081" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1811081</a></p></blockquote><h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p>墨滴的公众号排版格式转换服务非常的好用，对于一些带有公式的Markdown也能够完美的转换成为公众号的格式</p><p>它的简单功能介绍可见连接：<a href="https://zhuanlan.zhihu.com/p/104209040" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/104209040</a></p><p>总之，如果你喜欢用Markdown写公众号，那么这个是你的不二之选</p><p>但是，官方的app软件只有试用期7天，年费的开销也挺大, 在线转网站必须要登陆等等限制（且自动会把内容发到社区）。。。</p><p>好在其代码开源，所以我们可以自己搭建一个mdnice服务</p><a id="more"></a><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/8pVlof.png" alt="8pVlof"></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p>一台云服务器，或者有公网IP带域名解析的服务器主机</p><p>建议阿里云、腾讯等学生机，便宜够用。</p><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><p>有一个注册的域名</p><p>nodejs npm 环境需要提前安装. (如果不会也可跳过)</p><h1 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h1><h2 id="1-下载官方包"><a href="#1-下载官方包" class="headerlink" title="1. 下载官方包"></a>1. 下载官方包</h2><p>下载官方的压缩包， 链接： <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fmdnice%2Fmarkdown-nice%2Farchive%2Frefs%2Fheads%2Fmaster.zip" target="_blank" rel="noopener">https://github.com/mdnice/markdown-nice/archive/refs/heads/master.zip</a></p><p>进入文件夹，下载依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖包</span></span><br><span class="line">npm i</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译软件, 获得可直接部署的项目文件夹</span></span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>没有环境的可以直接下载编译好的文件链接：  <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fzhaoolee.lanzoui.com%2FiZqoQnqrt9e" target="_blank" rel="noopener">https://zhaoolee.lanzoui.com/iZqoQnqrt9e</a></p><p>正确完整的文件目录如下：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/mEouy8.png" alt="mEouy8"></p><h2 id="2-部署"><a href="#2-部署" class="headerlink" title="2. 部署"></a>2. 部署</h2><p>发送到你的云服务器中，放置到如下目录</p><p><code>/usr/share/nginx/mdnice</code>    (文件夹名称可自行命名, 我就叫mdnice)</p><h2 id="3-添加域名解析"><a href="#3-添加域名解析" class="headerlink" title="3. 添加域名解析"></a>3. 添加域名解析</h2><p>在你的云服务器服务商网站中找到域名解析，以阿里云为例：</p><p>添加一个你喜欢子域名前缀，这里我就是<code>mdnice.gumptlu.work</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/uo4FFB.png" alt="uo4FFB"></p><h2 id="4-nginx配置"><a href="#4-nginx配置" class="headerlink" title="4. nginx配置"></a>4. nginx配置</h2><p>在云服务器的<code>/etc/nginx/conf.d</code>目录下添加一个conf后缀文件, 这里命名就以<code>mdnice.gumptlu.work.conf</code>为例</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/nalT1T.png" alt="nalT1T"></p><p>文件中写入解析内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80; </span><br><span class="line">  server_name mdnice.gumptlu.work;</span><br><span class="line">  charset  utf-8;</span><br><span class="line"> </span><br><span class="line">  location / &#123; </span><br><span class="line">    root /usr/share/nginx/mdnice;# 要与部署的路径对应</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启nginx：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试配置文件</span></span><br><span class="line">nginx -t</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启nginx</span></span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><h2 id="5-访问地址"><a href="#5-访问地址" class="headerlink" title="5. 访问地址"></a>5. 访问地址</h2><p><code>http://mdnice.gumptlu.work</code></p><p>ok!</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/s6284p.png" alt="s6284p"></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>如果之前开启过ssl用于https，那么需要关闭ssl，否则80端口会被自动转发到443, The plain HTTP request was sent to HTTPS port</p><p>解决：</p><p>开配置文件，查看HTTPS server段的配置：</p><p>修改前：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改方式，将监听端口后的“ssl”删除，即：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       443;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;资料来源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1811081&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cloud.tencent.com/developer/article/1811081&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;简单介绍&quot;&gt;&lt;a href=&quot;#简单介绍&quot; class=&quot;headerlink&quot; title=&quot;简单介绍&quot;&gt;&lt;/a&gt;简单介绍&lt;/h1&gt;&lt;p&gt;墨滴的公众号排版格式转换服务非常的好用，对于一些带有公式的Markdown也能够完美的转换成为公众号的格式&lt;/p&gt;
&lt;p&gt;它的简单功能介绍可见连接：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/104209040&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/104209040&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;总之，如果你喜欢用Markdown写公众号，那么这个是你的不二之选&lt;/p&gt;
&lt;p&gt;但是，官方的app软件只有试用期7天，年费的开销也挺大, 在线转网站必须要登陆等等限制（且自动会把内容发到社区）。。。&lt;/p&gt;
&lt;p&gt;好在其代码开源，所以我们可以自己搭建一个mdnice服务&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="markdown" scheme="https://xwjahahahaha.github.io/categories/technical/markdown/"/>
    
    
    <category term="markdown" scheme="https://xwjahahahaha.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>m1芯片Mac无法调试Goland的解决方案</title>
    <link href="https://xwjahahahaha.github.io/2021/07/12/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%B0%8F%E6%8A%80%E5%B7%A7/m1%E8%8A%AF%E7%89%87Mac%E6%97%A0%E6%B3%95%E8%B0%83%E8%AF%95Goland%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://xwjahahahaha.github.io/2021/07/12/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%B0%8F%E6%8A%80%E5%B7%A7/m1%E8%8A%AF%E7%89%87Mac%E6%97%A0%E6%B3%95%E8%B0%83%E8%AF%95Goland%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2021-07-12T03:20:31.000Z</published>
    <updated>2021-07-12T03:47:33.328Z</updated>
    
    <content type="html"><![CDATA[<p>查询了很多资料文章，下面这篇给了启发，记录一下我的解决方案</p><p><a href="https://blog.csdn.net/zsi386/article/details/116357850?spm=1001.2014.3001.5501" target="_blank" rel="noopener">https://blog.csdn.net/zsi386/article/details/116357850?spm=1001.2014.3001.5501</a></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>我的环境：</p><ul><li><p>go version :  go1.16.5 darwin/arm64.  (下载时记得下载arm架构的)</p></li><li><p>goland version: 2020.3</p></li><li><p>mac version:Big Sur 11.4 MacBook Air m1芯片</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/MvQldJ.png" alt="MvQldJ"> </p></li></ul><a id="more"></a><p>调试出现的问题：</p><p><font color='#e54d42'>可以断点停下来，但是无法<strong>下一步和查看变量</strong>，无报错</font></p><blockquote><p>断点都不可以停下的需要检查一下go的版本是否下载的arm架构</p><p><a href="https://studygolang.com/dl" target="_blank" rel="noopener">https://studygolang.com/dl</a></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/SjFTRk.png" alt="SjFTRk"></p></blockquote><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>下载go-delve/delve</p><p><code>git clone https://github.com/go-delve/delve.git</code></p><p>下载慢的可以用这个：<code>git clone https://github.com.cnpmjs.org/go-delve/delve.git</code></p><p>可以把它放在了GOPATH下的src/github.com//go-delve下，进入clone下来的delve中（<code>cd delve</code>），切换分支：</p><p><code>git checkout -b darwin-arm64-lldb</code></p><p>然后进入工程目录<code>cd ./cmd/dlv/</code>，重新编译：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go build</span><br><span class="line">go install</span><br></pre></td></tr></table></figure><p>(不需要修改代码，目前1205 bug估计已修复)</p><p>会在你的<code>GOPATH/bin</code>下重新生成二进制文件<code>dlv</code></p><p>我的版本信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Delve Debugger</span><br><span class="line">Version: 1.6.1</span><br><span class="line">Build: $Id: 114218c22f3791287c4bc2f4ff35a846a1416ee9 $</span><br></pre></td></tr></table></figure><p>设置你的goland (<code>Help&gt;Edit custom properties</code>)指向它就可以：</p><p><code>dlv.path=/path/to/dlv</code> (<font color='#e54d42'>路径要改</font>)，然后可以debug了：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/DHncf0.png" alt="DHncf0"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/VWLHrO.png" alt="VWLHrO"></p><h1 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h1><p>dlv老版本bug：</p><p>Big Sur11.3，lldb成了1205，dlv处理了1200，没处理1205</p><p>更新版本即可</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;查询了很多资料文章，下面这篇给了启发，记录一下我的解决方案&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zsi386/article/details/116357850?spm=1001.2014.3001.5501&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/zsi386/article/details/116357850?spm=1001.2014.3001.5501&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;我的环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;go version :  go1.16.5 darwin/arm64.  (下载时记得下载arm架构的)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;goland version: 2020.3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mac version:Big Sur 11.4 MacBook Air m1芯片&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://xwjpics.gumptlu.work/qinniu_uPic/MvQldJ.png&quot; alt=&quot;MvQldJ&quot;&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    
  </entry>
  
  <entry>
    <title>mqtt协议与go语言实现</title>
    <link href="https://xwjahahahaha.github.io/2021/07/12/%E6%8A%80%E6%9C%AF%E8%B4%B4/GoLang/mqtt%E5%8D%8F%E8%AE%AE%E4%B8%8Ego%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
    <id>https://xwjahahahaha.github.io/2021/07/12/%E6%8A%80%E6%9C%AF%E8%B4%B4/GoLang/mqtt%E5%8D%8F%E8%AE%AE%E4%B8%8Ego%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-07-12T01:11:57.000Z</published>
    <updated>2021-07-12T01:11:57.212Z</updated>
    
    <content type="html"><![CDATA[<p>#</p><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;p&gt;#&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    
  </entry>
  
  <entry>
    <title>日记_0195</title>
    <link href="https://xwjahahahaha.github.io/2021/07/12/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-07/%E6%97%A5%E8%AE%B0-0195/"/>
    <id>https://xwjahahahaha.github.io/2021/07/12/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-07/%E6%97%A5%E8%AE%B0-0195/</id>
    <published>2021-07-12T01:08:35.000Z</published>
    <updated>2021-07-12T04:23:25.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>每天</th><th>开发-云容器技术</th><th>项目与框架</th><th>科研-区块链(FL+BC)</th><th>预备事宜</th></tr></thead><tbody><tr><td>1.</td><td><strong>英语单词</strong></td><td>go基础</td><td>SimpleBitcoin</td><td>FL/分布式存储论文一周一篇细读</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>2.</td><td>语法课看完</td><td>go网络编程、Web框架</td><td>联邦学习框架</td><td>写专利</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>3.</td><td><font color='red'>六级</font></td><td>go数据库、ORM、go高级编程</td><td></td><td>机器学习课程</td><td>为<strong>研二实习</strong>做准备</td></tr><tr><td>4.</td><td>Leetcode</td><td>go容器技术docker、k8s</td><td></td><td></td><td></td></tr><tr><td>5.</td><td></td><td>go微服务与任务调度</td><td></td><td></td><td></td></tr><tr><td>6.</td><td></td><td>看源码docker、k8s、Fabric、以太坊、比特币等</td><td></td><td></td><td></td></tr><tr><td>7.</td><td></td><td>Linux、C++</td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li><li><input disabled="" type="checkbox"> Advances_and_Open_Problems_in_Federated_Learning</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input checked="" disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input checked="" disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input checked="" disabled="" type="checkbox"> Proof of Federated Learning: A Novel Energy-recycling Consensus Algorithm</li><li><input checked="" disabled="" type="checkbox"> Scalable and Communication-efficient Decentralized Federated Edge Learning with Multi-blockchain Framework</li><li><input checked="" disabled="" type="checkbox"> DEEP GRADIENT COMPRESSION:REDUCING THE COMMUNICATION BANDWIDTH FOR DISTRIBUTED TRAINING</li><li><input disabled="" type="checkbox"> BlockFLA:Accountable_Federated_Learning_via_Hybrid_Blockchain_Architecture</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li><del>学弟的cosmos隐私保护项目</del></li><li>第一篇论文FL+BC</li><li><del>科技部编程比赛</del></li><li>暑期实习准备(Go, 算法等)</li></ul><ul><li><input checked="" disabled="" type="checkbox"> cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></li><li><input checked="" disabled="" type="checkbox"> 科技部编程比赛项目实现(使用cosmos)</li><li><input checked="" disabled="" type="checkbox"> Go公链实现项目(simple_bitcoin)</li><li><input checked="" disabled="" type="checkbox"> 专利一篇(金链积分)</li><li><input disabled="" type="checkbox"> Go网络编程Base</li><li><input disabled="" type="checkbox"> Go网络编程(base、Echo、Gin)</li><li><input disabled="" type="checkbox"> 第一篇论文初稿(blockchain + FL)</li><li><input disabled="" type="checkbox"> 论文实验(编码实现)</li><li><input disabled="" type="checkbox"> 数据库(mysql, PostgreSQL), ORM(Gorm) 、Go设计模式  </li><li><input disabled="" type="checkbox"> Go设计模式 </li><li><input disabled="" type="checkbox"> docker </li><li><input disabled="" type="checkbox"> 容器编程k8s</li><li><input disabled="" type="checkbox"> 缓存、日志</li><li><input disabled="" type="checkbox"> 微服务(消息队列、任务调度、rpc)</li></ul><ul><li>Go开发走云容器技术</li><li>区块链开发走科研论文、Etherem、Fabric、源码分析、Cosmos使用</li></ul><p><strong>有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input disabled="" type="checkbox"> 英语</li><li><input disabled="" type="checkbox"> leetcode一题 剑指offer</li><li><input checked="" disabled="" type="checkbox"> 华为区块链比赛结束</li><li><input checked="" disabled="" type="checkbox"> 解决IDE Debug</li><li><input disabled="" type="checkbox"> 论文</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每天&lt;/th&gt;
&lt;th&gt;开发-云容器技术&lt;/th&gt;
&lt;th&gt;项目与框架&lt;/th&gt;
&lt;th&gt;科研-区块链(FL+BC)&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go基础&lt;/td&gt;
&lt;td&gt;SimpleBitcoin&lt;/td&gt;
&lt;td&gt;FL/分布式存储论文一周一篇细读&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;go网络编程、Web框架&lt;/td&gt;
&lt;td&gt;联邦学习框架&lt;/td&gt;
&lt;td&gt;写专利&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;go数据库、ORM、go高级编程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;机器学习课程&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;研二实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;Leetcode&lt;/td&gt;
&lt;td&gt;go容器技术docker、k8s&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;go微服务与任务调度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码docker、k8s、Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux、C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Go语言-6-grpc与微服务</title>
    <link href="https://xwjahahahaha.github.io/2021/07/08/%E6%8A%80%E6%9C%AF%E8%B4%B4/GoLang/Go%E8%AF%AD%E8%A8%80-6-grpc%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <id>https://xwjahahahaha.github.io/2021/07/08/%E6%8A%80%E6%9C%AF%E8%B4%B4/GoLang/Go%E8%AF%AD%E8%A8%80-6-grpc%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1/</id>
    <published>2021-07-08T07:24:51.000Z</published>
    <updated>2021-07-08T09:15:39.456Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习资料：</p><p><a href="https://www.cnblogs.com/wwkk/p/12634603.html" target="_blank" rel="noopener">https://www.cnblogs.com/wwkk/p/12634603.html</a></p><p><a href="https://www.bilibili.com/video/BV137411H7t9?p=3&amp;spm_id_from=pageDriver" target="_blank" rel="noopener">https://www.bilibili.com/video/BV137411H7t9?p=3&amp;spm_id_from=pageDriver</a></p></blockquote><h1 id="一、grpc"><a href="#一、grpc" class="headerlink" title="一、grpc"></a>一、grpc</h1><h2 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h2><p>学过网络编程的都知道tcp、http、socket，那么rpc是什么呢？grpc又是什么呢？</p><p>详细的可以看这篇文章： <a href="https://www.cnblogs.com/wwkk/p/12634603.html" target="_blank" rel="noopener">https://www.cnblogs.com/wwkk/p/12634603.html</a></p><p>这里直接给出总结：</p><table><thead><tr><th>名词</th><th>特点</th></tr></thead><tbody><tr><td>RPC</td><td>远程过程调用（分布式、微服务间的方法调用）</td></tr><tr><td>HTTP</td><td>无状态，每次请求都要发送一个request，服务器响应之后就断掉（http header中的keep-alive指的是tcp）</td></tr><tr><td>TCP</td><td>面向连接，三次握手保证通信可靠</td></tr><tr><td>UDP</td><td>非面向连接，不可靠，速度快（可以手动对数据收发进行验证，IM系统多采用，QQ）</td></tr><tr><td>socket</td><td>TCP协议的接口实现，面向传输层进行网络编程</td></tr></tbody></table><a id="more"></a><h3 id="1-1-1-rpc"><a href="#1-1-1-rpc" class="headerlink" title="1.1.1 rpc"></a>1.1.1 rpc</h3><p><font color='#e54d42'><strong>RPC是一种网络调用设计、框架，其面向服务而不是通信协议</strong>。使用的通讯协议只是其中的一部分，其中可能使用的就是Http协议，是在Http协议概念的上层，其主要<strong>在上层构建的一些优化通信</strong>，例如：负载均衡、寻址、序列化与反序列化</font></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/0d1zVk.png" alt="0d1zVk"></p><h3 id="1-1-2-grpc"><a href="#1-1-2-grpc" class="headerlink" title="1.1.2 grpc"></a>1.1.2 grpc</h3><p>gRPC是谷歌开源的一个 <strong>RPC 框架</strong>，面向移动和 <strong>HTTP/2</strong> 设计。</p><ul><li>内容交换格式采用<strong>ProtoBuf</strong>(Google Protocol Buffers)，开源已久，提供了一种灵活、高效、自动序列化结构数据的机制，作用与XML，Json类似，但使用二进制，（反）序列化速度快，压缩效率高。</li><li>传输协议 采用http2，性能比http1.1好了很多</li></ul><p>和很多RPC系统一样，服务端负责实现定义好的接口并处理客户端的请求，客户端根据接口描述直接调用需要的服务。客户端和服务端可以分别使用gPRC支持的不同语言实现。</p><p>ProtoBuf 具有强大的IDL（interface description language，接口描述语言）和相关工具集（主要是protoc）。用户写好.proto描述文件后，protoc可以将其编译成众多语言的接口代码。</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/L9rv1Z.png" alt="L9rv1Z"></p><h2 id="1-2-代码编写"><a href="#1-2-代码编写" class="headerlink" title="1.2 代码编写"></a>1.2 代码编写</h2><blockquote><p>golang自带的net/rpc使用encoding/<strong>gob编码</strong>，支持http、tcp的传输方式，但是<strong>其他语言不支持</strong>，所以<strong>golang的RPC只支持都为golang开发的客户端与服务端。</strong></p></blockquote><h3 id="1-2-1-编写规范"><a href="#1-2-1-编写规范" class="headerlink" title="1.2.1 编写规范"></a>1.2.1 编写规范</h3><h4 id="四个条件："><a href="#四个条件：" class="headerlink" title="四个条件："></a>四个条件：</h4><ol><li>结构体字段首字母大写（跨域访问）</li><li>函数名必须首字母大写（可以序列号导出）</li><li>函数的第一个参数必须是接受参数，第二个参数必须是返回客户端参数，且必须为指针类型</li><li>函数必须有一个返回值error</li></ol><h4 id="Demo示例"><a href="#Demo示例" class="headerlink" title="Demo示例"></a>Demo示例</h4><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">##### 客户端</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="keyword">go</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;学习资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/wwkk/p/12634603.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/wwkk/p/12634603.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV137411H7t9?p=3&amp;amp;spm_id_from=pageDriver&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/BV137411H7t9?p=3&amp;amp;spm_id_from=pageDriver&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、grpc&quot;&gt;&lt;a href=&quot;#一、grpc&quot; class=&quot;headerlink&quot; title=&quot;一、grpc&quot;&gt;&lt;/a&gt;一、grpc&lt;/h1&gt;&lt;h2 id=&quot;1-1-基本概念&quot;&gt;&lt;a href=&quot;#1-1-基本概念&quot; class=&quot;headerlink&quot; title=&quot;1.1 基本概念&quot;&gt;&lt;/a&gt;1.1 基本概念&lt;/h2&gt;&lt;p&gt;学过网络编程的都知道tcp、http、socket，那么rpc是什么呢？grpc又是什么呢？&lt;/p&gt;
&lt;p&gt;详细的可以看这篇文章： &lt;a href=&quot;https://www.cnblogs.com/wwkk/p/12634603.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/wwkk/p/12634603.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里直接给出总结：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名词&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;RPC&lt;/td&gt;
&lt;td&gt;远程过程调用（分布式、微服务间的方法调用）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;td&gt;无状态，每次请求都要发送一个request，服务器响应之后就断掉（http header中的keep-alive指的是tcp）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;面向连接，三次握手保证通信可靠&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UDP&lt;/td&gt;
&lt;td&gt;非面向连接，不可靠，速度快（可以手动对数据收发进行验证，IM系统多采用，QQ）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;socket&lt;/td&gt;
&lt;td&gt;TCP协议的接口实现，面向传输层进行网络编程&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/categories/technical/golang/"/>
    
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>日记_0194</title>
    <link href="https://xwjahahahaha.github.io/2021/07/05/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-07/%E6%97%A5%E8%AE%B0-0194/"/>
    <id>https://xwjahahahaha.github.io/2021/07/05/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-07/%E6%97%A5%E8%AE%B0-0194/</id>
    <published>2021-07-05T01:03:12.000Z</published>
    <updated>2021-07-06T00:59:05.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>每天</th><th>开发-云容器技术</th><th>项目与框架</th><th>科研-区块链(FL+BC)</th><th>预备事宜</th></tr></thead><tbody><tr><td>1.</td><td><strong>英语单词</strong></td><td>go基础</td><td>SimpleBitcoin</td><td>FL/分布式存储论文一周一篇细读</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>2.</td><td>语法课看完</td><td>go网络编程、Web框架</td><td>联邦学习框架</td><td>写专利</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>3.</td><td><font color='red'>六级</font></td><td>go数据库、ORM、go高级编程</td><td></td><td>机器学习课程</td><td>为<strong>研二实习</strong>做准备</td></tr><tr><td>4.</td><td>Leetcode</td><td>go容器技术docker、k8s</td><td></td><td></td><td></td></tr><tr><td>5.</td><td></td><td>go微服务与任务调度</td><td></td><td></td><td></td></tr><tr><td>6.</td><td></td><td>看源码docker、k8s、Fabric、以太坊、比特币等</td><td></td><td></td><td></td></tr><tr><td>7.</td><td></td><td>Linux、C++</td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li><li><input disabled="" type="checkbox"> Advances_and_Open_Problems_in_Federated_Learning</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input checked="" disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input checked="" disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input checked="" disabled="" type="checkbox"> Proof of Federated Learning: A Novel Energy-recycling Consensus Algorithm</li><li><input checked="" disabled="" type="checkbox"> Scalable and Communication-efficient Decentralized Federated Edge Learning with Multi-blockchain Framework</li><li><input checked="" disabled="" type="checkbox"> DEEP GRADIENT COMPRESSION:REDUCING THE COMMUNICATION BANDWIDTH FOR DISTRIBUTED TRAINING</li><li><input disabled="" type="checkbox"> BlockFLA:Accountable_Federated_Learning_via_Hybrid_Blockchain_Architecture</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li><del>学弟的cosmos隐私保护项目</del></li><li>第一篇论文FL+BC</li><li><del>科技部编程比赛</del></li><li>暑期实习准备(Go, 算法等)</li></ul><ul><li><input checked="" disabled="" type="checkbox"> cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></li><li><input checked="" disabled="" type="checkbox"> 科技部编程比赛项目实现(使用cosmos)</li><li><input checked="" disabled="" type="checkbox"> Go公链实现项目(simple_bitcoin)</li><li><input disabled="" type="checkbox"> 专利一篇(金链积分)</li><li><input disabled="" type="checkbox"> Go网络编程Base</li><li><input disabled="" type="checkbox"> Go网络编程(base、Echo、Gin)</li><li><input disabled="" type="checkbox"> 第一篇论文初稿(blockchain + FL)</li><li><input disabled="" type="checkbox"> 论文实验(编码实现)</li><li><input disabled="" type="checkbox"> 数据库(mysql, PostgreSQL), ORM(Gorm) 、Go设计模式  </li><li><input disabled="" type="checkbox"> Go设计模式 </li><li><input disabled="" type="checkbox"> docker </li><li><input disabled="" type="checkbox"> 容器编程k8s</li><li><input disabled="" type="checkbox"> 缓存、日志</li><li><input disabled="" type="checkbox"> 微服务(消息队列、任务调度、rpc)</li></ul><ul><li>Go开发走云容器技术</li><li>区块链开发走科研论文、Etherem、Fabric、源码分析、Cosmos使用</li></ul><p><strong>有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input disabled="" type="checkbox"> 英语</li><li><input disabled="" type="checkbox"> leetcode一题 剑指offer</li><li><input checked="" disabled="" type="checkbox"> 专利</li><li><input checked="" disabled="" type="checkbox"> 华为比赛</li><li><input disabled="" type="checkbox"> </li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每天&lt;/th&gt;
&lt;th&gt;开发-云容器技术&lt;/th&gt;
&lt;th&gt;项目与框架&lt;/th&gt;
&lt;th&gt;科研-区块链(FL+BC)&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go基础&lt;/td&gt;
&lt;td&gt;SimpleBitcoin&lt;/td&gt;
&lt;td&gt;FL/分布式存储论文一周一篇细读&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;go网络编程、Web框架&lt;/td&gt;
&lt;td&gt;联邦学习框架&lt;/td&gt;
&lt;td&gt;写专利&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;go数据库、ORM、go高级编程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;机器学习课程&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;研二实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;Leetcode&lt;/td&gt;
&lt;td&gt;go容器技术docker、k8s&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;go微服务与任务调度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码docker、k8s、Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux、C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>计算理论基础-3-图灵机与DFA最小化</title>
    <link href="https://xwjahahahaha.github.io/2021/06/26/%E7%9F%A5%E8%AF%86%E8%B4%B4/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80-3-%E5%9B%BE%E7%81%B5%E6%9C%BA%E4%B8%8EDFA%E6%9C%80%E5%B0%8F%E5%8C%96/"/>
    <id>https://xwjahahahaha.github.io/2021/06/26/%E7%9F%A5%E8%AF%86%E8%B4%B4/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80-3-%E5%9B%BE%E7%81%B5%E6%9C%BA%E4%B8%8EDFA%E6%9C%80%E5%B0%8F%E5%8C%96/</id>
    <published>2021-06-26T06:04:39.000Z</published>
    <updated>2021-06-27T12:03:53.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="七、Turing-Machine-图灵机"><a href="#七、Turing-Machine-图灵机" class="headerlink" title="七、Turing Machine 图灵机"></a>七、Turing Machine 图灵机</h1><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><p>$TM = (Q,\Sigma,\Gamma,\delta，q_0，q_{accept}， q_{reject})$</p><ol><li>Q ：有限状态集合</li><li>$\Sigma$ : 输入字母表, 不包括空白字符</li><li>$\Gamma$ ：磁带字母表 (tape alphabet),    $_ \in \Gamma, \Sigma \subseteq \Gamma$ （$_$就是空格）</li><li>$\delta$ : 转移函数</li><li>$q_0$ : 起始状态  $q_{0} \in Q$</li><li>$q_{accept}$ : 接受状态    $q_{accept} \in Q$</li><li>$q_{reject}$ : 拒绝状态， $q_{reject} \in Q,  \ q <em>{reject} \neq q</em>{accept}$</li></ol><a id="more"></a><h2 id="Configuration-of-a-TM-格局"><a href="#Configuration-of-a-TM-格局" class="headerlink" title="Configuration of a TM (格局)"></a>Configuration of a TM (格局)</h2><h3 id="定义：-1"><a href="#定义：-1" class="headerlink" title="定义："></a>定义：</h3><p>格局 = 状态 + 已处理部分 - 今后任务</p><p>组成：</p><ol><li>当前状态 $q \in Q$</li><li>当前带内容 $\in \Gamma^*$， 符号表示为$uv$  ($uv$由读取头分隔开)</li><li>读写头当前位置 $\in {0,1,2,3,…}$，也就是读取头当前位置即$v$的第一个符号</li></ol><p>所以格局的表示方法可以为: $uqv$</p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：<img src="http://xwjpics.gumptlu.work/qinniu_uPic/E2GxpY.png" alt="E2GxpY"></h3><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/ZF52Ys.png" alt="ZF52Ys"></p><h3 id="格局演进-格局转换"><a href="#格局演进-格局转换" class="headerlink" title="格局演进/格局转换"></a>格局演进/格局转换</h3><p>设$u,v \in \Gamma^*; a,b,c \in \Gamma; q_i,q_j \in Q, and \ M_a \ TM$</p><blockquote><p><font color='#39b54a'>解释： uv是当前带内容是字符串，abc是带字母表中的字母，两个q是两个状态，总体是一个图灵机$M_a$</font></p></blockquote><p>两个格局$C_1 = uaq_ibv, \  C_2=uq_jacv$</p><blockquote><p><font color='#39b54a'>解释：$C_1 = uaq_ibv$ 将a并入u，b并入v其实就是$uqv$</font></p></blockquote><p>$C_1$转换为$C_2$的转移函数为：</p><p>$Q \times \Gamma \rightarrow Q \times \Gamma \times {L, R}$</p><p>$\delta(q_i, b) = (q_j,c,L)$</p><blockquote><p><font color='#39b54a'>解释：</font></p><p><font color='#39b54a'>1.状态改变：$q_i =&gt; q_j$  </font></p><p><font color='#39b54a'>2.内容改变:$b =&gt; c$ </font></p><p><font color='#39b54a'>3.L代表left，读取头左移</font></p></blockquote><p>图示：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/9zhHaV.png" alt="9zhHaV"></p><p>根据状态转移图，输入格局序列，写出运行结果</p><p>例</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/NB2UyV.jpg" alt="NB2UyV"></p><h1 id="八、DFA的最小化（补充）"><a href="#八、DFA的最小化（补充）" class="headerlink" title="八、DFA的最小化（补充）"></a>八、DFA的最小化（补充）</h1><h2 id="概念与意义"><a href="#概念与意义" class="headerlink" title="概念与意义"></a>概念与意义</h2><p><em>DFA的<em>最小化就是寻求状态数最小的与原</em>DFA*等价的 *DFA</em></p><p>最小化<em>DFA</em>能够降低编译器构造的复杂度、提高编译速度</p><h2 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h2><ul><li>消除多余状态<ul><li>不可到达终态的点</li><li>不可被到达的点</li></ul></li><li>等价合并<ul><li>一致性条件： q和t同为终态或非终态</li><li>蔓延性条件：q和t同条件到达同状态</li></ul></li></ul><h2 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h2><p>对下图的DFA进行最小化</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/u7CPsi.png" alt="u7CPsi"></p><p>（<strong>图中红圈的是终态</strong>）</p><ol><li><p>将所有的状态划分为2个集合</p><ul><li>终态集合： $k_1 = {q_1,q_2,q_3,q_7}$</li><li>非终态集合： $k_2 = {q_4,q_5,q_6}$</li></ul></li><li><p>先划分非终态集合k2</p><p><strong>划分规则：根据字母表判断元素是否达到同一状态集合</strong></p><ul><li><p>字母表中的0：</p><p>$q_4 \xrightarrow{0} q_7 \in k_1$</p><p>$q_5 \xrightarrow{0} q_2 \in k_1$</p><p>$q_6 \xrightarrow{0} q_2 \in k_1$</p><p>计算得出三者都到达同一个状态集合k1，故不划分</p></li><li><p>字母表中的1：</p><p>$q_4 \xrightarrow{1} q_5 \in k_2$</p><p>$q_5 \xrightarrow{1} \varnothing \in \varnothing$</p><p>$q_6 \xrightarrow{1} \varnothing \in \varnothing$</p><p>计算的出$q_4$到达状态集合k2, $q_5,q_6$到达$\varnothing$</p><p>因此划分为$k_3 = {q_4}, k_4={q_5,q_6}$ (原来的$k_2$不存在了，现在是$k_1,k_3,k_4$三个集合)</p></li></ul><p>$k_3,k_4$仍然是非终态集合，如果还可以划分的话继续这样划分</p></li><li><p>再划分终态集合k1</p><p>划分规则同理：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/GkCr3H.png" alt="GkCr3H"></p><p>划分k8</p><p>$q_3 \xrightarrow{0} q_2 \in k_6$</p><p>$q_7 \xrightarrow{0} q_7 \in k_5$</p><p>所以，$k_8 = k_9 + k_{10}, k_9 = {q_3}, k_{10} = {q_7}$</p></li><li><p>划分完毕，拉伸合并得到最小化DFA图</p><p>最终的划分结果是：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/oygVRZ.png" alt="oygVRZ"></p><p>将原DFA图拉伸合并得到最小DFA图：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/PSX8bo.png" alt="PSX8bo"></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;七、Turing-Machine-图灵机&quot;&gt;&lt;a href=&quot;#七、Turing-Machine-图灵机&quot; class=&quot;headerlink&quot; title=&quot;七、Turing Machine 图灵机&quot;&gt;&lt;/a&gt;七、Turing Machine 图灵机&lt;/h1&gt;&lt;h2 id=&quot;定义：&quot;&gt;&lt;a href=&quot;#定义：&quot; class=&quot;headerlink&quot; title=&quot;定义：&quot;&gt;&lt;/a&gt;定义：&lt;/h2&gt;&lt;p&gt;$TM = (Q,\Sigma,\Gamma,\delta，q_0，q_{accept}， q_{reject})$&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Q ：有限状态集合&lt;/li&gt;
&lt;li&gt;$\Sigma$ : 输入字母表, 不包括空白字符&lt;/li&gt;
&lt;li&gt;$\Gamma$ ：磁带字母表 (tape alphabet),    $_ \in \Gamma, \Sigma \subseteq \Gamma$ （$_$就是空格）&lt;/li&gt;
&lt;li&gt;$\delta$ : 转移函数&lt;/li&gt;
&lt;li&gt;$q_0$ : 起始状态  $q_{0} \in Q$&lt;/li&gt;
&lt;li&gt;$q_{accept}$ : 接受状态    $q_{accept} \in Q$&lt;/li&gt;
&lt;li&gt;$q_{reject}$ : 拒绝状态， $q_{reject} \in Q,  \ q &lt;em&gt;{reject} \neq q&lt;/em&gt;{accept}$&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="knowledge" scheme="https://xwjahahahaha.github.io/categories/knowledge/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指Offer13.机器人的运动范围</title>
    <link href="https://xwjahahahaha.github.io/2021/06/26/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/%E5%89%91%E6%8C%87Offer13-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/"/>
    <id>https://xwjahahahaha.github.io/2021/06/26/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/%E5%89%91%E6%8C%87Offer13-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/</id>
    <published>2021-06-26T02:26:11.000Z</published>
    <updated>2021-06-26T03:29:39.750Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/" target="_blank" rel="noopener">剑指 Offer 13. 机器人的运动范围</a></p><p>难度中等</p><p>地上有一个m行n列的方格，从坐标 <code>[0,0]</code> 到坐标 <code>[m-1,n-1]</code> 。一个机器人从坐标 <code>[0, 0]</code>的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？</p> <a id="more"></a><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：m &#x3D; 2, n &#x3D; 3, k &#x3D; 1</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：m &#x3D; 3, n &#x3D; 1, k &#x3D; 0</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n,m &lt;= 100</code></li><li><code>0 &lt;= k &lt;= 20</code></li></ul><h2 id="解题思路及代码"><a href="#解题思路及代码" class="headerlink" title="解题思路及代码"></a>解题思路及代码</h2><h3 id="解法一-递归深度优先遍历"><a href="#解法一-递归深度优先遍历" class="headerlink" title="解法一:递归深度优先遍历"></a>解法一:递归深度优先遍历</h3><h4 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h4><ul><li><p>递归基本思路： 对于(i, j)位置，其可达的最大格子数量 = 如果其自身位置可达，那么计算其可达的子问题(i+1, j), (i-1, j), (i, j+1), (i, j-1)位置的最大格子数量 再 + 1</p><blockquote><p>当所有的子问题被求出，当前位置也可得出</p></blockquote></li><li><p>全局变量： 标记访问过的二维数组</p></li><li><p>题目隐含了优化条件： 从（0, 0）出发只往下、右走即可得到所有的格子。我们可以发现随着限制条件 k 的增大，(0, 0) 所在的蓝色方格区域内新加入的非障碍方格都可以由上方或左方的格子移动一步得到。而其他不连通的蓝色方格区域会随着 k 的增大而连通，且连通的时候也是由上方或左方的格子移动一步得到，因此我们可以将我们的搜索方向缩减为向右或向下。</p><p>具体可见： <a href="https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/solution/ji-qi-ren-de-yun-dong-fan-wei-by-leetcode-solution/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/solution/ji-qi-ren-de-yun-dong-fan-wei-by-leetcode-solution/</a></p></li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DFS</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">movingCount</span><span class="params">(m <span class="keyword">int</span>, n <span class="keyword">int</span>, k <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    visited := [][]<span class="keyword">bool</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;m; i++ &#123;</span><br><span class="line">        visited = <span class="built_in">append</span>(visited, <span class="built_in">make</span>([]<span class="keyword">bool</span>, n))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rollback(<span class="number">0</span>, <span class="number">0</span>, k, m, n, visited)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rollback</span><span class="params">(i, j, k, m, n <span class="keyword">int</span>, visited [][]<span class="keyword">bool</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// 当前位置/递归出口/结束情况</span></span><br><span class="line">    <span class="keyword">if</span> !checkNext(i ,j, k, m, n, visited) &#123;</span><br><span class="line">        <span class="comment">// 一旦当前位置不可达，则返回0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 标记当前位置已访问</span></span><br><span class="line">    visited[i][j] = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 下一位置</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + rollback(i+<span class="number">1</span>, j, k, m, n, visited) + rollback(i<span class="number">-1</span>, j, k, m, n, visited) + rollback(i, j+<span class="number">1</span>, k, m, n, visited) + rollback(i, j<span class="number">-1</span>, k, m, n, visited)</span><br><span class="line">  <span class="comment">// 优化</span></span><br><span class="line">  <span class="comment">// return 1 + rollback(i+1, j, k, m, n, visited) + rollback(i, j+1, k, m, n, visited) </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断当前位置是否可以走</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkNext</span><span class="params">(i, j, k, m, n <span class="keyword">int</span>, visited [][]<span class="keyword">bool</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">-1</span> &amp;&amp; i &lt; m &amp;&amp; j &gt; <span class="number">-1</span> &amp;&amp; j &lt; n &amp;&amp; !visited[i][j] &amp;&amp; (sumDigital(i) + sumDigital(j)) &lt;= k &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算位数之和</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumDigital</span><span class="params">(num <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> num &gt; <span class="number">0</span> &#123;</span><br><span class="line">        sum += num % <span class="number">10</span></span><br><span class="line">        num /= <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编码注意"><a href="#编码注意" class="headerlink" title="编码注意"></a>编码注意</h4><p><strong>不需要回退当前位置（即visited[i][j] = false）</strong>，因为题目是求能够到达的最大格子数，所以一个格子访问过就标记上不用回退</p><p>一般回退是在矩阵搜索中的最长/优路径问题，将之前的路径回退</p><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度O(mn)，一共有m*n个状态要计算，每一个计算递归的时间复杂度为1</li><li>空间复杂度O(mn)</li></ul><h3 id="解法二：广度优先遍历（队列）"><a href="#解法二：广度优先遍历（队列）" class="headerlink" title="解法二：广度优先遍历（队列）"></a>解法二：广度优先遍历（队列）</h3><h4 id="思路解析-1"><a href="#思路解析-1" class="headerlink" title="思路解析"></a>思路解析</h4><ul><li><p>BFS对于矩阵的遍历并不是很直观、友好，推荐还是DFS</p></li><li><p>将(i, j)所有相邻点(上下左右)加入队列，再不断的取出队列，计数</p></li><li><p>同样的，优化的解法可以只往下、右走，即只添加下、右节点入队</p></li></ul><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BFS</span></span><br><span class="line"><span class="keyword">type</span> local <span class="keyword">struct</span> &#123;</span><br><span class="line">    i <span class="keyword">int</span></span><br><span class="line">    j <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">movingCount</span><span class="params">(m <span class="keyword">int</span>, n <span class="keyword">int</span>, k <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; </span><br><span class="line">    account := <span class="number">0</span></span><br><span class="line">    <span class="comment">// 初始化全局访问数组</span></span><br><span class="line">    visited := [][]<span class="keyword">bool</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;m; i++ &#123;</span><br><span class="line">        visited = <span class="built_in">append</span>(visited, <span class="built_in">make</span>([]<span class="keyword">bool</span>, n))</span><br><span class="line">    &#125;</span><br><span class="line">    queue := []local&#123;&#125;</span><br><span class="line">    <span class="comment">// 初始化（0，0）节点</span></span><br><span class="line">    initLocal := local&#123;<span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">    queue = <span class="built_in">append</span>(queue, initLocal)</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">// 弹出</span></span><br><span class="line">        newLocal := queue[<span class="number">0</span>]</span><br><span class="line">        queue = queue[<span class="number">1</span>:]</span><br><span class="line">        <span class="comment">// 处理</span></span><br><span class="line">        <span class="comment">// 当前位置</span></span><br><span class="line">        <span class="keyword">if</span> checkNext(newLocal, m, n, k, visited) &#123;</span><br><span class="line">            account ++</span><br><span class="line">            visited[newLocal.i][newLocal.j] = <span class="literal">true</span></span><br><span class="line">            <span class="comment">//入队</span></span><br><span class="line">            queue = <span class="built_in">append</span>(queue, local&#123;newLocal.i + <span class="number">1</span>, newLocal.j&#125;)</span><br><span class="line">            queue = <span class="built_in">append</span>(queue, local&#123;newLocal.i - <span class="number">1</span>, newLocal.j&#125;)</span><br><span class="line">            queue = <span class="built_in">append</span>(queue, local&#123;newLocal.i, newLocal.j + <span class="number">1</span>&#125;)</span><br><span class="line">            queue = <span class="built_in">append</span>(queue, local&#123;newLocal.i, newLocal.j - <span class="number">1</span>&#125;)</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> account</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断当前位置是否可以走</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkNext</span><span class="params">(l local, m, n, k <span class="keyword">int</span>, visited [][]<span class="keyword">bool</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> l.i &gt; <span class="number">-1</span> &amp;&amp; l.i &lt; m &amp;&amp; l.j &gt; <span class="number">-1</span> &amp;&amp; l.j &lt; n &amp;&amp; !visited[l.i][l.j] &amp;&amp;(sumDigital(l.i) + sumDigital(l.j)) &lt;= k &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// // 计算位数之和</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumDigital</span><span class="params">(num <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> num &gt; <span class="number">0</span> &#123;</span><br><span class="line">        sum += num % <span class="number">10</span></span><br><span class="line">        num /= <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编码注意-1"><a href="#编码注意-1" class="headerlink" title="编码注意"></a>编码注意</h4><p>不要忘记维护一个全局访问标记数组</p><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度O(mn)</li><li>空间复杂度O(mn)</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;剑指 Offer 13. 机器人的运动范围&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;难度中等&lt;/p&gt;
&lt;p&gt;地上有一个m行n列的方格，从坐标 &lt;code&gt;[0,0]&lt;/code&gt; 到坐标 &lt;code&gt;[m-1,n-1]&lt;/code&gt; 。一个机器人从坐标 &lt;code&gt;[0, 0]&lt;/code&gt;的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="leetcode" scheme="https://xwjahahahaha.github.io/categories/technical/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>计算理论基础-2-上下文无关语言</title>
    <link href="https://xwjahahahaha.github.io/2021/06/24/%E7%9F%A5%E8%AF%86%E8%B4%B4/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80-2-%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E8%AF%AD%E8%A8%80/"/>
    <id>https://xwjahahahaha.github.io/2021/06/24/%E7%9F%A5%E8%AF%86%E8%B4%B4/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80-2-%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E8%AF%AD%E8%A8%80/</id>
    <published>2021-06-24T14:58:20.000Z</published>
    <updated>2021-06-27T07:23:04.328Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习资料：</p><p><a href="https://blog.csdn.net/happyeveryday62/article/details/103845740" target="_blank" rel="noopener">https://blog.csdn.net/happyeveryday62/article/details/103845740</a></p></blockquote><h1 id="六、上下文无关语言"><a href="#六、上下文无关语言" class="headerlink" title="六、上下文无关语言"></a>六、上下文无关语言</h1><h2 id="Conventions-约定规定"><a href="#Conventions-约定规定" class="headerlink" title="Conventions 约定规定"></a>Conventions 约定规定</h2><ul><li><p>字符A，B，C，… : Grammar Variables 文法变量（大写）</p></li><li><p>字符a, b, c, … : Grammar Terminals 文法终结符  (小写) </p><ul><li>一些字符串也可以作为文法终结符，例如num, id等</li></ul></li><li><p>$\alpha，\beta，\gamma，\delta …$ 表示一些符号标志字符串</p><ul><li>$\varepsilon$可以表示变量 和/或 终结符</li></ul></li></ul><a id="more"></a><h3 id="特定的文法规定："><a href="#特定的文法规定：" class="headerlink" title="特定的文法规定："></a><strong>特定的文法规定：</strong></h3><ul><li>最左侧的为最高规则</li><li>可以简写规则。例如：$A\rightarrow a, A \rightarrow \beta, A \rightarrow \gamma$ 可以总结为；$A \rightarrow \alpha | \beta |\gamma$</li><li>左侧规则（变量） =&gt; 右侧规则（变量/终结符）</li></ul><h2 id="CFG-Context-free-Grammar-上下文无关文法"><a href="#CFG-Context-free-Grammar-上下文无关文法" class="headerlink" title="CFG(Context-free Grammar)上下文无关文法"></a>CFG(Context-free Grammar)上下文无关文法</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/FhsyS1.png" alt="FhsyS1"></p><p>由文法生成的所有字符串的集合称为文法的语言</p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><ol><li><p>${a^nb^n|n\ge0}$</p><p>使用CFG表示其规则为：$A \rightarrow aAb|\varepsilon$</p><blockquote><p><font color='#39b54a'>解释： A可以递推为$aAb$可以为递归为空串$\varepsilon$，当仅递归一次且为空串时，就表示n=1即ab，当递归多次时，例如n=2，对应的推导过程就是： $A \rightarrow aAb \rightarrow aaAbb \rightarrow aabb $</font></p></blockquote></li><li><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/RDtniT.png" alt="RDtniT"></p></li></ol><h2 id="Grammar-in-Chomsky-Normal-Form-乔姆斯基范氏"><a href="#Grammar-in-Chomsky-Normal-Form-乔姆斯基范氏" class="headerlink" title="Grammar in Chomsky Normal Form 乔姆斯基范氏"></a>Grammar in Chomsky Normal Form 乔姆斯基范氏</h2><h3 id="定义：-1"><a href="#定义：-1" class="headerlink" title="定义："></a>定义：</h3><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/ZyCjqZ.png" alt="ZyCjqZ"></p><blockquote><p>首先必须是CFG，其次每个规则都满足如上范式那么就是乔姆斯基范式</p></blockquote><p>乔姆斯基范式有两个特点：<strong>1. 一分为二 2.终级化.</strong></p><h3 id="Normalization-of-a-CFG-标准化上下文无关文法"><a href="#Normalization-of-a-CFG-标准化上下文无关文法" class="headerlink" title="Normalization of a CFG 标准化上下文无关文法"></a>Normalization of a CFG 标准化上下文无关文法</h3><p>将<strong>任意</strong>一个上下文无关文法CFG转为乔姆斯基范式的步骤如下：</p><ol><li><p>引入新的起始变元</p><p>例如：原来为$S \rightarrow a$，现在为$S_0 \rightarrow S, S \rightarrow a$</p></li><li><p>从下往上删除 $A \rightarrow \varepsilon$规则</p><p>例如： 将$B \rightarrow xAy $和$A \rightarrow \varepsilon$改为 $B \rightarrow xAy | xy$</p></li><li><p>从上往下删除传递规则</p><p>例如：将$A \rightarrow B$和$B \rightarrow xCy$改为$A \rightarrow xCy$和$B \rightarrow xCy$</p></li><li><p>添加新变元，使得所有变量规则都是一分为二</p><p>例如：将$A\rightarrow B_1B_2…B_k$ 改为$A \rightarrow  B_1A_1, A_1 \rightarrow B_2A_2, …,A_{k-2} \rightarrow B_{k-1}B_k$</p></li><li><p>添加终结符规则</p><p>例如 : $a$改为$T_a \rightarrow a$</p></li></ol><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><ol><li><p>将$S \rightarrow aSb|\varepsilon$标准化</p><ol><li><p>第一步：引入新的起始变元</p><p> $S_0 \rightarrow S, S \rightarrow aSb|\varepsilon$</p></li><li><p>第二步：删除$\varepsilon$（从后往前）</p><p>$S \rightarrow aSb|\varepsilon$ 变为 $S \rightarrow aSb|ab$</p><p><strong>初始的不删除, 否则规则改变(没有$\varepsilon$)</strong>，变为 ：$S_0 \rightarrow S | \varepsilon$</p></li><li><p>第三步：从上往下删除传递规则</p><p>改变为：$S_0 \rightarrow aSb|ab｜\varepsilon, S \rightarrow aSb|ab$</p></li><li><p>第四步：添加新变元，使得所有变量规则都是一分为二</p><p>令$S_1= Sb$, 则变为$S_0 \rightarrow aS_1|ab｜\varepsilon, S \rightarrow aS_1|ab, S_1\rightarrow Sb$</p></li><li><p>第五步：添加终结符规则</p><p>令$T_a \rightarrow a, T_b \rightarrow b$, 则变为:$S_0 \rightarrow T_aS_1|T_aT_b｜\varepsilon, S \rightarrow T_aS_1|T_aT_b, S_1\rightarrow ST_b, T_a\rightarrow a, T_b \rightarrow b$</p></li></ol><p>至此，$S_0、S、S_1$均符合$A \rightarrow BC$, 且B、C即$T_a、T_b、S_1$均不为初始变元; $T_a、T_b符合A \rightarrow a$</p></li><li><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/y44Fj1.png" alt="y44Fj1"></p></li></ol><h2 id="DFA转换为CFG"><a href="#DFA转换为CFG" class="headerlink" title="DFA转换为CFG"></a>DFA转换为CFG</h2><p>因为$RL \subseteq CFG$， 所以DFA都可以转换成为CFG</p><p>$DFA = (Q,\Sigma,q_0,F,\delta)$, $CFG = (V,\Sigma,R,S)$</p><h4 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h4><ol><li><p>$V = Q, S = q_0$ </p></li><li><p>求CFG的规则：</p><p>根据转移函数的变换规则： $q_i \rightarrow x\delta(q_i,x) \ for \ all \ q_i \in V and \ all \ x\in \Sigma$ </p><p>根据终态的变换规则: $q_i \rightarrow \varepsilon \ for \ all \ q_i \ in \ F$</p></li></ol><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/eb38q5.png" alt="eb38q5"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;学习资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/happyeveryday62/article/details/103845740&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/happyeveryday62/article/details/103845740&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;六、上下文无关语言&quot;&gt;&lt;a href=&quot;#六、上下文无关语言&quot; class=&quot;headerlink&quot; title=&quot;六、上下文无关语言&quot;&gt;&lt;/a&gt;六、上下文无关语言&lt;/h1&gt;&lt;h2 id=&quot;Conventions-约定规定&quot;&gt;&lt;a href=&quot;#Conventions-约定规定&quot; class=&quot;headerlink&quot; title=&quot;Conventions 约定规定&quot;&gt;&lt;/a&gt;Conventions 约定规定&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;字符A，B，C，… : Grammar Variables 文法变量（大写）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字符a, b, c, … : Grammar Terminals 文法终结符  (小写) &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一些字符串也可以作为文法终结符，例如num, id等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$\alpha，\beta，\gamma，\delta …$ 表示一些符号标志字符串&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\varepsilon$可以表示变量 和/或 终结符&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="knowledge" scheme="https://xwjahahahaha.github.io/categories/knowledge/"/>
    
    
  </entry>
  
  <entry>
    <title>日记_0193</title>
    <link href="https://xwjahahahaha.github.io/2021/06/24/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-06/%E6%97%A5%E8%AE%B0-0193/"/>
    <id>https://xwjahahahaha.github.io/2021/06/24/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-06/%E6%97%A5%E8%AE%B0-0193/</id>
    <published>2021-06-24T06:11:45.000Z</published>
    <updated>2021-06-24T06:12:44.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>每天</th><th>开发-云容器技术</th><th>项目与框架</th><th>科研-区块链(FL+BC)</th><th>预备事宜</th></tr></thead><tbody><tr><td>1.</td><td><strong>英语单词</strong></td><td>go基础</td><td>SimpleBitcoin</td><td>FL/分布式存储论文一周一篇细读</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>2.</td><td>语法课看完</td><td>go网络编程、Web框架</td><td>联邦学习框架</td><td>写专利</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>3.</td><td><font color='red'>六级</font></td><td>go数据库、ORM、go高级编程</td><td></td><td>机器学习课程</td><td>为<strong>研二实习</strong>做准备</td></tr><tr><td>4.</td><td>Leetcode</td><td>go容器技术docker、k8s</td><td></td><td></td><td></td></tr><tr><td>5.</td><td></td><td>go微服务与任务调度</td><td></td><td></td><td></td></tr><tr><td>6.</td><td></td><td>看源码docker、k8s、Fabric、以太坊、比特币等</td><td></td><td></td><td></td></tr><tr><td>7.</td><td></td><td>Linux、C++</td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li><li><input disabled="" type="checkbox"> Advances_and_Open_Problems_in_Federated_Learning</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input checked="" disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input checked="" disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input checked="" disabled="" type="checkbox"> Proof of Federated Learning: A Novel Energy-recycling Consensus Algorithm</li><li><input checked="" disabled="" type="checkbox"> Scalable and Communication-efficient Decentralized Federated Edge Learning with Multi-blockchain Framework</li><li><input checked="" disabled="" type="checkbox"> DEEP GRADIENT COMPRESSION:REDUCING THE COMMUNICATION BANDWIDTH FOR DISTRIBUTED TRAINING</li><li><input disabled="" type="checkbox"> BlockFLA:Accountable_Federated_Learning_via_Hybrid_Blockchain_Architecture</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li><del>学弟的cosmos隐私保护项目</del></li><li>第一篇论文FL+BC</li><li><del>科技部编程比赛</del></li><li>暑期实习准备(Go, 算法等)</li></ul><ul><li><input checked="" disabled="" type="checkbox"> cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></li><li><input checked="" disabled="" type="checkbox"> 科技部编程比赛项目实现(使用cosmos)</li><li><input checked="" disabled="" type="checkbox"> Go公链实现项目(simple_bitcoin)</li><li><input disabled="" type="checkbox"> 专利一篇(金链积分)</li><li><input disabled="" type="checkbox"> Go网络编程Base</li><li><input disabled="" type="checkbox"> Go网络编程(base、Echo、Gin)</li><li><input disabled="" type="checkbox"> 第一篇论文初稿(blockchain + FL)</li><li><input disabled="" type="checkbox"> 论文实验(编码实现)</li><li><input disabled="" type="checkbox"> 数据库(mysql, PostgreSQL), ORM(Gorm) 、Go设计模式  </li><li><input disabled="" type="checkbox"> Go设计模式 </li><li><input disabled="" type="checkbox"> docker </li><li><input disabled="" type="checkbox"> 容器编程k8s</li><li><input disabled="" type="checkbox"> 缓存、日志</li><li><input disabled="" type="checkbox"> 微服务(消息队列、任务调度、rpc)</li></ul><ul><li>Go开发走云容器技术</li><li>区块链开发走科研论文、Etherem、Fabric、源码分析、Cosmos使用</li></ul><p><strong>有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input disabled="" type="checkbox"> 英语</li><li><input disabled="" type="checkbox"> leetcode一题 剑指offer</li><li><input checked="" disabled="" type="checkbox"> 计算理论基础</li><li><input disabled="" type="checkbox"> </li><li><input disabled="" type="checkbox"> </li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每天&lt;/th&gt;
&lt;th&gt;开发-云容器技术&lt;/th&gt;
&lt;th&gt;项目与框架&lt;/th&gt;
&lt;th&gt;科研-区块链(FL+BC)&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go基础&lt;/td&gt;
&lt;td&gt;SimpleBitcoin&lt;/td&gt;
&lt;td&gt;FL/分布式存储论文一周一篇细读&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;go网络编程、Web框架&lt;/td&gt;
&lt;td&gt;联邦学习框架&lt;/td&gt;
&lt;td&gt;写专利&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;go数据库、ORM、go高级编程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;机器学习课程&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;研二实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;Leetcode&lt;/td&gt;
&lt;td&gt;go容器技术docker、k8s&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;go微服务与任务调度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码docker、k8s、Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux、C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>日记_0192</title>
    <link href="https://xwjahahahaha.github.io/2021/06/23/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-06/%E6%97%A5%E8%AE%B0-0192/"/>
    <id>https://xwjahahahaha.github.io/2021/06/23/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-06/%E6%97%A5%E8%AE%B0-0192/</id>
    <published>2021-06-23T01:05:52.000Z</published>
    <updated>2021-06-24T06:11:36.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>每天</th><th>开发-云容器技术</th><th>项目与框架</th><th>科研-区块链(FL+BC)</th><th>预备事宜</th></tr></thead><tbody><tr><td>1.</td><td><strong>英语单词</strong></td><td>go基础</td><td>SimpleBitcoin</td><td>FL/分布式存储论文一周一篇细读</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>2.</td><td>语法课看完</td><td>go网络编程、Web框架</td><td>联邦学习框架</td><td>写专利</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>3.</td><td><font color='red'>六级</font></td><td>go数据库、ORM、go高级编程</td><td></td><td>机器学习课程</td><td>为<strong>研二实习</strong>做准备</td></tr><tr><td>4.</td><td>Leetcode</td><td>go容器技术docker、k8s</td><td></td><td></td><td></td></tr><tr><td>5.</td><td></td><td>go微服务与任务调度</td><td></td><td></td><td></td></tr><tr><td>6.</td><td></td><td>看源码docker、k8s、Fabric、以太坊、比特币等</td><td></td><td></td><td></td></tr><tr><td>7.</td><td></td><td>Linux、C++</td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li><li><input disabled="" type="checkbox"> Advances_and_Open_Problems_in_Federated_Learning</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input checked="" disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input checked="" disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input checked="" disabled="" type="checkbox"> Proof of Federated Learning: A Novel Energy-recycling Consensus Algorithm</li><li><input checked="" disabled="" type="checkbox"> Scalable and Communication-efficient Decentralized Federated Edge Learning with Multi-blockchain Framework</li><li><input checked="" disabled="" type="checkbox"> DEEP GRADIENT COMPRESSION:REDUCING THE COMMUNICATION BANDWIDTH FOR DISTRIBUTED TRAINING</li><li><input disabled="" type="checkbox"> BlockFLA:Accountable_Federated_Learning_via_Hybrid_Blockchain_Architecture</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li><del>学弟的cosmos隐私保护项目</del></li><li>第一篇论文FL+BC</li><li><del>科技部编程比赛</del></li><li>暑期实习准备(Go, 算法等)</li></ul><ul><li><input checked="" disabled="" type="checkbox"> cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></li><li><input checked="" disabled="" type="checkbox"> 科技部编程比赛项目实现(使用cosmos)</li><li><input checked="" disabled="" type="checkbox"> Go公链实现项目(simple_bitcoin)</li><li><input disabled="" type="checkbox"> 专利一篇(金链积分)</li><li><input disabled="" type="checkbox"> Go网络编程Base</li><li><input disabled="" type="checkbox"> Go网络编程(base、Echo、Gin)</li><li><input disabled="" type="checkbox"> 第一篇论文初稿(blockchain + FL)</li><li><input disabled="" type="checkbox"> 论文实验(编码实现)</li><li><input disabled="" type="checkbox"> 数据库(mysql, PostgreSQL), ORM(Gorm) 、Go设计模式  </li><li><input disabled="" type="checkbox"> Go设计模式 </li><li><input disabled="" type="checkbox"> docker </li><li><input disabled="" type="checkbox"> 容器编程k8s</li><li><input disabled="" type="checkbox"> 缓存、日志</li><li><input disabled="" type="checkbox"> 微服务(消息队列、任务调度、rpc)</li></ul><ul><li>Go开发走云容器技术</li><li>区块链开发走科研论文、Etherem、Fabric、源码分析、Cosmos使用</li></ul><p><strong>有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input disabled="" type="checkbox"> leetcode一题 剑指offer</li><li><input checked="" disabled="" type="checkbox"> 专利第一版结束</li><li><input checked="" disabled="" type="checkbox"> 复习计算理论基础</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每天&lt;/th&gt;
&lt;th&gt;开发-云容器技术&lt;/th&gt;
&lt;th&gt;项目与框架&lt;/th&gt;
&lt;th&gt;科研-区块链(FL+BC)&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go基础&lt;/td&gt;
&lt;td&gt;SimpleBitcoin&lt;/td&gt;
&lt;td&gt;FL/分布式存储论文一周一篇细读&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;go网络编程、Web框架&lt;/td&gt;
&lt;td&gt;联邦学习框架&lt;/td&gt;
&lt;td&gt;写专利&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;go数据库、ORM、go高级编程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;机器学习课程&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;研二实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;Leetcode&lt;/td&gt;
&lt;td&gt;go容器技术docker、k8s&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;go微服务与任务调度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码docker、k8s、Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux、C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>swarm-XDai主网免bzz质押和rpc全套搭建教程-windows</title>
    <link href="https://xwjahahahaha.github.io/2021/06/22/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Swarm/swarm-XDai%E4%B8%BB%E7%BD%91%E5%85%8Dbzz%E8%B4%A8%E6%8A%BC%E5%92%8Crpc%E5%85%A8%E5%A5%97%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B-windows/"/>
    <id>https://xwjahahahaha.github.io/2021/06/22/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Swarm/swarm-XDai%E4%B8%BB%E7%BD%91%E5%85%8Dbzz%E8%B4%A8%E6%8A%BC%E5%92%8Crpc%E5%85%A8%E5%A5%97%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B-windows/</id>
    <published>2021-06-22T02:58:10.000Z</published>
    <updated>2021-06-23T01:38:27.532Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本教程的最终效果是： 搭建一个Swarm主网节点，参与Swarm项目</p><p>文章不构成任何购买建议，请自行负责</p></blockquote><h1 id="一、清楚一些事情"><a href="#一、清楚一些事情" class="headerlink" title="一、清楚一些事情"></a>一、清楚一些事情</h1><ul><li><p>Swarm主网上线是在以太坊的POA侧链XDAI链上运行的，为了避免主网拥堵以及高额的gas</p><p><font color='#e54d42'><strong>所以之前空头一些相关Goerli测试网络的配置都不在适用</strong></font></p></li><li><p>XDAI链的主链币是XDAI，Bzz是其中的合约代币，类比理解：</p><table><thead><tr><th>区块链网络/链</th><th>以太坊主链</th><th>Goerli测试链（空头）</th><th>侧链XDAI（正式）</th></tr></thead><tbody><tr><td>主链币</td><td>ETH</td><td>gETH</td><td>XDAI</td></tr><tr><td>合约代币</td><td>BZZ</td><td>gBZZ</td><td>xBZZ</td></tr></tbody></table><ul><li>主链币是一条区块链的核心币，由交易转移、共识一致，数量依托整个区块链系统结构设计。交易的Gas费就是主链币</li><li>合约代币是区块链运行的合约逻辑中存储的一串数字，对，就是数字（虽然主链币也是数字），数量变化依托合约逻辑结构设计。</li></ul></li><li><p>Bee客户端是Swarm项目的客户端，在本地运行，<strong>很多配置可以通过配置文件修改运行</strong>。</p></li><li><p>整体结构大约如下所示：</p><p>（当然，现实不可能以太坊节点与Swarm节点完全分离，很可能有错综复杂的重叠）</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/nERnYe.png" alt="nERnYe"></p></li></ul><a id="more"></a><h1 id="二、RPC访问配置"><a href="#二、RPC访问配置" class="headerlink" title="二、RPC访问配置"></a>二、RPC访问配置</h1><h2 id="2-1-使用GetBlock（推荐）"><a href="#2-1-使用GetBlock（推荐）" class="headerlink" title="2.1 使用GetBlock（推荐）"></a>2.1 使用GetBlock（推荐）</h2><p>类似于之前测试网的<a href="https://infura.io，[Getblock](https://getblock.io/)也是一个提供在线PRC服务的网站，不用自建RPC">https://infura.io，[Getblock](https://getblock.io/)也是一个提供在线PRC服务的网站，不用自建RPC</a></p><p>使用方法：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/305O4A.png" alt="305O4A"></p><p>输入邮箱，名称注册</p><p>打开邮箱会看到注册的详细信息网站</p><p>注册成功后，进入控制台如图：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/z6hCnz.png" alt="z6hCnz"></p><p>就可以拿到你的API密钥了</p><p>最终你的的Swap-endpoint配置就是:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swap-endpoint:</span> <span class="string">https://stake.getblock.io/mainnet/?api_key=这里换成你的API密钥</span></span><br></pre></td></tr></table></figure><h2 id="2-2-搭建自己的RPC基站"><a href="#2-2-搭建自己的RPC基站" class="headerlink" title="2.2 搭建自己的RPC基站"></a>2.2 搭建自己的RPC基站</h2><p>玩过测试网的都知道，之前Swarm测试网(Goerli测试网络)用的RPC基站即Swap-endpoint是在<a href="https://infura.io上注册的，每天限制免费10万次请求，现在不用这个了。" target="_blank" rel="noopener">https://infura.io上注册的，每天限制免费10万次请求，现在不用这个了。</a></p><p>为了让我们的Bee客户端能够通过rpc请求获取到XDAI的链上数据并且没有请求次数的限制，我们可以运行一个自己的XDAI网络RPC基站</p><h3 id="2-2-1-下载工具Nethermind"><a href="#2-2-1-下载工具Nethermind" class="headerlink" title="2.2.1 下载工具Nethermind"></a>2.2.1 下载工具Nethermind</h3><p>Nethermind是以太坊客户端快速同步节点搭建工具，支持很多种测试网络，网址如下：</p><p><a href="https://docs.nethermind.io/nethermind/" target="_blank" rel="noopener">https://docs.nethermind.io/nethermind/</a></p><p>进入Download：</p><p><a href="https://docs.nethermind.io/nethermind/ethereum-client/download-sources" target="_blank" rel="noopener">https://docs.nethermind.io/nethermind/ethereum-client/download-sources</a></p><p>下载链接：</p><p><a href="https://downloads.nethermind.io/" target="_blank" rel="noopener">https://downloads.nethermind.io/</a></p><p>选择你的电脑操作系统版本</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/UvbZCE.png" alt="UvbZCE"></p><p>下载解压后如图：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/zQNNQG.png" alt="zQNNQG"></p><h3 id="2-2-2-设置WebSocket为启动"><a href="#2-2-2-设置WebSocket为启动" class="headerlink" title="2.2.2 设置WebSocket为启动"></a>2.2.2 设置WebSocket为启动</h3><p>打开配置文件夹configs找到xdai.cfg, 用记事本打开</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/TwbDti.png" alt="TwbDti"></p><p>修改webSocket为启用：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/74OoV0.png" alt="74OoV0"></p><p>保存退出</p><h3 id="2-2-3-启动节点，开始同步"><a href="#2-2-3-启动节点，开始同步" class="headerlink" title="2.2.3 启动节点，开始同步"></a>2.2.3 启动节点，开始同步</h3><p>双击Nethermind.Launcher.exe启动，上下左右移动选择，回车确定</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/g5NZt6.png" alt="g5NZt6"></p><p>选择以太坊节点</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/YBPIkb.png" alt="YBPIkb"></p><p>选择XDAI测试链</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/JbOVik.png" alt="JbOVik"></p><p>选择快速同步模式</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/x1syFS.png" alt="x1syFS"></p><p>接下来的一连串配置：</p><p>一般本地使用就是127.0.0.1, 服务器的话就用服务器的IP</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/IQsPU0.png" alt="IQsPU0"></p><p>启动后等待同步，同步的时间<strong>很长。。。。耐心等待</strong></p><p>默认就是8546端口，符合bee客户端swap-endpoint的默认配置，所以不需要改配置</p><p>打开浏览器访问<code>localhost:8546</code>出现<code>Nethermind JSON RPC</code>即可</p><p>最后你的Swap-endpoint应该是：（也就是默认的配置）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swap-endpoint:</span> <span class="string">ws://localhost:8546</span></span><br></pre></td></tr></table></figure><h1 id="三、获取XDAI"><a href="#三、获取XDAI" class="headerlink" title="三、获取XDAI"></a>三、获取XDAI</h1><p>部署支票簿合约就需要发起交易，发起交易就需要交易费，在XDAI链上，交易费就是XDAI币</p><p>XDAI是稳定币，目前交易所的价格等同与USDT<strong>大约一美元</strong>，所以<strong>如果找别人买最好看清楚给的价格</strong></p><p>购买之前，先配置一下MetaMask小狐狸钱包</p><h2 id="3-1-MetaMask小狐狸钱包的配置"><a href="#3-1-MetaMask小狐狸钱包的配置" class="headerlink" title="3.1 MetaMask小狐狸钱包的配置"></a>3.1 MetaMask小狐狸钱包的配置</h2><p>打开设置：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/U9vUzt.png" alt="U9vUzt"></p><p>下拉找到网络 =&gt; 添加网络</p><p>XDAI侧链网络配置如下：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/P0pxtb.png" alt="P0pxtb"></p><p>网络名词：xDAI Chain</p><p>新增RPC URL：<a href="https://rpc.xdaichain.com(注意标点符号的半角和全角，需要半角)" target="_blank" rel="noopener">https://rpc.xdaichain.com(注意标点符号的半角和全角，需要半角)</a></p><p>链ID：100</p><p>符号：xDAI</p><p>区块浏览器：<a href="https://blockscout.com/xdai/mainnet/" target="_blank" rel="noopener">https://blockscout.com/xdai/mainnet/</a></p><hr><h2 id="3-2-添加XDAI链的xBzz"><a href="#3-2-添加XDAI链的xBzz" class="headerlink" title="3.2 添加XDAI链的xBzz"></a>3.2 添加XDAI链的xBzz</h2><p>添加代币 =&gt; 代币合约地址</p><p>地址：0xdBF3Ea6F5beE45c02255B2c26a16F300502F68da</p><h2 id="3-3-交易所购买"><a href="#3-3-交易所购买" class="headerlink" title="3.3 交易所购买"></a>3.3 交易所购买</h2><p><a href="https://m.ascendex.com/register?inviteCode=UHCVPQPWA" target="_blank" rel="noopener">https://m.ascendex.com/register?inviteCode=UHCVPQPWA</a></p><p>点市场——右上角搜索——xDAI，就可以看到</p><p>如果从其他交易所提U进来，推荐走TRC20链。</p><p>由于erc20的手续费较高，提币可以选择TRC20，并且提币和充币，都要选择TRC20，切记一一对应，别搞错了。</p><p>购买后将你的XDAI转移到你的Bee账户中</p><h1 id="四、配置1-0版本Bee"><a href="#四、配置1-0版本Bee" class="headerlink" title="四、配置1.0版本Bee"></a>四、配置1.0版本Bee</h1><p>找一个空文件夹，在官网下载：</p><p>全部下载地址： <a href="https://github.com/ethersphere/bee/releases/tag/v1.0.0" target="_blank" rel="noopener">https://github.com/ethersphere/bee/releases/tag/v1.0.0</a></p><p>windows地址：<a href="https://github.com/ethersphere/bee/releases/download/v1.0.0/bee-windows-amd64.exe" target="_blank" rel="noopener">https://github.com/ethersphere/bee/releases/download/v1.0.0/bee-windows-amd64.exe</a></p><p>下载exe放入空文件夹</p><p>进入空文件夹创建一个文件, 文件全称：<code>bee.yaml</code> 注意拓展名是Yaml，如果没有设置显示拓展名，具体的windows显示文件拓展名见：</p><p><a href="https://jingyan.baidu.com/article/a3a3f811154df38da3eb8a51.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/a3a3f811154df38da3eb8a51.html</a></p><h2 id="4-1-零质押与Gas费的配置"><a href="#4-1-零质押与Gas费的配置" class="headerlink" title="4.1 零质押与Gas费的配置"></a>4.1 零质押与Gas费的配置</h2><h3 id="1-零质押配置"><a href="#1-零质押配置" class="headerlink" title="1. 零质押配置"></a>1. 零质押配置</h3><p>如果追求最小成本，可以将质押的初始Bzz设置为0</p><p>在<code>bee.yaml</code>文件中编辑</p><p><code>swap-initial-deposit: &quot;0&quot;</code></p><h3 id="2-提高Gas费配置"><a href="#2-提高Gas费配置" class="headerlink" title="2. 提高Gas费配置"></a>2. 提高Gas费配置</h3><p>为了加快支票薄合约的部署速度，也就是运行Bee的等待交易上链时间，可以提高Gas费也就是XDAI</p><p>配置如下：</p><p><code>swap-deployment-gas-price: &quot;修改你想要的gas费，也不要太大&quot;</code></p><h3 id="3-最终yaml整体配置"><a href="#3-最终yaml整体配置" class="headerlink" title="3. 最终yaml整体配置"></a>3. 最终yaml整体配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">api-addr:</span> <span class="string">:1633</span><span class="comment"># 端口可自行修改</span></span><br><span class="line"><span class="attr">cache-capacity:</span> <span class="string">"1000000"</span></span><br><span class="line"><span class="attr">config:</span> <span class="string">.\.bee.yaml</span></span><br><span class="line"><span class="attr">data-dir:</span> <span class="string">.\.bee</span><span class="comment"># 所有数据文件都在当前文件夹，如果有问题整体删除即可</span></span><br><span class="line"><span class="attr">debug-api-addr:</span> <span class="string">:1635</span></span><br><span class="line"><span class="attr">debug-api-enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">full-node:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mainnet:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">network-id:</span> <span class="string">"1"</span></span><br><span class="line"><span class="attr">network-id:</span> <span class="string">"100"</span></span><br><span class="line"><span class="attr">p2p-addr:</span> <span class="string">:1634</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">"xxxxxxx"</span></span><br><span class="line"><span class="attr">swap-deployment-gas-price:</span> <span class="string">"999999"</span><span class="comment"># 自行修改交易费</span></span><br><span class="line"><span class="attr">swap-enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">swap-endpoint:</span> <span class="string">https://stake.getblock.io/mainnet/?api_key=xxxxxxxxxxxxxxxxxxx</span><span class="comment"># 修改成你的api keys</span></span><br><span class="line"><span class="attr">swap-initial-deposit:</span> <span class="string">"0"</span><span class="comment"># 自行修改质押</span></span><br></pre></td></tr></table></figure><h3 id="4-单机多节点"><a href="#4-单机多节点" class="headerlink" title="4. 单机多节点"></a>4. 单机多节点</h3><p>这里的多节点是<strong>多端口</strong>，<strong>多个控制台启动</strong></p><p>端口避免重复例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一台节点</span></span><br><span class="line"><span class="attr">api-addr:</span> <span class="string">:1633</span></span><br><span class="line"><span class="attr">debug-api-addr:</span> <span class="string">:1635</span></span><br><span class="line"><span class="attr">debug-api-enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">p2p-addr:</span> <span class="string">:1634</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二台节点</span></span><br><span class="line"><span class="attr">api-addr:</span> <span class="string">:1643</span></span><br><span class="line"><span class="attr">debug-api-addr:</span> <span class="string">:1645</span></span><br><span class="line"><span class="attr">debug-api-enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">p2p-addr:</span> <span class="string">:1644</span></span><br></pre></td></tr></table></figure><p>多节点就是创建多个文件夹，多个cmd，多次启动</p><h1 id="五、启动Bee-1-0开始工作"><a href="#五、启动Bee-1-0开始工作" class="headerlink" title="五、启动Bee_1.0开始工作"></a>五、启动Bee_1.0开始工作</h1><p>在文件夹下启动cmd，输入如下命令启动：</p><p><code>bee-windows-amd64.exe start --config bee.yaml</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/phoBCw.png" alt="phoBCw"></p><h1 id="六、导出私钥"><a href="#六、导出私钥" class="headerlink" title="六、导出私钥"></a>六、导出私钥</h1><h2 id="6-1-不使用clef（推荐）"><a href="#6-1-不使用clef（推荐）" class="headerlink" title="6.1 不使用clef（推荐）"></a>6.1 不使用clef（推荐）</h2><p>教程不使用bee-clef，使用Bee默认会启动创建的一对公私钥，所以要将私钥导出来，加载到例如MetaMask钱包中</p><p><a href="https://github.com/jmozah/exportSwarmKey" target="_blank" rel="noopener">https://github.com/jmozah/exportSwarmKey</a> （要自行用go环境编译）</p><p>windows版本的编译完成main文件：</p><p>链接: <a href="https://pan.baidu.com/s/1EEEwxJ70ZrcUSbTS3AMHOQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1EEEwxJ70ZrcUSbTS3AMHOQ</a>  密码: tb09  （博主不负任何责任，自行考良）</p><p>在文件夹下运行：</p><p><code>exportKeys_windows.exe .bee/keys/ 你的密码(配置文件中配置)</code></p><p><strong>显示的第三个<code>.bee\keys\swarm_key</code>中的私钥就是目标私钥</strong></p><h2 id="6-2-使用bee-clef"><a href="#6-2-使用bee-clef" class="headerlink" title="6.2 使用bee-clef"></a>6.2 使用bee-clef</h2><p>使用clef在上面的配置文件加上配置：（具体配置方法见其他文章）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">clef-signer-enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">clef-signer-endpoint:</span> <span class="string">""</span></span><br><span class="line"><span class="attr">clef-signer-ethereum-address:</span> <span class="string">""</span></span><br></pre></td></tr></table></figure><p>将clef账户导入到MetaMask中</p><p><code>cd /var/lib/bee-clef</code></p><p>文件夹下:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/82lRk0.png" alt="82lRk0"></p><p>或者终端运行<code>bee-clef-keys</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/eydkFy.png" alt="eydkFy"></p><p>会自动导入到主目录下,txt中就是密码</p><p>打开MetaMask中导入:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/719qCf.png" alt="719qCf"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/fPc6RB.png" alt="fPc6RB"></p><h1 id="七、其他"><a href="#七、其他" class="headerlink" title="七、其他"></a>七、其他</h1><h2 id="XDAI浏览器地址"><a href="#XDAI浏览器地址" class="headerlink" title="XDAI浏览器地址"></a>XDAI浏览器地址</h2><p><a href="https://blockscout.com/xdai/mainnet/" target="_blank" rel="noopener">https://blockscout.com/xdai/mainnet/</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本教程的最终效果是： 搭建一个Swarm主网节点，参与Swarm项目&lt;/p&gt;
&lt;p&gt;文章不构成任何购买建议，请自行负责&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、清楚一些事情&quot;&gt;&lt;a href=&quot;#一、清楚一些事情&quot; class=&quot;headerlink&quot; title=&quot;一、清楚一些事情&quot;&gt;&lt;/a&gt;一、清楚一些事情&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Swarm主网上线是在以太坊的POA侧链XDAI链上运行的，为了避免主网拥堵以及高额的gas&lt;/p&gt;
&lt;p&gt;&lt;font color=&#39;#e54d42&#39;&gt;&lt;strong&gt;所以之前空头一些相关Goerli测试网络的配置都不在适用&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;XDAI链的主链币是XDAI，Bzz是其中的合约代币，类比理解：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;区块链网络/链&lt;/th&gt;
&lt;th&gt;以太坊主链&lt;/th&gt;
&lt;th&gt;Goerli测试链（空头）&lt;/th&gt;
&lt;th&gt;侧链XDAI（正式）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;主链币&lt;/td&gt;
&lt;td&gt;ETH&lt;/td&gt;
&lt;td&gt;gETH&lt;/td&gt;
&lt;td&gt;XDAI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;合约代币&lt;/td&gt;
&lt;td&gt;BZZ&lt;/td&gt;
&lt;td&gt;gBZZ&lt;/td&gt;
&lt;td&gt;xBZZ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;主链币是一条区块链的核心币，由交易转移、共识一致，数量依托整个区块链系统结构设计。交易的Gas费就是主链币&lt;/li&gt;
&lt;li&gt;合约代币是区块链运行的合约逻辑中存储的一串数字，对，就是数字（虽然主链币也是数字），数量变化依托合约逻辑结构设计。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bee客户端是Swarm项目的客户端，在本地运行，&lt;strong&gt;很多配置可以通过配置文件修改运行&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;整体结构大约如下所示：&lt;/p&gt;
&lt;p&gt;（当然，现实不可能以太坊节点与Swarm节点完全分离，很可能有错综复杂的重叠）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://xwjpics.gumptlu.work/qinniu_uPic/nERnYe.png&quot; alt=&quot;nERnYe&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    
  </entry>
  
  <entry>
    <title>计算理论基础-1-FA有穷自动机与Pumping_Lemma泵定理</title>
    <link href="https://xwjahahahaha.github.io/2021/06/20/%E7%9F%A5%E8%AF%86%E8%B4%B4/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80-1-FA%E6%9C%89%E7%A9%B7%E8%87%AA%E5%8A%A8%E6%9C%BA%E4%B8%8EPumping_Lemma%E6%B3%B5%E5%AE%9A%E7%90%86/"/>
    <id>https://xwjahahahaha.github.io/2021/06/20/%E7%9F%A5%E8%AF%86%E8%B4%B4/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80-1-FA%E6%9C%89%E7%A9%B7%E8%87%AA%E5%8A%A8%E6%9C%BA%E4%B8%8EPumping_Lemma%E6%B3%B5%E5%AE%9A%E7%90%86/</id>
    <published>2021-06-20T13:11:08.000Z</published>
    <updated>2021-06-27T02:14:21.729Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习资料：</p><p><a href="https://www.cnblogs.com/Bubgit/p/10240790.html" target="_blank" rel="noopener">https://www.cnblogs.com/Bubgit/p/10240790.html</a></p><p><a href="https://blog.csdn.net/shulianghan/article/details/111393044" target="_blank" rel="noopener">https://blog.csdn.net/shulianghan/article/details/111393044</a></p><p><a href="https://www.cnblogs.com/raicho/p/11762837.html" target="_blank" rel="noopener">https://www.cnblogs.com/raicho/p/11762837.html</a></p><p><a href="https://blog.csdn.net/elice_/article/details/80550413" target="_blank" rel="noopener">https://blog.csdn.net/elice_/article/details/80550413</a></p><p><a href="https://baike.baidu.com/item/泵引理/9490334?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/泵引理/9490334?fr=aladdin</a></p><p><a href="https://blog.csdn.net/zxbdsg/article/details/112424714" target="_blank" rel="noopener">https://blog.csdn.net/zxbdsg/article/details/112424714</a></p></blockquote><h1 id="一、正则表达式与状态转移图"><a href="#一、正则表达式与状态转移图" class="headerlink" title="一、正则表达式与状态转移图"></a>一、正则表达式与状态转移图</h1><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="正则操作："><a href="#正则操作：" class="headerlink" title="正则操作："></a>正则操作：</h3><ol><li><p>$ \cdot $ 表示连接(可省略) </p><p>例： $abc \cdot 123 = abc123$</p></li><li><p>$\mid$ 表示或</p><p>例： $abc \mid 123 = \begin{cases} abc  \123\end {cases}$ </p></li><li><p>$*$ 运算start</p><p>$str^i = \begin{cases} \varepsilon &amp; i=0 \ str^{i-1} \cdot str &amp; i&gt;=1 \end{cases}$  </p><p> 即$str * = \bigcup\limits_{i=0}^\infty str^i$    </p><p>其中$\varepsilon$指空串</p><p>例：${0,1}^* = {\varepsilon} \cup {0,1} \cup {00,01,10,11} …$</p></li></ol><a id="more"></a><h3 id="计算优先级"><a href="#计算优先级" class="headerlink" title="计算优先级"></a>计算优先级</h3><p>有小括号先算小括号， $* &gt; \cdot &gt; |$</p><h2 id="状态转移图"><a href="#状态转移图" class="headerlink" title="状态转移图"></a>状态转移图</h2><p>状态转移图中，节点表示状态，边表示输入字母，双圈表示终态</p><p><strong>正则表达式转换为状态转移图：</strong></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/HqT3Mb.png" alt="HqT3Mb"></p><p>对于$*$运算符的特别说明：</p><p>转换过程为：</p><ol><li><p>将所有的<strong>接受/中止状态</strong>使用 $ \varepsilon$ 箭头 , <strong>从 接受/终止状态 指向 开始状态</strong> ;</p></li><li><p>添加新的开始状态： 添加接受状态作为开始状态 , 指向开始状态 ;</p></li></ol><p>图例：    <img src="http://xwjpics.gumptlu.work/qinniu_uPic/BTqVaK.png" alt="BTqVaK"></p><h1 id="二、DFA-Deterministic-Finite-Automaton"><a href="#二、DFA-Deterministic-Finite-Automaton" class="headerlink" title="二、DFA(Deterministic Finite Automaton)"></a>二、DFA(Deterministic Finite Automaton)</h1><p>有穷自动机。如果一个语言可以被有穷自动机识别则称之为<strong>正则语言</strong>，其定义为一个五元组</p><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><p>$DFA = (Q,\Sigma,q_0,F,\delta)$</p><h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol><li>$Q$ :  有穷集合，状态集</li><li>$\Sigma$ ：有穷集合，字母集</li><li>$q_0$ : $q_0 \in Q$, 表示开始/起始状态 (start/initial state)</li><li>$F$ : $F \subseteq Q$ , 表示最终/接受状态 (final/accept state)</li><li>$\delta$ : $Q_1 \times \Sigma \rightarrow Q_2$ 转移函数</li></ol><blockquote><p>理解： 类比于状态转移图</p><p>Q： 图中所有的节点</p><p>$\Sigma$：边的集合 </p><p>$q_0$：初始节点</p><p>$F$：最终节点（双圈）</p><p>$\varepsilon$ :  图中的逻辑规则</p></blockquote><h2 id="图例："><a href="#图例：" class="headerlink" title="图例："></a>图例：</h2><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/KPmomh.png" alt="KPmomh"></p><p>$s \in S, a \in \Sigma,\delta(s,a) $表示从状态s出发，沿着标记a所能到达的<strong>状态</strong></p><p>例：当$s=0,a=a$时，从状态0出发，经过a只能够到达1</p><h1 id="三、NFA-Non-deterministic-Finite-Automaton"><a href="#三、NFA-Non-deterministic-Finite-Automaton" class="headerlink" title="三、NFA(Non-deterministic Finite Automaton)"></a>三、NFA(Non-deterministic Finite Automaton)</h1><p>非确型有穷自动机。同样是五元组</p><h2 id="定义：-1"><a href="#定义：-1" class="headerlink" title="定义："></a>定义：</h2><p>$NFA = (Q, \Sigma, q_0, F, \delta)$</p><h2 id="说明：-1"><a href="#说明：-1" class="headerlink" title="说明："></a>说明：</h2><ol><li>前四个与DFA定义相同</li><li>$\delta$ : $Q_1 \times \Sigma \rightarrow P(Q)$ $P(Q)$表示一个状态的子集</li></ol><h2 id="图例：-1"><a href="#图例：-1" class="headerlink" title="图例："></a>图例：</h2><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/nLnbDk.png" alt="nLnbDk"></p><p>$s \in S, a \in \Sigma,\delta(s,a) $表示从状态s出发，沿着标记a所能到达的<strong>状态集合</strong></p><p>因为可能是一个状态集合，所以NFA的状态图可能有不同的后继</p><p>例：当$s=0, a=a$时，能够到达的状态集合是${0, 1}$</p><hr><h3 id="NFA与DFA的不同："><a href="#NFA与DFA的不同：" class="headerlink" title="NFA与DFA的不同："></a><strong>NFA与DFA的不同：</strong></h3><ol><li>$\varepsilon- transation$ is allowed 允许读入一个空串即$\varepsilon$ (状态转移结果还是自身)</li><li>Many possible next states at each step 每一步都可能有多种可能性      </li></ol><p>NFA可以使用<strong>(subset construct)子集构造法</strong>转换为DFA</p><h2 id="练习1："><a href="#练习1：" class="headerlink" title="练习1："></a>练习1：</h2><p>1.设有 NFA M=( {0,1,2,3}, {a,b},f,0,{3} )，其中 f(0,a)={0,1} f(0,b)={0} f(1,b)={2} f(2,b)={3}</p><p>  画出状态转换矩阵,状态转换图，并说明该NFA识别的是什么样的语言。</p><table><thead><tr><th>NFA</th><th>a</th><th>b</th></tr></thead><tbody><tr><td>0</td><td>0,1</td><td>0</td></tr><tr><td>1</td><td>$\varnothing$</td><td>2</td></tr><tr><td>2</td><td>$\varnothing$</td><td>3</td></tr><tr><td>3</td><td>$\varnothing$</td><td>$\varnothing$</td></tr></tbody></table><p> <a href="https://img2018.cnblogs.com/blog/1483369/201910/1483369-20191030113414320-1224199958.png" target="_blank" rel="noopener"><img src="https://img2018.cnblogs.com/blog/1483369/201910/1483369-20191030113414320-1224199958.png" alt="img"></a></p><p>语言：$(a | b)*abb$</p><h1 id="四、子集构造法：NFA转化为DFA"><a href="#四、子集构造法：NFA转化为DFA" class="headerlink" title="四、子集构造法：NFA转化为DFA"></a>四、子集构造法：NFA转化为DFA</h1><p>在有穷自动机的理论里，有这样的定理：设L为一个由不确定的有穷自动机接受的集合，则存在一个接受L的确定的有穷自动机</p><p>所以非确定有穷自动机NFA可以转换为DFA，对于上面的例1流程如下：</p><h2 id="第一步-构建自定义状态-I"><a href="#第一步-构建自定义状态-I" class="headerlink" title="第一步 构建自定义状态$I$"></a>第一步 构建自定义状态$I$</h2><p>子集构造法，简单来说思路就是将一些状态作为集合成为一个新的状态</p><p><font color='#6698cb'><strong>$I$的初始选择规则：从初始状态$q_0$经过任意数量的$\varepsilon$能够到达的状态的集合</strong></font></p><p>对于例1来说，上例就是状态0</p><p><font color='#6698cb'><strong>$I_x$表示集合$I$的每个状态节点经过$x$（可经过$\varepsilon$）的所有结果集合的并集</strong></font></p><p>对于上例来说，只有一个0状态节点，所以，状态0经过a可以到达的状态集合是{0,1}, 经过b可以<strong>到达</strong>的状态集合是{0}</p><p><font color='#6698cb'><strong>下面选择$I$的规则是： 从上一次的所有$I_x， x\in \Sigma$中选择一个作为$I$，但是每个$I_x$只可选择一次</strong></font></p><p>对于上例来说，可以只能选择{0, 1}，因为{0}已经在最开始选择了（为了避免自定义的重复），作为$I$, 则其对应的$I_a、I_b$如下图</p><p>0的$I_a = {0， 1}, I_b = {0}$ ,   1的$I_a = \varnothing, I_b = {2}$       =&gt; (取并集)       $I_a = {0, 1}, I_b = {0, 2}$</p><p> 同理选择下一个$I = {0, 2}$, 继续计算….</p><table><thead><tr><th></th><th>$I$</th><th>$I_a$</th><th>$I_b$</th></tr></thead><tbody><tr><td>A</td><td>{0}</td><td>{0, 1}</td><td>{0}</td></tr><tr><td>B</td><td>{0, 1}</td><td>{0, 1}</td><td>{0, 2}</td></tr><tr><td>C</td><td>{0, 2}</td><td>{0, 1}</td><td>{0, 3}</td></tr><tr><td>D</td><td>{0, 3}</td><td>{0, 1}</td><td>{0}</td></tr></tbody></table><p>最终自定义状态为：A={0}, B={0, 1}, C={0, 2}, D={0, 3}</p><h2 id="第二步-画出DFA状态转移图"><a href="#第二步-画出DFA状态转移图" class="headerlink" title="第二步 画出DFA状态转移图"></a>第二步 画出DFA状态转移图</h2><p>首先根据上面的表格就立即可以得出状态转移表：</p><table><thead><tr><th>DFA</th><th>a</th><th>b</th></tr></thead><tbody><tr><td>A</td><td>B</td><td>A</td></tr><tr><td>B</td><td>B</td><td>C</td></tr><tr><td>C</td><td>B</td><td>D</td></tr><tr><td>D</td><td>B</td><td>A</td></tr></tbody></table><p>画出状态转移图像：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/ZkHMkK.png" alt="ZkHMkK"></p><p>检查图中没有同一输入的多后继节点则说明满足DFA</p><p><strong>注意：包含原终态的结合都是新终态</strong></p><h2 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h2><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/dxDPjZ.png" alt="dxDPjZ"></p><p>答案：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/Y9gz7Y.png" alt="Y9gz7Y"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/DxAJEk.png" alt="DxAJEk"></p><h1 id="五、Pumping-lemma-泵定理"><a href="#五、Pumping-lemma-泵定理" class="headerlink" title="五、Pumping lemma 泵定理"></a>五、Pumping lemma 泵定理</h1><p>正则语言都需要满足泵定理，泵引理是<a href="https://baike.baidu.com/item/形式语言与自动机理论/8236396" target="_blank" rel="noopener">形式语言与自动机理论</a>中判定一个语言不是<a href="https://baike.baidu.com/item/正则语言/12598706" target="_blank" rel="noopener">正则语言</a>的重要工具</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>For every regular language L, there is a pumping length $P$, such that for any string $S \in L$ and $|S| \ge P$, We can divide $S$ into 3 pieces and write $S = xyz$ with:</p><ol><li><p>$xy^iz \in L$ For every  $i\in {0,1,2,3,…}$</p></li><li><p>$|y| \ge 1$</p></li><li><p>$|xy| \le P$</p></li></ol><p>Note that 1 implies that $xz \in L$</p><p>2 say that y cannot be the empty string $\varepsilon$  (2 说明了y不能是空串)</p><p>condition 3 is not always used</p><p>中文版：</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/vNnbqZ.png" alt="vNnbqZ"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p><font color='#e54d42'>简单的来说，使用的过程就是不断的Pump（重复）其中的若干部分，使得到新的字符串仍满足RL，所以一般使用反证法去反证</font></p></blockquote><h3 id="例1"><a href="#例1" class="headerlink" title="例1:"></a>例1:</h3><p>证明 $0^n1^n \ n\ge0$不是一个RL (regular language)</p><p>证明如下：</p><p>assume that $B = {0^n1^n,n\ge0}$ is regular language            <font color='#39b54a'>(反证法： 假设B是一个RL)</font></p><p>let p be the pumping length, and $S = 0^p 1^p \in B$    <font color='#39b54a'>（设一个pumping 长度为p，则可得到S，其长度刚刚好为p，满足不小于p）</font>            </p><p>then $S = 0^p1^p=xyz$                            <font color='#39b54a'>（根据RL满足的泵定理，将S分割为三个部分）</font></p><p>let $x = 0^{p-k}, y=0^k,z=1^p, k&gt;0$        <font color='#39b54a'>（分别假设每一个部分xyz的值）</font></p><p>so, $xy = 0^p$, it meets the $|xy| = p \le p$        <font color='#39b54a'>（验证第三个条件，满足）</font></p><p>because k &gt; 0, so, it meets the $|y| \ge 1$        <font color='#39b54a'>（验证第二个条件，满足）</font></p><p>but,                                                                 <font color='#39b54a'>（验证第三个条件，不满足，所以不是一个RL）</font></p><p>$xy^1z =0^{p-k}0^k1^p = 0^p1^p \in B, \<br>xy^2z = 0^{p-k}0^{2k}1^p=0^{p+k}1^p \notin B, \<br>xy^3z = 0^{p-k}0^{3k}1^p=0^{p+2k}1^p \notin B, \<br>…$</p><p>The pumping result does not hold,the languge B is not regular</p><h3 id="例2-1"><a href="#例2-1" class="headerlink" title="例2"></a>例2</h3><p>证明$E={0^i1^j \  i&gt;j}$不是RL</p><p>证明如下：</p><p>Assume that $E$ is a regular language with pumping length p</p><p>let $S = xyz = 0^{p+1}1^{p} \in E$</p><p>let $x=0^{p-k} \ , y =0^k  \ ,z=01^p, k &gt; 0$</p><p>so, it meets the $|xy|=p \le p$ and $|y| \ge 1$</p><p>$xy^2z=0^{p-k}0^{2k}01^p=0^{p+k+1}1^p \in E \ xy^3z=0^{p-k}0^{3k}01^p=0^{p+2k+1}1^p \in E \ …$</p><p>so, if $i \ge 0$, it meets $xy^iz \in E$,</p><p>but, if $i=0$, $S=xz=0^{p-k+1}1^p  ,k&gt;1 \notin E$</p><p>so, The pumping result does not hold,the languge E is not regular</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;学习资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/Bubgit/p/10240790.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/Bubgit/p/10240790.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/shulianghan/article/details/111393044&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/shulianghan/article/details/111393044&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/raicho/p/11762837.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/raicho/p/11762837.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/elice_/article/details/80550413&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/elice_/article/details/80550413&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/泵引理/9490334?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://baike.baidu.com/item/泵引理/9490334?fr=aladdin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zxbdsg/article/details/112424714&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/zxbdsg/article/details/112424714&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、正则表达式与状态转移图&quot;&gt;&lt;a href=&quot;#一、正则表达式与状态转移图&quot; class=&quot;headerlink&quot; title=&quot;一、正则表达式与状态转移图&quot;&gt;&lt;/a&gt;一、正则表达式与状态转移图&lt;/h1&gt;&lt;h2 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h2&gt;&lt;h3 id=&quot;正则操作：&quot;&gt;&lt;a href=&quot;#正则操作：&quot; class=&quot;headerlink&quot; title=&quot;正则操作：&quot;&gt;&lt;/a&gt;正则操作：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;$ \cdot $ 表示连接(可省略) &lt;/p&gt;
&lt;p&gt;例： $abc \cdot 123 = abc123$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$\mid$ 表示或&lt;/p&gt;
&lt;p&gt;例： $abc \mid 123 = \begin{cases} abc  \123\end {cases}$ &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$*$ 运算start&lt;/p&gt;
&lt;p&gt;$str^i = \begin{cases} \varepsilon &amp;amp; i=0 \ str^{i-1} \cdot str &amp;amp; i&amp;gt;=1 \end{cases}$  &lt;/p&gt;
&lt;p&gt; 即$str * = \bigcup\limits_{i=0}^\infty str^i$    &lt;/p&gt;
&lt;p&gt;其中$\varepsilon$指空串&lt;/p&gt;
&lt;p&gt;例：${0,1}^* = {\varepsilon} \cup {0,1} \cup {00,01,10,11} …$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="knowledge" scheme="https://xwjahahahaha.github.io/categories/knowledge/"/>
    
    
  </entry>
  
  <entry>
    <title>斯坦福密码学-流密码steam_ciphers</title>
    <link href="https://xwjahahahaha.github.io/2021/06/20/%E7%9F%A5%E8%AF%86%E8%B4%B4/%E5%AF%86%E7%A0%81%E5%AD%A6/%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%AF%86%E7%A0%81%E5%AD%A6/%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%AF%86%E7%A0%81%E5%AD%A6-%E6%B5%81%E5%AF%86%E7%A0%81steam_ciphers/"/>
    <id>https://xwjahahahaha.github.io/2021/06/20/%E7%9F%A5%E8%AF%86%E8%B4%B4/%E5%AF%86%E7%A0%81%E5%AD%A6/%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%AF%86%E7%A0%81%E5%AD%A6/%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%AF%86%E7%A0%81%E5%AD%A6-%E6%B5%81%E5%AF%86%E7%A0%81steam_ciphers/</id>
    <published>2021-06-20T11:25:29.000Z</published>
    <updated>2021-06-20T12:40:26.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、The-One-Time-Pad-OTP-一次性密码本"><a href="#一、The-One-Time-Pad-OTP-一次性密码本" class="headerlink" title="一、The One Time Pad (OTP) - 一次性密码本"></a>一、The One Time Pad (OTP) - 一次性密码本</h1><h1 id="二、Steam-Ciphers-流密码"><a href="#二、Steam-Ciphers-流密码" class="headerlink" title="二、Steam Ciphers - 流密码"></a>二、Steam Ciphers - 流密码</h1><h2 id="2-1-Pseudorandom-Generators-伪随机生成器"><a href="#2-1-Pseudorandom-Generators-伪随机生成器" class="headerlink" title="2.1 Pseudorandom Generators - 伪随机生成器"></a>2.1 Pseudorandom Generators - 伪随机生成器</h2><p>完全安全(Prefect Secrecy)意味着能够<strong>防御唯密文攻击(CT only attack)</strong></p><p>但是要求:   <strong>秘钥长度 &gt;= 明文长度</strong></p><p>为了让流密码实现完全安全, 但是不可能这么长的随机密钥, 所以就产生了 =&gt; <strong>伪随机生成器PRG</strong></p><p>PRG的定义:</p><p>一个函数, $G: {0,1}^s \rightarrow {0,1}^n, n &gt;&gt; s $</p><blockquote><p>从种子空间(随机空间)通过函数G映射到更大的空间, n远大于s, 其中G是一个确定性函数</p><p><font color='#e54d42'>唯一有随机性的是种子空间, 输出结果是“看起来随机”</font></p></blockquote><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/4zPVuv.png" alt="4zPVuv"></p><p>显然, 这样的伪随机数不是完全安全的, 但是<strong>安全可以依赖于一种特殊的PRG</strong></p><h3 id="PRG的预测性讨论"><a href="#PRG的预测性讨论" class="headerlink" title="PRG的预测性讨论"></a>PRG的预测性讨论</h3><p>特殊PRG的要求: 不可预测性</p><h4 id="可预测性"><a href="#可预测性" class="headerlink" title="可预测性"></a>可预测性</h4><p>可预测性指的是: </p><p>$\exists i: G(k)|<em>{1,…,i} \rightarrow G(k)|</em>{i+1,…,n} $</p><blockquote><p>可预测性: 根据生成的G(k)的前缀可以预测剩下的内容(哪怕仅仅只能预测一位)</p></blockquote><p>可预测性定义:</p><p>$\exist ‘eff’ alg \ A \ and \ \exist_ {0\leqq i\leqq {n-1}} s.t.  \  \Pr\limits_{k \xleftarrow{R}K}[A(G(k)|<em>{1,…,i} = G(k)|</em>{i+1}] &gt; 1/2 + \varepsilon$</p><blockquote><p>解释: 存在可预测函数A能够实现, 从G(k)的0~i位预测第i+1位的概率大于二分之一 + 不可忽略的量（后面会详细解释），那么就称G(k)是可预测的 </p></blockquote><p><font color='#e54d42'>一旦G(k)是可预测的，那么就一定是不安全的！</font></p><h4 id="不可预测性"><a href="#不可预测性" class="headerlink" title="不可预测性"></a>不可预测性</h4><p>定义： 对于G(k)所有的位置i没有一个有效函数A以不可容忍的概率预测出i+1的位置的值</p><blockquote><p>理解了可预测性，不可预测其实就是和其相反</p></blockquote><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p><strong>线性同余法（lin cong）的方法</strong>基本都是可预测性的伪随机生成器， 所以都是不安全的</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/53vr15.png" alt="53vr15"></p><p>Kerberos V4 采用了以上的方法所以被攻破了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、The-One-Time-Pad-OTP-一次性密码本&quot;&gt;&lt;a href=&quot;#一、The-One-Time-Pad-OTP-一次性密码本&quot; class=&quot;headerlink&quot; title=&quot;一、The One Time Pad (OTP) - 一次性密码本&quot;</summary>
      
    
    
    
    <category term="knowledge" scheme="https://xwjahahahaha.github.io/categories/knowledge/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指Offer12.矩阵中的路径</title>
    <link href="https://xwjahahahaha.github.io/2021/06/20/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/%E5%89%91%E6%8C%87Offer12-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/"/>
    <id>https://xwjahahahaha.github.io/2021/06/20/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/%E5%89%91%E6%8C%87Offer12-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/</id>
    <published>2021-06-20T03:24:57.000Z</published>
    <updated>2021-06-20T05:40:21.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/" target="_blank" rel="noopener">剑指 Offer 12. 矩阵中的路径</a></p><p>难度中等</p><p>给定一个 <code>m x n</code> 二维字符网格 <code>board</code> 和一个字符串单词 <code>word</code> 。如果 <code>word</code>存在于网格中，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p><a id="more"></a> <p>例如，在下面的 3×4 的矩阵中包含单词 “ABCCED”（单词中的字母已标出）。</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/Qehqko.png" alt="Qehqko"></p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：board &#x3D; [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word &#x3D; &quot;ABCCED&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：board &#x3D; [[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;]], word &#x3D; &quot;abcd&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= board.length &lt;= 200</code></li><li><code>1 &lt;= board[i].length &lt;= 200</code></li><li><code>board</code> 和 <code>word</code> 仅由大小写英文字母组成</li></ul><p><strong>注意：</strong>本题与主站 79 题相同：<a href="https://leetcode-cn.com/problems/word-search/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/word-search/</a></p><h2 id="解题思路及代码"><a href="#解题思路及代码" class="headerlink" title="解题思路及代码"></a>解题思路及代码</h2><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>搜索问题 =&gt; BFS、DFS</p><p>每个步骤多个选择 =&gt; 树状DFS =&gt; 回溯法</p><p>回溯法优化 =&gt; 子问题一致性剪枝 =&gt; 一旦当前位置字母不符, 立即返回false, 不向下递归</p><p>回溯一般模版:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子集一般对应递归树path</span></span><br><span class="line">回溯(子集, 全集):</span><br><span class="line">    <span class="keyword">if</span> 满足条件/结束条件:  <span class="comment">// 下一步做什么,所以会当成结束条件</span></span><br><span class="line">        加入答案</span><br><span class="line">    <span class="keyword">for</span> 元素 in 全集: <span class="comment">// 这一步要做什么, 再过度到下一步</span></span><br><span class="line">        元素加入子集</span><br><span class="line">        回溯(子集, 全集)<span class="comment">// 回溯到上一步需要改回什么</span></span><br><span class="line">        回退操作/元素退出子集</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回溯法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exist</span><span class="params">(board [][]<span class="keyword">byte</span>, word <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    m, n := <span class="built_in">len</span>(board), <span class="built_in">len</span>(board[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">// 已走过的标记</span></span><br><span class="line">    <span class="keyword">var</span> visited [][]<span class="keyword">bool</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>; i&lt;=m; i++ &#123;</span><br><span class="line">        visited = <span class="built_in">append</span>(visited, <span class="built_in">make</span>([]<span class="keyword">bool</span>, n))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> rollback <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">bool</span></span></span><br><span class="line">    rollback = <span class="function"><span class="keyword">func</span><span class="params">(i, j, p <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">        <span class="comment">// 当前位置</span></span><br><span class="line">        <span class="comment">// 结束情况:</span></span><br><span class="line">        <span class="comment">// 1. 当前位置不相同直接返回false, 结束回溯</span></span><br><span class="line">        <span class="keyword">if</span> board[i][j] != word[p] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2, 当p为最后一个直接返回true</span></span><br><span class="line">        <span class="keyword">if</span> p == <span class="built_in">len</span>(word)<span class="number">-1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当前位置标记为访问过</span></span><br><span class="line">        visited[i][j] = <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 下一位置</span></span><br><span class="line">        <span class="comment">// 上</span></span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">0</span> &amp;&amp; !visited[i<span class="number">-1</span>][j] &#123;</span><br><span class="line">            <span class="keyword">if</span> rollback(i<span class="number">-1</span>, j, p+<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// 下</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; m<span class="number">-1</span> &amp;&amp; !visited[i+<span class="number">1</span>][j] &#123;</span><br><span class="line">            <span class="keyword">if</span> rollback(i+<span class="number">1</span>, j, p+<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 左</span></span><br><span class="line">        <span class="keyword">if</span> j &gt; <span class="number">0</span> &amp;&amp; !visited[i][j<span class="number">-1</span>] &#123;</span><br><span class="line">            <span class="keyword">if</span> rollback(i, j<span class="number">-1</span>, p+<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 右</span></span><br><span class="line">        <span class="keyword">if</span> j &lt; n<span class="number">-1</span> &amp;&amp; !visited[i][j+<span class="number">1</span>] &#123;</span><br><span class="line">            <span class="keyword">if</span> rollback(i, j+<span class="number">1</span>, p+<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 上一位置: 回溯</span></span><br><span class="line">        visited[i][j] = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用回溯函数, 寻找合适的入口</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;m; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j:=<span class="number">0</span>; j&lt;n; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> rollback(i, j, <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>设word字符串长度为K, board矩阵长宽分别为m, n</p><p>那么时间复杂度就是$O(3^K<em>M</em>N)$</p><ul><li><p>rollback回溯函数: 每一个字符除去上一步的方向还剩三个方向, 一共就是$3^K$的可能性,</p></li><li><p>外层两个for循环提供M*N的复杂度</p></li></ul><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>这里采用额外空间保护原数组, 所以时间复杂度为$O(M*N)$</p><p>还可采用标记的方法(例如将已经访问的位置字符变为“*”)降低时间复杂度为递归栈的空间K(其最差也为M*N)</p><h2 id="编码注意事项-思路"><a href="#编码注意事项-思路" class="headerlink" title="编码注意事项/思路"></a>编码注意事项/思路</h2><ol><li><p>每个方向中不要直接返回下一步递归的结果, 因为<strong>某一个方向为false 不代表当前整个path都是false, 题意是存在,所以只要有一个方向是true则即继续</strong></p></li><li><p>调用rollback回溯函数与上方同理,全部为false才返回false</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;剑指 Offer 12. 矩阵中的路径&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;难度中等&lt;/p&gt;
&lt;p&gt;给定一个 &lt;code&gt;m x n&lt;/code&gt; 二维字符网格 &lt;code&gt;board&lt;/code&gt; 和一个字符串单词 &lt;code&gt;word&lt;/code&gt; 。如果 &lt;code&gt;word&lt;/code&gt;存在于网格中，返回 &lt;code&gt;true&lt;/code&gt; ；否则，返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="leetcode" scheme="https://xwjahahahaha.github.io/categories/technical/leetcode/"/>
    
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>日记_0191</title>
    <link href="https://xwjahahahaha.github.io/2021/06/20/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-06/%E6%97%A5%E8%AE%B0-0191/"/>
    <id>https://xwjahahahaha.github.io/2021/06/20/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-06/%E6%97%A5%E8%AE%B0-0191/</id>
    <published>2021-06-20T01:58:35.000Z</published>
    <updated>2021-06-21T00:55:13.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>每天</th><th>开发-云容器技术</th><th>项目与框架</th><th>科研-区块链(FL+BC)</th><th>预备事宜</th></tr></thead><tbody><tr><td>1.</td><td><strong>英语单词</strong></td><td>go基础</td><td>SimpleBitcoin</td><td>FL/分布式存储论文一周一篇细读</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>2.</td><td>语法课看完</td><td>go网络编程、Web框架</td><td>联邦学习框架</td><td>写专利</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>3.</td><td><font color='red'>六级</font></td><td>go数据库、ORM、go高级编程</td><td></td><td>机器学习课程</td><td>为<strong>研二实习</strong>做准备</td></tr><tr><td>4.</td><td>Leetcode</td><td>go容器技术docker、k8s</td><td></td><td></td><td></td></tr><tr><td>5.</td><td></td><td>go微服务与任务调度</td><td></td><td></td><td></td></tr><tr><td>6.</td><td></td><td>看源码docker、k8s、Fabric、以太坊、比特币等</td><td></td><td></td><td></td></tr><tr><td>7.</td><td></td><td>Linux、C++</td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li><li><input disabled="" type="checkbox"> Advances_and_Open_Problems_in_Federated_Learning</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input checked="" disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input checked="" disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input checked="" disabled="" type="checkbox"> Proof of Federated Learning: A Novel Energy-recycling Consensus Algorithm</li><li><input checked="" disabled="" type="checkbox"> Scalable and Communication-efficient Decentralized Federated Edge Learning with Multi-blockchain Framework</li><li><input checked="" disabled="" type="checkbox"> DEEP GRADIENT COMPRESSION:REDUCING THE COMMUNICATION BANDWIDTH FOR DISTRIBUTED TRAINING</li><li><input disabled="" type="checkbox"> BlockFLA:Accountable_Federated_Learning_via_Hybrid_Blockchain_Architecture</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li><del>学弟的cosmos隐私保护项目</del></li><li>第一篇论文FL+BC</li><li><del>科技部编程比赛</del></li><li>暑期实习准备(Go, 算法等)</li></ul><ul><li><input checked="" disabled="" type="checkbox"> cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></li><li><input checked="" disabled="" type="checkbox"> 科技部编程比赛项目实现(使用cosmos)</li><li><input checked="" disabled="" type="checkbox"> Go公链实现项目(simple_bitcoin)</li><li><input disabled="" type="checkbox"> 专利一篇(金链积分)</li><li><input disabled="" type="checkbox"> Go网络编程Base</li><li><input disabled="" type="checkbox"> Go网络编程(Echo、Gin)</li><li><input disabled="" type="checkbox"> 第一篇论文初稿(blockchain + FL)</li><li><input disabled="" type="checkbox"> 论文实验(编码实现)</li><li><input disabled="" type="checkbox"> 数据库(mysql, PostgreSQL), ORM(Gorm) 、Go设计模式  </li><li><input disabled="" type="checkbox"> Go设计模式 </li><li><input disabled="" type="checkbox"> docker </li><li><input disabled="" type="checkbox"> 容器编程k8s</li><li><input disabled="" type="checkbox"> 缓存、日志</li><li><input disabled="" type="checkbox"> 微服务(消息队列、任务调度、rpc)</li></ul><ul><li>Go开发走云容器技术</li><li>区块链开发走科研论文、Etherem、Fabric、源码分析、Cosmos使用</li></ul><p><strong>有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input disabled="" type="checkbox"> 英语</li><li><input checked="" disabled="" type="checkbox"> leetcode一题 剑指offer</li><li><input checked="" disabled="" type="checkbox"> 密码学P2 一节</li><li><input checked="" disabled="" type="checkbox"> 专利</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每天&lt;/th&gt;
&lt;th&gt;开发-云容器技术&lt;/th&gt;
&lt;th&gt;项目与框架&lt;/th&gt;
&lt;th&gt;科研-区块链(FL+BC)&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go基础&lt;/td&gt;
&lt;td&gt;SimpleBitcoin&lt;/td&gt;
&lt;td&gt;FL/分布式存储论文一周一篇细读&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;go网络编程、Web框架&lt;/td&gt;
&lt;td&gt;联邦学习框架&lt;/td&gt;
&lt;td&gt;写专利&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;go数据库、ORM、go高级编程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;机器学习课程&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;研二实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;Leetcode&lt;/td&gt;
&lt;td&gt;go容器技术docker、k8s&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;go微服务与任务调度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码docker、k8s、Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux、C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Tendermint-1-基础概念</title>
    <link href="https://xwjahahahaha.github.io/2021/06/19/%E7%9F%A5%E8%AF%86%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%85%AC%E9%93%BE%E9%A1%B9%E7%9B%AE/Tendermint/Tendermint-1-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    <id>https://xwjahahahaha.github.io/2021/06/19/%E7%9F%A5%E8%AF%86%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%85%AC%E9%93%BE%E9%A1%B9%E7%9B%AE/Tendermint/Tendermint-1-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</id>
    <published>2021-06-19T12:44:01.000Z</published>
    <updated>2021-06-19T14:26:25.760Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习材料:</p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg3OTAwMjE1MA==&amp;mid=2247484015&amp;idx=1&amp;sn=88edd9855a7acfbca72b03af1652b347&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=Mzg3OTAwMjE1MA==&amp;mid=2247484015&amp;idx=1&amp;sn=88edd9855a7acfbca72b03af1652b347&amp;scene=21#wechat_redirect</a></p><p><a href="https://zhuanlan.zhihu.com/p/87370262" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/87370262</a></p><p><a href="https://zhuanlan.zhihu.com/p/84962067" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/84962067</a></p><p>官网: <a href="https://tendermint.com" target="_blank" rel="noopener">https://tendermint.com</a></p></blockquote><h1 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h1><p>Tendermint可以看作是跨链明星项目Cosmos的基石, 由Cosmos团队于2014年创建， 是Cosmos跨链技术的核心。</p><p>Tendermint的目标或愿景是提高区块链速度、可拓展性、节省能源 </p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/PMF5hg.png" alt="PMF5hg"></p><a id="more"></a><h1 id="二、优势-特点"><a href="#二、优势-特点" class="headerlink" title="二、优势/特点"></a>二、优势/特点</h1><h2 id="2-1-封装的底层"><a href="#2-1-封装的底层" class="headerlink" title="2.1 封装的底层"></a>2.1 封装的底层</h2><p>将区块链一般性框架“网络-共识-应用“ 中的底下两层即网络与共识（或者说P2P网络层与共识引擎）封装成Tendermint Core， 同时提供ABCI接口与应用交互。</p><ul><li>优势： 高解耦、高适用（支持多语言编写应用）</li></ul><p><img src="http://xwjpics.gumptlu.work/qiniu_picGo/20210204155527.png" alt=""></p><h2 id="2-2-优秀的共识算法"><a href="#2-2-优秀的共识算法" class="headerlink" title="2.2 优秀的共识算法"></a>2.2 优秀的共识算法</h2><p>Tendermint的共识算法采用的是 <strong>PoS + BFT</strong> 的模式, 这里只是简单介绍特点,以后会用单篇详细介绍其共识。</p><p>总体上确定一个状态/区块，要通过一个回合round，每个回合由三个部分组成： </p><p>propose（提议），prevote（预投票）和 precommit（预提交）</p><p><strong>第一个由选举共识实现,  后两个由主链共识实现</strong></p><h3 id="2-2-1-选举共识-PoS"><a href="#2-2-1-选举共识-PoS" class="headerlink" title="2.2.1 选举共识-PoS"></a>2.2.1 选举共识-PoS</h3><p>选举共识对<strong>出块人</strong>投票</p><p>Tendermint的机制是从Validater(候选者)中选择一个出块人Proposer作为出块人</p><p>Tendermint采取非阻塞轮询(round-robin)策略选择Proposer, 其特点是:</p><ul><li>Validater在创世区块中配置</li><li>非阻塞轮询机制核心是为了避免选中的Proposer中断连接,从而共识阻塞</li><li>Proposer的选择概率与Validater的投票权重正相关   =&gt; 可发展为DPoS</li><li>一般不暴露Validater的IP地址</li></ul><h3 id="2-2-2-主链共识-BEF"><a href="#2-2-2-主链共识-BEF" class="headerlink" title="2.2.2 主链共识-BEF"></a>2.2.2 主链共识-BEF</h3><p>主链共识对<strong>块</strong>投票, 采用优化的BFT拜占庭共识协议, 验证者Validater轮流对区块进行投票, 其特点是:</p><ul><li><p>简化了PBFT(实用拜占庭协议), 仅使用两轮投票达成共识</p><ol><li>预投票 pre-vote</li><li>预提交 pre-commit</li></ol></li><li><p>超过2/3的的投票才成功</p></li><li><p>最终一致性, 不会出现分叉</p><ul><li>验证者一旦进行了预投票, 那么就与提议的区块锁定在该round, 避免同一Validater多轮(多区块)投票造成分叉</li></ul></li><li><p>共识容错率: 容忍1/3个作恶节点</p></li></ul><h2 id="2-3-ABCI-Tendermint与区块链应用通信的法则"><a href="#2-3-ABCI-Tendermint与区块链应用通信的法则" class="headerlink" title="2.3 ABCI-Tendermint与区块链应用通信的法则"></a>2.3 ABCI-Tendermint与区块链应用通信的法则</h2><p><code>Application Blockchain Interface</code>  <strong>区块链应用接口</strong>，Tendermint Core使用ABCI与区块链应用联系, 使得编程区块链应用可使用多种语言, 其特点是:</p><ul><li>使用socket协议通信</li><li>ABCI标准包含多种交易类型, 各司其职<ul><li>DeliverTx: 每笔交易都通过其传送</li><li>CheckTx: 仅用于验证交易</li><li>CommitTX: 用于应用状态的加密保证</li></ul></li></ul><h1 id="三、应用与生态"><a href="#三、应用与生态" class="headerlink" title="三、应用与生态"></a>三、应用与生态</h1><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/9YYA59.png" alt="9YYA59"></p><p>本文简略的介绍Tendermint, 后面会对于核心的共识、交易流程、使用等进行一步细节的描述</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;学习材料:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3OTAwMjE1MA==&amp;amp;mid=2247484015&amp;amp;idx=1&amp;amp;sn=88edd9855a7acfbca72b03af1652b347&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s?__biz=Mzg3OTAwMjE1MA==&amp;amp;mid=2247484015&amp;amp;idx=1&amp;amp;sn=88edd9855a7acfbca72b03af1652b347&amp;amp;scene=21#wechat_redirect&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/87370262&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/87370262&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/84962067&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/84962067&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官网: &lt;a href=&quot;https://tendermint.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://tendermint.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、基本介绍&quot;&gt;&lt;a href=&quot;#一、基本介绍&quot; class=&quot;headerlink&quot; title=&quot;一、基本介绍&quot;&gt;&lt;/a&gt;一、基本介绍&lt;/h1&gt;&lt;p&gt;Tendermint可以看作是跨链明星项目Cosmos的基石, 由Cosmos团队于2014年创建， 是Cosmos跨链技术的核心。&lt;/p&gt;
&lt;p&gt;Tendermint的目标或愿景是提高区块链速度、可拓展性、节省能源 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://xwjpics.gumptlu.work/qinniu_uPic/PMF5hg.png&quot; alt=&quot;PMF5hg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="knowledge" scheme="https://xwjahahahaha.github.io/categories/knowledge/"/>
    
    
    <category term="tendermint" scheme="https://xwjahahahaha.github.io/tags/tendermint/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer11.旋转数组的最小数字</title>
    <link href="https://xwjahahahaha.github.io/2021/06/19/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/%E5%89%91%E6%8C%87Offer11-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/"/>
    <id>https://xwjahahahaha.github.io/2021/06/19/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/%E5%89%91%E6%8C%87Offer11-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</id>
    <published>2021-06-19T06:45:41.000Z</published>
    <updated>2021-06-19T06:56:30.255Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/" target="_blank" rel="noopener">剑指 Offer 11. 旋转数组的最小数字</a></p><p>难度简单335</p><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 <code>[3,4,5,1,2]</code> 为 <code>[1,2,3,4,5]</code> 的一个旋转，该数组的最小值为1。 </p><a id="more"></a><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[3,4,5,1,2]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[2,2,2,0,1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p>注意：本题与主站 154 题相同：<a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/</a></p><h2 id="解题思路及代码"><a href="#解题思路及代码" class="headerlink" title="解题思路及代码"></a>解题思路及代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历一遍即可找到答案</span></span><br><span class="line"><span class="comment">// 时间复杂度O(N), 不够好</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minArray</span><span class="params">(numbers []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>; i&lt;<span class="built_in">len</span>(numbers); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> numbers[i] &lt; numbers[i<span class="number">-1</span>] &#123;</span><br><span class="line">            <span class="keyword">return</span> numbers[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numbers[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分查找</span></span><br><span class="line"><span class="comment">// 按照题意: 1. 可以将数组分为两段数组, 前面一段升序, 后面一段升序, 前面一段元素都大于后面一段,中间的边界就是最小值的位置</span></span><br><span class="line"><span class="comment">// 每次取中间值, 如果mid与left或者right构成升序,那么就可以丢弃一段, 整个过程就是left不断成为前段升序的最后一个索引</span></span><br><span class="line"><span class="comment">// right就是后段的最后一个索引, 直到left + 1 == right 就找到了分界, 结束二分</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minArray</span><span class="params">(numbers []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(numbers)</span><br><span class="line">    l, r := <span class="number">0</span>, n<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> numbers[l] &gt;= numbers[r] &#123;  <span class="comment">// 等号也取, 相等时最小数字也有可能出现在中间, 例[1,0,1,1,1]</span></span><br><span class="line">        mid := (l + r) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> l + <span class="number">1</span> == r &#123;</span><br><span class="line">            <span class="keyword">return</span> numbers[r]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 重点: 可能会出现num[left] == num[right] == num[mid]的情况, 此时无法判断中点属于哪个子有序序列</span></span><br><span class="line">        <span class="comment">// 但是结果一定在里面, 所以需要用顺序遍历</span></span><br><span class="line">        <span class="keyword">if</span> numbers[l] == numbers[r] &amp;&amp; numbers[r] == numbers[mid] &#123;</span><br><span class="line">            <span class="keyword">for</span> i:=l; i&lt;r; i++ &#123;</span><br><span class="line">                <span class="keyword">if</span> numbers[i] &gt; numbers[i+<span class="number">1</span>] &#123;</span><br><span class="line">                    <span class="keyword">return</span> numbers[i+<span class="number">1</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果没找到, 那么就默认返回第一个, 因为有可能总长度就是1, 例[1]</span></span><br><span class="line">            <span class="keyword">return</span> numbers[l]</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> numbers[l] &lt;= numbers[mid] &#123;</span><br><span class="line">            l = mid</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> numbers[mid] &lt;= numbers[r]&#123;</span><br><span class="line">            r = mid</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numbers[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;剑指 Offer 11. 旋转数组的最小数字&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;难度简单335&lt;/p&gt;
&lt;p&gt;把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 &lt;code&gt;[3,4,5,1,2]&lt;/code&gt; 为 &lt;code&gt;[1,2,3,4,5]&lt;/code&gt; 的一个旋转，该数组的最小值为1。 &lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="leetcode" scheme="https://xwjahahahaha.github.io/categories/technical/leetcode/"/>
    
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>日记_0190</title>
    <link href="https://xwjahahahaha.github.io/2021/06/19/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-06/%E6%97%A5%E8%AE%B0-0190/"/>
    <id>https://xwjahahahaha.github.io/2021/06/19/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-06/%E6%97%A5%E8%AE%B0-0190/</id>
    <published>2021-06-19T02:17:52.000Z</published>
    <updated>2021-06-19T14:46:24.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>每天</th><th>开发-云容器技术</th><th>项目与框架</th><th>科研-区块链(FL+BC)</th><th>预备事宜</th></tr></thead><tbody><tr><td>1.</td><td><strong>英语单词</strong></td><td>go基础</td><td>SimpleBitcoin</td><td>FL/分布式存储论文一周一篇细读</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>2.</td><td>语法课看完</td><td>go网络编程、Web框架</td><td>联邦学习框架</td><td>写专利</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>3.</td><td><font color='red'>六级</font></td><td>go数据库、ORM、go高级编程</td><td></td><td>机器学习课程</td><td>为<strong>研二实习</strong>做准备</td></tr><tr><td>4.</td><td>Leetcode</td><td>go容器技术docker、k8s</td><td></td><td></td><td></td></tr><tr><td>5.</td><td></td><td>go微服务与任务调度</td><td></td><td></td><td></td></tr><tr><td>6.</td><td></td><td>看源码docker、k8s、Fabric、以太坊、比特币等</td><td></td><td></td><td></td></tr><tr><td>7.</td><td></td><td>Linux、C++</td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li><li><input disabled="" type="checkbox"> Advances_and_Open_Problems_in_Federated_Learning</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input checked="" disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input checked="" disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input checked="" disabled="" type="checkbox"> Proof of Federated Learning: A Novel Energy-recycling Consensus Algorithm</li><li><input checked="" disabled="" type="checkbox"> Scalable and Communication-efficient Decentralized Federated Edge Learning with Multi-blockchain Framework</li><li><input checked="" disabled="" type="checkbox"> DEEP GRADIENT COMPRESSION:REDUCING THE COMMUNICATION BANDWIDTH FOR DISTRIBUTED TRAINING</li><li><input disabled="" type="checkbox"> BlockFLA:Accountable_Federated_Learning_via_Hybrid_Blockchain_Architecture</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li><del>学弟的cosmos隐私保护项目</del></li><li>第一篇论文FL+BC</li><li><del>科技部编程比赛</del></li><li>暑期实习准备(Go, 算法等)</li></ul><ul><li><input checked="" disabled="" type="checkbox"> cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></li><li><input checked="" disabled="" type="checkbox"> 科技部编程比赛项目实现(使用cosmos)</li><li><input checked="" disabled="" type="checkbox"> Go公链实现项目(simple_bitcoin)</li><li><input disabled="" type="checkbox"> 专利一篇(金链积分)</li><li><input disabled="" type="checkbox"> Go网络编程Base</li><li><input disabled="" type="checkbox"> Go网络编程(base、Echo、Gin)</li><li><input disabled="" type="checkbox"> 第一篇论文初稿(blockchain + FL)</li><li><input disabled="" type="checkbox"> 论文实验(编码实现)</li><li><input disabled="" type="checkbox"> 数据库(mysql, PostgreSQL), ORM(Gorm) 、Go设计模式  </li><li><input disabled="" type="checkbox"> Go设计模式 </li><li><input disabled="" type="checkbox"> docker </li><li><input disabled="" type="checkbox"> 容器编程k8s</li><li><input disabled="" type="checkbox"> 缓存、日志</li><li><input disabled="" type="checkbox"> 微服务(消息队列、任务调度、rpc)</li></ul><ul><li>Go开发走云容器技术</li><li>区块链开发走科研论文、Etherem、Fabric、源码分析、Cosmos使用</li></ul><p><strong>有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input disabled="" type="checkbox"> 英语</li><li><input checked="" disabled="" type="checkbox"> leetcode一题 剑指offer</li><li><input checked="" disabled="" type="checkbox"> 专利</li><li><input checked="" disabled="" type="checkbox"> Tendermint</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每天&lt;/th&gt;
&lt;th&gt;开发-云容器技术&lt;/th&gt;
&lt;th&gt;项目与框架&lt;/th&gt;
&lt;th&gt;科研-区块链(FL+BC)&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go基础&lt;/td&gt;
&lt;td&gt;SimpleBitcoin&lt;/td&gt;
&lt;td&gt;FL/分布式存储论文一周一篇细读&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;go网络编程、Web框架&lt;/td&gt;
&lt;td&gt;联邦学习框架&lt;/td&gt;
&lt;td&gt;写专利&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;go数据库、ORM、go高级编程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;机器学习课程&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;研二实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;Leetcode&lt;/td&gt;
&lt;td&gt;go容器技术docker、k8s&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;go微服务与任务调度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码docker、k8s、Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux、C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>日记_0189</title>
    <link href="https://xwjahahahaha.github.io/2021/06/18/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-06/%E6%97%A5%E8%AE%B0-0189/"/>
    <id>https://xwjahahahaha.github.io/2021/06/18/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-06/%E6%97%A5%E8%AE%B0-0189/</id>
    <published>2021-06-18T05:22:31.000Z</published>
    <updated>2021-06-19T02:17:46.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>每天</th><th>开发-云容器技术</th><th>项目与框架</th><th>科研-区块链(FL+BC)</th><th>预备事宜</th></tr></thead><tbody><tr><td>1.</td><td><strong>英语单词</strong></td><td>go基础</td><td>SimpleBitcoin</td><td>FL/分布式存储论文一周一篇细读</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>2.</td><td>语法课看完</td><td>go网络编程、Web框架</td><td>联邦学习框架</td><td>写专利</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>3.</td><td><font color='red'>六级</font></td><td>go数据库、ORM、go高级编程</td><td></td><td>机器学习课程</td><td>为<strong>研二实习</strong>做准备</td></tr><tr><td>4.</td><td>Leetcode</td><td>go容器技术docker、k8s</td><td></td><td></td><td></td></tr><tr><td>5.</td><td></td><td>go微服务与任务调度</td><td></td><td></td><td></td></tr><tr><td>6.</td><td></td><td>看源码docker、k8s、Fabric、以太坊、比特币等</td><td></td><td></td><td></td></tr><tr><td>7.</td><td></td><td>Linux、C++</td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li><li><input disabled="" type="checkbox"> Advances_and_Open_Problems_in_Federated_Learning</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input checked="" disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input checked="" disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input checked="" disabled="" type="checkbox"> Proof of Federated Learning: A Novel Energy-recycling Consensus Algorithm</li><li><input checked="" disabled="" type="checkbox"> Scalable and Communication-efficient Decentralized Federated Edge Learning with Multi-blockchain Framework</li><li><input checked="" disabled="" type="checkbox"> DEEP GRADIENT COMPRESSION:REDUCING THE COMMUNICATION BANDWIDTH FOR DISTRIBUTED TRAINING</li><li><input disabled="" type="checkbox"> BlockFLA:Accountable_Federated_Learning_via_Hybrid_Blockchain_Architecture</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li><del>学弟的cosmos隐私保护项目</del></li><li>第一篇论文FL+BC</li><li><del>科技部编程比赛</del></li><li>暑期实习准备(Go, 算法等)</li></ul><ul><li><input checked="" disabled="" type="checkbox"> cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></li><li><input checked="" disabled="" type="checkbox"> 科技部编程比赛项目实现(使用cosmos)</li><li><input checked="" disabled="" type="checkbox"> Go公链实现项目(simple_bitcoin)</li><li><input disabled="" type="checkbox"> 专利一篇(金链积分)</li><li><input disabled="" type="checkbox"> Go网络编程Base</li><li><input disabled="" type="checkbox"> Go网络编程(base、Echo、Gin)</li><li><input disabled="" type="checkbox"> 第一篇论文初稿(blockchain + FL)</li><li><input disabled="" type="checkbox"> 论文实验(编码实现)</li><li><input disabled="" type="checkbox"> 数据库(mysql, PostgreSQL), ORM(Gorm) 、Go设计模式  </li><li><input disabled="" type="checkbox"> Go设计模式 </li><li><input disabled="" type="checkbox"> docker </li><li><input disabled="" type="checkbox"> 容器编程k8s</li><li><input disabled="" type="checkbox"> 缓存、日志</li><li><input disabled="" type="checkbox"> 微服务(消息队列、任务调度、rpc)</li></ul><ul><li>Go开发走云容器技术</li><li>区块链开发走科研论文、Etherem、Fabric、源码分析、Cosmos使用</li></ul><p><strong>有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> 英语职场文化考试</li><li><input disabled="" type="checkbox"> leetcode一题 剑指offer</li><li><input checked="" disabled="" type="checkbox"> 专利部分</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每天&lt;/th&gt;
&lt;th&gt;开发-云容器技术&lt;/th&gt;
&lt;th&gt;项目与框架&lt;/th&gt;
&lt;th&gt;科研-区块链(FL+BC)&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go基础&lt;/td&gt;
&lt;td&gt;SimpleBitcoin&lt;/td&gt;
&lt;td&gt;FL/分布式存储论文一周一篇细读&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;go网络编程、Web框架&lt;/td&gt;
&lt;td&gt;联邦学习框架&lt;/td&gt;
&lt;td&gt;写专利&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;go数据库、ORM、go高级编程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;机器学习课程&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;研二实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;Leetcode&lt;/td&gt;
&lt;td&gt;go容器技术docker、k8s&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;go微服务与任务调度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码docker、k8s、Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux、C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
</feed>
