<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知识与头发不可兼得</title>
  
  <subtitle>文杰的博客</subtitle>
  <link href="https://xwjahahahaha.github.io/atom.xml" rel="self"/>
  
  <link href="https://xwjahahahaha.github.io/"/>
  <updated>2021-05-31T14:12:22.244Z</updated>
  <id>https://xwjahahahaha.github.io/</id>
  
  <author>
    <name>DDDemons hide</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Uniswap合约的学习-1-UNI_token</title>
    <link href="https://xwjahahahaha.github.io/2021/05/31/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Ethereum/solidity%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/%E5%90%88%E7%BA%A6/Uniswap/Uniswap%E5%90%88%E7%BA%A6%E7%9A%84%E5%AD%A6%E4%B9%A0-1-UNI-token/"/>
    <id>https://xwjahahahaha.github.io/2021/05/31/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Ethereum/solidity%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/%E5%90%88%E7%BA%A6/Uniswap/Uniswap%E5%90%88%E7%BA%A6%E7%9A%84%E5%AD%A6%E4%B9%A0-1-UNI-token/</id>
    <published>2021-05-31T14:11:04.000Z</published>
    <updated>2021-05-31T14:12:22.244Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习资源:</p><ul><li><a href="https://blog.csdn.net/weixin_39430411/article/details/109275050" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39430411/article/details/109275050</a></li><li></li></ul></blockquote><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;学习资源:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_39430411/article/details/109275050&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/weixin_39430411/article/details/109275050&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="solidity" scheme="https://xwjahahahaha.github.io/categories/technical/solidity/"/>
    
    
    <category term="solidity" scheme="https://xwjahahahaha.github.io/tags/solidity/"/>
    
  </entry>
  
  <entry>
    <title>日记_0179</title>
    <link href="https://xwjahahahaha.github.io/2021/05/31/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-05/%E6%97%A5%E8%AE%B0-0179/"/>
    <id>https://xwjahahahaha.github.io/2021/05/31/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-05/%E6%97%A5%E8%AE%B0-0179/</id>
    <published>2021-05-31T01:52:09.000Z</published>
    <updated>2021-05-31T14:28:05.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>每天</th><th>开发-云容器技术</th><th>项目与框架</th><th>科研-区块链(FL+BC)</th><th>预备事宜</th></tr></thead><tbody><tr><td>1.</td><td><strong>英语单词</strong></td><td>go基础</td><td>SimpleBitcoin</td><td>FL/分布式存储论文一周一篇细读</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>2.</td><td>语法课看完</td><td>go网络编程、Web框架</td><td>联邦学习框架</td><td>写专利</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>3.</td><td><font color='red'>六级</font></td><td>go数据库、ORM、go高级编程</td><td></td><td>机器学习课程</td><td>为<strong>研二实习</strong>做准备</td></tr><tr><td>4.</td><td>Leetcode</td><td>go容器技术docker、k8s</td><td></td><td></td><td></td></tr><tr><td>5.</td><td></td><td>go微服务与任务调度</td><td></td><td></td><td></td></tr><tr><td>6.</td><td></td><td>看源码docker、k8s、Fabric、以太坊、比特币等</td><td></td><td></td><td></td></tr><tr><td>7.</td><td></td><td>Linux、C++</td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li><li><input disabled="" type="checkbox"> Advances_and_Open_Problems_in_Federated_Learning</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input checked="" disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input checked="" disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input checked="" disabled="" type="checkbox"> Proof of Federated Learning: A Novel Energy-recycling Consensus Algorithm</li><li><input checked="" disabled="" type="checkbox"> Scalable and Communication-efficient Decentralized Federated Edge Learning with Multi-blockchain Framework</li><li><input checked="" disabled="" type="checkbox"> DEEP GRADIENT COMPRESSION:REDUCING THE COMMUNICATION BANDWIDTH FOR DISTRIBUTED TRAINING</li><li><input disabled="" type="checkbox"> BlockFLA:Accountable_Federated_Learning_via_Hybrid_Blockchain_Architecture</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li><del>学弟的cosmos隐私保护项目</del></li><li>第一篇论文FL+BC</li><li><del>科技部编程比赛</del></li><li>暑期实习准备(Go, 算法等)</li></ul><ul><li><input checked="" disabled="" type="checkbox"> <p>cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></p></li><li><input checked="" disabled="" type="checkbox"> <p>科技部编程比赛项目实现(使用cosmos)</p></li><li><input checked="" disabled="" type="checkbox"> <p>Go公链实现项目(simple_bitcoin)</p></li><li><input disabled="" type="checkbox"> <p>专利一篇</p></li><li><input disabled="" type="checkbox"> <p>Go网络编程Base</p></li><li><input disabled="" type="checkbox"> <p>Go网络编程(base、Echo、Gin)、 专利2篇  </p></li><li><input disabled="" type="checkbox"> <p>第一篇论文初稿与老师讨论</p></li><li><input disabled="" type="checkbox"> <p>论文实验(编码)、数据库(mysql, PostgreSQL), ORM(Gorm) 、Go设计模式  </p></li><li><input disabled="" type="checkbox"> <p>Go设计模式  </p></li><li><input disabled="" type="checkbox"> <p>docker、k8s</p></li><li><input disabled="" type="checkbox"> <p>缓存、日志</p></li><li><input disabled="" type="checkbox"> <p>微服务(消息队列、任务调度、rpc)</p></li></ul><ul><li>Go开发走云容器技术</li><li>区块链开发走科研论文、Etherem、Fabric、源码分析、Cosmos使用</li></ul><p><strong>有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> 英语 100 词 + 2019一作文</li><li><input disabled="" type="checkbox"> leetcode一题 剑指offer</li><li><input checked="" disabled="" type="checkbox"> kubernetes p32</li><li><input checked="" disabled="" type="checkbox"> uniswap智能合约</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每天&lt;/th&gt;
&lt;th&gt;开发-云容器技术&lt;/th&gt;
&lt;th&gt;项目与框架&lt;/th&gt;
&lt;th&gt;科研-区块链(FL+BC)&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go基础&lt;/td&gt;
&lt;td&gt;SimpleBitcoin&lt;/td&gt;
&lt;td&gt;FL/分布式存储论文一周一篇细读&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;go网络编程、Web框架&lt;/td&gt;
&lt;td&gt;联邦学习框架&lt;/td&gt;
&lt;td&gt;写专利&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;go数据库、ORM、go高级编程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;机器学习课程&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;研二实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;Leetcode&lt;/td&gt;
&lt;td&gt;go容器技术docker、k8s&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;go微服务与任务调度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码docker、k8s、Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux、C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes-3-kubernetes核心技术</title>
    <link href="https://xwjahahahaha.github.io/2021/05/30/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/Kubernetes/kubernetes-3-kubernetes%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    <id>https://xwjahahahaha.github.io/2021/05/30/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/Kubernetes/kubernetes-3-kubernetes%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/</id>
    <published>2021-05-30T02:00:16.000Z</published>
    <updated>2021-05-31T08:20:17.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三、核心技术"><a href="#三、核心技术" class="headerlink" title="三、核心技术"></a>三、核心技术</h1><h2 id="3-1-Kubectl命令行工具和Yaml文件"><a href="#3-1-Kubectl命令行工具和Yaml文件" class="headerlink" title="3.1 Kubectl命令行工具和Yaml文件"></a>3.1 Kubectl命令行工具和Yaml文件</h2><h3 id="1-Kubectl"><a href="#1-Kubectl" class="headerlink" title="1.Kubectl"></a>1.Kubectl</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 基本格式</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl [<span class="built_in">command</span>] [TYPE] [NAME] [flags]</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><p>基础命令</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/1GWEYg.png" alt="1GWEYg"></p></li><li><p>部署和集群管理命令</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/Eqjku5.png" alt="Eqjku5"></p></li><li><p>故障和调试命令</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/XV5gsc.png" alt="XV5gsc"></p></li><li><p>其他命令</p></li></ul><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/Dlc8Gd.png" alt="Dlc8Gd"></p><h3 id="2-Yaml配置"><a href="#2-Yaml配置" class="headerlink" title="2.Yaml配置"></a>2.Yaml配置</h3><ul><li><p>生成配置文件模版:</p><p>-o 表示生成yaml类型文件,–dry-run表示尝试运行,而不会真的运行</p><p><code>kubectl create deployment web --image=nginx -o yaml --dry-run &gt; my.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">strategy:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">web</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">resources:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">status:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>导出已经部署项目配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deploy nginx -o=yaml --export &gt; my2.yaml</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-2-核心概念-Pod"><a href="#3-2-核心概念-Pod" class="headerlink" title="3.2 核心概念-Pod"></a>3.2 核心概念-Pod</h2><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/lExlbH.png" alt="lExlbH"></p><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><blockquote><p>Pod 是 k8s 系统中可以创建和管理的最小单元，是资源对象模型中由用户创建或部署的最 小资源对象模型，也是在 k8s 上运行容器化应用的资源对象，其他的资源对象都是用来支 撑或者扩展 Pod 对象功能的，比如控制器对象是用来管控 Pod 对象的，Service 或者 Ingress 资源对象是用来暴露 Pod 引用对象的，PersistentVolume 资源对象是用来为 Pod 提供存储等等，k8s 不会直接处理容器，而是 Pod，Pod 是由一个或多个 container 组成</p><p>Pod 是 Kubernetes 的最重要概念，<strong>每一个 Pod 都有一个特殊的被称为”根容器“的 Pause 容器</strong>。Pause 容器对应的镜像属于 Kubernetes 平台的一部分，<strong>除了 Pause 容器，每个 Pod 还包含一个或多个紧密相关的用户业务容器</strong></p></blockquote><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/rKgsfD.png" alt="rKgsfD"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/iPQdvS.png" alt="iPQdvS"></p><ul><li><p>Pod是k8s中部署的<strong>最小单元</strong></p></li><li><p>k8s不会直接处理容器而是处理Pod, Pod是由一个或者多个容器container组成</p></li><li><p>一个Pod中的容器<strong>网络共享</strong></p></li><li><p>Pod是短暂存在的</p></li></ul><blockquote><p><font color='#e54d42'><strong>为什么用Pod管理而不用容器?</strong></font></p><ul><li>创建容器使用docker,但是一个docker对应一个容器,一个容器一般为单进程,所以一般运行一个应用程序</li><li>Pod是多个容器,一个容器运行一个程序, Pod采用多进程的设计, 更加方便管理</li><li>Pod的存在为了亲密型应用<ul><li>两个应用之间进行交互</li><li>网络之间调用</li><li>两个应用之间频繁的调用</li></ul></li></ul></blockquote><h3 id="2-实现机制"><a href="#2-实现机制" class="headerlink" title="2. 实现机制"></a>2. 实现机制</h3><h4 id="共享网络"><a href="#共享网络" class="headerlink" title="共享网络"></a>共享网络</h4><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/NFwIBG.png" alt="NFwIBG"></p><blockquote><p>通过Pause/Info容器将所有的其他业务容器加入到其中,从而实现共享网络</p></blockquote><h4 id="共享存储"><a href="#共享存储" class="headerlink" title="共享存储"></a>共享存储</h4><blockquote><p>数据卷机制, 防止单容器宕机造成重要数据的丢失,所以容器数据会映射到主机持久化存储, Pod中所有的容器共享存储</p></blockquote><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/je6okO.png" alt="je6okO"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/B7CZxR.png" alt="B7CZxR"></p><h3 id="3-配置策略"><a href="#3-配置策略" class="headerlink" title="3. 配置策略"></a>3. 配置策略</h3><h4 id="镜像拉取策略"><a href="#镜像拉取策略" class="headerlink" title="镜像拉取策略"></a>镜像拉取策略</h4><p>拉取的三种配置:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/4htPPj.png" alt="4htPPj"></p><h4 id="Pod资源限制"><a href="#Pod资源限制" class="headerlink" title="Pod资源限制"></a>Pod资源限制</h4><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/BquhOZ.png" alt="BquhOZ"></p><h4 id="重启机制"><a href="#重启机制" class="headerlink" title="重启机制"></a>重启机制</h4><p> <img src="http://xwjpics.gumptlu.work/qinniu_uPic/BjWCUZ.png" alt="BjWCUZ"></p><h4 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h4><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/DoomGO.png" alt="DoomGO"></p><h3 id="4-调度分配"><a href="#4-调度分配" class="headerlink" title="4.调度分配"></a>4.调度分配</h3><p>使用<code>kubectl get pods -o wide</code>可以获取到容器具体运行分配的节点位置:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/TQZ1EL.png" alt="TQZ1EL"></p><p>那么Pod创建的流程是什么,怎样分配容器的部署的呢?</p><h4 id="创建流程"><a href="#创建流程" class="headerlink" title="创建流程"></a>创建流程</h4><p>用apiserver作为统一的管理, 使用etcd作为存储</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/WLDf57.png" alt="WLDf57"></p><h4 id="调度影响"><a href="#调度影响" class="headerlink" title="调度影响"></a>调度影响</h4><h5 id="资源限制"><a href="#资源限制" class="headerlink" title="资源限制"></a>资源限制</h5><blockquote><p>对于Pod配置的需求,选择符合要求的节点进行分配</p></blockquote><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/WirCP8.png" alt="WirCP8"></p><h5 id="节点选择器"><a href="#节点选择器" class="headerlink" title="节点选择器"></a>节点选择器</h5><blockquote><p>对当前所有的节点进行标签化处理,然后通过标签选择节点</p></blockquote><ul><li><p>给节点打标签</p><p><code>kubectl label node node1 env_role=dev</code></p><p>查看节点标签: <code>kubectl get nodes cosmosibc01 --show-labels</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/97Jo16.png" alt="97Jo16"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/h5juFf.png" alt="h5juFf"></p></li><li><p>在yaml文件中配置节点选择器, 指定环境选择标签节点</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/tmmQeV.png" alt="tmmQeV"></p></li></ul><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/EUr32s.png" alt="EUr32s"></p><h5 id="节点亲和性"><a href="#节点亲和性" class="headerlink" title="节点亲和性"></a>节点亲和性</h5><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/3Wy2ri.png" alt="3Wy2ri"></p><p>NotIn和DoesNotExists可以用于反亲和性</p><h5 id="污点以及污点容忍"><a href="#污点以及污点容忍" class="headerlink" title="污点以及污点容忍"></a>污点以及污点容忍</h5><blockquote><ul><li><strong>节点亲和性的角度是从Pod, 在Pod配置文件中实现配置</strong></li><li><strong>污点则是直接从节点本身的角度, 对节点进行配置</strong></li></ul></blockquote><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/7DSInh.png" alt="7DSInh"></p><ul><li><p>查看节点污点情况: <code>kubectl describe node [node] | grep Taints</code></p></li><li><p>节点添加污点: <code>kubectl taint node [node] key=value:污点值</code></p></li><li><p>删除节点污点: <code>kubectl taint node [node] key:污点值-</code>   (注意最后有一个横杠)</p></li></ul><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/eNyKwi.png" alt="eNyKwi"></p><h2 id="3-3-核心概念-Controller"><a href="#3-3-核心概念-Controller" class="headerlink" title="3.3 核心概念-Controller"></a>3.3 核心概念-Controller</h2><h3 id="1-基本概念-1"><a href="#1-基本概念-1" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p><strong>Controller是在集群中管理和运行容器的对象</strong></p><p>Pod与Controller之间的关系:</p><ul><li><p>建立关系方式: <strong>通过label标签建立关系</strong></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/rdtIlF.png" alt="rdtIlF"></p></li><li><p>Pod通过Controller实现应用的运维: 例如伸缩、滚动升级等</p></li></ul><h3 id="2-Deployment控制器"><a href="#2-Deployment控制器" class="headerlink" title="2. Deployment控制器"></a>2. Deployment控制器</h3><p>Deployment 是 Kubenetes v1.2 引入的新概念，引入的目的是为了更好的<strong>解决Pod的编排问题</strong>，Deployment 内部使用了 Replica Set 来实现.</p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>部署无状态的应用</li><li>管理Pod和ReplicaSet</li><li>部署,滚动升级等功能</li><li><strong>一般应用于Web服务、微服务</strong></li></ul><h4 id="部署应用-yaml"><a href="#部署应用-yaml" class="headerlink" title="部署应用(yaml)"></a>部署应用(yaml)</h4><ul><li><p>导出yaml文件,并修改</p><p>通过cli部署命令将yaml文件导出:</p><p> <code>kubectl create deployment [应用名] --image=[镜像名] --dry-run -o yaml &gt; xxx.yaml</code></p><p>(第三个参数表示选择Deployment控制器,  —dry-run表示尝试运行)</p><p>下面以nginx镜像创建的web应用为例:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># web.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span>  </span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">labels:</span><span class="comment"># label的应用名与selector相配对</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">spec:</span>                                                                                                                  </span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span>  </span><br><span class="line">  <span class="attr">selector:</span>   <span class="comment"># label的应用名与selector相配对 </span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">strategy:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">web</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">resources:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">status:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>通过配置文件运行:</p><p><code>kubectl apply -f web.yaml</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/W10nPQ.png" alt=""></p></li><li><p>对外发布(暴露对外端口号)</p><p>生成yaml文件</p><p><code>kubectl expose deployment web --port=80 --type=NodePort --target-port=80 --name=web1 -o yaml &gt; web-expose.yaml</code></p><blockquote><ul><li><p>port是服务的服务端口</p></li><li><p>target-port是容器中提供服务的端口</p></li><li><p>type是服务的类型, 有如下类型: (默认第一种)</p><p>ClusterIP, NodePort, LoadBalancer, or ExternalName</p></li></ul></blockquote><p>应用:</p><p><code>kubectl apply -f web-expose.yaml</code></p><p>查看:</p><p><code>kubectl get pods,svc</code></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;三、核心技术&quot;&gt;&lt;a href=&quot;#三、核心技术&quot; class=&quot;headerlink&quot; title=&quot;三、核心技术&quot;&gt;&lt;/a&gt;三、核心技术&lt;/h1&gt;&lt;h2 id=&quot;3-1-Kubectl命令行工具和Yaml文件&quot;&gt;&lt;a href=&quot;#3-1-Kubectl命令行工具和Yaml文件&quot; class=&quot;headerlink&quot; title=&quot;3.1 Kubectl命令行工具和Yaml文件&quot;&gt;&lt;/a&gt;3.1 Kubectl命令行工具和Yaml文件&lt;/h2&gt;&lt;h3 id=&quot;1-Kubectl&quot;&gt;&lt;a href=&quot;#1-Kubectl&quot; class=&quot;headerlink&quot; title=&quot;1.Kubectl&quot;&gt;&lt;/a&gt;1.Kubectl&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 基本格式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; kubectl [&lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt;] [TYPE] [NAME] [flags]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="kubernetes" scheme="https://xwjahahahaha.github.io/categories/technical/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://xwjahahahaha.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>日记_0178</title>
    <link href="https://xwjahahahaha.github.io/2021/05/29/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-05/%E6%97%A5%E8%AE%B0-0178/"/>
    <id>https://xwjahahahaha.github.io/2021/05/29/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-05/%E6%97%A5%E8%AE%B0-0178/</id>
    <published>2021-05-29T03:13:42.000Z</published>
    <updated>2021-05-30T01:51:29.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>每天</th><th>开发-云容器技术</th><th>项目与框架</th><th>科研-区块链(FL+BC)</th><th>预备事宜</th></tr></thead><tbody><tr><td>1.</td><td><strong>英语单词</strong></td><td>go基础</td><td>SimpleBitcoin</td><td>FL/分布式存储论文一周一篇细读</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>2.</td><td>语法课看完</td><td>go网络编程、Web框架</td><td>联邦学习框架</td><td>写专利</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>3.</td><td><font color='red'>六级</font></td><td>go数据库、ORM、go高级编程</td><td></td><td>机器学习课程</td><td>为<strong>研二实习</strong>做准备</td></tr><tr><td>4.</td><td>Leetcode</td><td>go容器技术docker、k8s</td><td></td><td></td><td></td></tr><tr><td>5.</td><td></td><td>go微服务与任务调度</td><td></td><td></td><td></td></tr><tr><td>6.</td><td></td><td>看源码docker、k8s、Fabric、以太坊、比特币等</td><td></td><td></td><td></td></tr><tr><td>7.</td><td></td><td>Linux、C++</td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li><li><input disabled="" type="checkbox"> Advances_and_Open_Problems_in_Federated_Learning</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input checked="" disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input checked="" disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input checked="" disabled="" type="checkbox"> Proof of Federated Learning: A Novel Energy-recycling Consensus Algorithm</li><li><input checked="" disabled="" type="checkbox"> Scalable and Communication-efficient Decentralized Federated Edge Learning with Multi-blockchain Framework</li><li><input checked="" disabled="" type="checkbox"> DEEP GRADIENT COMPRESSION:REDUCING THE COMMUNICATION BANDWIDTH FOR DISTRIBUTED TRAINING</li><li><input disabled="" type="checkbox"> BlockFLA:Accountable_Federated_Learning_via_Hybrid_Blockchain_Architecture</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li><del>学弟的cosmos隐私保护项目</del></li><li>第一篇论文FL+BC</li><li><del>科技部编程比赛</del></li><li>暑期实习准备(Go, 算法等)</li></ul><ul><li><input checked="" disabled="" type="checkbox"> <p>cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></p></li><li><input checked="" disabled="" type="checkbox"> <p>科技部编程比赛项目实现(使用cosmos)</p></li><li><input disabled="" type="checkbox"> <p>Go公链实现项目(simple_bitcoin)</p></li><li><input disabled="" type="checkbox"> <p>专利一篇</p></li><li><input disabled="" type="checkbox"> <p>Go网络编程Base</p></li><li><input disabled="" type="checkbox"> <p>Go网络编程(base、Echo、Gin)、 专利2篇  </p></li><li><input disabled="" type="checkbox"> <p>第一篇论文初稿与老师讨论</p></li><li><input disabled="" type="checkbox"> <p>论文实验(编码)、数据库(mysql, PostgreSQL), ORM(Gorm) 、Go设计模式  </p></li><li><input disabled="" type="checkbox"> <p>Go设计模式  </p></li><li><input disabled="" type="checkbox"> <p>docker、k8s</p></li><li><input disabled="" type="checkbox"> <p>缓存、日志</p></li><li><input disabled="" type="checkbox"> <p>微服务(消息队列、任务调度、rpc)</p></li></ul><ul><li>Go开发走云容器技术</li><li>区块链开发走科研论文、Etherem、Fabric、源码分析、Cosmos使用</li></ul><p><strong>有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> 英语100词</li><li><input disabled="" type="checkbox"> leetcode一题 剑指offer</li><li><input checked="" disabled="" type="checkbox"> k8s p13</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每天&lt;/th&gt;
&lt;th&gt;开发-云容器技术&lt;/th&gt;
&lt;th&gt;项目与框架&lt;/th&gt;
&lt;th&gt;科研-区块链(FL+BC)&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go基础&lt;/td&gt;
&lt;td&gt;SimpleBitcoin&lt;/td&gt;
&lt;td&gt;FL/分布式存储论文一周一篇细读&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;go网络编程、Web框架&lt;/td&gt;
&lt;td&gt;联邦学习框架&lt;/td&gt;
&lt;td&gt;写专利&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;go数据库、ORM、go高级编程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;机器学习课程&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;研二实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;Leetcode&lt;/td&gt;
&lt;td&gt;go容器技术docker、k8s&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;go微服务与任务调度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码docker、k8s、Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux、C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes-2-搭建k8s集群</title>
    <link href="https://xwjahahahaha.github.io/2021/05/28/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/Kubernetes/kubernetes-2-%E6%90%AD%E5%BB%BAk8s%E9%9B%86%E7%BE%A4/"/>
    <id>https://xwjahahahaha.github.io/2021/05/28/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/Kubernetes/kubernetes-2-%E6%90%AD%E5%BB%BAk8s%E9%9B%86%E7%BE%A4/</id>
    <published>2021-05-28T08:58:00.000Z</published>
    <updated>2021-05-31T14:30:14.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二、搭建k8s集群"><a href="#二、搭建k8s集群" class="headerlink" title="二、搭建k8s集群"></a>二、搭建k8s集群</h1><h2 id="2-1-平台规划"><a href="#2-1-平台规划" class="headerlink" title="2.1 平台规划"></a>2.1 平台规划</h2><h3 id="1-单master集群"><a href="#1-单master集群" class="headerlink" title="1.单master集群"></a>1.单master集群</h3><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/HF3wO7.png" alt="HF3wO7"></p><h3 id="2-多master集群-高可用集群"><a href="#2-多master集群-高可用集群" class="headerlink" title="2.多master集群(高可用集群)"></a>2.多master集群(高可用集群)</h3><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/wXVClp.png" alt="wXVClp"></p><a id="more"></a><h2 id="2-2-服务器硬件要求"><a href="#2-2-服务器硬件要求" class="headerlink" title="2.2 服务器硬件要求"></a>2.2 服务器硬件要求</h2><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/irGHD7.png" alt="irGHD7"></p><h2 id="2-3-部署方式"><a href="#2-3-部署方式" class="headerlink" title="2.3 部署方式"></a>2.3 部署方式</h2><h3 id="2-3-1-Kubeadm工具安装"><a href="#2-3-1-Kubeadm工具安装" class="headerlink" title="2.3.1. Kubeadm工具安装"></a>2.3.1. Kubeadm工具安装</h3><blockquote><p>官方的部署k8s工具, 用于快速部署</p></blockquote><p>第一、创建一个 Master 节点 kubeadm init</p><p>第二、将 Node 节点加入到当前集群中 $ kubeadm join &lt;Master 节点的 IP 和端口 &gt;</p><h4 id="1-前置条件"><a href="#1-前置条件" class="headerlink" title="1. 前置条件"></a>1. 前置条件</h4><ul><li><p>一台或多台机器，操作系统 CentOS7.x-86_x64</p></li><li><p>硬件配置:2GB 或更多 RAM，2 个 CPU 或更多 CPU，硬盘 30GB 或更多 - 集群中所有机器之间网络互通</p></li><li><p>可以访问外网，需要拉取镜像</p></li><li><p>禁止 swap 分区</p><p><a href="https://blog.csdn.net/yefun/article/details/102772368?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control" target="_blank" rel="noopener">步骤</a></p><ol><li><p><code>vim /etc/fstab</code></p><p>注释swap那一行</p></li><li><p><code>echo vm.swappiness=0 &gt;&gt; /etc/sysctl.conf</code></p></li><li><p>重启: <code>sudo reboot</code></p></li><li><p>验证 <code>free -m</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/RNdXg4.png" alt="RNdXg4"></p></li></ol></li></ul><p>kubeadm是官方社区推出的一个用于快速部署kubernetes集群的工具。</p><p>这个工具能通过两条指令完成一个kubernetes集群的部署：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个 Master 节点</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubeadm init</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将一个 Node 节点加入到当前集群中</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubeadm join &lt;Master节点的IP和端口 &gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-准备环境"><a href="#2-准备环境" class="headerlink" title="2. 准备环境"></a>2. 准备环境</h4><table><thead><tr><th>角色</th><th>IP</th></tr></thead><tbody><tr><td>master</td><td>192.168.8.146</td></tr><tr><td>node1</td><td>192.168.8.147</td></tr><tr><td>node2</td><td>192.168.8.148</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭selinux</span></span><br><span class="line">sed -i 's/enforcing/disabled/' /etc/selinux/config  # 永久</span><br><span class="line">setenforce 0  # 临时</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭swap</span></span><br><span class="line">swapoff -a  # 临时</span><br><span class="line">sed -ri 's/.*swap.*/#&amp;/' /etc/fstab    # 永久</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据规划设置主机名</span></span><br><span class="line">hostnamectl set-hostname &lt;hostname&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在master添加hosts (换成自己的IP)</span></span><br><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt; EOF</span><br><span class="line">192.168.8.146 k8smaster</span><br><span class="line">192.168.8.147 k8snode1</span><br><span class="line">192.168.8.148 k8snode2</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将桥接的IPv4流量传递到iptables的链</span></span><br><span class="line">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system  # 生效</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 时间同步</span></span><br><span class="line">yum install ntpdate -y</span><br><span class="line">ntpdate time.windows.com</span><br></pre></td></tr></table></figure><h4 id="3-所有节点安装Docker-kubeadm-kubelet"><a href="#3-所有节点安装Docker-kubeadm-kubelet" class="headerlink" title="3. 所有节点安装Docker/kubeadm/kubelet"></a>3. 所有节点安装Docker/kubeadm/kubelet</h4><p>Kubernetes默认CRI（容器运行时）为Docker，因此先安装Docker。</p><h5 id="3-1-安装Docker"><a href="#3-1-安装Docker" class="headerlink" title="3.1 安装Docker"></a>3.1 安装Docker</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install docker-ce-18.06.1.ce-3.el7</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl start docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker --version</span></span><br><span class="line">Docker version 18.06.1-ce, build e68fc7a</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &gt; /etc/docker/daemon.json &lt;&lt; EOF</span></span><br><span class="line">&#123;</span><br><span class="line">  "registry-mirrors": ["https://b9pmyelo.mirror.aliyuncs.com"]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h5 id="3-2-添加阿里云YUM软件源"><a href="#3-2-添加阿里云YUM软件源" class="headerlink" title="3.2 添加阿里云YUM软件源"></a>3.2 添加阿里云YUM软件源</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; EOF</span></span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h5 id="3-3-安装kubeadm，kubelet和kubectl"><a href="#3-3-安装kubeadm，kubelet和kubectl" class="headerlink" title="3.3 安装kubeadm，kubelet和kubectl"></a>3.3 安装kubeadm，kubelet和kubectl</h5><p>由于版本更新频繁，这里指定版本号部署：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y kubelet-1.18.0 kubeadm-1.18.0 kubectl-1.18.0</span><br><span class="line">$ systemctl enable kubelet</span><br></pre></td></tr></table></figure><h4 id="4-部署Kubernetes-Master"><a href="#4-部署Kubernetes-Master" class="headerlink" title="4. 部署Kubernetes Master"></a>4. 部署Kubernetes Master</h4><p>在192.168.8.146（Master）执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 注意第一个参数换成自己的IP</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubeadm init \</span></span><br><span class="line">  --apiserver-advertise-address=192.168.8.146 \</span><br><span class="line">  --image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">  --kubernetes-version v1.18.0 \</span><br><span class="line">  --service-cidr=10.96.0.0/12 \</span><br><span class="line">  --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure><blockquote><p>这一步主要是拉取Master要使用的镜像</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/XennPZ.png" alt="XennPZ"></p></blockquote><p>由于默认拉取镜像地址k8s.gcr.io国内无法访问，这里指定<strong>阿里云镜像仓库地址。</strong></p><p>使用kubectl工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">$ kubectl get nodes</span><br></pre></td></tr></table></figure><h4 id="5-加入Kubernetes-Node"><a href="#5-加入Kubernetes-Node" class="headerlink" title="5. 加入Kubernetes Node"></a>5. 加入Kubernetes Node</h4><p>在其他（Node工作节点）执行。</p><p>向集群添加新节点，执行在kubeadm init输出的kubeadm join命令：(如果没找到可以用下面的命令再创建)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubeadm join 192.168.1.11:6443 --token esce21.q6hetwm8si29qxwn \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:00603a05805807501d7181c3d60b478788408cfe6cedefedb1f97569708be9c5</span><br></pre></td></tr></table></figure><p>默认token有效期为24小时，当过期之后，该token就不可用了。这时就需要重新创建token，操作如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm token create --print-join-command</span><br></pre></td></tr></table></figure><blockquote><p>错误: <font color='#e54d42'>ERROR: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</font><br>errors pretty printing info, error: exit status 1<br>[ERROR Service-Docker]: docker service is not active, please run ‘systemctl start docker.service’<br>[ERROR IsDockerSystemdCheck]: cannot execute ‘docker info -f ……</p><p>原因: docker服务未启动</p><p>解决: <code>systemctl start docker.service</code></p></blockquote><p>添加成功后再次在master中检查node:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/rIIL0n.png" alt="rIIL0n"></p><h4 id="6-部署CNI网络插件"><a href="#6-部署CNI网络插件" class="headerlink" title="6. 部署CNI网络插件"></a>6. 部署CNI网络插件</h4><blockquote><p>NotReady状态是不行的, 变成运行状态需要配置网络插件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><p>默认镜像地址无法访问，sed命令修改为docker hub镜像仓库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行结果:</span></span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-flannel-ds-amd64-2pc95   1/1     Running   0          72s</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/tmG4ju.png" alt="tmG4ju"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/SyoZDI.png" alt="SyoZDI"></p><h4 id="7-测试kubernetes集群"><a href="#7-测试kubernetes集群" class="headerlink" title="7. 测试kubernetes集群"></a>7. 测试kubernetes集群</h4><p>在Kubernetes集群中创建一个pod，验证是否正常运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl create deployment nginx --image=nginx<span class="comment"># 创建一个nginx pod</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl get pods<span class="comment"># 查看pod状态</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl expose deployment nginx --port=80 --<span class="built_in">type</span>=NodePort<span class="comment"># 暴露端口</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl get pod,svc<span class="comment"># 再次查看</span></span></span><br></pre></td></tr></table></figure><p>访问地址格式：http://[NodeIP]:[Port]  </p><p>例如:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/aL0ypU.png" alt="aL0ypU"></p><p>访问: 192.168.8.146:31798</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/DN71Sm.png" alt="DN71Sm"></p><h4 id="总结步骤"><a href="#总结步骤" class="headerlink" title="总结步骤"></a>总结步骤</h4><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/8d9Thc.png" alt="8d9Thc"></p><h3 id="2-3-2-二进制包安装"><a href="#2-3-2-二进制包安装" class="headerlink" title="2.3.2  二进制包安装"></a>2.3.2  二进制包安装</h3><blockquote><p>手动的部署过程,可以了解整个过程</p></blockquote><h4 id="1-总步骤"><a href="#1-总步骤" class="headerlink" title="1. 总步骤"></a>1. 总步骤</h4><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/ec1FCz.png" alt="ec1FCz"></p><blockquote><p><strong>前两步同之前, 自行操作</strong></p></blockquote><table><thead><tr><th>角色</th><th>IP</th></tr></thead><tbody><tr><td>master</td><td>192.168.8.122</td></tr><tr><td>node1</td><td>192.168.8.121</td></tr></tbody></table><h4 id="2-自签证书"><a href="#2-自签证书" class="headerlink" title="2. 自签证书"></a>2. 自签证书</h4><h5 id="1-cfssl证书生成工具"><a href="#1-cfssl证书生成工具" class="headerlink" title="1. cfssl证书生成工具"></a>1. cfssl证书生成工具</h5><p>cfssl 是一个开源的证书管理工具，使用 json 文件生成证书，相比 openssl 更方便使用。 找任意一台服务器操作，这里用 Master 节点。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span><br><span class="line">chmod +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64 </span><br><span class="line">mv cfssl_linux-amd64 /usr/local/bin/cfssl</span><br><span class="line">mv cfssljson_linux-amd64 /usr/local/bin/cfssljson</span><br></pre></td></tr></table></figure><h5 id="2-生成Etcd证书"><a href="#2-生成Etcd证书" class="headerlink" title="2. 生成Etcd证书"></a>2. 生成Etcd证书</h5><ul><li><p><strong>自签证书颁发机构(CA)</strong></p><p>创建工作目录:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/TLS/&#123;etcd, k8s&#125;</span><br><span class="line">cd TLS/etcd</span><br></pre></td></tr></table></figure><p>自签CA:(创建两个json文件)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; ca-config.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    "signing": &#123;</span><br><span class="line">        "default": &#123;</span><br><span class="line">            "expiry": "87660h"</span><br><span class="line">        &#125;,</span><br><span class="line">        "profiles": &#123;</span><br><span class="line">            "www": &#123;</span><br><span class="line">                "expiry": "87660h",</span><br><span class="line">                "usages": [</span><br><span class="line">                    "signing",</span><br><span class="line">                    "key encipherment",</span><br><span class="line">                    "server auth",</span><br><span class="line">                    "client auth"</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &gt; ca-csr.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    "CN": "etcd CA",</span><br><span class="line">    "key": &#123;</span><br><span class="line">        "algo": "rsa",</span><br><span class="line">        "size": 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    "names": [</span><br><span class="line">        &#123;</span><br><span class="line">            "C": "CN",</span><br><span class="line">            "L": "Beijing",</span><br><span class="line">            "ST": "Beijing"</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>生成证书:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br><span class="line">ls *pem  # 查看</span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/FNrclb.png" alt="FNrclb"></p></li><li><p><strong>使用自签CA签发Etcd HTTPS证书</strong></p><p>创建证书申请文件:</p><blockquote><p>注意: 这里的Hosts字段改成你自己的集群IP,  hosts 字段中 IP 为所有 etcd 节点的集群内部通信 IP，一个都不能少!为了 方便后期扩容可以多写几个预留的 IP。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; server-csr.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    "CN": "etcd",</span><br><span class="line">    "hosts": [</span><br><span class="line">        "192.168.8.121",</span><br><span class="line">        "192.168.8.122"</span><br><span class="line">    ],</span><br><span class="line">    "key": &#123;</span><br><span class="line">        "algo": "rsa",</span><br><span class="line">        "size": 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    "names": [</span><br><span class="line">        &#123;</span><br><span class="line">            "C": "CN",</span><br><span class="line">            "L": "BeiJing",</span><br><span class="line">            "ST": "BeiJing"</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>生成证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=www server-csr.json | cfssljson -bare server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看</span></span><br><span class="line">ls server*pem</span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/4YDcal.png" alt="4YDcal"></p></li></ul><h5 id="3-部署Etcd集群"><a href="#3-部署Etcd集群" class="headerlink" title="3. 部署Etcd集群"></a>3. 部署Etcd集群</h5><ul><li>在github上下载etcd二进制文件压缩包:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/etcd-io/etcd/releases/download/v3.4.9/etcd-v3.4.9-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><p>以下在单个节点上操作,然后复制给其他节点</p><ul><li><p>创建工作目录并解压二进制包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/etcd/&#123;bin,cfg,ssl&#125; –p</span><br><span class="line">tar zxvf etcd-v3.4.9-linux-amd64.tar.gz</span><br><span class="line">mv etcd-v3.4.9-linux-amd64/&#123;etcd,etcdctl&#125; /opt/etcd/bin/</span><br></pre></td></tr></table></figure></li><li><p>创建etcd配置文件</p><blockquote><p>注意: 改成你自己的IP</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /opt/etcd/cfg/etcd.conf &lt;&lt; EOF</span><br><span class="line"><span class="meta">#</span><span class="bash">[Member]</span></span><br><span class="line">ETCD_NAME="etcd-1"</span><br><span class="line">ETCD_DATA_DIR="/var/lib/etcd/default.etcd"</span><br><span class="line">ETCD_LISTEN_PEER_URLS="https://192.168.8.122:2380"</span><br><span class="line">ETCD_LISTEN_CLIENT_URLS="https://192.168.8.122:2379"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">[Clustering]</span></span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS="https://192.168.8.122:2380"</span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS="https://192.168.8.122:2379"</span><br><span class="line">ETCD_INITIAL_CLUSTER="etcd-1=https://192.168.8.122:2380,etcd-2=https://192.168.8.121:2380"</span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN="etcd-cluster"</span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE="new"</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>ETCD_NAME:节点名称，集群中唯一</p><p>ETCD_DATA_DIR:数据目录</p><p>ETCD_LISTEN_PEER_URLS:集群通信监听地址</p><p>ETCD_LISTEN_CLIENT_URLS:客户端访问监听地址</p><p>ETCD_INITIAL_ADVERTISE_PEER_URLS:集群通告地址</p><p>ETCD_ADVERTISE_CLIENT_URLS:客户端通告地址</p><p>ETCD_INITIAL_CLUSTER:集群节点地址</p><p>ETCD_INITIAL_CLUSTER_TOKEN:集群 Token</p><p>ETCD_INITIAL_CLUSTER_STATE:加入集群的当前状态，new 是新集群，existing 表示加入有集群</p></li><li><p>systemd管理etcd</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /usr/lib/systemd/system/etcd.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=/opt/etcd/cfg/etcd.conf</span><br><span class="line">ExecStart=/opt/etcd/bin/etcd \</span><br><span class="line">--cert-file=/opt/etcd/ssl/server.pem \</span><br><span class="line">--key-file=/opt/etcd/ssl/server-key.pem \</span><br><span class="line">--peer-cert-file=/opt/etcd/ssl/server.pem \</span><br><span class="line">--peer-key-file=/opt/etcd/ssl/server-key.pem \</span><br><span class="line">--trusted-ca-file=/opt/etcd/ssl/ca.pem \</span><br><span class="line">--peer-trusted-ca-file=/opt/etcd/ssl/ca.pem \ </span><br><span class="line">--logger=zap</span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>拷贝刚才的证书</p><p>把刚才的证书拷贝到配置文件中的路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~/TLS/etcd/ca*pem ~/TLS/etcd/server*pem /opt/etcd/ssl/</span><br></pre></td></tr></table></figure></li><li><p>复制文件到其他节点(换自己的IP)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /opt/etcd/ root@192.168.8.121:/opt/</span><br><span class="line">scp /usr/lib/systemd/system/etcd.service root@192.168.8.121:/usr/lib/systemd/system/</span><br></pre></td></tr></table></figure></li><li><p>修改其他节点的配置文件, 分别修改 etcd.conf 配置文件中的节点名称和当前服务器 IP</p><p>以第二台为例:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/X5CYPF.png" alt="X5CYPF"></p></li><li><p>主节点、从节点分别启动并设置开机自启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start etcd</span><br><span class="line">systemctl enable etcd</span><br></pre></td></tr></table></figure></li><li><p>查看日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jorunalctl -u etcd</span><br></pre></td></tr></table></figure></li></ul><h5 id="4-生成Kube-apiserver证书"><a href="#4-生成Kube-apiserver证书" class="headerlink" title="4. 生成Kube-apiserver证书"></a>4. 生成Kube-apiserver证书</h5><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/xq3hxf.png" alt="xq3hxf"></p><ul><li><p>自签证书颁发机构(CA)</p><p>在<code>~/TLS/k8s/</code>下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; ca-config.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    "signing": &#123;</span><br><span class="line">        "default": &#123;</span><br><span class="line">            "expiry": "87660h"</span><br><span class="line">        &#125;,</span><br><span class="line">        "profiles": &#123;</span><br><span class="line">            "kubernetes": &#123;</span><br><span class="line">                "expiry": "87660h",</span><br><span class="line">                "usages": [</span><br><span class="line">                    "signing",</span><br><span class="line">                    "key encipherment",</span><br><span class="line">                    "server auth",</span><br><span class="line">                    "client auth"</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &gt; ca-csr.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    "CN": "kubernetes",</span><br><span class="line">    "key": &#123;</span><br><span class="line">        "algo": "rsa",</span><br><span class="line">        "size": 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    "names": [</span><br><span class="line">        &#123;</span><br><span class="line">            "C": "CN",</span><br><span class="line">            "L": "Beijing",</span><br><span class="line">            "ST": "Beijing",</span><br><span class="line">            "O": "k8s",</span><br><span class="line">            "OU": "System"</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>生成证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br></pre></td></tr></table></figure></li><li><p>使用自签CA签发kube-apiserver HTTPS证书</p><p>创建证书申请文件:</p><blockquote><p><font color='#e54d42'>这里的host就是信任的节点IP</font></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; server-csr.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    "CN": "kubernetes",</span><br><span class="line">    "hosts": [</span><br><span class="line">        "10.0.0.1",</span><br><span class="line">        "127.0.0.1",</span><br><span class="line">        "192.168.8.121",</span><br><span class="line">        "192.168.8.122",</span><br><span class="line">        "kubernetes",</span><br><span class="line">        "kubernetes.default",</span><br><span class="line">        "kubernetes.default.svc",</span><br><span class="line">        "kubernetes.default.svc.cluster",</span><br><span class="line">        "kubernetes.default.svc.cluster.local"</span><br><span class="line">    ],</span><br><span class="line">    "key": &#123;</span><br><span class="line">        "algo": "rsa",</span><br><span class="line">        "size": 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    "names": [&#123;</span><br><span class="line">        "C": "CN",</span><br><span class="line">        "L": "BeiJing",</span><br><span class="line">        "ST": "BeiJing",</span><br><span class="line">        "O": "k8s",</span><br><span class="line">        "OU": "System"</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>生成证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes server-csr.json | cfssljson -bare server</span><br></pre></td></tr></table></figure></li></ul><h5 id="5-部署apiserver"><a href="#5-部署apiserver" class="headerlink" title="5.部署apiserver"></a>5.部署apiserver</h5>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;二、搭建k8s集群&quot;&gt;&lt;a href=&quot;#二、搭建k8s集群&quot; class=&quot;headerlink&quot; title=&quot;二、搭建k8s集群&quot;&gt;&lt;/a&gt;二、搭建k8s集群&lt;/h1&gt;&lt;h2 id=&quot;2-1-平台规划&quot;&gt;&lt;a href=&quot;#2-1-平台规划&quot; class=&quot;headerlink&quot; title=&quot;2.1 平台规划&quot;&gt;&lt;/a&gt;2.1 平台规划&lt;/h2&gt;&lt;h3 id=&quot;1-单master集群&quot;&gt;&lt;a href=&quot;#1-单master集群&quot; class=&quot;headerlink&quot; title=&quot;1.单master集群&quot;&gt;&lt;/a&gt;1.单master集群&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://xwjpics.gumptlu.work/qinniu_uPic/HF3wO7.png&quot; alt=&quot;HF3wO7&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-多master集群-高可用集群&quot;&gt;&lt;a href=&quot;#2-多master集群-高可用集群&quot; class=&quot;headerlink&quot; title=&quot;2.多master集群(高可用集群)&quot;&gt;&lt;/a&gt;2.多master集群(高可用集群)&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://xwjpics.gumptlu.work/qinniu_uPic/wXVClp.png&quot; alt=&quot;wXVClp&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="kubernetes" scheme="https://xwjahahahaha.github.io/categories/technical/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://xwjahahahaha.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes-1-基本概念</title>
    <link href="https://xwjahahahaha.github.io/2021/05/28/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/Kubernetes/kubernetes-1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>https://xwjahahahaha.github.io/2021/05/28/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/Kubernetes/kubernetes-1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2021-05-28T08:25:05.000Z</published>
    <updated>2021-05-28T08:57:23.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、概述和特性"><a href="#一、概述和特性" class="headerlink" title="一、概述和特性"></a>一、概述和特性</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>kubernetes，简称 K8s，是用 8 代替 8 个字符“ubernete”而成的缩写。是一个开源 的，用于管理云平台中多个主机上的容器化的应用，Kubernetes 的目标是让部署容器化的 应用简单并且高效(powerful),Kubernetes 提供了应用部署，规划，更新，维护的一种 机制。</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/waCM3j.png" alt="waCM3j"></p><a id="more"></a><h2 id="1-2-特性"><a href="#1-2-特性" class="headerlink" title="1.2 特性"></a>1.2 特性</h2><ol><li><p>自动装箱 基于容器对应用运行环境的资源配置要求自动部署应用容器</p></li><li><p>自我修复(自愈能力)</p><p>当容器失败时，会对容器进行重启</p><p>当所部署的 Node 节点有问题时，会对容器进行重新部署和重新调度</p><p>当容器未通过监控检查时，会关闭此容器直到容器正常运行时，才会对外提供服务</p></li><li><p>水平扩展</p><p>通过简单的命令、用户 UI 界面或基于 CPU 等资源使用情况，对应用容器进行规模扩大 或规模剪裁</p></li><li><p>服务发现</p><p>用户不需使用额外的服务发现机制，就能够基于 Kubernetes 自身能力实现服务发现和 负载均衡</p></li><li><p>滚动更新 可以根据应用的变化，对应用容器运行的应用，进行一次性或批量式更新</p></li><li><p>版本回退 可以根据应用部署情况，对应用容器运行的应用，进行历史版本即时回退</p></li><li><p>密钥和配置管理 在不需要重新构建镜像的情况下，可以部署和更新密钥和应用配置，类似热部署。</p></li><li><p>存储编排 自动实现存储系统挂载及应用，特别对有状态应用实现数据持久化非常重要</p><p>存储系统可以来自于本地目录、网络存储(NFS、Gluster、Ceph 等)、公共云存储服务 </p></li><li><p>批处理</p><p> 提供一次性任务，定时任务;满足批量数据处理和分析的场景</p></li></ol><h2 id="1-3-kubernetes集群架构组件"><a href="#1-3-kubernetes集群架构组件" class="headerlink" title="1.3 kubernetes集群架构组件"></a>1.3 kubernetes集群架构组件</h2><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/lExlbH.png" alt="lExlbH"></p><h2 id="1-4-k8s核心概念"><a href="#1-4-k8s核心概念" class="headerlink" title="1.4 k8s核心概念"></a>1.4 k8s核心概念</h2><h3 id="1-Pod"><a href="#1-Pod" class="headerlink" title="1. Pod"></a>1. Pod</h3><ul><li><p>最小部署单元</p></li><li><p>是<strong>一组容器</strong>的集合</p></li><li><p>共享网络</p><p>不论一个Pod中有几个容器, 对于一个端口所有的容器都是共享监听与使用</p></li><li><p>生命周期是短暂的</p></li></ul><h3 id="2-Controller"><a href="#2-Controller" class="headerlink" title="2. Controller"></a>2. Controller</h3><ul><li><p>确保预期的Pod副本的数量</p></li><li><p>应用部署</p><ul><li>无状态</li><li>有状态: 移植需要特定的条件(存储依赖、网络等)</li></ul></li><li><p>确保所有的node都运行同一个Pod</p></li><li><p>一次性任务与定时任务</p></li></ul><blockquote><p>Controller主要用来控制Pod</p></blockquote><h3 id="3-Service"><a href="#3-Service" class="headerlink" title="3. Service"></a>3. Service</h3><ul><li>定义一组Pod的访问规则</li></ul><blockquote><p><font color='#e54d42'>由Service作为统一入口访问, 使用Controller控制Pod部署创建,Pod中是一组容器的集合</font></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、概述和特性&quot;&gt;&lt;a href=&quot;#一、概述和特性&quot; class=&quot;headerlink&quot; title=&quot;一、概述和特性&quot;&gt;&lt;/a&gt;一、概述和特性&lt;/h1&gt;&lt;h2 id=&quot;1-1-概述&quot;&gt;&lt;a href=&quot;#1-1-概述&quot; class=&quot;headerlink&quot; title=&quot;1.1 概述&quot;&gt;&lt;/a&gt;1.1 概述&lt;/h2&gt;&lt;p&gt;kubernetes，简称 K8s，是用 8 代替 8 个字符“ubernete”而成的缩写。是一个开源 的，用于管理云平台中多个主机上的容器化的应用，Kubernetes 的目标是让部署容器化的 应用简单并且高效(powerful),Kubernetes 提供了应用部署，规划，更新，维护的一种 机制。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://xwjpics.gumptlu.work/qinniu_uPic/waCM3j.png&quot; alt=&quot;waCM3j&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="kubernetes" scheme="https://xwjahahahaha.github.io/categories/technical/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://xwjahahahaha.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>日记_0177</title>
    <link href="https://xwjahahahaha.github.io/2021/05/27/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-05/%E6%97%A5%E8%AE%B0-0177/"/>
    <id>https://xwjahahahaha.github.io/2021/05/27/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-05/%E6%97%A5%E8%AE%B0-0177/</id>
    <published>2021-05-27T01:09:13.000Z</published>
    <updated>2021-05-28T03:16:30.202Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>每天</th><th>开发-云容器技术</th><th>项目与框架</th><th>科研-区块链(FL+BC)</th><th>预备事宜</th></tr></thead><tbody><tr><td>1.</td><td><strong>英语单词</strong></td><td>go基础</td><td>SimpleBitcoin</td><td>FL/分布式存储论文一周一篇细读</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>2.</td><td>语法课看完</td><td>go网络编程、Web框架</td><td>联邦学习框架</td><td>写专利</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>3.</td><td><font color='red'>六级</font></td><td>go数据库、ORM、go高级编程</td><td></td><td>机器学习课程</td><td>为<strong>研二实习</strong>做准备</td></tr><tr><td>4.</td><td>Leetcode</td><td>go容器技术docker、k8s</td><td></td><td></td><td></td></tr><tr><td>5.</td><td></td><td>go微服务与任务调度</td><td></td><td></td><td></td></tr><tr><td>6.</td><td></td><td>看源码docker、k8s、Fabric、以太坊、比特币等</td><td></td><td></td><td></td></tr><tr><td>7.</td><td></td><td>Linux、C++</td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li><li><input disabled="" type="checkbox"> Advances_and_Open_Problems_in_Federated_Learning</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input checked="" disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input checked="" disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input checked="" disabled="" type="checkbox"> Proof of Federated Learning: A Novel Energy-recycling Consensus Algorithm</li><li><input checked="" disabled="" type="checkbox"> Scalable and Communication-efficient Decentralized Federated Edge Learning with Multi-blockchain Framework</li><li><input checked="" disabled="" type="checkbox"> DEEP GRADIENT COMPRESSION:REDUCING THE COMMUNICATION BANDWIDTH FOR DISTRIBUTED TRAINING</li><li><input disabled="" type="checkbox"> BlockFLA:Accountable_Federated_Learning_via_Hybrid_Blockchain_Architecture</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li><del>学弟的cosmos隐私保护项目</del></li><li>第一篇论文FL+BC</li><li><del>科技部编程比赛</del></li><li>暑期实习准备(Go, 算法等)</li></ul><ul><li><input checked="" disabled="" type="checkbox"> <p>cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></p></li><li><input checked="" disabled="" type="checkbox"> <p>科技部编程比赛项目实现(使用cosmos)</p></li><li><input checked="" disabled="" type="checkbox"> <p>Go公链实现项目(simple_bitcoin)</p></li><li><input disabled="" type="checkbox"> <p>专利一篇</p></li><li><input disabled="" type="checkbox"> <p>Go网络编程Base</p></li><li><input disabled="" type="checkbox"> <p>Go网络编程(base、Echo、Gin)、 专利2篇  </p></li><li><input disabled="" type="checkbox"> <p>第一篇论文初稿与老师讨论</p></li><li><input disabled="" type="checkbox"> <p>论文实验(编码)、数据库(mysql, PostgreSQL), ORM(Gorm) 、Go设计模式  </p></li><li><input disabled="" type="checkbox"> <p>Go设计模式  </p></li><li><input disabled="" type="checkbox"> <p>docker、k8s</p></li><li><input disabled="" type="checkbox"> <p>缓存、日志</p></li><li><input disabled="" type="checkbox"> <p>微服务(消息队列、任务调度、rpc)</p></li></ul><ul><li>Go开发走云容器技术</li><li>区块链开发走科研论文、Etherem、Fabric、源码分析、Cosmos使用</li></ul><p><strong>有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> 英语</li><li><input checked="" disabled="" type="checkbox"> leetcode</li><li><input checked="" disabled="" type="checkbox"> Ethermint 合约</li><li><input checked="" disabled="" type="checkbox"> go bitcoin</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每天&lt;/th&gt;
&lt;th&gt;开发-云容器技术&lt;/th&gt;
&lt;th&gt;项目与框架&lt;/th&gt;
&lt;th&gt;科研-区块链(FL+BC)&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go基础&lt;/td&gt;
&lt;td&gt;SimpleBitcoin&lt;/td&gt;
&lt;td&gt;FL/分布式存储论文一周一篇细读&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;go网络编程、Web框架&lt;/td&gt;
&lt;td&gt;联邦学习框架&lt;/td&gt;
&lt;td&gt;写专利&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;go数据库、ORM、go高级编程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;机器学习课程&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;研二实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;Leetcode&lt;/td&gt;
&lt;td&gt;go容器技术docker、k8s&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;go微服务与任务调度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码docker、k8s、Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux、C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《BlockFLA:Accountable_Federated_Learning_via_Hybrid_Blockchain_Architecture》精读</title>
    <link href="https://xwjahahahaha.github.io/2021/05/26/%E7%9F%A5%E8%AF%86%E8%B4%B4/%E8%AE%BA%E6%96%87/FL%20And%20BlockChain/%E3%80%8ABlockFLA-Accountable-Federated-Learning-via-Hybrid-Blockchain-Architecture%E3%80%8B%E7%B2%BE%E8%AF%BB/"/>
    <id>https://xwjahahahaha.github.io/2021/05/26/%E7%9F%A5%E8%AF%86%E8%B4%B4/%E8%AE%BA%E6%96%87/FL%20And%20BlockChain/%E3%80%8ABlockFLA-Accountable-Federated-Learning-via-Hybrid-Blockchain-Architecture%E3%80%8B%E7%B2%BE%E8%AF%BB/</id>
    <published>2021-05-26T08:59:56.000Z</published>
    <updated>2021-05-26T12:00:00.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、基本信息、前置知识"><a href="#一、基本信息、前置知识" class="headerlink" title="一、基本信息、前置知识"></a>一、基本信息、前置知识</h1><blockquote><p>CODASPY ‘21: Proceedings of the Eleventh ACM Conference on Data and Application Security and Privacy</p></blockquote><a id="more"></a><h2 id="1-1-后门注入攻击"><a href="#1-1-后门注入攻击" class="headerlink" title="1.1 后门注入攻击"></a>1.1 后门注入攻击</h2><p><a href="https://zhuanlan.zhihu.com/p/160964591" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/160964591</a></p><p><strong>后门攻击希望在模型的训练过程中通过某种方式在模型中埋藏后门(backdoor)，埋藏好的后门通过攻击者预先设定的触发器(trigger)激发。在后门未被激发时，被攻击的模型具有和正常模型类似的表现；而当模型中埋藏的后门被攻击者激活时，模型的输出变为攻击者预先指定的标签（target label）以达到恶意的目的</strong></p><p>后门攻击常发生在使用第三方平台进行训练, <strong>FL也很常见</strong></p><blockquote><p><strong>一般都是隐藏自己数据的场景, 这样才难以被发现</strong></p></blockquote><p>目前，对训练数据进行投毒是后门攻击中最直接，最常见的方法。 如下图所示，在基于投毒的后门攻击(poisoning-based attacks)中，攻击者通过预先设置的触发器（例如一个小的local patch）来修改一些训练样本(将2, 3, 6这些图片的标签改为0)。 这些经过修改的样本的标签讲被攻击者指定的目标标签替换，生成被投毒样本（poisoned samples）。这些被投毒样本与正常样本将会被同时用于训练，以得到带后门的模型。<strong>值得一提的是，触发器不一定是可见的，被投毒样品的真实标签也不一定与目标标签不同，这增加了后门攻击的隐蔽性。</strong> 当然，目前也有一些不基于投毒的后门攻击方法被提出，也取得了不错的效果。</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/tCZb2h.png" alt="tCZb2h"></p><h1 id="二、摘要"><a href="#二、摘要" class="headerlink" title="二、摘要"></a>二、摘要</h1><ul><li><p>FL的隐藏数据的特点给攻击者提供了对训练模型<strong>后门注入攻击</strong>的机会, 从而使模型进行错误的分类</p></li><li><p>在训练结束后,通过<strong>检测与惩罚</strong>去防范后门攻击</p></li><li><p>开发了一个混合联邦学习区块链框架, 使用<strong>智能合约去自动检测并且通过金钱去惩罚违规者</strong></p></li><li><p>此框架任何聚合函数任何攻击检测算法都可以插入其中</p></li></ul><h1 id="三、Introduction"><a href="#三、Introduction" class="headerlink" title="三、Introduction"></a>三、Introduction</h1>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、基本信息、前置知识&quot;&gt;&lt;a href=&quot;#一、基本信息、前置知识&quot; class=&quot;headerlink&quot; title=&quot;一、基本信息、前置知识&quot;&gt;&lt;/a&gt;一、基本信息、前置知识&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;CODASPY ‘21: Proceedings of the Eleventh ACM Conference on Data and Application Security and Privacy&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="knowledge" scheme="https://xwjahahahaha.github.io/categories/knowledge/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指Offer03.数组中重复的数字</title>
    <link href="https://xwjahahahaha.github.io/2021/05/26/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/%E5%89%91%E6%8C%87Offer03-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://xwjahahahaha.github.io/2021/05/26/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/%E5%89%91%E6%8C%87Offer03-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2021-05-26T08:26:24.000Z</published>
    <updated>2021-05-26T08:38:21.726Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/" target="_blank" rel="noopener">剑指 Offer 03. 数组中重复的数字</a></p><p>难度简单</p><p>找出数组中重复的数字。</p><a id="more"></a><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[2, 3, 1, 0, 2, 5, 3]</span><br><span class="line">输出：2 或 3</span><br></pre></td></tr></table></figure><p><strong>限制：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 &lt;&#x3D; n &lt;&#x3D; 100000</span><br></pre></td></tr></table></figure><h2 id="解题思路及代码"><a href="#解题思路及代码" class="headerlink" title="解题思路及代码"></a>解题思路及代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重复次数 =&gt; 散列表, 给定范围 =&gt; 数组实现散列表</span></span><br><span class="line"><span class="comment">// 时间复杂度O(n), 空间复杂度O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findRepeatNumber</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    account := <span class="built_in">make</span>([]<span class="keyword">int</span>, n)</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        account[v] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> account[v] &gt; <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// “所有数字都在0~n-1的范围内” =&gt; 如果无重复第i位一定是i</span></span><br><span class="line"><span class="comment">// 如果当前位置i的数v不相同, 那么判断nums[v]位置的值:</span></span><br><span class="line"><span class="comment">// 如果v==nums[v], 那么出现重复,结束</span></span><br><span class="line"><span class="comment">// 如果不等, 那么交换两者,使v在正确的位置(与下标相同)</span></span><br><span class="line"><span class="comment">// 对当前位置重复上述操作, 直到i == v</span></span><br><span class="line"><span class="comment">// 时间复杂度O(n), 空间复杂度O(1)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findRepeatNumber</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;Ω</span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="comment">// 每个位置最多交换两次就满足</span></span><br><span class="line">        <span class="keyword">for</span> i != v&#123;</span><br><span class="line">            <span class="keyword">if</span> v == nums[v] &#123;</span><br><span class="line">                <span class="keyword">return</span> v</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                nums[i], nums[v] = nums[v], v</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;剑指 Offer 03. 数组中重复的数字&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;难度简单&lt;/p&gt;
&lt;p&gt;找出数组中重复的数字。&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="leetcode" scheme="https://xwjahahahaha.github.io/categories/technical/leetcode/"/>
    
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>日记_0176</title>
    <link href="https://xwjahahahaha.github.io/2021/05/26/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-05/%E6%97%A5%E8%AE%B0-0176/"/>
    <id>https://xwjahahahaha.github.io/2021/05/26/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-05/%E6%97%A5%E8%AE%B0-0176/</id>
    <published>2021-05-26T02:05:53.000Z</published>
    <updated>2021-05-27T01:10:13.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>每天</th><th>开发-云容器技术</th><th>项目与框架</th><th>科研-区块链(FL+BC)</th><th>预备事宜</th></tr></thead><tbody><tr><td>1.</td><td><strong>英语单词</strong></td><td>go基础</td><td>SimpleBitcoin</td><td>FL/分布式存储论文一周一篇细读</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>2.</td><td>语法课看完</td><td>go网络编程、Web框架</td><td>联邦学习框架</td><td>写专利</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>3.</td><td><font color='red'>六级</font></td><td>go数据库、ORM、go高级编程</td><td></td><td>机器学习课程</td><td>为<strong>研二实习</strong>做准备</td></tr><tr><td>4.</td><td>Leetcode</td><td>go容器技术docker、k8s</td><td></td><td></td><td></td></tr><tr><td>5.</td><td></td><td>go微服务与任务调度</td><td></td><td></td><td></td></tr><tr><td>6.</td><td></td><td>看源码docker、k8s、Fabric、以太坊、比特币等</td><td></td><td></td><td></td></tr><tr><td>7.</td><td></td><td>Linux、C++</td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li><li><input disabled="" type="checkbox"> Advances_and_Open_Problems_in_Federated_Learning</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input checked="" disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input checked="" disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input checked="" disabled="" type="checkbox"> Proof of Federated Learning: A Novel Energy-recycling Consensus Algorithm</li><li><input checked="" disabled="" type="checkbox"> Scalable and Communication-efficient Decentralized Federated Edge Learning with Multi-blockchain Framework</li><li><input checked="" disabled="" type="checkbox"> DEEP GRADIENT COMPRESSION:REDUCING THE COMMUNICATION BANDWIDTH FOR DISTRIBUTED TRAINING</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li><del>学弟的cosmos隐私保护项目</del></li><li>第一篇论文FL+BC</li><li><del>科技部编程比赛</del></li><li>暑期实习准备(Go, 算法等)</li></ul><ul><li><input checked="" disabled="" type="checkbox"> <p>cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></p></li><li><input checked="" disabled="" type="checkbox"> <p>科技部编程比赛项目实现(使用cosmos)</p></li><li><input disabled="" type="checkbox"> <p>Go公链实现项目(simple_bitcoin)</p></li><li><input disabled="" type="checkbox"> <p>专利一篇</p></li><li><input disabled="" type="checkbox"> <p>Go网络编程Base</p></li><li><input disabled="" type="checkbox"> <p>Go网络编程(base、Echo、Gin)、 专利2篇  </p></li><li><input disabled="" type="checkbox"> <p>第一篇论文初稿与老师讨论</p></li><li><input disabled="" type="checkbox"> <p>论文实验(编码)、数据库(mysql, PostgreSQL), ORM(Gorm) 、Go设计模式  </p></li><li><input disabled="" type="checkbox"> <p>Go设计模式  </p></li><li><input disabled="" type="checkbox"> <p>docker、k8s</p></li><li><input disabled="" type="checkbox"> <p>缓存、日志</p></li><li><input disabled="" type="checkbox"> <p>微服务(消息队列、任务调度、rpc)</p></li></ul><ul><li>Go开发走云容器技术</li><li>区块链开发走科研论文、Etherem、Fabric、源码分析、Cosmos使用</li></ul><p><strong>有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> 英语听力部分 + 作文部分</li><li><input checked="" disabled="" type="checkbox"> leetcode一题 剑指offer</li><li><input checked="" disabled="" type="checkbox"> 密码学一节</li><li><input checked="" disabled="" type="checkbox"> 论文开头</li><li><input checked="" disabled="" type="checkbox"> go项目</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每天&lt;/th&gt;
&lt;th&gt;开发-云容器技术&lt;/th&gt;
&lt;th&gt;项目与框架&lt;/th&gt;
&lt;th&gt;科研-区块链(FL+BC)&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go基础&lt;/td&gt;
&lt;td&gt;SimpleBitcoin&lt;/td&gt;
&lt;td&gt;FL/分布式存储论文一周一篇细读&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;go网络编程、Web框架&lt;/td&gt;
&lt;td&gt;联邦学习框架&lt;/td&gt;
&lt;td&gt;写专利&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;go数据库、ORM、go高级编程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;机器学习课程&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;研二实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;Leetcode&lt;/td&gt;
&lt;td&gt;go容器技术docker、k8s&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;go微服务与任务调度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码docker、k8s、Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux、C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>hexo出现的问题</title>
    <link href="https://xwjahahahaha.github.io/2021/05/25/%E6%8A%80%E6%9C%AF%E8%B4%B4/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/hexo%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://xwjahahahaha.github.io/2021/05/25/%E6%8A%80%E6%9C%AF%E8%B4%B4/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/hexo%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2021-05-25T15:11:19.000Z</published>
    <updated>2021-05-26T00:07:45.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Nunjucks-Error-Line-319-Column-36-unexpected-token"><a href="#1-Nunjucks-Error-Line-319-Column-36-unexpected-token" class="headerlink" title="1. Nunjucks Error: [Line 319, Column 36] unexpected token: ."></a>1. Nunjucks Error: [Line 319, Column 36] unexpected token: .</h1><a id="more"></a><blockquote><p><strong>错误描述:</strong></p><p>Version 9 of Highlight.js has reached EOL and is no longer supported.</p><p>Please upgrade or ask whatever dependency you are using to upgrade.</p><p><a href="https://github.com/highlightjs/highlight.js/issues/2877" target="_blank" rel="noopener">https://github.com/highlightjs/highlight.js/issues/2877</a></p><p>FATAL Something’s wrong. Maybe you can find the solution here: <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">https://hexo.io/docs/troubleshooting.html</a></p><p>Nunjucks Error: [Line 319, Column 36] unexpected token: .</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/770zhs.png" alt="770zhs"></p><p><strong>错误原因:</strong></p><p>在提示给出的解决文档中说明了原因:</p><p>Hexo使用Nunjucks来渲染帖子(旧版本中使用了Swig，它共享类似的语法)。使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#125;&#125;或&#123;%%&#125;</span><br></pre></td></tr></table></figure><p>封装的内容将被解析，并可能导致问题。您可以通过使用原始标记插件包装它来跳过解析，例如单反勾或三反勾。 或者，Nunjucks标签可以通过渲染器的选项(如果支持)，API或前端问题禁用。</p><ul><li>意思就是<strong>你写的文章内容含有两个大括号这样的字符,会导致Nunjucks解析渲染的错误/产生冲突(因为它解析也是两个大括号)</strong></li></ul><p><font color='#e54d42'>解决方法:</font></p><p>根据蓝字的提示,找到对应的文章位置,将导致混乱的地方修改(使用三个大括号):</p><p>例如:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/YEiPGd.png" alt="YEiPGd"></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-Nunjucks-Error-Line-319-Column-36-unexpected-token&quot;&gt;&lt;a href=&quot;#1-Nunjucks-Error-Line-319-Column-36-unexpected-token&quot; class=&quot;headerlink&quot; title=&quot;1. Nunjucks Error: [Line 319, Column 36] unexpected token: .&quot;&gt;&lt;/a&gt;1. Nunjucks Error: [Line 319, Column 36] unexpected token: .&lt;/h1&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="hexo" scheme="https://xwjahahahaha.github.io/categories/technical/hexo/"/>
    
    
    <category term="hexo" scheme="https://xwjahahahaha.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>日记_0175</title>
    <link href="https://xwjahahahaha.github.io/2021/05/25/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-05/%E6%97%A5%E8%AE%B0-0175/"/>
    <id>https://xwjahahahaha.github.io/2021/05/25/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-05/%E6%97%A5%E8%AE%B0-0175/</id>
    <published>2021-05-25T02:14:33.000Z</published>
    <updated>2021-05-26T02:05:41.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>每天</th><th>开发-云容器技术</th><th>项目与框架</th><th>科研-区块链(FL+BC)</th><th>预备事宜</th></tr></thead><tbody><tr><td>1.</td><td><strong>英语单词</strong></td><td>go基础</td><td>SimpleBitcoin</td><td>FL/分布式存储论文一周一篇细读</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>2.</td><td>语法课看完</td><td>go网络编程、Web框架</td><td>联邦学习框架</td><td>写专利</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>3.</td><td><font color='red'>六级</font></td><td>go数据库、ORM、go高级编程</td><td></td><td>机器学习课程</td><td>为<strong>研二实习</strong>做准备</td></tr><tr><td>4.</td><td>Leetcode</td><td>go容器技术docker、k8s</td><td></td><td></td><td></td></tr><tr><td>5.</td><td></td><td>go微服务与任务调度</td><td></td><td></td><td></td></tr><tr><td>6.</td><td></td><td>看源码docker、k8s、Fabric、以太坊、比特币等</td><td></td><td></td><td></td></tr><tr><td>7.</td><td></td><td>Linux、C++</td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li><li><input disabled="" type="checkbox"> Advances_and_Open_Problems_in_Federated_Learning</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input checked="" disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input checked="" disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input checked="" disabled="" type="checkbox"> Proof of Federated Learning: A Novel Energy-recycling Consensus Algorithm</li><li><input checked="" disabled="" type="checkbox"> Scalable and Communication-efficient Decentralized Federated Edge Learning with Multi-blockchain Framework</li><li><input checked="" disabled="" type="checkbox"> DEEP GRADIENT COMPRESSION:REDUCING THE COMMUNICATION BANDWIDTH FOR DISTRIBUTED TRAINING</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li><del>学弟的cosmos隐私保护项目</del></li><li>第一篇论文FL+BC</li><li><del>科技部编程比赛</del></li><li>暑期实习准备(Go, 算法等)</li></ul><p>三月 </p><ul><li><input checked="" disabled="" type="checkbox"> 3-3 ~ 3-7 cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></li><li><input checked="" disabled="" type="checkbox"> 3-8 ~ 3-20 科技部编程比赛项目实现(使用cosmos)</li><li><input disabled="" type="checkbox"> 3-20 ~ 3-31 Go公链实现项目</li><li><input disabled="" type="checkbox"> 4-1 ~ 4-31 Go网络编程Base + 专利一篇</li></ul><p>四月</p><ul><li><input disabled="" type="checkbox"> 4-1 ~ 4-20 Go网络编程(base、Echo、Gin)、 专利2篇  </li><li><input disabled="" type="checkbox"> 4-21 ~ 4-30 第一篇论文初稿与老师讨论</li></ul><p>五月</p><ul><li><input disabled="" type="checkbox"> 5-1 ~ 5-20 论文实验(编码)、数据库(mysql, PostgreSQL), ORM(Gorm) 、Go设计模式  </li><li><input disabled="" type="checkbox"> 5-21 ~ 5-31 Go设计模式  </li></ul><p>六月</p><ul><li><input disabled="" type="checkbox"> 6-1 ~ 6-31 docker、k8s</li></ul><p>七月</p><ul><li><input disabled="" type="checkbox"> 7-1 ~ 7-20 缓存、日志</li><li><input disabled="" type="checkbox"> 7-20 ~ 7-31 微服务(消息队列、任务调度、rpc)</li></ul><p>八月</p><ul><li><input disabled="" type="checkbox"> 8-1 ~ 8-20  微服务(消息队列、任务调度、rpc)</li><li><input disabled="" type="checkbox"> 8-20 ~ 8-31 </li></ul><p>四五月中要好好准备六级, 这次要过.</p><ul><li>go开发走云容器技术</li><li>区块链开发走科研论文、Etherem、Fabric、源码分析、Cosmos使用</li></ul><p><strong>有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> 英语140词 + 听力、作文</li><li><input disabled="" type="checkbox"> leetcode一题</li><li><input checked="" disabled="" type="checkbox"> 密码学</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每天&lt;/th&gt;
&lt;th&gt;开发-云容器技术&lt;/th&gt;
&lt;th&gt;项目与框架&lt;/th&gt;
&lt;th&gt;科研-区块链(FL+BC)&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go基础&lt;/td&gt;
&lt;td&gt;SimpleBitcoin&lt;/td&gt;
&lt;td&gt;FL/分布式存储论文一周一篇细读&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;go网络编程、Web框架&lt;/td&gt;
&lt;td&gt;联邦学习框架&lt;/td&gt;
&lt;td&gt;写专利&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;go数据库、ORM、go高级编程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;机器学习课程&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;研二实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;Leetcode&lt;/td&gt;
&lt;td&gt;go容器技术docker、k8s&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;go微服务与任务调度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码docker、k8s、Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux、C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>swarm-2-bee的搭建</title>
    <link href="https://xwjahahahaha.github.io/2021/05/15/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Swarm/swarm-2-bee%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://xwjahahahaha.github.io/2021/05/15/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Swarm/swarm-2-bee%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2021-05-15T05:20:29.000Z</published>
    <updated>2021-05-23T03:09:06.705Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>资料:</p><p><a href="https://docs.ethswarm.org/docs/installation/quick-start" target="_blank" rel="noopener">https://docs.ethswarm.org/docs/installation/quick-start</a></p><p><a href="https://www.yuque.com/docs/share/712630dc-fa67-4318-a36e-502f871a0136?#" target="_blank" rel="noopener">https://www.yuque.com/docs/share/712630dc-fa67-4318-a36e-502f871a0136?#</a></p><p>环境:</p><ul><li>Ubuntu:  18.04.2 LTS</li></ul></blockquote><h1 id="一、安装Bee"><a href="#一、安装Bee" class="headerlink" title="一、安装Bee"></a>一、安装Bee</h1><p><a href="https://geth.ethereum.org/docs/clef/tutorial" target="_blank" rel="noopener">https://geth.ethereum.org/docs/clef/tutorial</a></p><h2 id="1-1-Bee-Clef"><a href="#1-1-Bee-Clef" class="headerlink" title="1.1 Bee Clef"></a>1.1 Bee Clef</h2><p>Go Ethereum’s Clef是以太坊的上的签名和密钥管理工具, 对于Swarm, 对应的工具就是Bee Clef, 能够方便的帮助我们签名大量交易与管理密钥.</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装:"></a>1. 安装:</h3><p>Ubuntu:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/ethersphere/bee-clef/releases/download/v0.4.9/bee-clef_0.4.9_amd64.deb</span><br><span class="line">sudo dpkg -i bee-clef_0.4.9_amd64.deb</span><br></pre></td></tr></table></figure><p>centOS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/ethersphere/bee-clef/releases/download/v0.4.9/bee-clef_0.4.9_amd64.rpm</span><br><span class="line">sudo rpm -i bee-clef_0.4.9_amd64.rpm</span><br></pre></td></tr></table></figure><p><a href="https://docs.ethswarm.org/docs/installation/bee-clef/" target="_blank" rel="noopener">其他系统安装</a></p><p>文件已经下载到<code>/etc/bee-clef</code>文件夹下,默认情况不需要修改配置</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/uXe1eR.png" alt="uXe1eR"></p><h3 id="2-运行服务"><a href="#2-运行服务" class="headerlink" title="2. 运行服务"></a>2. 运行服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status bee-clef</span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/wLaNsJ.png" alt="wLaNsJ"></p><a id="more"></a><p>持续输出log:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">journalctl -f -u bee-clef.service</span><br></pre></td></tr></table></figure><p>后面当连接到Bee后就会显示:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/Zi5Bk7.png" alt="Zi5Bk7"></p><h3 id="3-文件位置"><a href="#3-文件位置" class="headerlink" title="3. 文件位置"></a>3. 文件位置</h3><p>Configuration files are stored in <code>/etc/bee-clef/</code></p><p>Key material and other data is stored in <code>/var/lib/bee-clef/</code></p><h3 id="4-账户列表"><a href="#4-账户列表" class="headerlink" title="4. 账户列表"></a>4. 账户列表</h3><p>由于Bee需要Clef来自动签署许多事务，所以我们必须将Clef作为一种服务来运行，并且具有宽松的权限和规则集。</p><p>为了确保Clef只与Bee签署交易，我们必须保护<code>Clef.ipc</code>文件。通过创建一个Bee用户并设置权限，使得只有这个用户才能使用ipc套接字。</p><p>通过外部API来获取Clef中管理的账户列表:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo '&#123;"id": 1, "jsonrpc": "2.0", "method": "account_list"&#125;' | nc -U /var/lib/bee-clef/clef.ipc</span><br></pre></td></tr></table></figure><blockquote><p>注意:  后面是ipc文件地址,默认在<code>/var/lib/bee-clef/</code>下</p></blockquote><h2 id="1-2-Bee"><a href="#1-2-Bee" class="headerlink" title="1.2 Bee"></a>1.2 Bee</h2><h3 id="1-安装-1"><a href="#1-安装-1" class="headerlink" title="1.安装"></a>1.安装</h3><p>Ubuntu</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/ethersphere/bee/releases/download/v0.5.3/bee_0.5.3_amd64.deb</span><br><span class="line">sudo dpkg -i bee_0.5.3_amd64.deb</span><br><span class="line">bee version # 检查版本</span><br></pre></td></tr></table></figure><p>CentOS:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/ethersphere/bee/releases/download/v0.5.3/bee_0.5.3_amd64.rpm</span><br><span class="line">sudo rpm -i bee_0.5.3_amd64.rpm</span><br></pre></td></tr></table></figure><h3 id="2-默认启动"><a href="#2-默认启动" class="headerlink" title="2.默认启动"></a>2.默认启动</h3><p>加权限再启动否则会报错:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R bee:bee /var/lib/bee</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 按/etc/bee/bee.yaml的配置启动</span></span><br><span class="line">systemctl start bee # 启动</span><br><span class="line">systemctl stop bee# 停止</span><br><span class="line">systemctl status bee# 查看状态</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 手动启动</span></span><br><span class="line">bee start</span><br></pre></td></tr></table></figure><blockquote><p><font color='#e54d42'>注意: 两种启动方式选择一种即可, 在使用按配置启动时如果不成功会反复自动尝试启动,可能会造成<code>bee start</code>的无法启动,所以使用第二种启动时需要先<code>systemctl stop bee</code></font></p></blockquote><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/ZOR0Wq.png" alt="ZOR0Wq"></p><p>输入密码, 这个密码用于保护你私钥以及可以代表你的Swarm地址</p><blockquote><p>Error: get chain id: Post “<a href="http://localhost:8545&quot;">http://localhost:8545&quot;</a>: dial tcp 127.0.0.1:8545: connect: connection refused</p><p>原因: 在默认配置下连接的是本地的8545端口测试网络, 如果本地没有区块链网络的话就会报错</p><p>解决: <strong>后面会使用以太坊的Goerli测试网络,会在启动时加上参数或者自行修改配置文件</strong></p></blockquote><p><strong>还需要一些配置和要求见下方</strong></p><h3 id="3-Goerli测试网启动配置"><a href="#3-Goerli测试网启动配置" class="headerlink" title="3.Goerli测试网启动配置"></a>3.Goerli测试网启动配置</h3><p><strong>当第一运行Bee节点到测试网络上会在测试网络中借助支票工厂合约部署你的“支票”合约(支票簿), 支票用于链下核算(类似于微支付通道), 减轻链上压力提高交易效率.</strong></p><p>一旦部署了支票簿，Bee将在支票簿合同中存入一定数量的gBZZ (Goerli测试网上的BZZ代币)，这样它就可以为其他节点的服务支付报酬。</p><p>所以首先我们需要<strong>能够连接上测试网络Goerli</strong></p><ul><li><p>首先注册测试网依赖节点服务</p><p>注册一个swap-endpoint地址：<a href="https://infura.io" target="_blank" rel="noopener">https://infura.io</a></p><p><strong>第7分钟开始看,</strong>注册视频教程：<a href="https://www.bilibili.com/video/BV1EV411Y7yM" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1EV411Y7yM</a>   </p><p>拿到Goerli的的swap-endpoint地址：<a href="https://goerli.infura.io/v3/fe00e6f4a50b4a2fb2dc25ecb532a5ad" target="_blank" rel="noopener">https://goerli.infura.io/v3/</a><strong>*****</strong></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/owFB2v.png" alt="owFB2v"></p></li></ul><p>重新加参数启动:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bee start \</span><br><span class="line">  --verbosity 5 \</span><br><span class="line">  --swap-endpoint https://mainnet.infura.io/v3/xxxxxxxx \# 依赖的地址</span><br><span class="line">  --debug-api-enable</span><br></pre></td></tr></table></figure><p>部署支票簿合约没有足够的资金(需要10gbzz)而warning:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/ZevDvK.png" alt="ZevDvK"></p><h3 id="4-连接Clef配置"><a href="#4-连接Clef配置" class="headerlink" title="4.连接Clef配置"></a>4.连接Clef配置</h3><p>在获取代币之前还需要一步,就是连接自己创建的Bee_Clef账户管理工具, 使用Clef管理的账户而不使用自动创建的账户:</p><p>重新配置启动:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/.bee# 因为之前没有启用clef, 先删除掉之前的文件,需要重新设置密码</span><br><span class="line">bee start --verbosity 5 --swap-endpoint https://goerli.infura.io/v3/xxxxxxxxxxxxxx --debug-api-enable --clef-signer-enable --clef-signer-endpoint /var/lib/bee-clef/clef.ipc</span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/TM775e.png" alt="TM775e"></p><h3 id="5-获取fund代币"><a href="#5-获取fund代币" class="headerlink" title="5.获取fund代币"></a>5.获取fund代币</h3><p>部署支票簿合约需要一个基本的资金, 所以我们需要在测试网Goerli上通过其<strong>水龙头合约</strong>获取基本的gBzz代币</p><p>水龙头地址: <a href="https://faucet.ethswarm.org/" target="_blank" rel="noopener">Swarm Goerli Faucet</a>. (现在很难拿到)</p><p>gETH水龙头地址: <a href="https://goerli-faucet.slock.it/" target="_blank" rel="noopener">https://goerli-faucet.slock.it/</a></p><p>或者根据这篇文章中的方法通过发推特获取gEth(推荐): <a href="https://www.yundongfang.com/Yun41916.html" target="_blank" rel="noopener">https://www.yundongfang.com/Yun41916.html</a></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/TVsF6k.png" alt="TVsF6k"></p><h3 id="6-clef钱包导入MetaMask"><a href="#6-clef钱包导入MetaMask" class="headerlink" title="6.clef钱包导入MetaMask"></a>6.clef钱包导入MetaMask</h3><p>将clef账户导入到MetaMask中</p><p><code>cd /var/lib/bee-clef</code></p><p>文件夹下:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/82lRk0.png" alt="82lRk0"></p><p>或者终端运行<code>bee-clef-keys</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/eydkFy.png" alt="eydkFy"></p><p>会自动导入到主目录下,txt中就是密码</p><p>打开MetaMask中导入:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/719qCf.png" alt="719qCf"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/fPc6RB.png" alt="fPc6RB"></p><h3 id="7-gETH转换gBZZ"><a href="#7-gETH转换gBZZ" class="headerlink" title="7. gETH转换gBZZ"></a>7. gETH转换gBZZ</h3><p>通过点击在启动warning中的提示地址<font color='#e54d42'><strong>转换</strong>一些gETH为gBZZ:</font></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/9IJcpA.png" alt="9IJcpA"></p><p><code>https://bzz.ethswarm.org/?transaction=buy&amp;amount=10&amp;slippage=30&amp;receiver=你的地址</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/vKC9a5.png" alt="vKC9a5"></p><p>成功后上测试网浏览器检查是否到账:</p><p><a href="https://goerli.etherscan.io/address/0xBEd09CeAe4517236A778c9D5D43DA3e80794012C" target="_blank" rel="noopener">https://goerli.etherscan.io/address/<strong>你的地址</strong></a></p><p>把<strong>加重的</strong>那一段改成你的，然后进入看看。有没有币。</p><blockquote><p><font color='#e54d42'><strong>注意: 发布发票合约最少需要10个gBZZ以及少量(0.01?)的gETH, 如果不够的话就多弄几次</strong></font></p><p>在Metamsk中可以添加代币显示你的gBzz余额, 点击添加代币, <font color='#39b54a'><strong>gBZZ的地址为: 0x2ac3c1d3e24b45c6c310534bc2dd84b5ed576335</strong></font></p></blockquote><h3 id="8-修改配置文件启动"><a href="#8-修改配置文件启动" class="headerlink" title="8. 修改配置文件启动"></a>8. 修改配置文件启动</h3><p>启动加很多参数过于麻烦, 这里将所有的配置修改到配置文件中,然后默认启动即可, 需要修改的几项配置文件如下(主要修改的就是<code>swap-endpoint</code>):</p><p>位置: <code>/etc/bee/bee.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">clef-signer-enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">clef-signer-endpoint:</span> <span class="string">/var/lib/bee-clef/clef.ipc</span></span><br><span class="line"><span class="attr">config:</span> <span class="string">/etc/bee/bee.yaml</span></span><br><span class="line"><span class="attr">data-dir:</span> <span class="string">/var/lib/bee</span></span><br><span class="line"><span class="attr">debug-api-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:1635</span></span><br><span class="line"><span class="attr">debug-api-enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">password-file:</span> <span class="string">/var/lib/bee/password</span></span><br><span class="line"><span class="attr">swap-enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">swap-endpoint:</span> <span class="string">https://goerli.infura.io/v3/*************</span></span><br></pre></td></tr></table></figure><p>按配置启动:</p><p><code>systemctl start bee</code></p><p>或者手动配置启动:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在当前项目目录下, 运行</span></span><br><span class="line">vim mypsw.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出密码保存</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动(替换你的依赖)</span></span><br><span class="line">bee start --verbosity 5 --swap-endpoint https://goerli.infura.io/v3/xxxxxxxxx --debug-api-enable --clef-signer-enable --clef-signer-endpoint /var/lib/bee-clef/clef.ipc --password-file ./mypsw.txt --db-capacity 5000000</span><br></pre></td></tr></table></figure><p>启动后就会自动消费gETH和gBZZ调用Goerli测试网上的工厂合约,部署<font color='#e54d42'>我们的支票簿合约</font></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/o8lVMA.png" alt="o8lVMA"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INFO[2021-05-16T13:39:55+08:00] no chequebook found, deploying new one.      </span><br><span class="line">TRAC[2021-05-16T13:39:56+08:00] sending transaction 50491f8e17d91a8cd0dcecf39223f9162d8d89a0f5bca761ae037cd4d03d4181 with nonce 6 </span><br><span class="line">INFO[2021-05-16T13:39:57+08:00] deploying new chequebook in transaction 50491f8e17d91a8cd0dcecf39223f9162d8d89a0f5bca761ae037cd4d03d4181</span><br></pre></td></tr></table></figure><blockquote><p>支票簿工厂合约地址: 0xf0277caffea72734853b834afc9892461ea18474</p><p>可自行在<a href="https://goerli.etherscan.io/上搜索查看" target="_blank" rel="noopener">https://goerli.etherscan.io/上搜索查看</a></p></blockquote><h3 id="9-启动后测试"><a href="#9-启动后测试" class="headerlink" title="9. 启动后测试"></a>9. 启动后测试</h3><ol><li><p>查看bee日志</p><p><code>journalctl -u bee -f</code><br>查看bee-clef日志:</p><p><code>journalctl -u bee-clef -f</code></p></li><li><p>查看bee链接状态</p><p><code>curl http://localhost:1633</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/u3weRf.png" alt="u3weRf"></p></li><li><p>查看链接对等节点数:</p><p><code>curl -s http://localhost:1635/peers | jq &#39;.peers | length&#39;</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/pEXxS2.png" alt="pEXxS2"></p></li><li><p>查看自己钱包地址</p><p><code>curl -s localhost:1635/addresses | jq .ethereum</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/CWHDF5.png" alt="CWHDF5"></p></li><li><p>查看支票合约账本地址</p><p><code>curl -s http://localhost:1635/chequebook/address | jq .chequebookaddress</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/KmK9N2.png" alt="KmK9N2"></p></li></ol><h3 id="10-支票查看与提取"><a href="#10-支票查看与提取" class="headerlink" title="10. 支票查看与提取"></a>10. 支票查看与提取</h3><ol start="0"><li><p>查看区块欢迎度:</p><p><code>curl -X GET http://localhost:1645/topology | jq .population</code></p></li><li><p>下载cashout.sh脚本并赋予执行权限:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O cashout.sh https://gist.githubusercontent.com/ralph-pichler/3b5ccd7a5c5cd0500e6428752b37e975/raw/b40510f1172b96c21d6d20558ca1e70d26d625c4/cashout.sh &amp;&amp; chmod +x cashout.sh</span><br></pre></td></tr></table></figure></li><li><p>修改提取阈值</p><p>默认阈值太大,难以积攒,我们改小一点 <code>vim cashout.sh</code></p><p>修改第三行:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/Hrps0w.png" alt="Hrps0w"></p><p>保存退出</p></li><li><p>查看是否有支票</p><ul><li><p>自动</p><p><code>./cashout.sh</code></p><p>有支票就会有返回结果,没有的话就什么都不显示</p></li><li><p>手动</p><p><code>curl localhost:1635/settlements | jq</code></p><p>余额：<code>curl localhost:1635/chequebook/balance | jq</code></p><p>支票：<code>curl localhost:1635/chequebook/cheque | jq</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/z1R0K6.png" alt="z1R0K6"></p></li></ul></li><li><p>提取支票</p><ul><li><p>自动</p><p><code>./cashout.sh cashout-all</code></p></li><li><p>手动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST http://你的ip:1635/chequebook/cashout/peer地址</span><br></pre></td></tr></table></figure><p>会返回交易地址</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/bCpkE0.png" alt="bCpkE0"></p><p>成功后上测试网查看如下:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/4k3Ax3.png" alt="4k3Ax3"></p></li></ul></li><li><p>创建定时提取支票任务</p><p><code>crontab -e</code></p><p>输入3回车, 在文件中写入:</p><p><code>00 02 * * * [你的cashout.sh脚本目录] cashout-all</code></p><p>例如: <code>00 02 * * * /root/cashout.sh cashout-all</code></p><p>前面的02…是指每天凌晨两点执行cashout</p></li><li><p>自动查看状态脚本:</p><p>五秒查看一次:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">while true ;do</span><br><span class="line">  echo "当前运行状态:"</span><br><span class="line">  curl http://localhost:1633</span><br><span class="line">  echo "连接数:"</span><br><span class="line">  curl -s http://localhost:1635/peers | jq '.peers | length'</span><br><span class="line">  echo "存储状态:"</span><br><span class="line">  df -h | awk 'NR==4&#123;print $3, $4, $5&#125;NR==1&#123;print $3, $4, $5&#125;'</span><br><span class="line">  echo "支票:"</span><br><span class="line">  bash /root/projects/swarm_bee/cashout.sh</span><br><span class="line">  echo "==================="</span><br><span class="line"> 12 sleep 10; done;</span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/o4vRt8.png" alt="o4vRt8"></p></li></ol><h3 id="11-文件位置"><a href="#11-文件位置" class="headerlink" title="11.文件位置"></a>11.文件位置</h3><p>Configuration files are stored in <code>/etc/bee/</code></p><p>State, chunks and other data is stored in <code>/var/lib/bee/</code></p><h2 id="1-3-windows运行Bee"><a href="#1-3-windows运行Bee" class="headerlink" title="1.3 windows运行Bee"></a>1.3 windows运行Bee</h2><p><a href="https://www.yuque.com/docs/share/77e34e79-24ac-4cdf-adfa-3b0399d5242c?#" target="_blank" rel="noopener">https://www.yuque.com/docs/share/77e34e79-24ac-4cdf-adfa-3b0399d5242c?#</a></p><p>winodws导出私钥工具地址 :</p><p><a href="https://github.com/jmozah/exportSwarmKey" target="_blank" rel="noopener">https://github.com/jmozah/exportSwarmKey</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;资料:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.ethswarm.org/docs/installation/quick-start&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.ethswarm.org/docs/installation/quick-start&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.yuque.com/docs/share/712630dc-fa67-4318-a36e-502f871a0136?#&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.yuque.com/docs/share/712630dc-fa67-4318-a36e-502f871a0136?#&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;环境:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu:  18.04.2 LTS&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、安装Bee&quot;&gt;&lt;a href=&quot;#一、安装Bee&quot; class=&quot;headerlink&quot; title=&quot;一、安装Bee&quot;&gt;&lt;/a&gt;一、安装Bee&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://geth.ethereum.org/docs/clef/tutorial&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://geth.ethereum.org/docs/clef/tutorial&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-1-Bee-Clef&quot;&gt;&lt;a href=&quot;#1-1-Bee-Clef&quot; class=&quot;headerlink&quot; title=&quot;1.1 Bee Clef&quot;&gt;&lt;/a&gt;1.1 Bee Clef&lt;/h2&gt;&lt;p&gt;Go Ethereum’s Clef是以太坊的上的签名和密钥管理工具, 对于Swarm, 对应的工具就是Bee Clef, 能够方便的帮助我们签名大量交易与管理密钥.&lt;/p&gt;
&lt;h3 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1-安装&quot; class=&quot;headerlink&quot; title=&quot;1. 安装:&quot;&gt;&lt;/a&gt;1. 安装:&lt;/h3&gt;&lt;p&gt;Ubuntu:&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://github.com/ethersphere/bee-clef/releases/download/v0.4.9/bee-clef_0.4.9_amd64.deb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo dpkg -i bee-clef_0.4.9_amd64.deb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;centOS&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://github.com/ethersphere/bee-clef/releases/download/v0.4.9/bee-clef_0.4.9_amd64.rpm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo rpm -i bee-clef_0.4.9_amd64.rpm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;&lt;a href=&quot;https://docs.ethswarm.org/docs/installation/bee-clef/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;其他系统安装&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文件已经下载到&lt;code&gt;/etc/bee-clef&lt;/code&gt;文件夹下,默认情况不需要修改配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://xwjpics.gumptlu.work/qinniu_uPic/uXe1eR.png&quot; alt=&quot;uXe1eR&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-运行服务&quot;&gt;&lt;a href=&quot;#2-运行服务&quot; class=&quot;headerlink&quot; title=&quot;2. 运行服务&quot;&gt;&lt;/a&gt;2. 运行服务&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;systemctl status bee-clef&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;http://xwjpics.gumptlu.work/qinniu_uPic/wLaNsJ.png&quot; alt=&quot;wLaNsJ&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="swarm" scheme="https://xwjahahahaha.github.io/categories/technical/swarm/"/>
    
    
    <category term="swarm" scheme="https://xwjahahahaha.github.io/tags/swarm/"/>
    
  </entry>
  
  <entry>
    <title>日记_0174</title>
    <link href="https://xwjahahahaha.github.io/2021/05/13/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-05/%E6%97%A5%E8%AE%B0-0174/"/>
    <id>https://xwjahahahaha.github.io/2021/05/13/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-05/%E6%97%A5%E8%AE%B0-0174/</id>
    <published>2021-05-13T00:41:02.000Z</published>
    <updated>2021-05-15T04:38:45.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>每天</th><th>开发-云容器技术</th><th>项目与框架</th><th>科研-区块链(FL+BC)</th><th>预备事宜</th></tr></thead><tbody><tr><td>1.</td><td><strong>英语单词</strong></td><td>go基础</td><td>SimpleBitcoin</td><td>FL/分布式存储论文一周一篇细读</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>2.</td><td>语法课看完</td><td>go网络编程、Web框架</td><td>联邦学习框架</td><td>写专利</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>3.</td><td><font color='red'>六级</font></td><td>go数据库、ORM、go高级编程</td><td></td><td>机器学习课程</td><td>为<strong>研二实习</strong>做准备</td></tr><tr><td>4.</td><td>Leetcode</td><td>go容器技术docker、k8s</td><td></td><td></td><td></td></tr><tr><td>5.</td><td></td><td>go微服务与任务调度</td><td></td><td></td><td></td></tr><tr><td>6.</td><td></td><td>看源码docker、k8s、Fabric、以太坊、比特币等</td><td></td><td></td><td></td></tr><tr><td>7.</td><td></td><td>Linux、C++</td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li><li><input disabled="" type="checkbox"> Advances_and_Open_Problems_in_Federated_Learning</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input checked="" disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input checked="" disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input checked="" disabled="" type="checkbox"> Proof of Federated Learning: A Novel Energy-recycling Consensus Algorithm</li><li><input checked="" disabled="" type="checkbox"> Scalable and Communication-efficient Decentralized Federated Edge Learning with Multi-blockchain Framework</li><li><input checked="" disabled="" type="checkbox"> DEEP GRADIENT COMPRESSION:REDUCING THE COMMUNICATION BANDWIDTH FOR DISTRIBUTED TRAINING</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li><del>学弟的cosmos隐私保护项目</del></li><li>第一篇论文FL+BC</li><li><del>科技部编程比赛</del></li><li>暑期实习准备(Go, 算法等)</li></ul><p>三月 </p><ul><li><input checked="" disabled="" type="checkbox"> 3-3 ~ 3-7 cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></li><li><input checked="" disabled="" type="checkbox"> 3-8 ~ 3-20 科技部编程比赛项目实现(使用cosmos)</li><li><input disabled="" type="checkbox"> 3-20 ~ 3-31 Go公链实现项目</li><li><input disabled="" type="checkbox"> 4-1 ~ 4-31 Go网络编程Base + 专利一篇</li></ul><p>四月</p><ul><li><input disabled="" type="checkbox"> 4-1 ~ 4-20 Go网络编程(base、Echo、Gin)、 专利2篇  </li><li><input disabled="" type="checkbox"> 4-21 ~ 4-30 第一篇论文初稿与老师讨论</li></ul><p>五月</p><ul><li><input disabled="" type="checkbox"> 5-1 ~ 5-20 论文实验(编码)、数据库(mysql, PostgreSQL), ORM(Gorm) 、Go设计模式  </li><li><input disabled="" type="checkbox"> 5-21 ~ 5-31 Go设计模式  </li></ul><p>六月</p><ul><li><input disabled="" type="checkbox"> 6-1 ~ 6-31 docker、k8s</li></ul><p>七月</p><ul><li><input disabled="" type="checkbox"> 7-1 ~ 7-20 缓存、日志</li><li><input disabled="" type="checkbox"> 7-20 ~ 7-31 微服务(消息队列、任务调度、rpc)</li></ul><p>八月</p><ul><li><input disabled="" type="checkbox"> 8-1 ~ 8-20  微服务(消息队列、任务调度、rpc)</li><li><input disabled="" type="checkbox"> 8-20 ~ 8-31 </li></ul><p>四五月中要好好准备六级, 这次要过.</p><ul><li>go开发走云容器技术</li><li>区块链开发走科研论文、Etherem、Fabric、源码分析、Cosmos使用</li></ul><p><strong>有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> 英语</li><li><input checked="" disabled="" type="checkbox"> leetcode一题</li><li><input checked="" disabled="" type="checkbox"> swarm</li><li><input checked="" disabled="" type="checkbox"> solidity</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每天&lt;/th&gt;
&lt;th&gt;开发-云容器技术&lt;/th&gt;
&lt;th&gt;项目与框架&lt;/th&gt;
&lt;th&gt;科研-区块链(FL+BC)&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go基础&lt;/td&gt;
&lt;td&gt;SimpleBitcoin&lt;/td&gt;
&lt;td&gt;FL/分布式存储论文一周一篇细读&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;go网络编程、Web框架&lt;/td&gt;
&lt;td&gt;联邦学习框架&lt;/td&gt;
&lt;td&gt;写专利&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;go数据库、ORM、go高级编程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;机器学习课程&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;研二实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;Leetcode&lt;/td&gt;
&lt;td&gt;go容器技术docker、k8s&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;go微服务与任务调度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码docker、k8s、Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux、C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>微支付通道合约</title>
    <link href="https://xwjahahahaha.github.io/2021/05/12/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Ethereum/solidity%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/%E5%90%88%E7%BA%A6/%E5%BE%AE%E6%94%AF%E4%BB%98%E9%80%9A%E9%81%93%E5%90%88%E7%BA%A6/"/>
    <id>https://xwjahahahaha.github.io/2021/05/12/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Ethereum/solidity%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/%E5%90%88%E7%BA%A6/%E5%BE%AE%E6%94%AF%E4%BB%98%E9%80%9A%E9%81%93%E5%90%88%E7%BA%A6/</id>
    <published>2021-05-12T08:54:58.000Z</published>
    <updated>2021-05-13T07:43:12.288Z</updated>
    
    <content type="html"><![CDATA[<p>除了比特币的链下闪电网络,以太坊也有链下扩容的许多方式,微支付通道合约就是其中的一种方式</p><p><a href="https://learnblockchain.cn/docs/solidity/solidity-by-example.html#id7" target="_blank" rel="noopener">https://learnblockchain.cn/docs/solidity/solidity-by-example.html#id7</a></p><a id="more"></a><h1 id="创建与验证签名"><a href="#创建与验证签名" class="headerlink" title="创建与验证签名"></a>创建与验证签名</h1><p><strong>具体大量详细内容见上方链接</strong></p><p>合约工作有以下几步：</p><blockquote><ol><li>Alice 部署 <code>ReceiverPays</code> 合约, 并附上足够的以太来负担支付通道的付款。</li><li>Alice 通过自己的私钥签名来授权一个支付。</li><li>Alice 发送签名信息给Bob，这个信息是不需要保密的（稍后解释），用什么发送也无关紧要。</li><li>Bob 通过把签名信息提交给合约来索取这笔支付， 合约将验证信息的真实性并发送金额。</li></ol></blockquote><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/IMG_A6808C913C17-1.jpeg" alt="IMG_A6808C913C17-1"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: GPL-3.0</span></span><br><span class="line">pragma solidity &gt;=<span class="number">0.7</span><span class="number">.0</span> &lt; <span class="number">0.9</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract ReceivePays &#123;</span><br><span class="line">    <span class="comment">// 支付方</span></span><br><span class="line">    address owner = msg.sender;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// nonce标记map</span></span><br><span class="line">    mapping(<span class="function"><span class="params">uint256</span> =&gt;</span> bool) usedNonces;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造函数需要payable, 构造就需要转钱</span></span><br><span class="line">    <span class="keyword">constructor</span> () payable &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// claimPayment 收款方提取付款调用此函数</span></span><br><span class="line">    <span class="comment">// amount : 金额, nonce : 随机数, signature : 待验证签名信息 </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">claimPayment</span>(<span class="params">uint256 amount, uint256 nonce, bytes memory signature</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断nonce是否已使用</span></span><br><span class="line">        <span class="built_in">require</span>(!usedNonces[nonce]);</span><br><span class="line">        <span class="comment">// 标记此nonce的使用</span></span><br><span class="line">        usedNonces[nonce] = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 合约中重建客户端签名信息(取hash)</span></span><br><span class="line">        <span class="comment">// 签名的数据有: 1. 收款人地址 2. 数额 3. 随机数 4. 本合约地址</span></span><br><span class="line">        bytes32 message = prefixed(keccak256(abi.encodePacked(msg.sender, amount, nonce, <span class="keyword">this</span>)));</span><br><span class="line">        <span class="comment">// 验证与参数签名信息是否为支付者</span></span><br><span class="line">        <span class="built_in">require</span>(recoverSigner(message, signature) == owner);</span><br><span class="line">        <span class="comment">// 验证成功支付</span></span><br><span class="line">        payable(msg.sender).transfer(amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加入一个前缀，因为在eth_sign签名的时候会加上。</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">prefixed</span>(<span class="params">bytes32 hash</span>) <span class="title">internal</span> <span class="title">pure</span> <span class="title">returns</span> (<span class="params">bytes32</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">"\x19Ethereum Signed Message:\n32"</span>, hash));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证签名,并返回签名者地址</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">recoverSigner</span>(<span class="params">bytes32 message, bytes memory signature</span>) <span class="title">internal</span> <span class="title">pure</span> <span class="title">returns</span> (<span class="params">address</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 分离签名</span></span><br><span class="line">        (uint8 v, bytes32 r, bytes32 s) = splitSignature(signature);</span><br><span class="line">        <span class="keyword">return</span> ecrecover(message, v, r, s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分离签名</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">splitSignature</span>(<span class="params">bytes memory signature</span>) <span class="title">internal</span> <span class="title">pure</span> <span class="title">returns</span> (<span class="params">uint8 v, bytes32 r, bytes32 s</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(signature.length == <span class="number">65</span>);</span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="comment">// 前32个字节，在长度前缀之后。</span></span><br><span class="line">            r := mload(add(signature, <span class="number">32</span>))</span><br><span class="line">            <span class="comment">// 第二个32字节</span></span><br><span class="line">            s := mload(add(signature, <span class="number">64</span>))</span><br><span class="line">            <span class="comment">// 最后一个byte,在随后32字节的第一个字节</span></span><br><span class="line">            v := byte(<span class="number">0</span>, mload(add(signature, <span class="number">96</span>)))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (v, r, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支付方销毁合约,收回剩余资金</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">kill</span>(<span class="params"></span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.sender == owner);</span><br><span class="line">        selfdestruct(payable(msg.sender));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="微支付通道"><a href="#微支付通道" class="headerlink" title="微支付通道"></a>微支付通道</h1><h2 id="什么是支付通道？"><a href="#什么是支付通道？" class="headerlink" title="什么是支付通道？"></a><strong>什么是支付通道？</strong></h2><p>支付通道允许在无需发生交易的情况下多次转移以太。这意味着可以避免与交易相关的延迟和费用。 我们将探讨两方（Alice和Bob）之间的简单单向支付通道。 它涉及三个步骤：</p><blockquote><ol><li>Alice 附加一些以太创建智能合约，可以称为“打开”了支付通道</li><li>Alice会签署一些消息指明给接收者付款金额。 每次付款都会重复此步骤。</li><li>Bob“关闭”支付通道，取回以太币，并将剩余部分发送回发送者。</li></ol></blockquote><p>注解</p><blockquote><p>只有步骤1和3需要以太坊交易，步骤2意味着发送者通过离线方法（例如电子消息）将加密签名的消息发送给接收者。 这意味着只需要两个交易就可以支持任意数量（次数）的以太币转账。</p></blockquote><p>Bob 保证会收到资金，因为智能合约托管以太并根据合法的签名消息来执行。 合约<font color='#39b54a'><strong>还可以强制超时执行，</strong></font>即使收款人拒绝关闭通道，Alice也能保证最终收回资金。 付款通道的参与者可以决定支付通道打开的持续时间。 对于短期交易，例如为网络访问的每一分钟支付一次网费，或者是长期的，例如向员工支付小时工资，支付可能持续数月或数年。</p><h2 id="打开支付通道"><a href="#打开支付通道" class="headerlink" title="打开支付通道"></a>打开支付通道</h2><p>要打开支付通道，Alice 需要部署智能合约，附加要托管的以太币并指定预期的收款人，以及通道存在有效时间。 合约的 <code>SimplePaymentChannel</code> 函数就是来做这个事情，代码在本节末尾。</p><h2 id="进行支付"><a href="#进行支付" class="headerlink" title="进行支付"></a>进行支付</h2><p>Alice 通过向 Bob 发送签名消息来付款。<font color='#e54d42'>该步骤完全在以太坊网络之外执行。</font> 消息由发送者以加密方式签名，然后直接传输给收款人。</p><p>每条消息都包含以下信息：</p><blockquote><ul><li>智能合约的地址，用于防止交叉合约重放攻击。</li><li>到目前为止所发送的以太总量。</li></ul></blockquote><p><strong>在一系列转账结束时，付款通道仅需关闭一次</strong>。因此，<font color='#e54d42'><strong>只有一条消息被兑换。</strong></font> 这就是为什么<strong>每条消息都指定了以太的累计总量，而不是每次的微支付金额</strong>。 收款人自然而然的会选择兑换最新消息，因为这是以太总数最高的消息。 <strong>每条信息包含的nonce 将不再需要，因为智能合约仅执行一条信息。</strong></p><p><strong>包含合约地址用于防止一个支付通道的消息被用于不同的通道。</strong></p><p>以下是修改后的JavaScript代码，用于对上一节中的消息进行加密签名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">constructPaymentMessage</span>(<span class="params">contractAddress, amount</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> abi.soliditySHA3(</span><br><span class="line">        [<span class="string">"address"</span>, <span class="string">"uint256"</span>],</span><br><span class="line">        [contractAddress, amount]</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">signMessage</span>(<span class="params">message, callback</span>) </span>&#123;</span><br><span class="line">    web3.eth.personal.sign(</span><br><span class="line">        <span class="string">"0x"</span> + message.toString(<span class="string">"hex"</span>),</span><br><span class="line">        web3.eth.defaultAccount,</span><br><span class="line">        callback</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// contractAddress is used to prevent cross-contract replay attacks.</span></span><br><span class="line"><span class="comment">// amount, in wei, specifies how much Ether should be sent.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">signPayment</span>(<span class="params">contractAddress, amount, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> message = constructPaymentMessage(contractAddress, amount);</span><br><span class="line">    signMessage(message, callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关闭状态通道"><a href="#关闭状态通道" class="headerlink" title="关闭状态通道"></a>关闭状态通道</h3><p>当Bob准备好收到他们的资金时，就可以通过调用智能合约上的 <code>关闭</code> 功能来关闭支付通道。 关闭通道会向接收方支付所欠的以太币并销毁合约，剩余的以太币返回Alice。为了关闭通道，Bob需要提供 Alice 签名过的消息。</p><p>智能合约必须验证信息是否包含发送者的有效签名。执行此验证的过程与上面收款人使用的方法相同。 Solidity函数 <code>isValidSignature</code> 和 <code>recoverSigner</code> 就是完成这个工作。</p><p><strong>只有付款通道收款人可以调用 <code>close</code> 函数</strong>，其会选择最近的付款消息，因为该消息有最高的付款总额。 如果允许发送者调用此函数，他们可以提供较低金额的消息，来欺骗收款人。</p><p>函数会验证签名的消息是否与给定的参数匹配，如果匹配，收款人将收到应得的部分，余下的部分通过 <code>selfdestruct</code> 返还给发送者。 可以在完整的合约代码中看到 <code>close</code> 函数。</p><h3 id="通道有效期"><a href="#通道有效期" class="headerlink" title="通道有效期"></a>通道有效期</h3><p>Bob可以随时关闭支付通道，但如果他没有这样做，Alice 需要一种方法来收回他们托管的资金。 一个方法是在合约部署时设置 <em>到期时间</em> ，一旦达到那个时间，Alice 就可以调用 <code>claimTimeout</code>收回他们的资金。 可以在完整的合约代码中查看 <code>claimTimeout</code> 函数。</p><p>调用此功能后，Bob无法再接收任何以太币，因此，Bob必须在到期前关闭频道。</p><h3 id="完整链上合约"><a href="#完整链上合约" class="headerlink" title="完整链上合约"></a>完整链上合约</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: GPL-3.0</span></span><br><span class="line">pragma solidity &gt;=<span class="number">0.7</span><span class="number">.6</span> &lt;<span class="number">0.9</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract PaymentChannel &#123;</span><br><span class="line">    <span class="comment">// 支付者</span></span><br><span class="line">    address payable sender;</span><br><span class="line">    <span class="comment">// 接受者</span></span><br><span class="line">    address payable recipient;</span><br><span class="line">    <span class="comment">// 结束期限, 到时间会强制结束通道</span></span><br><span class="line">    uint256 public expiration;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span> (address payable _recipient, uint256 duration) public payable &#123;</span><br><span class="line">        sender = payable(msg.sender);</span><br><span class="line">        recipient = payable(_recipient);</span><br><span class="line">        expiration = block.timestamp + duration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证是否是有效的签名</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isValidSignature</span>(<span class="params">uint256 amount, bytes memory signature</span>) <span class="title">internal</span> <span class="title">view</span> <span class="title">returns</span>(<span class="params">bool</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 取hash</span></span><br><span class="line">        bytes32 message = prefixed(keccak256(abi.encodePacked(<span class="keyword">this</span>, amount)));</span><br><span class="line">        <span class="keyword">return</span> recoverSigner(message, signature) == sender;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 加入一个前缀，因为在eth_sign签名的时候会加上。</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">prefixed</span>(<span class="params">bytes32 hash</span>) <span class="title">internal</span> <span class="title">pure</span> <span class="title">returns</span> (<span class="params">bytes32</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">"\x19Ethereum Signed Message:\n32"</span>, hash));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证签名,并返回签名者地址</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">recoverSigner</span>(<span class="params">bytes32 message, bytes memory signature</span>) <span class="title">internal</span> <span class="title">pure</span> <span class="title">returns</span> (<span class="params">address</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 分离签名</span></span><br><span class="line">        (uint8 v, bytes32 r, bytes32 s) = splitSignature(signature);</span><br><span class="line">        <span class="keyword">return</span> ecrecover(message, v, r, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分离签名</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">splitSignature</span>(<span class="params">bytes memory signature</span>) <span class="title">internal</span> <span class="title">pure</span> <span class="title">returns</span> (<span class="params">uint8 v, bytes32 r, bytes32 s</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(signature.length == <span class="number">65</span>);</span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="comment">// 前32个字节，在长度前缀之后。</span></span><br><span class="line">            r := mload(add(signature, <span class="number">32</span>))</span><br><span class="line">            <span class="comment">// 第二个32字节</span></span><br><span class="line">            s := mload(add(signature, <span class="number">64</span>))</span><br><span class="line">            <span class="comment">// 最后一个byte,在随后32字节的第一个字节</span></span><br><span class="line">            v := byte(<span class="number">0</span>, mload(add(signature, <span class="number">96</span>)))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (v, r, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接受者关闭通道, 接受者可以用任意的签名信息来获得自己的余额(一般选择余额最大的), 如果有剩余则会返还给发送者</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params">uint256 amount, bytes memory signature</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 必须是接受者调用, 不能是支付者</span></span><br><span class="line">        <span class="built_in">require</span>(msg.sender == recipient);</span><br><span class="line">        <span class="comment">// 验证签名有效性</span></span><br><span class="line">        <span class="built_in">require</span>(isValidSignature(amount, signature));</span><br><span class="line">        <span class="comment">// 接受者返还金额</span></span><br><span class="line">        recipient.transfer(amount);</span><br><span class="line">        <span class="comment">// 销魂合约并且支付者返还余额</span></span><br><span class="line">        selfdestruct(sender);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 支付者可以随时延长最后期限时间, 但是接受者可以在最后期限之前随时关闭通道而不受其限制</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">uint256 newExpiration</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 必须是支付者</span></span><br><span class="line">        <span class="built_in">require</span>(msg.sender == sender);</span><br><span class="line">        <span class="built_in">require</span>(newExpiration &gt; expiration);</span><br><span class="line">        expiration = newExpiration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 到达最后期限时间, 任何人都可以关闭通道, 直接将剩下的钱返还给sender</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">claimTimeout</span>(<span class="params"></span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(block.timestamp &gt;= expiration);</span><br><span class="line">        selfdestruct(sender);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解</p><blockquote><p>函数 <code>splitSignature</code> 没有做足够的安全检查，完整的产品里应该使用严格测试的库，如：<a href="https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ECRecovery.sol" target="_blank" rel="noopener">openzepplin 的版本</a> 。</p></blockquote><h3 id="验证支付-链下"><a href="#验证支付-链下" class="headerlink" title="验证支付(链下)"></a>验证支付(链下)</h3><p><strong>与上一节不同，付款通道中的消息不是马上赎回。</strong> <strong>收款人会跟踪最新消息及在关闭付款通道时兑换它。 这意味着接收者对每条消息进行验证就至关重要。</strong> 否则，无法保证收款人能够最终获得付款。</p><p>收款人使用以下过程验证每条消息：</p><blockquote><ol><li>验证信息中的合约地址是否与付款通道匹配。</li><li>验证新金额是否为预期金额。</li><li>确认新金额不超过托管的以太币总额。</li><li>验证签名是否有效并来自通道的付款方。</li></ol></blockquote><p>我们使用 <a href="https://github.com/ethereumjs/ethereumjs-util" target="_blank" rel="noopener">ethereumjs-util</a> 库来编写验证过程，这里使用 JavaScript ，当然实现的方式有很多。下面的代码借鉴了 上面的 constructMessage 函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this mimics the prefixing behavior of the eth_sign JSON-RPC method.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prefixed</span>(<span class="params">hash</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ethereumjs.ABI.soliditySHA3(</span><br><span class="line">        [<span class="string">"string"</span>, <span class="string">"bytes32"</span>],</span><br><span class="line">        [<span class="string">"\x19Ethereum Signed Message:\n32"</span>, hash]</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recoverSigner</span>(<span class="params">message, signature</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> split = ethereumjs.Util.fromRpcSig(signature);</span><br><span class="line">    <span class="keyword">var</span> publicKey = ethereumjs.Util.ecrecover(message, split.v, split.r, split.s);</span><br><span class="line">    <span class="keyword">var</span> signer = ethereumjs.Util.pubToAddress(publicKey).toString(<span class="string">"hex"</span>);</span><br><span class="line">    <span class="keyword">return</span> signer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidSignature</span>(<span class="params">contractAddress, amount, signature, expectedSigner</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> message = prefixed(constructPaymentMessage(contractAddress, amount));</span><br><span class="line">    <span class="keyword">var</span> signer = recoverSigner(message, signature);</span><br><span class="line">    <span class="keyword">return</span> signer.toLowerCase() ==</span><br><span class="line">        ethereumjs.Util.stripHexPrefix(expectedSigner).toLowerCase();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;除了比特币的链下闪电网络,以太坊也有链下扩容的许多方式,微支付通道合约就是其中的一种方式&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://learnblockchain.cn/docs/solidity/solidity-by-example.html#id7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://learnblockchain.cn/docs/solidity/solidity-by-example.html#id7&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="solidity" scheme="https://xwjahahahaha.github.io/categories/technical/solidity/"/>
    
    
    <category term="solidity" scheme="https://xwjahahahaha.github.io/tags/solidity/"/>
    
  </entry>
  
  <entry>
    <title>swarm-1-概念知识</title>
    <link href="https://xwjahahahaha.github.io/2021/05/12/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Swarm/swarm-1-%E6%A6%82%E5%BF%B5%E7%9F%A5%E8%AF%86/"/>
    <id>https://xwjahahahaha.github.io/2021/05/12/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Swarm/swarm-1-%E6%A6%82%E5%BF%B5%E7%9F%A5%E8%AF%86/</id>
    <published>2021-05-12T06:07:08.000Z</published>
    <updated>2021-05-15T05:22:18.907Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习资料原文与链接:</p><p><a href="https://gateway.ethswarm.org/bzz/latest.bookofswarm.eth/" target="_blank" rel="noopener">https://gateway.ethswarm.org/bzz/latest.bookofswarm.eth/</a></p><p><a href="https://swarm.ethereum.org/#section-ecosystem" target="_blank" rel="noopener">https://swarm.ethereum.org/#section-ecosystem</a></p><p><a href="https://www.chainnews.com/articles/227689130917.htm?share_token=dd91ac29-f839-4956-8ec6-cebfceabd795" target="_blank" rel="noopener">https://www.chainnews.com/articles/227689130917.htm?share_token=dd91ac29-f839-4956-8ec6-cebfceabd795</a></p></blockquote><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/LiGCOI.png" alt="LiGCOI"></p><p>首先 Swarm 是以太坊项目官方的一部分，它主要是由以太坊基金会领投和开发，允许矿池存储、带宽和算力资源来支持基于以太坊网络的应用。从一开始，它就被认为是与以太坊和 Whisper 一起，定义了 Web 3.0 组件的三大支柱之一。</p><p>“如果说以太坊是全球计算cpu, 那么Swarm的目标就是它的<strong>硬盘</strong>”</p><p>Swarm 团队试图创建一个<strong>不停机、零故障和防审查的点对点存储和服务解决方案</strong>。<font color='#e54d42'><strong>在 Swarm 内创建一个经济激励的系统将促进资源交换价值的支付和转移。</strong></font>项目使用了以太坊区块链中不同的协议和技术。Swarm 的存在使互联网可以再次分散化，Swarm 的长期愿景是成为重新分散的 Internet 的操作系统。它将为数据的供应链经济性提供可扩展且可自我维持的基础架构。</p><a id="more"></a><h2 id="项目目标"><a href="#项目目标" class="headerlink" title="项目目标"></a>项目目标</h2><p>Swarm 的主要目标是<strong>提供充分分散和冗余存储的以太坊公共记录</strong>，<strong>尤其是存储和分发 DApp 的代码和数据以及区块链数据</strong>。从经济角度来看，它<strong>允许参与者有效汇集他们的存储容量和带宽资源，以给网络的所有参与者提供这些服务，同时接受以太坊的激励。</strong></p><p>Swarm 更广泛的目标，是<strong>为去中心化的 Web 应用程序 (DApp) 开发人员提供基础设施服务，特别是：消息传递、数据流、点对点记账、可变资源更新、存储保险、监管扫描和修复、支付渠道和数据库服务。</strong></p><p>以太坊对世界计算机的愿景，构成了即将到来的<strong>数据场景的无需信任（即完全可信任）结构</strong>：<strong>支持数据存储，传输和处理的全球基础架构。</strong></p><h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><p>从开发人员的角度来看，Swarm 最好地看作是<strong>公共基础结构</strong>，它为 Web 2.0 时代所熟悉的实时交互式 Web 应用程序提供了动力。<strong>它为作为复杂应用程序<font color='#e54d42'>构建块的基元</font>提供了低级 API，并为基于 Swarm 的 Web 3.0 开发堆栈的工具和库提供了基础。</strong>API 和工具旨在允许从任何传统的 Web 浏览器访问 Swarm 网络，因此 Swarm 可以立即提供私有和分散的替代方法来替代当今的 World Wide Web （WWW）。</p><p>swarm为自我主权的数字社会的提供分布式存储与通信, 作为分布式网络的后端存储栈</p><p>目标是构建一个人人平等、容错、弹性可拓展的互联网底层激励机制</p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/0PoWcs.png" alt="0PoWcs"></p><ol><li><p>对等网络协议，用作底层传输，</p></li><li><p>具有协议的覆盖网络，该协议为块（固定大小的数据块）的分布式不可变存储提供支持，</p></li><li><p>提供<strong>高层数据访问并为基本层功能定义 API 的组件</strong></p></li><li><p>定义标准的应用程序层，并概述更精细的用例的最佳实践。</p></li></ol><h1 id="Incentives激励模式"><a href="#Incentives激励模式" class="headerlink" title="Incentives激励模式"></a>Incentives激励模式</h1><p>没有货币的新用户可以为其他节点提供服务，直到他们积累足够的货币来使用自己的服务</p><p>Swarm 总体激励设计图:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/z1ImLW.jpg" alt="z1ImLW"></p><p>总体激励总结:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/%E6%BF%80%E5%8A%B1%E6%9C%BA%E5%88%B6.png" alt="激励机制"></p><h2 id="1-Sharing-bandwidth-分享带宽"><a href="#1-Sharing-bandwidth-分享带宽" class="headerlink" title="1. Sharing bandwidth 分享带宽"></a>1. Sharing bandwidth 分享带宽</h2><h3 id="1-1-Incentives-for-serving-and-relaying-服务与接力的激励"><a href="#1-1-Incentives-for-serving-and-relaying-服务与接力的激励" class="headerlink" title="1.1 Incentives for serving and relaying 服务与接力的激励"></a>1.1 Incentives for serving and relaying 服务与接力的激励</h3><h4 id="1-1-1-Forwarding-kademlia-and-repeated-dealings"><a href="#1-1-1-Forwarding-kademlia-and-repeated-dealings" class="headerlink" title="1.1.1 Forwarding kademlia and repeated dealings"></a>1.1.1 Forwarding kademlia and repeated dealings</h4><p><strong>付费检索:</strong> 检索区块的成本由发起人提供</p><p>块的检索可以被视为一个功能单元，其中存储者充当服务提供者，请求者充当消费者。</p><p>块检索需要中继转发时, 对于转发的节点也需要激励</p><hr><h4 id="1-1-2-反向响应收费-charging-for-backwarded-response"><a href="#1-1-2-反向响应收费-charging-for-backwarded-response" class="headerlink" title="1.1.2 反向响应收费(charging for backwarded response):"></a>1.1.2 <strong>反向响应收费(charging for backwarded response):</strong></h4><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/aquawr.png" alt="aquawr"></p><p>激励检索。节点D (Downloader)向块的地址发送一个检索请求。检索使用转发，所以请求通过转发节点F0，…从Fn一直到节点S，即<strong>最接近</strong>块地址的存储节点。块通过沿着相同的路径传回到下载程序来传递。接收块响应将触发一个记帐事件。</p><p>Downloader请求不存在的区块则会给予制裁</p><p>一旦一个节点发起(启动或转发)一个请求，如果<strong>该块在定义的生存时间(TTL)内被交付，它就可以获得该块支付费用，</strong>因此，当该块被传递回来时，就不存在阻止及时交付的动机(防止超时)</p><hr><h3 id="1-2-块检索定价协议-Pricing-protocol-for-chunk-retrieval"><a href="#1-2-块检索定价协议-Pricing-protocol-for-chunk-retrieval" class="headerlink" title="1.2 块检索定价协议(Pricing protocol for chunk retrieval)"></a>1.2 <strong>块检索定价协议(Pricing protocol for chunk retrieval)</strong></h3><p>此部分是在Swarm网络中，节点用来传递它们的块的价格的协议。</p><h4 id="1-2-1-市场定价-Price-discovery"><a href="#1-2-1-市场定价-Price-discovery" class="headerlink" title="1.2.1 市场定价(Price discovery)"></a>1.2.1 市场定价(Price discovery)</h4><p>它允许市场定价机制仅<strong>基于本地决策</strong>，这是必要的，原因如下:</p><ol><li><p>带宽成本在世界各地是不同的:允许节点通过其价格表达其成本结构将使价格和质量竞争，最终使终端用户受益。</p></li><li><p>由于使用率或连通性的波动，对带宽资源的需求是不断变化的。</p></li><li><p>能够直接对变化做出反应，就能创造一个<strong>自我调节的系统。</strong></p></li></ol><blockquote><p>防止节点负责者在节点费用成本上升时关闭节点来保护自己的利润,而对整个系统造成服务的缺失</p></blockquote><p>引入了一个协议消息，它可以将这些价格传递给上游对等点(见8.4)。我们可以将此消息概念化为对请求的另一种响应。<font color='#e54d42'><strong>节点为每个邻近距离维护与每个对等体相关联的价格</strong>，因此当它们发出检索请求时，它们已经知道下游对等体在生存期内成功交付有效块时承诺支付的价格。</font></p><p>为了防止价格变化消息充斥上游对等体的DoS攻击(让上游节点只接受和处理消息变化消息)，<strong>价格消息的速率被限制</strong>。</p><p><font color='#e54d42'>表现良好、价格有竞争力的节点受到同行的青睐;如果一个节点的价格设定过高，或者其价格的波动性比网络中的其他节点高得多，那么其他节点就不太愿意向它们请求区块.</font></p><p>根据每个节点的价格波动性与合作成功率相关</p><p>表现良好、价格有竞争力的节点受到同行的青睐;如果一个节点的价格设定过高，或者其价格的波动性比网络中的其他节点高得多，那么同行将不太愿意请求</p><hr><h4 id="1-2-2-差别定价-Differential-pricing-of-proximities"><a href="#1-2-2-差别定价-Differential-pricing-of-proximities" class="headerlink" title="1.2.2 差别定价(Differential pricing of proximities)"></a>1.2.2 差别定价(Differential pricing of proximities)</h4><p>如果在一个区域内请求一个块的价格相同,那么除了可能缓存块并通过转售它来赚取收入之外，<strong>节点没有转发请求的真正动机</strong>。对于新块来说，这个选项是不合理的，特别是当它们处于一个节点的浅层邻近顺序时，它们不太可能被请求。更重要的是，如果区块的定价在邻近的订单中是统一的，合谋的节点可以产生区块流量，并捕获它们发送的数据，这实际上是一次免费的DoS攻击(见图21)。</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/rywTPZ.png" alt="rywTPZ"></p><p>在邻近地区统一的块价格将允许DoS攻击。攻击者可以通过向S(只有S可以提供服务)发送检索请求，在两个节点D和S之间创建一个流量。如果相邻区域的价格相同，则这种攻击不会给攻击者带来任何成本。</p><blockquote><p>因为节点之间的价格都相同,所以可以不考虑距离而随意的转发</p></blockquote><p>为了减少这种攻击，当请求从请求者路由到存储者时，<strong>请求者为块付出的代价必须严格大于存储节点所得到的补偿。</strong></p><p>我们需要有一个奖励转发节点的定价方案，因此，这就需要对节点进行差异化定价</p><p>在这个定价模型中，<font color='#e54d42'><strong>如果对等端距离块地址更远，交付成本更高，也就是说，对块交付的奖励是一个接近度递减的函数。</strong></font></p><hr><h4 id="1-2-3-同类产品价格的一致性-Uniformity-of-price-across-peers"><a href="#1-2-3-同类产品价格的一致性-Uniformity-of-price-across-peers" class="headerlink" title="1.2.3 同类产品价格的一致性(Uniformity of price across peers)"></a>1.2.3 同类产品价格的一致性(Uniformity of price across peers)</h4><ol><li><p>在整个网络中对于相同的邻近顺序(OP)的统一价格</p></li><li><p>价格作为邻近性的函数线性下降</p></li><li><p>节点可以增加连接性并保持价格较低。</p></li></ol><p>通过这种方式，奖励机制的设计使得有利于单个节点的策略也被整齐地对齐，从而有利于整个系统的健康发展。</p><h4 id="1-2-4-容器密度-bin-density"><a href="#1-2-4-容器密度-bin-density" class="headerlink" title="1.2.4 容器密度(bin density)"></a>1.2.4 容器密度(bin density)</h4><p> 基于下游对等体与区块的邻近性进行计费导致一个转发请求的距离越远，我们赚的就越多。这种动机与下载者的兴趣相一致，即在服务他们的请求时节省跳跃，从而降低延迟交付和带宽开销。<strong>节省跳数将改善延迟，并使对等端更有效率</strong></p><h4 id="1-2-5-缓存和伸缩-Caching-and-auto-scaling"><a href="#1-2-5-缓存和伸缩-Caching-and-auto-scaling" class="headerlink" title="1.2.5 缓存和伸缩 Caching and auto-scaling"></a>1.2.5 缓存和伸缩 Caching and auto-scaling</h4><p><strong>节点每服务一个数据块就会获得奖励，因此数据块的盈利能力与它的受欢迎程度成正比:数据块被请求的频率越高，相对于每个时间单位存储的固定成本，其奖励就越高。当节点达到存储容量限制，并决定删除哪些块时，理性利润最大化代理的最优策略是删除利润率最低的块。</strong></p><p>为了最大化可选择的块集，节点会有机会缓存它们所传递的数据以及它们同步的数据块。这将导致流行内容更广泛地传播和更快地服务，使整个群体成为一个自动扩展和自动平衡的内容分发网络。</p><h4 id="1-2-6-非缓存节点-Non-caching-nodes"><a href="#1-2-6-非缓存节点-Non-caching-nodes" class="headerlink" title="1.2.6 非缓存节点 Non-caching nodes"></a>1.2.6 非缓存节点 Non-caching nodes</h4><p>非缓存节点: 仅转发功能,不缓存节点</p><p>任何留给中继节点利润的方案都为仅转发的非缓存节点进入网络创造了积极的激励。这样的节点对网络并没有本质上的好处，因为它们会产生不必要的带宽开销。一方面，它们的存在原则上可以减轻存储节点重新铺设通信量的负担，因此在浅箱中使用它们可能没有坏处。</p><p>另一方面，在邻近深度更接近的情况下，它们的同行会倾向于为它们提供缓存/存储节点，因为至少在它们假设的责任区域内，它们的缺点是不适合块。<strong>非缓存节点也有助于增加匿名性(见2.3.1)。</strong></p><h3 id="1-3-Incentivising-push-syncing-推-同步激励"><a href="#1-3-Incentivising-push-syncing-推-同步激励" class="headerlink" title="1.3 Incentivising push-syncing 推-同步激励"></a>1.3 Incentivising push-syncing 推-同步激励</h3><p>推同步是一种协议，它<strong>确保上传到网络的数据块到达其正确的地址</strong>。</p><p>推同步协议类似于检索协议，它们各自的消息交换序列通过相同的路由。推送同步协议中的数据块传递类似于检索请求，相反，推送同步中的保管接收语句类似于检索中的数据块传递响应。</p><h2 id="2-Swap-accounting-and-settlement-交换-账户与结算"><a href="#2-Swap-accounting-and-settlement-交换-账户与结算" class="headerlink" title="2. Swap: accounting and settlement 交换:账户与结算"></a>2. Swap: accounting and settlement 交换:账户与结算</h2><h3 id="2-1-Peer-to-peer-accounting"><a href="#2-1-Peer-to-peer-accounting" class="headerlink" title="2.1 Peer to peer accounting"></a>2.1 Peer to peer accounting</h3><p>一种机制来跟踪对等点之间的数据流量，并为消息中继提供对等<strong>计费</strong>。</p><h3 id="2-2-Cheques-as-off-chain-commitments-to-pay"><a href="#2-2-Cheques-as-off-chain-commitments-to-pay" class="headerlink" title="2.2 Cheques as off-chain commitments to pay"></a>2.2 Cheques as off-chain commitments to pay</h3><p>区块链网络中直接链上支付的一个主要问题是，每笔交易都必须由参与网络的每个节点来处理，导致交易成本很高。然而，创建支付而不在链上显示这种支付是可能的。这种支付被称为第二层支付策略。其中一种策略是<strong>延迟付款并批量处理</strong>。为了降低成本，受益人必须愿意承担更高的结算失败风险。</p><p>….</p><h2 id="3-storage-incentives-存储激励"><a href="#3-storage-incentives-存储激励" class="headerlink" title="3. storage incentives 存储激励"></a>3. storage incentives 存储激励</h2><p>见总结图</p><h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><p>基础层提供以下服务:</p><ol><li>参与与访问不需要许可</li><li>节点运营商零现金进入</li><li>最大的资源利用率</li><li>数据的负载均衡分布</li><li>拓展性</li><li>审查阻力和存储和检索的隐私</li><li>自动拓展受欢迎的内容</li><li>基本合理的推诿和保密</li><li>在一个动态网络中，节点的阻力和最终一致性</li><li>由于内在的经济激励，无需干预的可持续性</li><li>稳健的私人对等会计</li><li>激励带宽共享</li><li>链上结算的链外微承诺</li><li>DoS抵抗和垃圾邮件保护</li><li>积极的(即受到奖励的)储存激励</li><li>消极的(即通过威胁惩罚措施来劝阻)对数据丢失的激励。</li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;学习资料原文与链接:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gateway.ethswarm.org/bzz/latest.bookofswarm.eth/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://gateway.ethswarm.org/bzz/latest.bookofswarm.eth/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://swarm.ethereum.org/#section-ecosystem&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://swarm.ethereum.org/#section-ecosystem&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.chainnews.com/articles/227689130917.htm?share_token=dd91ac29-f839-4956-8ec6-cebfceabd795&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.chainnews.com/articles/227689130917.htm?share_token=dd91ac29-f839-4956-8ec6-cebfceabd795&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://xwjpics.gumptlu.work/qinniu_uPic/LiGCOI.png&quot; alt=&quot;LiGCOI&quot;&gt;&lt;/p&gt;
&lt;p&gt;首先 Swarm 是以太坊项目官方的一部分，它主要是由以太坊基金会领投和开发，允许矿池存储、带宽和算力资源来支持基于以太坊网络的应用。从一开始，它就被认为是与以太坊和 Whisper 一起，定义了 Web 3.0 组件的三大支柱之一。&lt;/p&gt;
&lt;p&gt;“如果说以太坊是全球计算cpu, 那么Swarm的目标就是它的&lt;strong&gt;硬盘&lt;/strong&gt;”&lt;/p&gt;
&lt;p&gt;Swarm 团队试图创建一个&lt;strong&gt;不停机、零故障和防审查的点对点存储和服务解决方案&lt;/strong&gt;。&lt;font color=&#39;#e54d42&#39;&gt;&lt;strong&gt;在 Swarm 内创建一个经济激励的系统将促进资源交换价值的支付和转移。&lt;/strong&gt;&lt;/font&gt;项目使用了以太坊区块链中不同的协议和技术。Swarm 的存在使互联网可以再次分散化，Swarm 的长期愿景是成为重新分散的 Internet 的操作系统。它将为数据的供应链经济性提供可扩展且可自我维持的基础架构。&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="swarm" scheme="https://xwjahahahaha.github.io/categories/technical/swarm/"/>
    
    
    <category term="swarm" scheme="https://xwjahahahaha.github.io/tags/swarm/"/>
    
  </entry>
  
  <entry>
    <title>208-实现Trie前缀树</title>
    <link href="https://xwjahahahaha.github.io/2021/05/12/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E8%AE%BE%E8%AE%A1%E7%B1%BB/208-%E5%AE%9E%E7%8E%B0Trie%E5%89%8D%E7%BC%80%E6%A0%91/"/>
    <id>https://xwjahahahaha.github.io/2021/05/12/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E8%AE%BE%E8%AE%A1%E7%B1%BB/208-%E5%AE%9E%E7%8E%B0Trie%E5%89%8D%E7%BC%80%E6%A0%91/</id>
    <published>2021-05-12T02:03:12.000Z</published>
    <updated>2021-05-12T02:05:07.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://leetcode-cn.com/problems/implement-trie-prefix-tree/" target="_blank" rel="noopener">208. 实现 Trie (前缀树)</a></p><p>难度中等754</p><p><strong><a href="https://baike.baidu.com/item/字典树/9825209?fr=aladdin" target="_blank" rel="noopener">Trie</a></strong>（发音类似 “try”）或者说 <strong>前缀树</strong> 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。</p><p>请你实现 Trie 类：</p><ul><li><code>Trie()</code> 初始化前缀树对象。</li><li><code>void insert(String word)</code> 向前缀树中插入字符串 <code>word</code>。</li><li><code>boolean search(String word)</code> 如果字符串 <code>word</code> 在前缀树中，返回 <code>true</code>（即，在检索之前已经插入）；否则，返回 <code>false</code> 。</li><li><code>boolean startsWith(String prefix)</code> 如果之前已经插入的字符串 <code>word</code> 的前缀之一为 <code>prefix</code> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li></ul><a id="more"></a> <p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">[&quot;Trie&quot;, &quot;insert&quot;, &quot;search&quot;, &quot;search&quot;, &quot;startsWith&quot;, &quot;insert&quot;, &quot;search&quot;]</span><br><span class="line">[[], [&quot;apple&quot;], [&quot;apple&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;]]</span><br><span class="line">输出</span><br><span class="line">[null, null, true, false, true, null, true]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">Trie trie &#x3D; new Trie();</span><br><span class="line">trie.insert(&quot;apple&quot;);</span><br><span class="line">trie.search(&quot;apple&quot;);   &#x2F;&#x2F; 返回 True</span><br><span class="line">trie.search(&quot;app&quot;);     &#x2F;&#x2F; 返回 False</span><br><span class="line">trie.startsWith(&quot;app&quot;); &#x2F;&#x2F; 返回 True</span><br><span class="line">trie.insert(&quot;app&quot;);</span><br><span class="line">trie.search(&quot;app&quot;);     &#x2F;&#x2F; 返回 True</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li><li><code>word</code> 和 <code>prefix</code> 仅由小写英文字母组成</li><li><code>insert</code>、<code>search</code> 和 <code>startsWith</code> 调用次数 <strong>总计</strong> 不超过 <code>3 * 104</code> 次</li></ul><h2 id="解题思路及代码"><a href="#解题思路及代码" class="headerlink" title="解题思路及代码"></a>解题思路及代码</h2><p><a href="https://leetcode-cn.com/problems/implement-trie-prefix-tree/solution/trie-tree-de-shi-xian-gua-he-chu-xue-zhe-by-huwt/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/implement-trie-prefix-tree/solution/trie-tree-de-shi-xian-gua-he-chu-xue-zhe-by-huwt/</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Trie <span class="keyword">struct</span> &#123;</span><br><span class="line">    isEnd <span class="keyword">bool</span></span><br><span class="line">    children [<span class="number">26</span>]*Trie</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span> <span class="title">Trie</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Trie&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Inserts a word into the trie. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Trie)</span> <span class="title">Insert</span><span class="params">(word <span class="keyword">string</span>)</span></span>  &#123;</span><br><span class="line">    node := this</span><br><span class="line">    <span class="keyword">for</span> _, c := <span class="keyword">range</span> word &#123;</span><br><span class="line">        i := c - <span class="string">'a'</span></span><br><span class="line">        <span class="keyword">if</span> node.children[i] == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="comment">// 不存在就创建</span></span><br><span class="line">            node.children[i] = <span class="built_in">new</span>(Trie)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 向下遍历</span></span><br><span class="line">        node = node.children[i]</span><br><span class="line">    &#125;</span><br><span class="line">    node.isEnd = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Returns if the word is in the trie. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Trie)</span> <span class="title">Search</span><span class="params">(word <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">   node := this</span><br><span class="line">   <span class="keyword">for</span> _, c := <span class="keyword">range</span> word &#123;</span><br><span class="line">       i := c - <span class="string">'a'</span></span><br><span class="line">       <span class="keyword">if</span> node.children[i] == <span class="literal">nil</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">       &#125;</span><br><span class="line">       node = node.children[i]</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 注意: 返回最后一个单词的结束字符而不是直接返回true</span></span><br><span class="line">   <span class="keyword">return</span> node.isEnd</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Returns if there is any word in the trie that starts with the given prefix. */</span></span><br><span class="line"><span class="comment">// 判断 Trie 中是或有以 prefix 为前缀的单词</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Trie)</span> <span class="title">StartsWith</span><span class="params">(prefix <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    node := this</span><br><span class="line">    <span class="keyword">for</span> _, c := <span class="keyword">range</span> prefix &#123;</span><br><span class="line">        i := c - <span class="string">'a'</span></span><br><span class="line">        <span class="keyword">if</span> node.children[i] == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        node = node.children[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注意: 这里就是直接返回true,因为只需要判断前缀存在即可,后续是否还有不用考虑</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Trie object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * obj := Constructor();</span></span><br><span class="line"><span class="comment"> * obj.Insert(word);</span></span><br><span class="line"><span class="comment"> * param_2 := obj.Search(word);</span></span><br><span class="line"><span class="comment"> * param_3 := obj.StartsWith(prefix);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/implement-trie-prefix-tree/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;208. 实现 Trie (前缀树)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;难度中等754&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://baike.baidu.com/item/字典树/9825209?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Trie&lt;/a&gt;&lt;/strong&gt;（发音类似 “try”）或者说 &lt;strong&gt;前缀树&lt;/strong&gt; 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。&lt;/p&gt;
&lt;p&gt;请你实现 Trie 类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Trie()&lt;/code&gt; 初始化前缀树对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void insert(String word)&lt;/code&gt; 向前缀树中插入字符串 &lt;code&gt;word&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean search(String word)&lt;/code&gt; 如果字符串 &lt;code&gt;word&lt;/code&gt; 在前缀树中，返回 &lt;code&gt;true&lt;/code&gt;（即，在检索之前已经插入）；否则，返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean startsWith(String prefix)&lt;/code&gt; 如果之前已经插入的字符串 &lt;code&gt;word&lt;/code&gt; 的前缀之一为 &lt;code&gt;prefix&lt;/code&gt; ，返回 &lt;code&gt;true&lt;/code&gt; ；否则，返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="leetcode" scheme="https://xwjahahahaha.github.io/categories/technical/leetcode/"/>
    
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>日记_0173</title>
    <link href="https://xwjahahahaha.github.io/2021/05/12/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-05/%E6%97%A5%E8%AE%B0-0173/"/>
    <id>https://xwjahahahaha.github.io/2021/05/12/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-05/%E6%97%A5%E8%AE%B0-0173/</id>
    <published>2021-05-12T01:20:19.000Z</published>
    <updated>2021-05-13T00:40:49.812Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>每天</th><th>开发-云容器技术</th><th>项目与框架</th><th>科研-区块链(FL+BC)</th><th>预备事宜</th></tr></thead><tbody><tr><td>1.</td><td><strong>英语单词</strong></td><td>go基础</td><td>SimpleBitcoin</td><td>FL/分布式存储论文一周一篇细读</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>2.</td><td>语法课看完</td><td>go网络编程、Web框架</td><td>联邦学习框架</td><td>写专利</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>3.</td><td><font color='red'>六级</font></td><td>go数据库、ORM、go高级编程</td><td></td><td>机器学习课程</td><td>为<strong>研二实习</strong>做准备</td></tr><tr><td>4.</td><td>Leetcode</td><td>go容器技术docker、k8s</td><td></td><td></td><td></td></tr><tr><td>5.</td><td></td><td>go微服务与任务调度</td><td></td><td></td><td></td></tr><tr><td>6.</td><td></td><td>看源码docker、k8s、Fabric、以太坊、比特币等</td><td></td><td></td><td></td></tr><tr><td>7.</td><td></td><td>Linux、C++</td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li><li><input disabled="" type="checkbox"> Advances_and_Open_Problems_in_Federated_Learning</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input checked="" disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input checked="" disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input checked="" disabled="" type="checkbox"> Proof of Federated Learning: A Novel Energy-recycling Consensus Algorithm</li><li><input checked="" disabled="" type="checkbox"> Scalable and Communication-efficient Decentralized Federated Edge Learning with Multi-blockchain Framework</li><li><input checked="" disabled="" type="checkbox"> DEEP GRADIENT COMPRESSION:REDUCING THE COMMUNICATION BANDWIDTH FOR DISTRIBUTED TRAINING</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li><del>学弟的cosmos隐私保护项目</del></li><li>第一篇论文FL+BC</li><li><del>科技部编程比赛</del></li><li>暑期实习准备(Go, 算法等)</li></ul><p>三月 </p><ul><li><input checked="" disabled="" type="checkbox"> 3-3 ~ 3-7 cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></li><li><input checked="" disabled="" type="checkbox"> 3-8 ~ 3-20 科技部编程比赛项目实现(使用cosmos)</li><li><input disabled="" type="checkbox"> 3-20 ~ 3-31 Go公链实现项目</li><li><input disabled="" type="checkbox"> 4-1 ~ 4-31 Go网络编程Base + 专利一篇</li></ul><p>四月</p><ul><li><input disabled="" type="checkbox"> 4-1 ~ 4-20 Go网络编程(base、Echo、Gin)、 专利2篇  </li><li><input disabled="" type="checkbox"> 4-21 ~ 4-30 第一篇论文初稿与老师讨论</li></ul><p>五月</p><ul><li><input disabled="" type="checkbox"> 5-1 ~ 5-20 论文实验(编码)、数据库(mysql, PostgreSQL), ORM(Gorm) 、Go设计模式  </li><li><input disabled="" type="checkbox"> 5-21 ~ 5-31 Go设计模式  </li></ul><p>六月</p><ul><li><input disabled="" type="checkbox"> 6-1 ~ 6-31 docker、k8s</li></ul><p>七月</p><ul><li><input disabled="" type="checkbox"> 7-1 ~ 7-20 缓存、日志</li><li><input disabled="" type="checkbox"> 7-20 ~ 7-31 微服务(消息队列、任务调度、rpc)</li></ul><p>八月</p><ul><li><input disabled="" type="checkbox"> 8-1 ~ 8-20  微服务(消息队列、任务调度、rpc)</li><li><input disabled="" type="checkbox"> 8-20 ~ 8-31 </li></ul><p>四五月中要好好准备六级, 这次要过.</p><ul><li>go开发走云容器技术</li><li>区块链开发走科研论文、Etherem、Fabric、源码分析、Cosmos使用</li></ul><p><strong>有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> 英语70词 + 听力复盘</li><li><input checked="" disabled="" type="checkbox"> leetcode一题</li><li><input checked="" disabled="" type="checkbox"> solidity</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每天&lt;/th&gt;
&lt;th&gt;开发-云容器技术&lt;/th&gt;
&lt;th&gt;项目与框架&lt;/th&gt;
&lt;th&gt;科研-区块链(FL+BC)&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go基础&lt;/td&gt;
&lt;td&gt;SimpleBitcoin&lt;/td&gt;
&lt;td&gt;FL/分布式存储论文一周一篇细读&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;go网络编程、Web框架&lt;/td&gt;
&lt;td&gt;联邦学习框架&lt;/td&gt;
&lt;td&gt;写专利&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;go数据库、ORM、go高级编程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;机器学习课程&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;研二实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;Leetcode&lt;/td&gt;
&lt;td&gt;go容器技术docker、k8s&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;go微服务与任务调度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码docker、k8s、Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux、C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>日记_0172</title>
    <link href="https://xwjahahahaha.github.io/2021/05/10/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-05/%E6%97%A5%E8%AE%B0-0172/"/>
    <id>https://xwjahahahaha.github.io/2021/05/10/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-05/%E6%97%A5%E8%AE%B0-0172/</id>
    <published>2021-05-10T06:05:29.000Z</published>
    <updated>2021-05-11T01:19:00.018Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>每天</th><th>开发-云容器技术</th><th>项目与框架</th><th>科研-区块链(FL+BC)</th><th>预备事宜</th></tr></thead><tbody><tr><td>1.</td><td><strong>英语单词</strong></td><td>go基础</td><td>SimpleBitcoin</td><td>FL/分布式存储论文一周一篇细读</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>2.</td><td>语法课看完</td><td>go网络编程、Web框架</td><td>联邦学习框架</td><td>写专利</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>3.</td><td><font color='red'>六级</font></td><td>go数据库、ORM、go高级编程</td><td></td><td>机器学习课程</td><td>为<strong>研二实习</strong>做准备</td></tr><tr><td>4.</td><td>Leetcode</td><td>go容器技术docker、k8s</td><td></td><td></td><td></td></tr><tr><td>5.</td><td></td><td>go微服务与任务调度</td><td></td><td></td><td></td></tr><tr><td>6.</td><td></td><td>看源码docker、k8s、Fabric、以太坊、比特币等</td><td></td><td></td><td></td></tr><tr><td>7.</td><td></td><td>Linux、C++</td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li><li><input disabled="" type="checkbox"> Advances_and_Open_Problems_in_Federated_Learning</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input checked="" disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input checked="" disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input checked="" disabled="" type="checkbox"> Proof of Federated Learning: A Novel Energy-recycling Consensus Algorithm</li><li><input checked="" disabled="" type="checkbox"> Scalable and Communication-efficient Decentralized Federated Edge Learning with Multi-blockchain Framework</li><li><input checked="" disabled="" type="checkbox"> DEEP GRADIENT COMPRESSION:REDUCING THE COMMUNICATION BANDWIDTH FOR DISTRIBUTED TRAINING</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li><del>学弟的cosmos隐私保护项目</del></li><li>第一篇论文FL+BC</li><li><del>科技部编程比赛</del></li><li>暑期实习准备(Go, 算法等)</li></ul><p>三月 </p><ul><li><input checked="" disabled="" type="checkbox"> 3-3 ~ 3-7 cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></li><li><input checked="" disabled="" type="checkbox"> 3-8 ~ 3-20 科技部编程比赛项目实现(使用cosmos)</li><li><input disabled="" type="checkbox"> 3-20 ~ 3-31 Go公链实现项目</li><li><input disabled="" type="checkbox"> 4-1 ~ 4-31 Go网络编程Base + 专利一篇</li></ul><p>四月</p><ul><li><input disabled="" type="checkbox"> 4-1 ~ 4-20 Go网络编程(base、Echo、Gin)、 专利2篇  </li><li><input disabled="" type="checkbox"> 4-21 ~ 4-30 第一篇论文初稿与老师讨论</li></ul><p>五月</p><ul><li><input disabled="" type="checkbox"> 5-1 ~ 5-20 论文实验(编码)、数据库(mysql, PostgreSQL), ORM(Gorm) 、Go设计模式  </li><li><input disabled="" type="checkbox"> 5-21 ~ 5-31 Go设计模式  </li></ul><p>六月</p><ul><li><input disabled="" type="checkbox"> 6-1 ~ 6-31 docker、k8s</li></ul><p>七月</p><ul><li><input disabled="" type="checkbox"> 7-1 ~ 7-20 缓存、日志</li><li><input disabled="" type="checkbox"> 7-20 ~ 7-31 微服务(消息队列、任务调度、rpc)</li></ul><p>八月</p><ul><li><input disabled="" type="checkbox"> 8-1 ~ 8-20  微服务(消息队列、任务调度、rpc)</li><li><input disabled="" type="checkbox"> 8-20 ~ 8-31 </li></ul><p>四五月中要好好准备六级, 这次要过.</p><ul><li>go开发走云容器技术</li><li>区块链开发走科研论文、Etherem、Fabric、源码分析、Cosmos使用</li></ul><p><strong>有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input disabled="" type="checkbox"> 英语</li><li><input checked="" disabled="" type="checkbox"> leetcode一题</li><li><input checked="" disabled="" type="checkbox"> 论文</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每天&lt;/th&gt;
&lt;th&gt;开发-云容器技术&lt;/th&gt;
&lt;th&gt;项目与框架&lt;/th&gt;
&lt;th&gt;科研-区块链(FL+BC)&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;go基础&lt;/td&gt;
&lt;td&gt;SimpleBitcoin&lt;/td&gt;
&lt;td&gt;FL/分布式存储论文一周一篇细读&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;go网络编程、Web框架&lt;/td&gt;
&lt;td&gt;联邦学习框架&lt;/td&gt;
&lt;td&gt;写专利&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;go数据库、ORM、go高级编程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;机器学习课程&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;研二实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt;Leetcode&lt;/td&gt;
&lt;td&gt;go容器技术docker、k8s&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;go微服务与任务调度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码docker、k8s、Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux、C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>322-零钱兑换</title>
    <link href="https://xwjahahahaha.github.io/2021/05/09/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/322-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2/"/>
    <id>https://xwjahahahaha.github.io/2021/05/09/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/322-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2/</id>
    <published>2021-05-09T05:05:37.000Z</published>
    <updated>2021-05-09T05:07:40.186Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://leetcode-cn.com/problems/coin-change/" target="_blank" rel="noopener">322. 零钱兑换</a></p><p>难度中等1256</p><p>给定不同面额的硬币 <code>coins</code> 和一个总金额 <code>amount</code>。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 <code>-1</code>。</p><p>你可以认为每种硬币的数量是无限的。</p> <a id="more"></a><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：coins &#x3D; [1, 2, 5], amount &#x3D; 11</span><br><span class="line">输出：3 </span><br><span class="line">解释：11 &#x3D; 5 + 5 + 1</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：coins &#x3D; [2], amount &#x3D; 3</span><br><span class="line">输出：-1</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：coins &#x3D; [1], amount &#x3D; 0</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：coins &#x3D; [1], amount &#x3D; 1</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例 5：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：coins &#x3D; [1], amount &#x3D; 2</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= coins.length &lt;= 12</code></li><li><code>1 &lt;= coins[i] &lt;= 231 - 1</code></li><li><code>0 &lt;= amount &lt;= 104</code></li></ul><h2 id="解题思路及代码"><a href="#解题思路及代码" class="headerlink" title="解题思路及代码"></a>解题思路及代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dp递推式: dp[i] = min(dp[i-coins[0]], dp[i-coins[1]], ..., dp[i-coins[n-1]]) + 1</span></span><br><span class="line"><span class="comment">// 时间复杂度O(SN) S: 金额,N: 数组长度</span></span><br><span class="line"><span class="keyword">const</span> INT_MAX = <span class="keyword">int</span>(^<span class="keyword">uint</span>(<span class="number">0</span>) &gt;&gt; <span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">coinChange</span><span class="params">(coins []<span class="keyword">int</span>, amount <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    dp := <span class="built_in">make</span>([]<span class="keyword">int</span>, amount+<span class="number">1</span>)</span><br><span class="line">    n := <span class="built_in">len</span>(coins)</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>; i &lt;= amount; i++&#123;</span><br><span class="line">        min := INT_MAX          <span class="comment">// 设置最小值为最大值</span></span><br><span class="line">        <span class="keyword">for</span> j:=<span class="number">0</span>; j&lt;n; j++ &#123;</span><br><span class="line">            <span class="comment">// 子dp需要满足三个条件才能为最小值:</span></span><br><span class="line">            <span class="comment">// 1. dp金额&gt;0, 即 i-coins[j] &gt; 0, 这才是有效的(也是防止数组越界)</span></span><br><span class="line">            <span class="comment">// 2. 子dp本身有效, 即子dp != -1 即 &gt; 0</span></span><br><span class="line">            <span class="comment">// 3. 子dp小于当前最小子dp即min, 为了找出最小的子dp</span></span><br><span class="line">            <span class="keyword">if</span> i - coins[j] &gt;= <span class="number">0</span> &amp;&amp; dp[i-coins[j]] &gt;= <span class="number">0</span> &amp;&amp; dp[i-coins[j]] &lt; min&#123;</span><br><span class="line">                min = dp[i-coins[j]]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> min != INT_MAX &#123;</span><br><span class="line">            <span class="comment">// 找到了最小子dp,那么就记录当前dp</span></span><br><span class="line">            dp[i] = min + <span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果所有子dp都满足条件那么此dp也不满足</span></span><br><span class="line">            dp[i] = <span class="number">-1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[amount]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/coin-change/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;322. 零钱兑换&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;难度中等1256&lt;/p&gt;
&lt;p&gt;给定不同面额的硬币 &lt;code&gt;coins&lt;/code&gt; 和一个总金额 &lt;code&gt;amount&lt;/code&gt;。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 &lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;你可以认为每种硬币的数量是无限的。&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="leetcode" scheme="https://xwjahahahaha.github.io/categories/technical/leetcode/"/>
    
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/tags/golang/"/>
    
  </entry>
  
</feed>
