<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知识与头发不可兼得</title>
  
  <subtitle>文杰的博客</subtitle>
  <link href="https://xwjahahahaha.github.io/atom.xml" rel="self"/>
  
  <link href="https://xwjahahahaha.github.io/"/>
  <updated>2021-03-05T12:40:26.918Z</updated>
  <id>https://xwjahahahaha.github.io/</id>
  
  <author>
    <name>DDDemons hide</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang坑与注意点</title>
    <link href="https://xwjahahahaha.github.io/2021/03/05/%E6%8A%80%E6%9C%AF%E8%B4%B4/GoLang/golang%E5%9D%91%E4%B8%8E%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
    <id>https://xwjahahahaha.github.io/2021/03/05/%E6%8A%80%E6%9C%AF%E8%B4%B4/GoLang/golang%E5%9D%91%E4%B8%8E%E6%B3%A8%E6%84%8F%E7%82%B9/</id>
    <published>2021-03-05T12:30:01.000Z</published>
    <updated>2021-03-05T12:40:26.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><a id="more"></a><h2 id="append陷阱"><a href="#append陷阱" class="headerlink" title="append陷阱"></a>append陷阱</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array =[]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;<span class="comment">// len:5,capacity:5</span></span><br><span class="line"><span class="keyword">var</span> newArray=array[<span class="number">1</span>:<span class="number">3</span>]<span class="comment">// len:2,capacity:4   (已经使用了两个位置，所以还空两位置可以append)</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>,array) <span class="comment">//0xc420098000</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>,newArray) <span class="comment">//0xc420098008 可以看到newArray的地址指向的是array[1]的地址，即他们底层使用的还是一个数组</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,array) <span class="comment">//[1 2 3 4 5]</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,newArray) <span class="comment">//[2 3]</span></span><br><span class="line"></span><br><span class="line">newArray[<span class="number">1</span>]=<span class="number">9</span> <span class="comment">//更改后array、newArray都改变了</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,array) <span class="comment">// [1 2 9 4 5]</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,newArray) <span class="comment">// [2 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重点1 : 对切片append可能会导致切片引用的数组改变</span></span><br><span class="line">newArray=<span class="built_in">append</span>(newArray,<span class="number">11</span>,<span class="number">12</span>)<span class="comment">//append 操作之后，array的len和capacity不变,newArray的len变为4，capacity：4。因为这是对newArray的操作</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,array) <span class="comment">//[1 2 9 11 12] //注意对newArray做append操作之后，array[3],array[4]的值也发生了改变</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,newArray) <span class="comment">//[2 9 11 12]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重点2 : append扩容可能会导致原底层数组的改变! </span></span><br><span class="line">newArray=<span class="built_in">append</span>(newArray,<span class="number">13</span>,<span class="number">14</span>) <span class="comment">// 因为newArray的len已经等于capacity，所以再次append就会超过capacity值，</span></span><br><span class="line"><span class="comment">// 此时，append函数内部会创建一个新的底层数组（是一个扩容过的数组），并将array指向的底层数组拷贝过去，然后在追加新的值。</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>,array) <span class="comment">//0xc420098000</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>,newArray) <span class="comment">//0xc4200a0000</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,array) <span class="comment">//[1 2 9 11 12]</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,newArray) <span class="comment">//[2 9 11 12 13 14]  他两已经不再是指向同一个底层数组y了</span></span><br></pre></td></tr></table></figure><p>==<strong>append操作可能会导致原本使用同一个底层数组的两个Slice变量变为使用不同的底层数组。</strong>==</p><p>==<strong>所以, 切片在作为函数传参时,要注意在函数中不能append越界</strong>==</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;headerlink&quot; title=&quot;基础语法&quot;&gt;&lt;/a&gt;基础语法&lt;/h1&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="Golang" scheme="https://xwjahahahaha.github.io/categories/technical/Golang/"/>
    
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>日记_0136</title>
    <link href="https://xwjahahahaha.github.io/2021/03/05/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0136/"/>
    <id>https://xwjahahahaha.github.io/2021/03/05/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0136/</id>
    <published>2021-03-05T06:58:26.000Z</published>
    <updated>2021-03-05T16:42:21.415Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>英语</th><th>开发</th><th>项目</th><th><font color='red'>科研（No.1）</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>后端：go语言深化，框架gin等</strong>，<strong>go书看完</strong></td><td>区块链公链项目</td><td>论文一周两篇细读,每个月尝试写一篇</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td>英文视频(生活大爆炸开始)</td><td>区块链框架Cosmos</td><td>金窝窝项目需求准备cosmos</td><td>分布式课程论文</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>③</td><td></td><td>Linux学完</td><td>本科毕业设计</td><td></td><td>为下学期的<strong>暑期实习</strong>做准备</td></tr><tr><td>④</td><td></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td></td><td></td></tr><tr><td>⑤</td><td></td><td>有时间的话：Java</td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td>代客泊车项目申报书</td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input disabled="" type="checkbox"> <a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7467408" target="_blank" rel="noopener">Blockchains and Smart Contracts for the Internet of Things</a></li><li><input disabled="" type="checkbox"> Where Is Current Research on Blockchain Technology?-A Systematic Review</li><li><input disabled="" type="checkbox"> Blockstack: A Global Naming and Storage System Secured by Blockchains</li><li><input disabled="" type="checkbox"> Plasma </li><li><input disabled="" type="checkbox"> <a href="https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md" target="_blank" rel="noopener">EOS.IO Technical White Paper v2</a></li><li><input disabled="" type="checkbox"> Ocean Protocol: Tools for the Web3 Data Economy</li><li><input disabled="" type="checkbox"> Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts</li><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input disabled="" type="checkbox"> Decentralizing Privacy: Using Blockchain to Protect Personal Data</li><li><input disabled="" type="checkbox"> 《 Tendermint：关于拜占庭容错共识算法的最新进展》</li><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input disabled="" type="checkbox"> The Ripple Protocol Consensus Algorithm</li><li><input disabled="" type="checkbox"> <a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="noopener">以太坊白皮书</a></li><li><input disabled="" type="checkbox"> Hyperledger Fabric: A Distributed Operating System for Permissioned Blockchains</li><li><input disabled="" type="checkbox"> Secure Data Storage and Recovery in IndustrialBlockchain Network Environments</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li>学弟的cosmos隐私保护项目</li><li>第一篇论文</li><li>科技部编程比赛</li><li>暑期实习准备(Go, 算法等)</li></ul><p>三月 </p><ul><li><input disabled="" type="checkbox"> <p>3-3 ~ 3-7 cosmos项目架构熟悉,做完全部的案例,并且熟悉SDK</p></li><li><input disabled="" type="checkbox"> <p>3-8 ~ 3-20 科技部编程比赛项目实现(使用cosmos)</p></li><li><input disabled="" type="checkbox"> <p>3-20~3-31 Go公链实现项目</p></li><li><input disabled="" type="checkbox"> <p>确定研究主方向,第一篇论文初稿与老师讨论</p></li></ul><p>四月 主要准备算法与Go后端框架的学习</p><p>五月~七月 算法、面试准备</p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> 英语50词</li><li><input disabled="" type="checkbox"> leetcode一题</li><li><input checked="" disabled="" type="checkbox"> goroutine的复习</li><li><input checked="" disabled="" type="checkbox"> cosmos nameservice项目的学习</li><li><input checked="" disabled="" type="checkbox"> goAdvance 视频课 p28</li><li><input checked="" disabled="" type="checkbox"> 比特币实战P10</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研（No.1）&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;后端：go语言深化，框架gin等&lt;/strong&gt;，&lt;strong&gt;go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;区块链公链项目&lt;/td&gt;
&lt;td&gt;论文一周两篇细读,每个月尝试写一篇&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;英文视频(生活大爆炸开始)&lt;/td&gt;
&lt;td&gt;区块链框架Cosmos&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;分布式课程论文&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;为下学期的&lt;strong&gt;暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;有时间的话：Java&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;代客泊车项目申报书&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Nameservice测试项目部署</title>
    <link href="https://xwjahahahaha.github.io/2021/03/04/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Cosmos/%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B%E5%BA%93/Nameservice%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    <id>https://xwjahahahaha.github.io/2021/03/04/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Cosmos/%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B%E5%BA%93/Nameservice%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</id>
    <published>2021-03-04T02:10:48.000Z</published>
    <updated>2021-03-05T13:05:35.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Getting-Started"><a href="#1-Getting-Started" class="headerlink" title="1.Getting Started"></a>1.Getting Started</h1><p>使用<strong>scratch</strong>部署区块链</p><p>项目最后会构建一个Nameservice, 就是一个映射关系 string-&gt;other string(<code>map[string]string</code>)</p><a id="more"></a><p>类似于Namecoin、EN、DNS等,用户创建需要使用的域名</p><p>前置要求:</p><ul><li><a href="https://golang.org/doc/install" target="_blank" rel="noopener"><code>golang</code> &gt;1.15 (opens new window)</a>installed</li><li>Github account and either <a href="https://hub.github.com/" target="_blank" rel="noopener">Github CLI (opens new window)</a>or <a href="https://help.github.com/en/desktop/getting-started-with-github-desktop/installing-github-desktop" target="_blank" rel="noopener">Github Desktop (64-bit required)(opens new window)</a></li><li>Desire to create your own blockchain!</li></ul><ul><li>==starport V0.13.1==注意版本, 可能默认下载的最新版. 各系统下载地址[install Starport (opens new window)](<a href="https://github.com/tendermint/starport/blob/develop/docs/1" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/1</a> Introduction/2 Install.md).</li></ul><h1 id="2-Application-Goals"><a href="#2-Application-Goals" class="headerlink" title="2.Application Goals"></a>2.Application Goals</h1><p>目标:用户购买域名,系统设置存储对应的value,域名都是最高出价售出</p><p>Here are the modules you will need for the nameservice application:</p><ul><li><p><code>auth</code>: This module defines accounts and fees and gives access to these functionalities to the rest of your application.</p><p><strong>定义账户和费用</strong></p></li><li><p><code>bank</code>: This module enables the application to create and manage tokens and token balances.</p><p><strong>使应用程序管理与创建tokens</strong></p></li><li><p><code>staking</code> : This module enables the application to have validators that people can delegate to.</p><p><strong>使得应用程序实现用户委托代理</strong></p></li><li><p><code>distribution</code> : This module give a functional way to passively distribute rewards between validators and delegators.</p><p><strong>在验证者与代理者之间分配奖励</strong></p></li><li><p><code>slashing</code> : This module disincentivizes people with value staked in the network, ie. Validators.</p><p><strong>以质押金额激励人员(例如Validators)</strong></p></li><li><p><code>supply</code> : This module holds the total supply of the chain.</p><p><strong>控制区块链的总供应</strong></p></li><li><p><code>nameservice</code>: This module does not exist yet! It will handle the core logic for the <code>nameservice</code> application you are building. It is the main piece of software you have to work on to build your application.</p><p><strong>nameservice的核心逻辑,由开发人员自己编写</strong></p></li></ul><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>token和用户的状态都已经在auth和bank模块中定义了,所以我们无需操心.</p><p>但是我们需要定义部分特别的与nameservice相关的状态</p><p>在SDK,所有的数据存储在叫做multistore的数据库中(k/v数据库)</p><p>我们使用一个存储域名和其代表的人的映射,这个结构体包含了域名的值、拥有者以及余额</p><h2 id="Messages"><a href="#Messages" class="headerlink" title="Messages"></a>Messages</h2><p>==消息包含在交易中==,它们触发状态交易</p><p>每个模块都定义了一系列的消息和操作它们的方法</p><p>nameservice应用中需要定义的两类基本消息:</p><ul><li><code>MsgSetName</code>: This message allows name owners to set a value for a given name.</li><li><code>MsgBuyName</code>: This message allows accounts to buy a name and become its owner.<ul><li>购买当前的域名,你的价格要比前任支付的价格高才可以,如果该域名之前没有人购买,那么必须支付最小的金额即<code>MinPrice</code></li></ul></li></ul><p>==一般性过程:==</p><ol><li><p>已经打包进区块的交易到达Tendermint节点</p></li><li><p>节点通过ABCI与应用程序cosmos SDK交流,</p></li><li><p>cosmos SDK解码交易获取消息</p></li><li><p>SDK将消息路由到合适的模块去执行,执行遵循<code>Handler</code>(可认为是控制器)中的定义</p></li><li><p><code>Handler</code>运行<code>Keeper</code>(可认为是module)进行数据的更新或删除等操作</p></li></ol><h1 id="3-Start-your-application"><a href="#3-Start-your-application" class="headerlink" title="3.Start your application"></a>3.Start your application</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">starport app github.com/user/nameservice --sdk-version="launchpad"</span><br><span class="line">cd nameservice</span><br></pre></td></tr></table></figure><p>如果你克隆了项目,那么<code>user</code>字段可以换成自己的项目地址</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/iW71tT.png" alt="iW71tT"></p><p>==Tendermint通过来自网络的交易与应用程序交互的接口叫做 =&gt; ABCI==</p><p>结构如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+---------------------+</span><br><span class="line">|                     |</span><br><span class="line">|     Application     |</span><br><span class="line">|                     |</span><br><span class="line">+--------+---+--------+</span><br><span class="line">         ^   |</span><br><span class="line">         |   | ABCI</span><br><span class="line">         |   v</span><br><span class="line">+--------+---+--------+</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">|     Tendermint      |</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure><p><strong>这些接口cosmos SDK都提供了样板文件在<code>basseapp</code>中</strong>,baseapp的作用可见cosmos开发基础.</p><p>在这个案例中可以使用<code>nameservice</code> &amp; <code>NameServiceApp</code>这些types,这些type会嵌入到<code>baseapp</code>中</p><p>baseapp不能够识别用户自定义模块的路由和应用程序中自定义的用户接口, <strong>您的应用程序的主要作用是定义这些路由, 另一个作用是定义初始状态</strong>. 这些都要求在你的应用程序添加模块.</p><p> <code>auth</code>, <code>bank</code>, <code>staking</code>, <code>distribution</code>, <code>slashing</code> and <code>nameservice</code>. The first five already exist, but not the last! 后面需要修改.</p><h1 id="4-Types"><a href="#4-Types" class="headerlink" title="4.Types"></a>4.Types</h1><p>创建<code>whois</code>类型</p><p><code>starport type whois value price</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/qP4v1r.png" alt="qP4v1r"></p><p>目前我们只给whois类型添加了两个字段,我们还会对部分自动生成的字段进行修改, 删除<code>ID</code>字段, 代替<code>Creator</code>字段为<code>Owner</code></p><p>脚手架工具为我们自动创建了以下文件:</p><p>在 <code>./x/nameservice/types</code>目录下:</p><p> <code>MsgCreateWhois.go</code>, <code>MsgDeleteWhois.go</code>, <code>MsgSetWhois.go</code>, and <code>TypeWhois.go</code>.</p><h2 id="Whois"><a href="#Whois" class="headerlink" title="Whois"></a>Whois</h2><p>每一个域名都有三个字段</p><ul><li><p>Value - The value that a name resolves to. This is just an arbitrary string, but in the future you can modify this to require it fitting a specific format, such as an IP address, DNS Zone file, or blockchain address.</p><p><strong>域名解析的值,string类型,但是后面可以自己设置为特定的数据类型</strong></p></li><li><p>Owner - The address of the current owner of the name</p><p><strong>域名的主人</strong></p></li><li><p>Price - The price you will need to pay in order to buy the name</p><p><strong>购买的价格</strong></p></li></ul><p>To start your SDK module, define your <code>nameservice.Whois</code> struct in the <code>./x/nameservice/types/TypeWhois.go</code> file:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义最小域名转卖金额</span></span><br><span class="line"><span class="keyword">var</span> MinNamePrice = sdk.Coins&#123;sdk.NewInt64Coin(<span class="string">"nametoken"</span>, <span class="number">1</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Whois <span class="keyword">struct</span> &#123;</span><br><span class="line">Creator sdk.AccAddress <span class="string">`json:"creator" yaml:"creator"`</span></span><br><span class="line">ID      <span class="keyword">string</span>         <span class="string">`json:"id" yaml:"id"`</span></span><br><span class="line">    Value <span class="keyword">string</span> <span class="string">`json:"value" yaml:"value"`</span></span><br><span class="line">    Price <span class="keyword">string</span> <span class="string">`json:"price" yaml:"price"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回一个新的Whois，因为新的域名还没有人购买，所以设置金额为最小</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewWhois</span><span class="params">()</span> <span class="title">Whois</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> Whois&#123;</span><br><span class="line">Price:   MinNamePrice,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-Key"><a href="#5-Key" class="headerlink" title="5.Key"></a>5.Key</h1><p>在<code>key.go</code>文件中已经创建了模块需要的一些全局常量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// ModuleName is the name of the module</span></span><br><span class="line">ModuleName = <span class="string">"nameservice"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// StoreKey to be used when creating the KVStore</span></span><br><span class="line">StoreKey = ModuleName</span><br><span class="line"></span><br><span class="line"><span class="comment">// RouterKey to be used for routing msgs</span></span><br><span class="line">RouterKey = ModuleName</span><br><span class="line"></span><br><span class="line"><span class="comment">// QuerierRoute to be used for querier msgs</span></span><br><span class="line">QuerierRoute = ModuleName</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">WhoisPrefix      = <span class="string">"whois-value-"</span></span><br><span class="line">WhoisCountPrefix = <span class="string">"whois-count-"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="6-Errors"><a href="#6-Errors" class="headerlink" title="6.Errors"></a>6.Errors</h1><p>定义了模块的自定义错误以及错误代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ErrNameDoesNotExist = sdkerrors.Register(ModuleName, <span class="number">1</span>, <span class="string">"name does not exist"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>你应该还定义错误的方法,当发生错误的时候.</p><h1 id="7-Keeper"><a href="#7-Keeper" class="headerlink" title="7.Keeper"></a>7.Keeper</h1><p>主要负责数据的增删改查</p><h2 id="Keeper-Struct"><a href="#Keeper-Struct" class="headerlink" title="Keeper Struct"></a>Keeper Struct</h2><p>Your <code>nameservice.Keeper</code> should already be defined in the <code>./x/nameservice/keeper/keeper.go</code> file. Let’s have a short introduction of the <code>keeper.go</code> file.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> keeper</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 1</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/tendermint/tendermint/libs/log"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/bank"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Keeper of the nameservice store</span></span><br><span class="line"><span class="keyword">type</span> Keeper <span class="keyword">struct</span> &#123;</span><br><span class="line">CoinKeeper bank.Keeper</span><br><span class="line">storeKey   sdk.StoreKey</span><br><span class="line">cdc        *codec.Codec</span><br><span class="line"><span class="comment">// paramspace types.ParamSubspace</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewKeeper creates a nameservice keeper</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewKeeper</span><span class="params">(coinKeeper bank.Keeper, cdc *codec.Codec, key sdk.StoreKey)</span> <span class="title">Keeper</span></span> &#123;</span><br><span class="line">keeper := Keeper&#123;</span><br><span class="line">CoinKeeper: coinKeeper,</span><br><span class="line">storeKey:   key,</span><br><span class="line">cdc:        cdc,</span><br><span class="line"><span class="comment">// paramspace: paramspace.WithKeyTable(types.ParamKeyTable()),</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> keeper</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logger returns a module-specific logger.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">Logger</span><span class="params">(ctx sdk.Context)</span> <span class="title">log</span>.<span class="title">Logger</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> ctx.Logger().With(<span class="string">"module"</span>, fmt.Sprintf(<span class="string">"x/%s"</span>, types.ModuleName))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于代码中import的两个不同的types:</p><ul><li><p><a href="https://godoc.org/github.com/cosmos/cosmos-sdk/types" target="_blank" rel="noopener"><code>types</code> (as sdk) (opens new window)</a>- this contains commonly used types throughout the SDK.</p><p><strong>包含整个sdk通常使用的类型</strong></p></li><li><p><code>types</code> - it contains <code>BankKeeper</code> you have defined in previous section.</p><p><strong>包含之前定义的<code>BankKeeper</code></strong></p></li></ul><p>Keeper结构体解释:</p><ul><li><p><code>types.BankKeeper</code> - This is an interface you had defined on previous section to use <code>bank</code> module. Including it allows code in this module to call functions from the <code>bank</code> module. The SDK uses an <a href="https://en.wikipedia.org/wiki/Object-capability_model" target="_blank" rel="noopener">object capabilities (opens new window)</a>approach to accessing sections of the application state. This is to allow developers to employ a least authority approach, limiting the capabilities of a faulty or malicious module from affecting parts of state it doesn’t need access to.</p><p><strong>BankKeeper 这是你在上一节定义的使用bank模块的接口。它允许该模块中的代码调用bank模块中的函数。SDK使用 object capabilities方法来访问应用程序状态的部分。这允许开发人员采用最小权限的方法，限制错误或恶意模块的功能，使其不影响它不需要访问的状态部分。</strong></p></li><li><p><a href="https://godoc.org/github.com/cosmos/cosmos-sdk/codec#Codec" target="_blank" rel="noopener"><code>*codec.Codec</code> (opens new window)</a>- This is a pointer to the codec that is used by Amino to encode and decode binary structs.</p><p><strong>这是Amino用于编码和解码二进制结构的编解码器的指针,用于编码/解码数据</strong></p></li><li><p><a href="https://godoc.org/github.com/cosmos/cosmos-sdk/types#StoreKey" target="_blank" rel="noopener"><code>sdk.StoreKey</code> (opens new window)</a>- This is a store key which gates access to a <code>sdk.KVStore</code>which persists the state of your application: the Whois struct that the name points to (i.e. <code>map[name]Whois</code>).</p><p><strong>这是一个用于访问sdk 持久化应用程序状态的KVStore的存储密钥。数据库存储也就是域名所指向的Whois结构体</strong></p></li></ul><h2 id="Getters-and-Setters"><a href="#Getters-and-Setters" class="headerlink" title="Getters and Setters"></a>Getters and Setters</h2><p>In our <code>keeper</code> directory we find the <code>whois.go</code> file which has been created with our <code>starport type</code> command.</p><p>我们需要修改部分, 使用<code>Name</code>作为key去查找每一个<code>Whois</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> keeper</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetWhoisCount get the total number of whois</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">GetWhoisCount</span><span class="params">(ctx sdk.Context)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line">byteKey := []<span class="keyword">byte</span>(types.WhoisCountPrefix)</span><br><span class="line">bz := store.Get(byteKey)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Count doesn't exist: no element</span></span><br><span class="line"><span class="keyword">if</span> bz == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parse bytes</span></span><br><span class="line">count, err := strconv.ParseInt(<span class="keyword">string</span>(bz), <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// Panic because the count should be always formattable to int64</span></span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"cannot decode count"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetWhoisCount set the total number of whois</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">SetWhoisCount</span><span class="params">(ctx sdk.Context, count <span class="keyword">int64</span>)</span></span> &#123;</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line">byteKey := []<span class="keyword">byte</span>(types.WhoisCountPrefix)</span><br><span class="line">bz := []<span class="keyword">byte</span>(strconv.FormatInt(count, <span class="number">10</span>))</span><br><span class="line">store.Set(byteKey, bz)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateWhois creates a whois. This function is included in starport type scaffolding.</span></span><br><span class="line"><span class="comment">// We won't use this function in our application, so it can be commented out.</span></span><br><span class="line"><span class="comment">// func (k Keeper) CreateWhois(ctx sdk.Context, whois types.Whois) &#123;</span></span><br><span class="line"><span class="comment">// store := ctx.KVStore(k.storeKey)</span></span><br><span class="line"><span class="comment">// key := []byte(types.WhoisPrefix + whois.Value)</span></span><br><span class="line"><span class="comment">// value := k.cdc.MustMarshalBinaryLengthPrefixed(whois)</span></span><br><span class="line"><span class="comment">// store.Set(key, value)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GetWhois returns the whois information</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">GetWhois</span><span class="params">(ctx sdk.Context, key <span class="keyword">string</span>)</span> <span class="params">(types.Whois, error)</span></span> &#123;</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line"><span class="keyword">var</span> whois types.Whois</span><br><span class="line">byteKey := []<span class="keyword">byte</span>(types.WhoisPrefix + key)</span><br><span class="line">err := k.cdc.UnmarshalBinaryLengthPrefixed(store.Get(byteKey), &amp;whois)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> whois, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> whois, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetWhois sets a whois. We modified this function to use the `name` value as the key instead of msg.ID</span></span><br><span class="line"><span class="comment">// 使用name作为key而不是id</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">SetWhois</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>, whois types.Whois)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line">bz := k.cdc.MustMarshalBinaryLengthPrefixed(whois)</span><br><span class="line">key := []<span class="keyword">byte</span>(types.WhoisPrefix + name)</span><br><span class="line">store.Set(key, bz)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DeleteWhois deletes a whois</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">DeleteWhois</span><span class="params">(ctx sdk.Context, key <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line">store.Delete([]<span class="keyword">byte</span>(types.WhoisPrefix + key))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Functions used by querier</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">listWhois</span><span class="params">(ctx sdk.Context, k Keeper)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> whoisList []types.Whois</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line">iterator := sdk.KVStorePrefixIterator(store, []<span class="keyword">byte</span>(types.WhoisPrefix))</span><br><span class="line"><span class="keyword">for</span> ; iterator.Valid(); iterator.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> whois types.Whois</span><br><span class="line">k.cdc.MustUnmarshalBinaryLengthPrefixed(store.Get(iterator.Key()), &amp;whois)</span><br><span class="line">whoisList = <span class="built_in">append</span>(whoisList, whois)</span><br><span class="line">&#125;</span><br><span class="line">res := codec.MustMarshalJSONIndent(k.cdc, whoisList)</span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getWhois</span><span class="params">(ctx sdk.Context, path []<span class="keyword">string</span>, k Keeper)</span> <span class="params">(res []<span class="keyword">byte</span>, sdkError error)</span></span> &#123;</span><br><span class="line">key := path[<span class="number">0</span>]</span><br><span class="line">whois, err := k.GetWhois(ctx, key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res, err = codec.MarshalJSONIndent(k.cdc, whois)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrJSONMarshal, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Resolves a name, returns the value</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">resolveName</span><span class="params">(ctx sdk.Context, path []<span class="keyword">string</span>, keeper Keeper)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">value := keeper.ResolveName(ctx, path[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> value == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">byte</span>&#123;&#125;, sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, <span class="string">"could not resolve name"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res, err := codec.MarshalJSONIndent(keeper.cdc, types.QueryResResolve&#123;Value: value&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrJSONMarshal, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get creator of the item</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">GetCreator</span><span class="params">(ctx sdk.Context, key <span class="keyword">string</span>)</span> <span class="title">sdk</span>.<span class="title">AccAddress</span></span> &#123;</span><br><span class="line">whois, _ := k.GetWhois(ctx, key)</span><br><span class="line"><span class="keyword">return</span> whois.Creator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if the key exists in the store</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">Exists</span><span class="params">(ctx sdk.Context, key <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line"><span class="keyword">return</span> store.Has([]<span class="keyword">byte</span>(types.WhoisPrefix + key))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ResolveName - returns the string that the name resolves to</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">ResolveName</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">whois, _ := k.GetWhois(ctx, name)</span><br><span class="line"><span class="keyword">return</span> whois.Value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetName - sets the value string that a name resolves to</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">SetName</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>, value <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">whois, _ := k.GetWhois(ctx, name)</span><br><span class="line">whois.Value = value</span><br><span class="line">k.SetWhois(ctx, name, whois)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HasOwner - returns whether or not the name already has an owner</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">HasCreator</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">whois, _ := k.GetWhois(ctx, name)</span><br><span class="line"><span class="keyword">return</span> !whois.Creator.Empty()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetOwner - sets the current owner of a name</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">SetCreator</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>, creator sdk.AccAddress)</span></span> &#123;</span><br><span class="line">whois, _ := k.GetWhois(ctx, name)</span><br><span class="line">whois.Creator = creator</span><br><span class="line">k.SetWhois(ctx, name, whois)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetPrice - gets the current price of a name</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">GetPrice</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>)</span> <span class="title">sdk</span>.<span class="title">Coins</span></span> &#123;</span><br><span class="line">whois, _ := k.GetWhois(ctx, name)</span><br><span class="line"><span class="keyword">return</span> whois.Price</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetPrice - sets the current price of a name</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">SetPrice</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>, price sdk.Coins)</span></span> &#123;</span><br><span class="line">whois, _ := k.GetWhois(ctx, name)</span><br><span class="line">whois.Price = price</span><br><span class="line">k.SetWhois(ctx, name, whois)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if the name is present in the store or not</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">IsNamePresent</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line"><span class="keyword">return</span> store.Has([]<span class="keyword">byte</span>(name))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get an iterator over all names in which the keys are the names and the values are the whois</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">GetNamesIterator</span><span class="params">(ctx sdk.Context)</span> <span class="title">sdk</span>.<span class="title">Iterator</span></span> &#123;</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line"><span class="keyword">return</span> sdk.KVStorePrefixIterator(store, []<span class="keyword">byte</span>(types.WhoisPrefix))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get creator of the item</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">GetWhoisOwner</span><span class="params">(ctx sdk.Context, key <span class="keyword">string</span>)</span> <span class="title">sdk</span>.<span class="title">AccAddress</span></span> &#123;</span><br><span class="line">whois, err := k.GetWhois(ctx, key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> whois.Creator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if the key exists in the store</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">WhoisExists</span><span class="params">(ctx sdk.Context, key <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line"><span class="keyword">return</span> store.Has([]<span class="keyword">byte</span>(types.WhoisPrefix + key))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-Msgs-and-Handlers"><a href="#8-Msgs-and-Handlers" class="headerlink" title="8.Msgs and Handlers"></a>8.Msgs and Handlers</h1><h2 id="Msgs"><a href="#Msgs" class="headerlink" title="Msgs"></a>Msgs</h2><p>msgs触发状态交易,Msg包含在Tx接口中,Tx就是网络中用户提交的交易</p><p>Cosmos sdk中的源码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Tx defines the interface a transaction must fulfill.</span></span><br><span class="line">Tx <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// Gets the all the transaction's messages.</span></span><br><span class="line">GetMsgs() []Msg</span><br><span class="line"></span><br><span class="line"><span class="comment">// ValidateBasic does a simple and lightweight validation check that doesn't</span></span><br><span class="line"><span class="comment">// require access to any other information.</span></span><br><span class="line">ValidateBasic() error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作为开发者只需要定义Msg即可,Msg必须要满足以下接口:</p><p><code>./x/nameservice/types/msg.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Transactions messages must fulfill the Msg</span></span><br><span class="line"><span class="keyword">type</span> Msg <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// Return the message type.</span></span><br><span class="line"><span class="comment">// Must be alphanumeric or empty.</span></span><br><span class="line">Type() <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns a human-readable string for the message, intended for utilization</span></span><br><span class="line"><span class="comment">// within tags</span></span><br><span class="line">Route() <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ValidateBasic does a simple validation check that</span></span><br><span class="line"><span class="comment">// doesn't require access to any other information.</span></span><br><span class="line">ValidateBasic() Error</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the canonical byte representation of the Msg.</span></span><br><span class="line">GetSignBytes() []<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Signers returns the addrs of signers that must sign.</span></span><br><span class="line"><span class="comment">// CONTRACT: All signatures must be present to be valid.</span></span><br><span class="line"><span class="comment">// CONTRACT: Returns addrs in some deterministic order.</span></span><br><span class="line">GetSigners() []AccAddress</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Handlers"><a href="#Handlers" class="headerlink" title="Handlers"></a>Handlers</h2><p>可看作为controller</p><p>定义了当接受到Msg时, 哪些数据存储需要更新,在什么样的环境下更新等</p><h1 id="9-Msgs"><a href="#9-Msgs" class="headerlink" title="9.Msgs"></a>9.Msgs</h1><p>现在开始编写本项目场景需要的Msg</p><h2 id="SetName"><a href="#SetName" class="headerlink" title="SetName"></a>SetName</h2><h3 id="MsgSetSetName"><a href="#MsgSetSetName" class="headerlink" title="MsgSetSetName"></a>MsgSetSetName</h3><p>首先实现<code>SetName</code>, 这个消息Msg允许域名的所有者在解析器中设置该域名的返回值</p><p>Start by renaming the <code>./x/nameservice/types/MsgSetWhois.go</code> file to <code>./x/nameservice/types/MsgSetName.go</code>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> RouterKey = ModuleName <span class="comment">// this was defined in your key.go file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MsgSetName defines a SetName message</span></span><br><span class="line"><span class="keyword">type</span> MsgSetName <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span>         <span class="string">`json:"name"`</span></span><br><span class="line">Value <span class="keyword">string</span>         <span class="string">`json:"value"`</span></span><br><span class="line">Owner sdk.AccAddress <span class="string">`json:"owner"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewMsgSetName is a constructor function for MsgSetName</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMsgSetName</span><span class="params">(name <span class="keyword">string</span>, value <span class="keyword">string</span>, owner sdk.AccAddress)</span> <span class="title">MsgSetName</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> MsgSetName&#123;</span><br><span class="line">Name:  name,</span><br><span class="line">Value: value,</span><br><span class="line">Owner: owner,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>MsgSetName</code> has the three attributes needed to set the value for a name:</p><ul><li><code>name</code> - The name trying to be set. 域名</li><li><code>value</code> - What the name resolves to. 要解析的值</li><li><code>owner</code> - The owner of that name. 域名的使用者</li></ul><p>接下来, 实现Msg接口的两个方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Route should return the name of the module</span></span><br><span class="line"><span class="comment">// 返回模块名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgSetName)</span> <span class="title">Route</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> RouterKey &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type should return the action</span></span><br><span class="line"><span class="comment">// 返回此行为操作类型名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgSetName)</span> <span class="title">Type</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> <span class="string">"set_name"</span> &#125;</span><br></pre></td></tr></table></figure><p>SDK使用上述函数将消息路由到适当的模块进行处理。它们还将人类可读的名称添加到用于索引的数据库标记中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ValidateBasic runs stateless checks on the message</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgSetName)</span> <span class="title">ValidateBasic</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> msg.Owner.Empty() &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidAddress, msg.Owner.String())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(msg.Name) == <span class="number">0</span> || <span class="built_in">len</span>(msg.Value) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, <span class="string">"Name and/or Value cannot be empty"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ValidateBasic用于提供对于Msg有效性的一些基本的检查验证,在这个模块主要验证没有属性为空</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GetSignBytes encodes the message for signing</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgSetName)</span> <span class="title">GetSignBytes</span><span class="params">()</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> sdk.MustSortJSON(ModuleCdc.MustMarshalJSON(msg))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GetSignBytes</code>定义了消息Msg怎样对签名进行编码, 一般都是对排序的Json序列化, 一般不需要改动.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GetSigners defines whose signature is required</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgSetName)</span> <span class="title">GetSigners</span><span class="params">()</span> []<span class="title">sdk</span>.<span class="title">AccAddress</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> []sdk.AccAddress&#123;msg.Owner&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GetSigners</code>定义了在Tx中那些人的签名是必须的,这样才能保证有效.在此案例中, 当需要重新设置域名的解析时,<code>MsgSetName</code>需要Owner签名交易才能生效.</p><h3 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h3><p>目前<code>MsgSetName</code>已经规定好了, 当接收到了消息后<code>Handler</code>负责定义接下来的行动. </p><p><code>NewHandler</code>本质上是一个子路由器，它将进入该模块的消息指示给适当的处理程序。目前，只有一个<code>Msg/Handler</code>。</p><p>Let’s rename our <code>x/nameservice/handlerMsgSetWhois.go</code> to <code>x/nameservice/handlerMsgSetName.go</code>.</p><p><code>mv x/nameservice/handlerMsgSetWhois.go x/nameservice/handlerMsgSetName.go</code></p><p>修改如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nameservice</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handle a message to set name</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleMsgSetName</span><span class="params">(ctx sdk.Context, keeper Keeper, msg MsgSetName)</span> <span class="params">(*sdk.Result, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 检查是否为域名拥有者</span></span><br><span class="line"><span class="keyword">if</span> !msg.Owner.Equals(keeper.GetOwner(ctx, msg.Name)) &#123; <span class="comment">// Checks if the the msg sender is the same as the current owner</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrUnauthorized, <span class="string">"Incorrect Owner"</span>) <span class="comment">// If not, throw an error</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果是本人的话设置所规定的值</span></span><br><span class="line">keeper.SetName(ctx, msg.Name, msg.Value) <span class="comment">// If so, set the name to the value specified in the msg.</span></span><br><span class="line"><span class="keyword">return</span> &amp;sdk.Result&#123;&#125;, <span class="literal">nil</span>                <span class="comment">// return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the file (<code>./x/nameservice/handler.go</code>) make sure to replace the <code>types.MsgSetWhois</code> with the following code:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nameservice</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line"></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewHandler returns a handler for "nameservice" type messages.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewHandler</span><span class="params">(keeper Keeper)</span> <span class="title">sdk</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx sdk.Context, msg sdk.Msg)</span> <span class="params">(*sdk.Result, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> msg := msg.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="comment">// 添加操作类型</span></span><br><span class="line"><span class="keyword">case</span> MsgSetName:</span><br><span class="line"><span class="keyword">return</span> handleMsgSetName(ctx, keeper, msg)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, fmt.Sprintf(<span class="string">"Unrecognized nameservice Msg type: %v"</span>, msg.Type()))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在, 拥有者可以设置域名的解析了, 但是如果是一个域名不存在拥有者的情况呢?</p><p>现在模块需要提供一种方式让用户去购买域名, 下面就定义<code>BuyName</code>消息</p><h2 id="Buy-Name"><a href="#Buy-Name" class="headerlink" title="Buy Name"></a>Buy Name</h2><h3 id="MsgBuyName"><a href="#MsgBuyName" class="headerlink" title="MsgBuyName"></a>MsgBuyName</h3><p><code>./x/nameservice/types/MsgBuyName.go</code>很类似于setName</p><p>We can replace the file <code>MsgCreateWhois.go</code>, as these two files are similar in nature, and we won’t be using <code>MsgCreateWhois</code>.</p><p><code>mv x/nameservice/types/MsgCreateWhois.go x/nameservice/types/MsgBuyName.go</code></p><p>Replace <code>handlerMsgCreateWhois</code> by <code>handlerMsgBuyName</code>:</p><p><code>mv x/nameservice/handlerMsgCreateWhois.go x/nameservice/handlerMsgBuyName.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Originally, this file was named MsgCreateWhois, and has been modified using search-and-replace to our Msg needs.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MsgBuyName defines the BuyName message</span></span><br><span class="line"><span class="keyword">type</span> MsgBuyName <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span>         <span class="string">`json:"name"`</span></span><br><span class="line">Bid   sdk.Coins      <span class="string">`json:"bid"`</span></span><br><span class="line">Buyer sdk.AccAddress <span class="string">`json:"buyer"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewMsgBuyName is the constructor function for MsgBuyName</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMsgBuyName</span><span class="params">(name <span class="keyword">string</span>, bid sdk.Coins, buyer sdk.AccAddress)</span> <span class="title">MsgBuyName</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> MsgBuyName&#123;</span><br><span class="line">Name:  name,</span><br><span class="line">Bid:   bid,</span><br><span class="line">Buyer: buyer,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Route should return the name of the module</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgBuyName)</span> <span class="title">Route</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> RouterKey &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type should return the action</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgBuyName)</span> <span class="title">Type</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> <span class="string">"buy_name"</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ValidateBasic runs stateless checks on the message</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgBuyName)</span> <span class="title">ValidateBasic</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> msg.Buyer.Empty() &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidAddress, msg.Buyer.String())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(msg.Name) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, <span class="string">"Name cannot be empty"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !msg.Bid.IsAllPositive() &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.ErrInsufficientFunds</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetSignBytes encodes the message for signing</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgBuyName)</span> <span class="title">GetSignBytes</span><span class="params">()</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> sdk.MustSortJSON(ModuleCdc.MustMarshalJSON(msg))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetSigners defines whose signature is required</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgBuyName)</span> <span class="title">GetSigners</span><span class="params">()</span> []<span class="title">sdk</span>.<span class="title">AccAddress</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> []sdk.AccAddress&#123;msg.Buyer&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，更新执行由消息触发的状态转换的BuyName处理程序函数。请记住，此时消息已经运行了ValidateBasic函数，因此已经进行了一些输入验证。但是，==ValidateBasic不能查询应用程序状态。<strong>依赖于网络状态(如账户余额)的验证</strong>逻辑应该在handler函数中执行==</p><p>Let’s rename <code>handlerMsgCreateWhois.go</code> to <code>handlerMsgBuyName.go</code></p><p><code>mv x/nameservice/handlerMsgCreateWhois.go x/nameservice/handlerMsgBuyName.go</code></p><p>Go to <code>./x/nameservice/handlerMsgBuyName.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nameservice</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line"></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/keeper"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handle a message to buy name</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleMsgBuyName</span><span class="params">(ctx sdk.Context, k keeper.Keeper, msg types.MsgBuyName)</span> <span class="params">(*sdk.Result, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// Checks if the the bid price is greater than the price paid by the current owner</span></span><br><span class="line"><span class="comment">// 1.检查当前出价是否高于目前的价格</span></span><br><span class="line"><span class="keyword">if</span> k.GetPrice(ctx, msg.Name).IsAllGT(msg.Bid) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrInsufficientFunds, <span class="string">"Bid not high enough"</span>) <span class="comment">// If not, throw an error</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.检查当前域名是否已经有拥有者了</span></span><br><span class="line"><span class="comment">// 不论是已拥有或者没有人拥有， 如果购买者支付出价出现错误，那么都会造成资金的回滚</span></span><br><span class="line"><span class="keyword">if</span> k.HasCreator(ctx, msg.Name) &#123;</span><br><span class="line"><span class="comment">// 如果已经是别人拥有的，那么购买者支付对应的出价给域名原来的拥有者</span></span><br><span class="line">err := k.CoinKeeper.SendCoins(ctx, msg.Buyer, k.GetCreator(ctx, msg.Name), msg.Bid)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 如果没有，那么从购买者处减去出价金额, 发送给一个不可回收的地址（burns）</span></span><br><span class="line">_, err := k.CoinKeeper.SubtractCoins(ctx, msg.Buyer, msg.Bid) <span class="comment">// If so, deduct the Bid amount from the sender</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 分别为域名设置新的所有者与金额</span></span><br><span class="line">k.SetCreator(ctx, msg.Name, msg.Buyer)</span><br><span class="line">k.SetPrice(ctx, msg.Name, msg.Bid)</span><br><span class="line"><span class="keyword">return</span> &amp;sdk.Result&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个处理程序使用来自<code>coinKeeper</code>的函数来执行货币操作。如果您的应用程序正在执行货币操作，您可能需要查看此模块的 <a href="https://godoc.org/github.com/cosmos/cosmos-sdk/x/bank#BaseKeeper" target="_blank" rel="noopener">godocs for this module (opens new window)</a>，看看它公开了哪些函数。</p><h2 id="Delete-Name"><a href="#Delete-Name" class="headerlink" title="Delete Name"></a>Delete Name</h2><h3 id="MsgDeleteName"><a href="#MsgDeleteName" class="headerlink" title="MsgDeleteName"></a>MsgDeleteName</h3><p>Now it is time to update the <code>Msg</code> for deleting names. Let’s rename our <code>MsgDeleteWhois.go</code> to <code>MsgDeleteName.go</code></p><p><code>mv x/nameservice/types/MsgDeleteWhois.go x/nameservice/types/MsgDeleteName.go</code></p><p>add it to the <code>./x/nameservice/types/MsgDeleteName.go</code> file.</p><p>Replace <code>MsgDeleteWhois</code> by <code>MsgDeleteName</code>:</p><p><code>mv x/nameservice/types/MsgDeleteWhois.go x/nameservice/types/MsgDeleteName.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ sdk.Msg = &amp;MsgDeleteName&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MsgDeleteName <span class="keyword">struct</span> &#123;</span><br><span class="line">ID      <span class="keyword">string</span>         <span class="string">`json:"id" yaml:"id"`</span></span><br><span class="line">Creator sdk.AccAddress <span class="string">`json:"creator" yaml:"creator"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMsgDeleteName</span><span class="params">(id <span class="keyword">string</span>, creator sdk.AccAddress)</span> <span class="title">MsgDeleteName</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> MsgDeleteName&#123;</span><br><span class="line">ID:      id,</span><br><span class="line">Creator: creator,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgDeleteName)</span> <span class="title">Route</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> RouterKey</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgDeleteName)</span> <span class="title">Type</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"DeleteName"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgDeleteName)</span> <span class="title">GetSigners</span><span class="params">()</span> []<span class="title">sdk</span>.<span class="title">AccAddress</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> []sdk.AccAddress&#123;sdk.AccAddress(msg.Creator)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgDeleteName)</span> <span class="title">GetSignBytes</span><span class="params">()</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">bz := ModuleCdc.MustMarshalJSON(msg)</span><br><span class="line"><span class="keyword">return</span> sdk.MustSortJSON(bz)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgDeleteName)</span> <span class="title">ValidateBasic</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> msg.Creator.Empty() &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidAddress, <span class="string">"creator can't be empty"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Replace <code>handlerMsgDeleteWhois</code> by <code>handlerMsgDeleteName</code>:</p><p><code>mv x/nameservice/handlerMsgDeleteWhois.go x/nameservice/handlerMsgDeleteName.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nameservice</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/keeper"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handle a message to delete name</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleMsgDeleteName</span><span class="params">(ctx sdk.Context, k keeper.Keeper, msg types.MsgDeleteName)</span> <span class="params">(*sdk.Result, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 检查是否存在该域名</span></span><br><span class="line"><span class="keyword">if</span> !k.WhoisExists(ctx, msg.ID) &#123;</span><br><span class="line"><span class="comment">// replace with ErrKeyNotFound for 0.39+</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, msg.ID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检查是否是本人</span></span><br><span class="line"><span class="keyword">if</span> !msg.Creator.Equals(k.GetWhoisOwner(ctx, msg.ID)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrUnauthorized, <span class="string">"Incorrect Owner"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">k.DeleteWhois(ctx, msg.ID)</span><br><span class="line"><span class="keyword">return</span> &amp;sdk.Result&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Afterwards, we’ll follow the same steps as earlier and add the <code>MsgDeleteName</code>handler to the module router in <code>./x/nameservice/handler.go</code>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewHandler returns a handler for "nameservice" type messages.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewHandler</span><span class="params">(keeper Keeper)</span> <span class="title">sdk</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx sdk.Context, msg sdk.Msg)</span> <span class="params">(*sdk.Result, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> msg := msg.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> MsgSetName:</span><br><span class="line"><span class="keyword">return</span> handleMsgSetName(ctx, keeper, msg)</span><br><span class="line"><span class="keyword">case</span> MsgBuyName:</span><br><span class="line"><span class="keyword">return</span> handleMsgBuyName(ctx, keeper, msg)</span><br><span class="line"><span class="keyword">case</span> MsgDeleteName:</span><br><span class="line"><span class="keyword">return</span> handleMsgDeleteName(ctx, keeper, msg)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, fmt.Sprintf(<span class="string">"Unrecognized nameservice Msg type: %v"</span>, msg.Type()))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-Queriers"><a href="#10-Queriers" class="headerlink" title="10.Queriers"></a>10.Queriers</h1><h2 id="Query-Types"><a href="#Query-Types" class="headerlink" title="Query Types"></a>Query Types</h2><p>Start by navigating to <code>./x/nameservice/types/querier.go</code> file. This is where you will define your querier types.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"strings"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> QueryListWhois = <span class="string">"list-whois"</span></span><br><span class="line"><span class="keyword">const</span> QueryGetWhois = <span class="string">"get-whois"</span></span><br><span class="line"><span class="keyword">const</span> QueryResolveName = <span class="string">"resolve-name"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// QueryResResolve Queries Result Payload for a resolve query</span></span><br><span class="line"><span class="comment">// 查询域名解析结果， QueryResResolve结果</span></span><br><span class="line"><span class="keyword">type</span> QueryResResolve <span class="keyword">struct</span> &#123;</span><br><span class="line">Value <span class="keyword">string</span> <span class="string">`json:"value"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// implement fmt.Stringer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r QueryResResolve)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.Value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// QueryResNames Queries Result Payload for a names query</span></span><br><span class="line"><span class="comment">// 查询域名集合的解析结果， QueryResNames是要查询的域名集合</span></span><br><span class="line"><span class="keyword">type</span> QueryResNames []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// implement fmt.Stringer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n QueryResNames)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> strings.Join(n[:], <span class="string">"\n"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Querier"><a href="#Querier" class="headerlink" title="Querier"></a>Querier</h2><p>Now you can navigate to the <code>./x/nameservice/keeper/querier.go</code> file.</p><p>在这里可以定义针对应用程序状态用户可以进行哪些查询</p><p>Your <code>nameservice</code> module will expose three queries:</p><ul><li><p><code>resolveName</code>: This takes a <code>name</code> and returns the <code>value</code> that is stored by the <code>nameservice</code>. This is similar to a DNS query.</p><p><strong>解析值</strong></p></li><li><p><code>getWhois</code>: This takes a <code>name</code> and returns the <code>price</code>, <code>value</code>, and <code>owner</code> of the name. Used for figuring out how much names cost when you want to buy them.</p><p><strong>查询域名的所有相关信息</strong></p></li><li><p><code>listWhois</code> : This does not take a parameter, it returns all the names stored in the <code>nameservice</code> store.</p><p><strong>查询所有的已存在域名</strong></p></li></ul><p>你需要修改switch语句的用例(它们不能从query .Route()函数中取出):</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> keeper</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 1</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line"></span><br><span class="line">abci <span class="string">"github.com/tendermint/tendermint/abci/types"</span></span><br><span class="line"></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewQuerier creates a new querier for nameservice clients.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewQuerier</span><span class="params">(k Keeper)</span> <span class="title">sdk</span>.<span class="title">Querier</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx sdk.Context, path []<span class="keyword">string</span>, req abci.RequestQuery)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> path[<span class="number">0</span>] &#123;</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> types.QueryResolveName:</span><br><span class="line"><span class="keyword">return</span> resolveName(ctx, path[<span class="number">1</span>:], k)</span><br><span class="line"><span class="keyword">case</span> types.QueryListWhois:</span><br><span class="line"><span class="keyword">return</span> listWhois(ctx, k)</span><br><span class="line"><span class="keyword">case</span> types.QueryGetWhois:</span><br><span class="line"><span class="keyword">return</span> getWhois(ctx, path[<span class="number">1</span>:], k)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, <span class="string">"unknown nameservice query endpoint"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now that the router is defined, we can verify that our querier functions in <code>./x/nameservice/keeper/whois.go</code> looks like this:</p><p>现在我们可以在上述文件中找到对应路由的实现:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Functions used by querier</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">listWhois</span><span class="params">(ctx sdk.Context, k Keeper)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> whoisList []types.Whois</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line">iterator := sdk.KVStorePrefixIterator(store, []<span class="keyword">byte</span>(types.WhoisPrefix))</span><br><span class="line"><span class="keyword">for</span> ; iterator.Valid(); iterator.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> whois types.Whois</span><br><span class="line">k.cdc.MustUnmarshalBinaryLengthPrefixed(store.Get(iterator.Key()), &amp;whois)</span><br><span class="line">whoisList = <span class="built_in">append</span>(whoisList, whois)</span><br><span class="line">&#125;</span><br><span class="line">res := codec.MustMarshalJSONIndent(k.cdc, whoisList)</span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getWhois</span><span class="params">(ctx sdk.Context, path []<span class="keyword">string</span>, k Keeper)</span> <span class="params">(res []<span class="keyword">byte</span>, sdkError error)</span></span> &#123;</span><br><span class="line">key := path[<span class="number">0</span>]</span><br><span class="line">whois, err := k.GetWhois(ctx, key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res, err = codec.MarshalJSONIndent(k.cdc, whois)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrJSONMarshal, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Resolves a name, returns the value</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">resolveName</span><span class="params">(ctx sdk.Context, path []<span class="keyword">string</span>, keeper Keeper)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">value := keeper.ResolveName(ctx, path[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> value == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">byte</span>&#123;&#125;, sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, <span class="string">"could not resolve name"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res, err := codec.MarshalJSONIndent(keeper.cdc, types.QueryResResolve&#123;Value: value&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrJSONMarshal, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that <code>listWhois</code> and <code>getWhois</code> should already be defined, so you would only need to add <code>resolveName</code>.</p><ul><li><p>在这里，你的Keeper的getter和setter被大量使用。当构建任何其他使用此模块的应用程序时，您可能需要返回并定义更多的getter /setter来访问您需要的状态片段。</p></li><li><p>按照约定，每个输出类型都应该是JSON可编组的和字符串可编的(实现了Golang fmt接口)。返回的字节应该是输出结果的JSON编码。</p><ul><li><p>因此，对于resolve的输出类型，我们将解析字符串包装在一个名为QueryResResolve的结构中，该结构既可用于JSON编组，又有一个. string()方法。</p></li><li><p>对于Whois的输出，正常的Whois结构已经是可以JSON编组的，但是我们需要在其上添加一个. string()方法。</p></li><li><p>对于names查询的输出也是一样的，[]字符串已经是本机可编组的，但是我们想在其上添加一个. string()方法。</p></li></ul></li><li><p>类型Whois没有在<code>./x/nameservice/types/</code>查询器中定义。因为它是在<code>./x/nameservice/types/TypeWhois. go</code>文件中创建的.go文件。</p></li></ul><h1 id="11-Codec-File"><a href="#11-Codec-File" class="headerlink" title="11.Codec File"></a>11.Codec File</h1><p>there is a bit of code that needs to be placed in <code>./x/nameservice/types/codec.go</code>. Any interface you create and any struct that implements an interface needs to be declared in the <code>RegisterCodec</code> function</p><p>一系列代码需要修改,许多实现的接口等函数和结构体都需要在RegisterCodec函数中申明</p><p> In this module the three <code>Msg</code>implementations (<code>SetName</code>, <code>BuyName</code> and <code>DeleteName</code>) have been registered, but your <code>Whois</code> query return type needs to be registered.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// RegisterCodec registers concrete types on codec</span></span><br><span class="line"><span class="comment">// 注册具体的类型澡codec</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterCodec</span><span class="params">(cdc *codec.Codec)</span></span> &#123;</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 1</span></span><br><span class="line">cdc.RegisterConcrete(MsgBuyName&#123;&#125;, <span class="string">"nameservice/BuyName"</span>, <span class="literal">nil</span>)</span><br><span class="line">cdc.RegisterConcrete(MsgSetName&#123;&#125;, <span class="string">"nameservice/SetName"</span>, <span class="literal">nil</span>)</span><br><span class="line">cdc.RegisterConcrete(MsgDeleteName&#123;&#125;, <span class="string">"nameservice/DeleteName"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ModuleCdc defines the module codec</span></span><br><span class="line"><span class="keyword">var</span> ModuleCdc *codec.Codec</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line">ModuleCdc = codec.New()</span><br><span class="line">RegisterCodec(ModuleCdc)</span><br><span class="line"><span class="comment">// 注册</span></span><br><span class="line">codec.RegisterCrypto(ModuleCdc)</span><br><span class="line">ModuleCdc.Seal()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="12-Nameservice-Module-CLI"><a href="#12-Nameservice-Module-CLI" class="headerlink" title="12.Nameservice Module CLI"></a>12.Nameservice Module CLI</h1><p>cosmos sdk使用了 <a href="https://github.com/spf13/cobra" target="_blank" rel="noopener"><code>cobra</code> (opens new window)</a>客户端工具</p><p>This library makes it easy for each module to expose its own commands. The <code>type</code> command should have scaffolded the following files for us -</p><ul><li><code>./x/nameservice/client/cli/queryWhois.go</code></li><li><code>./x/nameservice/client/cli/txWhois.go</code></li></ul><h2 id="Queries"><a href="#Queries" class="headerlink" title="Queries"></a>Queries</h2><p>Start in <code>queryWhois.go</code>. Here, define <code>cobra.Command</code>s for each of your modules <code>Queriers</code> (<code>resolve</code>, and <code>whois</code>):</p><p>实现查询的客户端命令逻辑:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cli</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/context"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line"><span class="string">"github.com/spf13/cobra"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdListWhois</span><span class="params">(queryRoute <span class="keyword">string</span>, cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"list-whois"</span>,</span><br><span class="line">Short: <span class="string">"list all whois"</span>,</span><br><span class="line">RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line">res, _, err := cliCtx.QueryWithData(fmt.Sprintf(<span class="string">"custom/%s/%s"</span>, queryRoute, types.QueryListWhois), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"could not list Whois\n%s\n"</span>, err.Error())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> out []types.Whois</span><br><span class="line">cdc.MustUnmarshalJSON(res, &amp;out)</span><br><span class="line"><span class="keyword">return</span> cliCtx.PrintOutput(out)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdGetWhois</span><span class="params">(queryRoute <span class="keyword">string</span>, cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"get-whois [key]"</span>,</span><br><span class="line">Short: <span class="string">"Query a whois by key"</span>,</span><br><span class="line">Args:  cobra.ExactArgs(<span class="number">1</span>),</span><br><span class="line">RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line">key := args[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">res, _, err := cliCtx.QueryWithData(fmt.Sprintf(<span class="string">"custom/%s/%s/%s"</span>, queryRoute, types.QueryGetWhois, key), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"could not resolve whois %s \n%s\n"</span>, key, err.Error())</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> out types.Whois</span><br><span class="line">cdc.MustUnmarshalJSON(res, &amp;out)</span><br><span class="line"><span class="keyword">return</span> cliCtx.PrintOutput(out)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetCmdResolveName queries information about a name</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdResolveName</span><span class="params">(queryRoute <span class="keyword">string</span>, cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"resolve [name]"</span>,</span><br><span class="line">Short: <span class="string">"resolve name"</span>,</span><br><span class="line">Args:  cobra.ExactArgs(<span class="number">1</span>),</span><br><span class="line">RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line">name := args[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">res, _, err := cliCtx.QueryWithData(fmt.Sprintf(<span class="string">"custom/%s/%s/%s"</span>, queryRoute, types.QueryResolveName, name), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"could not resolve name - %s \n"</span>, name)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> out types.QueryResResolve</span><br><span class="line">cdc.MustUnmarshalJSON(res, &amp;out)</span><br><span class="line"><span class="keyword">return</span> cliCtx.PrintOutput(out)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>cli创建了一个新的<code>CLIContext</code>, 它携带了有关cli交互所需要的用户输入和应用程序配置的数据</p></li><li><p><code>cliCtx.QueryWithdata()</code>函数所需的路径直接映射到查询路由器中的名称。</p><ul><li><p>路径的第一部分用于区分SDK应用程序可能使用的查询类型:<code>custom</code> is for <code>Queriers</code>.</p></li><li><p>第二个部分是要查询路由的模块的名字</p></li><li><p>最后，模块中将有一个特定的查询器，该查询器将被调用</p></li><li><p>在本例中，第四部分是查询。这是因为查询参数是一个简单的字符串。要启用更复杂的查询输入，您需要使用querywithdata()函数的第二个参数来传递数据。有关此示例，请参阅Staking模块中的查询器.</p></li></ul></li></ul><h2 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h2><p>实现交易命令的客户端</p><p>Now that the query interactions are defined, it is time to move on to transaction generation in <code>txWhois.go</code>:</p><p><strong>NOTE</strong>: Your application needs to import the code you just wrote. Here the import path is set to this repository (<code>github.com/cosmos/sdk-tutorials/nameservice/x/nameservice</code>). If you are following along in your own repo you will need to change the import path to reflect that (<code>github.com/{ .Username }/{ .Project.Repo }/x/nameservice</code>). 如果你用的是自己的仓库记得改路径</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cli</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/spf13/cobra"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/context"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/auth"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/auth/client/utils"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdBuyName</span><span class="params">(cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"buy-name [name] [price]"</span>,</span><br><span class="line">Short: <span class="string">"Buys a new name"</span>,</span><br><span class="line">Args:  cobra.ExactArgs(<span class="number">2</span>),</span><br><span class="line">RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">argsName := <span class="keyword">string</span>(args[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line">inBuf := bufio.NewReader(cmd.InOrStdin())</span><br><span class="line">txBldr := auth.NewTxBuilderFromCLI(inBuf).WithTxEncoder(utils.GetTxEncoder(cdc))</span><br><span class="line"></span><br><span class="line">coins, err := sdk.ParseCoins(args[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">msg := types.NewMsgBuyName(argsName, coins, cliCtx.GetFromAddress())</span><br><span class="line">err = msg.ValidateBasic()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> utils.GenerateOrBroadcastMsgs(cliCtx, txBldr, []sdk.Msg&#123;msg&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdSetWhois</span><span class="params">(cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"set-name [value] [name]"</span>,</span><br><span class="line">Short: <span class="string">"Set a new name"</span>,</span><br><span class="line">Args:  cobra.ExactArgs(<span class="number">2</span>),</span><br><span class="line">RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">argsValue := args[<span class="number">0</span>]</span><br><span class="line">argsName := args[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line">inBuf := bufio.NewReader(cmd.InOrStdin())</span><br><span class="line">txBldr := auth.NewTxBuilderFromCLI(inBuf).WithTxEncoder(utils.GetTxEncoder(cdc))</span><br><span class="line">msg := types.NewMsgSetName(argsName, argsValue, cliCtx.GetFromAddress())</span><br><span class="line">err := msg.ValidateBasic()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> utils.GenerateOrBroadcastMsgs(cliCtx, txBldr, []sdk.Msg&#123;msg&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdDeleteWhois</span><span class="params">(cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"delete-name [id]"</span>,</span><br><span class="line">Short: <span class="string">"Delete a new name by ID"</span>,</span><br><span class="line">Args:  cobra.ExactArgs(<span class="number">1</span>),</span><br><span class="line">RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line">cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line">inBuf := bufio.NewReader(cmd.InOrStdin())</span><br><span class="line">txBldr := auth.NewTxBuilderFromCLI(inBuf).WithTxEncoder(utils.GetTxEncoder(cdc))</span><br><span class="line"></span><br><span class="line">msg := types.NewMsgDeleteName(args[<span class="number">0</span>], cliCtx.GetFromAddress())</span><br><span class="line">err := msg.ValidateBasic()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> utils.GenerateOrBroadcastMsgs(cliCtx, txBldr, []sdk.Msg&#123;msg&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We also need to add the commands to our <code>tx</code> command in</p><p><code>x/nameservice/client/cli/tx.go</code> file:</p><p><code>./x/nameservice/client/cli/tx.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cli</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/spf13/cobra"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/flags"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetTxCmd returns the transaction commands for this module</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetTxCmd</span><span class="params">(cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line">nameserviceTxCmd := &amp;cobra.Command&#123;</span><br><span class="line">Use:                        types.ModuleName,</span><br><span class="line">Short:                      fmt.Sprintf(<span class="string">"%s transactions subcommands"</span>, types.ModuleName),</span><br><span class="line">DisableFlagParsing:         <span class="literal">true</span>,</span><br><span class="line">SuggestionsMinimumDistance: <span class="number">2</span>,</span><br><span class="line">RunE:                       client.ValidateCmd,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nameserviceTxCmd.AddCommand(flags.PostCommands(</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding</span></span><br><span class="line">GetCmdBuyName(cdc),</span><br><span class="line">GetCmdSetWhois(cdc),</span><br><span class="line">GetCmdDeleteWhois(cdc),</span><br><span class="line">)...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> nameserviceTxCmd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用的是authcmd包。它提供对CLI控制的帐户的访问，并方便签名。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-Getting-Started&quot;&gt;&lt;a href=&quot;#1-Getting-Started&quot; class=&quot;headerlink&quot; title=&quot;1.Getting Started&quot;&gt;&lt;/a&gt;1.Getting Started&lt;/h1&gt;&lt;p&gt;使用&lt;strong&gt;scratch&lt;/strong&gt;部署区块链&lt;/p&gt;
&lt;p&gt;项目最后会构建一个Nameservice, 就是一个映射关系 string-&amp;gt;other string(&lt;code&gt;map[string]string&lt;/code&gt;)&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="cosmos" scheme="https://xwjahahahaha.github.io/categories/technical/cosmos/"/>
    
    
    <category term="cosmos" scheme="https://xwjahahahaha.github.io/tags/cosmos/"/>
    
  </entry>
  
  <entry>
    <title>mac使用Homebrew下载旧版本/历史版本项目</title>
    <link href="https://xwjahahahaha.github.io/2021/03/04/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%B0%8F%E6%8A%80%E5%B7%A7/mac%E4%BD%BF%E7%94%A8Homebrew%E4%B8%8B%E8%BD%BD%E6%97%A7%E7%89%88%E6%9C%AC-%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC%E9%A1%B9%E7%9B%AE/"/>
    <id>https://xwjahahahaha.github.io/2021/03/04/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%B0%8F%E6%8A%80%E5%B7%A7/mac%E4%BD%BF%E7%94%A8Homebrew%E4%B8%8B%E8%BD%BD%E6%97%A7%E7%89%88%E6%9C%AC-%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-03-04T01:36:38.000Z</published>
    <updated>2021-03-04T01:45:29.178Z</updated>
    
    <content type="html"><![CDATA[<p>mac中使用brew下载软件都是默认下载的最新版本,下载旧版本时需要一定的方法</p><p>以我下载starport软件为例,默认下载0.14.0 ,但是我需要0.13.1版本</p><h1 id="一、找到From的-rb文件"><a href="#一、找到From的-rb文件" class="headerlink" title="一、找到From的.rb文件"></a>一、找到From的.rb文件</h1><p>查看brew安装的软件源:</p><p><code>brew info 你的软件名</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/3KapYY.png" alt="3KapYY"></p><a id="more"></a><p>可以看到默认为最新版本,==找到From的地址==</p><h2 id="二、打开From地址查看-rb文件"><a href="#二、打开From地址查看-rb文件" class="headerlink" title="二、打开From地址查看.rb文件"></a>二、打开From地址查看.rb文件</h2><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/9Dp1cs.png" alt="9Dp1cs"></p><p>其实brew就是通过此地址进行下载的,打开该地址</p><h1 id="三、找到对应的版本"><a href="#三、找到对应的版本" class="headerlink" title="三、找到对应的版本"></a>三、找到对应的版本</h1><p>根据上面的地址,找到你需要的版本下载对应的旧版本压缩包即可!</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/wL1SNe.png" alt="wL1SNe"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;mac中使用brew下载软件都是默认下载的最新版本,下载旧版本时需要一定的方法&lt;/p&gt;
&lt;p&gt;以我下载starport软件为例,默认下载0.14.0 ,但是我需要0.13.1版本&lt;/p&gt;
&lt;h1 id=&quot;一、找到From的-rb文件&quot;&gt;&lt;a href=&quot;#一、找到From的-rb文件&quot; class=&quot;headerlink&quot; title=&quot;一、找到From的.rb文件&quot;&gt;&lt;/a&gt;一、找到From的.rb文件&lt;/h1&gt;&lt;p&gt;查看brew安装的软件源:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;brew info 你的软件名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://xwjpics.gumptlu.work/qinniu_uPic/3KapYY.png&quot; alt=&quot;3KapYY&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    
  </entry>
  
  <entry>
    <title>日记_0135</title>
    <link href="https://xwjahahahaha.github.io/2021/03/04/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0135/"/>
    <id>https://xwjahahahaha.github.io/2021/03/04/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0135/</id>
    <published>2021-03-04T00:32:08.000Z</published>
    <updated>2021-03-04T15:52:36.255Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>英语</th><th>开发</th><th>项目</th><th><font color='red'>科研（No.1）</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>后端：go语言深化，框架gin等</strong>，<strong>go书看完</strong></td><td>区块链公链项目</td><td>论文一周两篇细读,每个月尝试写一篇</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td>英文视频(生活大爆炸开始)</td><td>区块链框架Cosmos</td><td>金窝窝项目需求准备cosmos</td><td>分布式课程论文</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>③</td><td></td><td>Linux学完</td><td>本科毕业设计</td><td></td><td>为下学期的<strong>暑期实习</strong>做准备</td></tr><tr><td>④</td><td></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td></td><td></td></tr><tr><td>⑤</td><td></td><td>有时间的话：Java</td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td>代客泊车项目申报书</td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input disabled="" type="checkbox"> <a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7467408" target="_blank" rel="noopener">Blockchains and Smart Contracts for the Internet of Things</a></li><li><input disabled="" type="checkbox"> Where Is Current Research on Blockchain Technology?-A Systematic Review</li><li><input disabled="" type="checkbox"> Blockstack: A Global Naming and Storage System Secured by Blockchains</li><li><input disabled="" type="checkbox"> Plasma </li><li><input disabled="" type="checkbox"> <a href="https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md" target="_blank" rel="noopener">EOS.IO Technical White Paper v2</a></li><li><input disabled="" type="checkbox"> Ocean Protocol: Tools for the Web3 Data Economy</li><li><input disabled="" type="checkbox"> Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts</li><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input disabled="" type="checkbox"> Decentralizing Privacy: Using Blockchain to Protect Personal Data</li><li><input disabled="" type="checkbox"> 《 Tendermint：关于拜占庭容错共识算法的最新进展》</li><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input disabled="" type="checkbox"> The Ripple Protocol Consensus Algorithm</li><li><input disabled="" type="checkbox"> <a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="noopener">以太坊白皮书</a></li><li><input disabled="" type="checkbox"> Hyperledger Fabric: A Distributed Operating System for Permissioned Blockchains</li><li><input disabled="" type="checkbox"> Secure Data Storage and Recovery in IndustrialBlockchain Network Environments</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li>学弟的cosmos隐私保护项目</li><li>第一篇论文</li><li>科技部编程比赛</li><li>暑期实习准备(Go, 算法等)</li></ul><p>三月 </p><ul><li><input disabled="" type="checkbox"> <p>3-3 ~ 3-7 cosmos项目架构熟悉,做完全部的案例,并且熟悉SDK</p></li><li><input disabled="" type="checkbox"> <p>3-8 ~ 3-20 科技部编程比赛项目实现(使用cosmos)</p></li><li><input disabled="" type="checkbox"> <p>3-20~3-31 Go公链实现项目</p></li><li><input disabled="" type="checkbox"> <p>确定研究主方向,第一篇论文初稿与老师讨论</p></li></ul><p>四月 主要准备算法与Go后端框架的学习</p><p>五月~七月 算法、面试准备</p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> 英语50词</li><li><input disabled="" type="checkbox"> leetcode一题</li><li><input checked="" disabled="" type="checkbox"> nameservice项目</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2><ul><li>做事总是半途而废, 三分钟热度</li><li>想好做什么再去做</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研（No.1）&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;后端：go语言深化，框架gin等&lt;/strong&gt;，&lt;strong&gt;go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;区块链公链项目&lt;/td&gt;
&lt;td&gt;论文一周两篇细读,每个月尝试写一篇&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;英文视频(生活大爆炸开始)&lt;/td&gt;
&lt;td&gt;区块链框架Cosmos&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;分布式课程论文&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;为下学期的&lt;strong&gt;暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;有时间的话：Java&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;代客泊车项目申报书&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>日记_0134</title>
    <link href="https://xwjahahahaha.github.io/2021/03/03/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0134/"/>
    <id>https://xwjahahahaha.github.io/2021/03/03/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0134/</id>
    <published>2021-03-03T02:37:23.000Z</published>
    <updated>2021-03-04T00:34:08.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>英语</th><th>开发</th><th>项目</th><th><font color='red'>科研（No.1）</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>后端：go语言深化，框架gin等</strong>，<strong>go书看完</strong></td><td>区块链公链项目</td><td>论文一周一篇细读,每个月尝试写一篇,尝试写</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td>英文视频(生活大爆炸开始)</td><td>区块链框架Cosmos</td><td>金窝窝项目需求准备cosmos</td><td>分布式课程论文</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>③</td><td></td><td>Linux学完</td><td>本科毕业设计</td><td></td><td>为下学期的<strong>暑期实习</strong>做准备</td></tr><tr><td>④</td><td></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td></td><td></td></tr><tr><td>⑤</td><td></td><td>有时间的话：Java</td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td>代客泊车项目申报书</td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input disabled="" type="checkbox"> <a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7467408" target="_blank" rel="noopener">Blockchains and Smart Contracts for the Internet of Things</a></li><li><input disabled="" type="checkbox"> Where Is Current Research on Blockchain Technology?-A Systematic Review</li><li><input disabled="" type="checkbox"> Blockstack: A Global Naming and Storage System Secured by Blockchains</li><li><input disabled="" type="checkbox"> Plasma </li><li><input disabled="" type="checkbox"> <a href="https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md" target="_blank" rel="noopener">EOS.IO Technical White Paper v2</a></li><li><input disabled="" type="checkbox"> Ocean Protocol: Tools for the Web3 Data Economy</li><li><input disabled="" type="checkbox"> Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts</li><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input disabled="" type="checkbox"> Decentralizing Privacy: Using Blockchain to Protect Personal Data</li><li><input disabled="" type="checkbox"> 《 Tendermint：关于拜占庭容错共识算法的最新进展》</li><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input disabled="" type="checkbox"> The Ripple Protocol Consensus Algorithm</li><li><input disabled="" type="checkbox"> <a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="noopener">以太坊白皮书</a></li><li><input disabled="" type="checkbox"> Hyperledger Fabric: A Distributed Operating System for Permissioned Blockchains</li><li><input disabled="" type="checkbox"> Secure Data Storage and Recovery in IndustrialBlockchain Network Environments</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li>学弟的cosmos隐私保护项目</li><li>第一篇论文</li><li>科技部编程比赛</li><li>暑期实习准备(Go, 算法等)</li></ul><p>三月 </p><ul><li><input disabled="" type="checkbox"> <p>3-3 ~ 3-7 cosmos项目架构熟悉,做完全部的案例,并且熟悉SDK</p></li><li><input disabled="" type="checkbox"> <p>3-8 ~ 3-20 科技部编程比赛项目实现(使用cosmos)</p></li><li><input disabled="" type="checkbox"> <p>3-20~3-31 Go公链实现项目</p></li><li><input disabled="" type="checkbox"> <p>确定研究主方向,第一篇论文初稿与老师讨论</p></li></ul><p>四月 主要准备算法与Go后端框架的学习</p><p>五月~七月 算法、面试准备</p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> <p>英语50词</p></li><li><input disabled="" type="checkbox"> <p>leetcode一题</p></li><li><input checked="" disabled="" type="checkbox"> <p>cosmos游戏案例做完</p></li><li><input checked="" disabled="" type="checkbox"> <p>区块链数据安全论文部分</p></li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研（No.1）&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;后端：go语言深化，框架gin等&lt;/strong&gt;，&lt;strong&gt;go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;区块链公链项目&lt;/td&gt;
&lt;td&gt;论文一周一篇细读,每个月尝试写一篇,尝试写&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;英文视频(生活大爆炸开始)&lt;/td&gt;
&lt;td&gt;区块链框架Cosmos&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;分布式课程论文&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;为下学期的&lt;strong&gt;暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;有时间的话：Java&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;代客泊车项目申报书&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>日记_0133</title>
    <link href="https://xwjahahahaha.github.io/2021/03/02/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0133/"/>
    <id>https://xwjahahahaha.github.io/2021/03/02/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0133/</id>
    <published>2021-03-02T00:24:10.000Z</published>
    <updated>2021-03-03T02:13:19.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>英语</th><th>开发</th><th>项目</th><th><font color='red'>科研（No.1）</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>后端：go语言深化，框架gin等</strong>，<strong>go书看完</strong></td><td>区块链公链项目</td><td>论文一周两篇细读,每个月尝试写一篇</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td>英文视频(生活大爆炸开始)</td><td>区块链框架Cosmos</td><td>金窝窝项目需求准备cosmos</td><td>分布式课程论文</td><td>看比赛资讯，准备明年的<strong>区块链比赛</strong></td></tr><tr><td>③</td><td></td><td>Linux学完</td><td>本科毕业设计</td><td></td><td>为下学期的<strong>暑期实习</strong>做准备</td></tr><tr><td>④</td><td></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td></td><td></td></tr><tr><td>⑤</td><td></td><td>有时间的话：Java</td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td>代客泊车项目申报书</td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input disabled="" type="checkbox"> <p><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7467408" target="_blank" rel="noopener">Blockchains and Smart Contracts for the Internet of Things</a></p></li><li><input disabled="" type="checkbox"> <p>Where Is Current Research on Blockchain Technology?-A Systematic Review</p></li><li><input disabled="" type="checkbox"> <p>Blockstack: A Global Naming and Storage System Secured by Blockchains</p></li><li><input disabled="" type="checkbox"> <p>Plasma </p></li><li><input disabled="" type="checkbox"> <p><a href="https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md" target="_blank" rel="noopener">EOS.IO Technical White Paper v2</a></p></li><li><input disabled="" type="checkbox"> <p>Ocean Protocol: Tools for the Web3 Data Economy</p></li><li><input disabled="" type="checkbox"> <p>Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts</p></li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input disabled="" type="checkbox"> Decentralizing Privacy: Using Blockchain to Protect Personal Data</li><li><input disabled="" type="checkbox"> 《 Tendermint：关于拜占庭容错共识算法的最新进展》</li><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input disabled="" type="checkbox"> The Ripple Protocol Consensus Algorithm</li><li><input disabled="" type="checkbox"> <a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="noopener">以太坊白皮书</a></li><li><input disabled="" type="checkbox"> Hyperledger Fabric: A Distributed Operating System for Permissioned Blockchains</li><li><input disabled="" type="checkbox"> Secure Data Storage and Recovery in IndustrialBlockchain Network Environments</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li></ul><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> <p>英语50词 + 英语视频</p></li><li><input disabled="" type="checkbox"> <p>leetcode一题</p></li><li><input checked="" disabled="" type="checkbox"> <p>闪电网络看完</p></li><li><input checked="" disabled="" type="checkbox"> <p>Cosmos环境</p></li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研（No.1）&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;后端：go语言深化，框架gin等&lt;/strong&gt;，&lt;strong&gt;go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;区块链公链项目&lt;/td&gt;
&lt;td&gt;论文一周两篇细读,每个月尝试写一篇&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;英文视频(生活大爆炸开始)&lt;/td&gt;
&lt;td&gt;区块链框架Cosmos&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;分布式课程论文&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备明年的&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;为下学期的&lt;strong&gt;暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;有时间的话：Java&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;代客泊车项目申报书&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>scavenger_hunt_game测试项目部署</title>
    <link href="https://xwjahahahaha.github.io/2021/03/01/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Cosmos/%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B%E5%BA%93/scavenger-hunt-game%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    <id>https://xwjahahahaha.github.io/2021/03/01/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Cosmos/%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B%E5%BA%93/scavenger-hunt-game%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</id>
    <published>2021-03-01T07:07:45.000Z</published>
    <updated>2021-03-04T02:08:22.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="scavenger-hunt-game"><a href="#scavenger-hunt-game" class="headerlink" title="scavenger hunt game"></a><strong>scavenger hunt</strong> game</h1><p>cosmos官方给出的拾荒者狩猎游戏运行<strong>部署细节/重点记录,以及文档翻译</strong></p><p>官方地址:<a href="https://tutorials.cosmos.network/scavenge/tutorial/02-the-game.html" target="_blank" rel="noopener">The Game | Cosmos SDK Tutorials</a></p><p>文档翻译部分来源于:<a href="https://blog.csdn.net/lk2684753/article/details/113849468" target="_blank" rel="noopener">https://blog.csdn.net/lk2684753/article/details/113849468</a></p><a id="more"></a><h2 id="1-安装starport"><a href="#1-安装starport" class="headerlink" title="1.安装starport"></a>1.安装starport</h2><p>starport是cosmos官方的项目部署脚手架工具</p><p>Mac下的安装:</p><p>==注意⚠️:要安装0.13.1版本==,因为官网的教程安装的是0.13.1</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/YmWghE.png" alt="YmWghE"></p><p>不会安装旧版本可见:<a href="https://blog.csdn.net/weixin_43988498/article/details/114359578?spm=1001.2014.3001.5501" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43988498/article/details/114359578?spm=1001.2014.3001.5501</a></p><p>不能直接用如下命令,Homebrew会默认安装最新版</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tendermint/tap/starport</span><br></pre></td></tr></table></figure><p>其他安装:[starport/2 Install.md at develop · tendermint/starport (github.com)](<a href="https://github.com/tendermint/starport/blob/develop/docs/1" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/1</a> Introduction/2 Install.md)</p><h2 id="2-创建-拷贝项目"><a href="#2-创建-拷贝项目" class="headerlink" title="2.创建/拷贝项目"></a>2.创建/拷贝项目</h2><p>初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> starport app --<span class="built_in">help</span></span></span><br><span class="line">Generates an empty application</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  starport app [github.com/org/repo] [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --address-prefix string   Address prefix (default "cosmos")</span><br><span class="line">  -h, --help                    help for app</span><br><span class="line">      --sdk-version string      Target Cosmos-SDK Version -launchpad -stargate (default "stargate")</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> starport app github.com/github-username/scavenge --sdk-version=<span class="string">"launchpad"</span></span></span><br><span class="line"></span><br><span class="line">⭐️ Successfully created a Cosmos app 'scavenge'.</span><br><span class="line">👉 Get started with the following commands:</span><br><span class="line"></span><br><span class="line"><span class="meta"> %</span><span class="bash"> <span class="built_in">cd</span> scavenge</span></span><br><span class="line"><span class="meta"> %</span><span class="bash"> starport serve</span></span><br><span class="line"></span><br><span class="line">NOTE: add --verbose flag for verbose (detailed) output.</span><br></pre></td></tr></table></figure><p>出现的问题:</p><ul><li><p>问题一:</p><p>starport requires protoc installed.</p><p>Please, follow instructions on <a href="https://grpc.io/docs/protoc-installation" target="_blank" rel="noopener">https://grpc.io/docs/protoc-installation</a></p><p>原因:环境未安装protoc</p><p>解决:<code>brew install protobuf</code></p></li><li><p>问题二</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">scavenge/query.proto:4:1: warning: Import google/api/annotations.proto is unused.</span><br><span class="line"></span><br><span class="line">scavenge/query.proto:5:1: warning: Import cosmos/base/query/v1beta1/pagination.proto is unused.</span><br><span class="line"></span><br><span class="line">protoc-gen-gocosmos: program not found or is not executable</span><br><span class="line"></span><br><span class="line">Please specify a program using absolute path or make sure the program is available in your PATH system variable</span><br><span class="line"></span><br><span class="line">--gocosmos_out: protoc-gen-gocosmos: Plugin failed with status code 1.</span><br><span class="line"></span><br><span class="line">: exit status 1</span><br></pre></td></tr></table></figure><p>原因:没有把<code>GOPATH/bin</code>加入到环境变量中,导致protoc-gen-gocosmos等无法编译可执行程序到bin目录下</p><p>解决:添加环境变量,再次运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export GOPATH&#x3D;&quot;&#x2F;Users&#x2F;XXXX&#x2F;projects&#x2F;go_projects&quot;</span><br><span class="line">export PATH&#x3D;$PATH:$GOROOT&#x2F;bin:$GOPATH&#x2F;src:$GOPATH&#x2F;bin</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-启动项目"><a href="#3-启动项目" class="headerlink" title="3.启动项目"></a>3.启动项目</h2><p><code>starport serve</code></p><ul><li><p>问题一</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm ERR! code E404</span><br><span class="line">npm ERR! 404 Not Found - GET https://registry.npm.taobao.org/@types/node/-/node-13.13.36.tgz - [not_found] document not found</span><br><span class="line">npm ERR! 404 </span><br><span class="line">npm ERR! 404  '@types/node@https://registry.npm.taobao.org/@types/node/-/node-13.13.36.tgz' is not in the npm registry.</span><br><span class="line">npm ERR! 404 You should bug the author to publish it (or use the name yourself!)</span><br><span class="line">npm ERR! 404 </span><br><span class="line">npm ERR! 404 Note that you can also install from a</span><br><span class="line">npm ERR! 404 tarball, folder, http url, or git url.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /Users/xwj/.npm/_logs/2021-03-01T07_24_26_696Z-debug.log</span><br></pre></td></tr></table></figure><p>原因:部分依赖包淘宝镜像中不存在</p><p>解决:修改为原始的源<code>npm config set registry https://registry.npmjs.org/</code>再次启动</p><p>淘宝源<code>npm config set registry https://registry.npmjs.org/</code></p></li></ul><h2 id="4-成功启动"><a href="#4-成功启动" class="headerlink" title="4.成功启动"></a>4.成功启动</h2><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/ebEzzD.png" alt="ebEzzD"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/5wjuhQ.png" alt="5wjuhQ"></p><p>如果启动界面不是如上所示,那么请检查starport的版本号要 &gt;v0.14.0</p><p>最新版下载命令<code>curl https://get.starport.network/starport! | bash</code></p><h2 id="5-添加脚手架类型"><a href="#5-添加脚手架类型" class="headerlink" title="5.添加脚手架类型"></a>5.添加脚手架类型</h2><p>命令<code>starport type</code>,作用:<strong>给每一个type生成CRUD的操作</strong></p><p>在项目文件夹下打开一个新终端，然后运行以下starport type命令来生成我们的scavenge类型</p><p><code>starport type scavenge description solutionHash reward solution scavenger</code></p><p>我们还要创建第二种类型，Commit以防止前面提到的提交的解决方案在前端运行</p><p><code>starport type commit solutionHash solutionScavengerHash</code></p><p>到目前为止,Starport脚手架帮助我们搭建了必须的文件和函数</p><p>下面将会根据游戏的需求更改这些函数与文件.</p><ul><li><p>问题一</p><p><code>open go.mod: no such file or directory</code></p><p>执行的路径不对,需要在scavenge文件夹下执行,不然会提示找不到go.mod文件夹</p></li></ul><h2 id="6-Message模块"><a href="#6-Message模块" class="headerlink" title="6.Message模块"></a>6.Message模块</h2><p>开始第一个模块的编写,CRUD</p><p>Create</p><p>Messages type已经创建在<code>./x/scavenge/types/</code>文件夹下的<code>MsgCommitSolution</code>,但是我们要在中删除掉一些我们不需要的字段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ sdk.Msg = &amp;MsgCreateScavenge&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MsgCreateScavenge <span class="keyword">struct</span> &#123;</span><br><span class="line">Creator sdk.AccAddress <span class="string">`json:"creator" yaml:"creator"`</span></span><br><span class="line">Description <span class="keyword">string</span> <span class="string">`json:"description" yaml:"description"`</span></span><br><span class="line">SolutionHash <span class="keyword">string</span> <span class="string">`json:"solution_hash" yaml:"solution_hash"`</span></span><br><span class="line">Reward sdk.Coins <span class="string">`json:"reward" yaml:"reward"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMsgCreateScavenge</span><span class="params">(creator sdk.AccAddress, description <span class="keyword">string</span>, solutionHash <span class="keyword">string</span>, reward sdk.Coins)</span> *<span class="title">MsgCreateScavenge</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;MsgCreateScavenge&#123;</span><br><span class="line">Creator:      creator,</span><br><span class="line">Description:  description,</span><br><span class="line">SolutionHash: solutionHash,</span><br><span class="line">Reward:       reward,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg *MsgCreateScavenge)</span> <span class="title">Route</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> RouterKey</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg *MsgCreateScavenge)</span> <span class="title">Type</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"CreateScavenge"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg *MsgCreateScavenge)</span> <span class="title">GetSigners</span><span class="params">()</span> []<span class="title">sdk</span>.<span class="title">AccAddress</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> []sdk.AccAddress&#123;msg.Creator&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg *MsgCreateScavenge)</span> <span class="title">GetSignBytes</span><span class="params">()</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">bz := ModuleCdc.MustMarshalJSON(msg)</span><br><span class="line"><span class="keyword">return</span> sdk.MustSortJSON(bz)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基本验证</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg *MsgCreateScavenge)</span> <span class="title">ValidateBasic</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> msg.Creator.Empty() &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidAddress, <span class="string">"creator can't be empty"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> msg.SolutionHash == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, <span class="string">"solutionHash can't be empty"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意,所有的Message都需要继承<code>sdk.Msg</code>接口</p><p>==<strong>MsgCreateScavenge结构</strong>==</p><ul><li><p><code>Creator</code> - Who created it. This uses the <code>sdk.AccAddress</code> type which represents an account in the app controlled by public key cryptograhy.</p><p><strong>Message的创建者,<code>sdk.AccAddress</code>代表由公钥密码体系创建的应用程序账户</strong></p></li><li><p><code>Description</code> - The question to be solved or description of the challenge.</p><p><strong>要解决的问题以及挑战的描述</strong></p></li><li><p><code>SolutionHash</code> - The scrambled solution.</p><p><strong>混乱的解决方案</strong></p></li><li><p><code>Reward</code> - This is the bounty that is awarded to whoever submits the answer first.</p><p><strong>奖励给第一个提交答案的人的奖赏</strong></p></li></ul><p>该<code>Msg</code>界面还需要设置其他方法，例如，验证的内容<code>struct</code>以及确认消息是由创建者签名并提交的。</p><p>既然可以创建清除方法，那么唯一的其他基本操作就是能够解决它。如前所述，这应分为两个单独的操作：<code>MsgCommitSolution</code>和<code>MsgRevealSolution</code></p><p>==<strong>MsgCommitSolution结构</strong>==</p><p> <strong>重命名<code>./x/scavenge/types/MsgCreateCommit.go</code>为<code>./x/scavenge/types/MsgCommitSolution.go</code></strong></p><p>修改后为如下内容:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ sdk.Msg = &amp;MsgCommitSolution&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MsgCommitSolution <span class="keyword">struct</span> &#123;</span><br><span class="line">Scavenger             sdk.AccAddress <span class="string">`json:"scavenger" yaml:"scavenger"`</span>                         <span class="comment">// address of the scavenger</span></span><br><span class="line">SolutionHash          <span class="keyword">string</span>         <span class="string">`json:"solutionhash" yaml:"solutionhash"`</span>                   <span class="comment">// solutionhash of the scavenge</span></span><br><span class="line">SolutionScavengerHash <span class="keyword">string</span>         <span class="string">`json:"solutionScavengerHash" yaml:"solutionScavengerHash"`</span> <span class="comment">// solution hash of the scavenge</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewMsgCommitSolution creates a new MsgCommitSolution instance</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMsgCommitSolution</span><span class="params">(scavenger sdk.AccAddress, solutionHash <span class="keyword">string</span>, solutionScavengerHash <span class="keyword">string</span>)</span> <span class="title">MsgCommitSolution</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> MsgCommitSolution&#123;</span><br><span class="line">Scavenger:             scavenger,</span><br><span class="line">SolutionHash:          solutionHash,</span><br><span class="line">SolutionScavengerHash: solutionScavengerHash,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgCommitSolution)</span> <span class="title">Route</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> RouterKey</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgCommitSolution)</span> <span class="title">Type</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"CreateCommit"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgCommitSolution)</span> <span class="title">GetSigners</span><span class="params">()</span> []<span class="title">sdk</span>.<span class="title">AccAddress</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> []sdk.AccAddress&#123;sdk.AccAddress(msg.Scavenger)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgCommitSolution)</span> <span class="title">GetSignBytes</span><span class="params">()</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">bz := ModuleCdc.MustMarshalJSON(msg)</span><br><span class="line"><span class="keyword">return</span> sdk.MustSortJSON(bz)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgCommitSolution)</span> <span class="title">ValidateBasic</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> msg.Scavenger.Empty() &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidAddress, <span class="string">"scavenger can't be empty"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息struct包含揭示解决方案时的所有必要信息：</p><ul><li><p>Scavenger -谁在透露解决方案。</p></li><li><p>SolutionHash -混乱的解决方案（哈希）。</p></li><li><p>SolutionScavengerHash -这是解决方案和解决方案的人的哈希组合。</p></li></ul><p>该消息也实现了sdk.Msg接口。</p><p>==<strong>MsgRevealSolution</strong>==</p><p>此消息类型应该存在<code>./x/scavenge/types/MsgRevealSolution.go</code>,将该文件修改为:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"crypto/sha256"</span></span><br><span class="line"><span class="string">"encoding/hex"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// MsgRevealSolution</span></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">var</span> _ sdk.Msg = &amp;MsgRevealSolution&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MsgRevealSolution - struct for unjailing jailed validator</span></span><br><span class="line"><span class="keyword">type</span> MsgRevealSolution <span class="keyword">struct</span> &#123;</span><br><span class="line">Scavenger    sdk.AccAddress <span class="string">`json:"scavenger" yaml:"scavenger"`</span>       <span class="comment">// address of the scavenger scavenger</span></span><br><span class="line">SolutionHash <span class="keyword">string</span>         <span class="string">`json:"solutionHash" yaml:"solutionHash"`</span> <span class="comment">// SolutionHash of the scavenge</span></span><br><span class="line">Solution     <span class="keyword">string</span>         <span class="string">`json:"solution" yaml:"solution"`</span>         <span class="comment">// solution of the scavenge</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewMsgRevealSolution creates a new MsgRevealSolution instance</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMsgRevealSolution</span><span class="params">(scavenger sdk.AccAddress, solution <span class="keyword">string</span>)</span> <span class="title">MsgRevealSolution</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> solutionHash = sha256.Sum256([]<span class="keyword">byte</span>(solution))</span><br><span class="line"><span class="keyword">var</span> solutionHashString = hex.EncodeToString(solutionHash[:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> MsgRevealSolution&#123;</span><br><span class="line">Scavenger:    scavenger,</span><br><span class="line">SolutionHash: solutionHashString,</span><br><span class="line">Solution:     solution,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RevealSolutionConst is RevealSolution Constant</span></span><br><span class="line"><span class="keyword">const</span> RevealSolutionConst = <span class="string">"RevealSolution"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// nolint</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgRevealSolution)</span> <span class="title">Route</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> RouterKey &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgRevealSolution)</span> <span class="title">Type</span><span class="params">()</span> <span class="title">string</span></span>  &#123; <span class="keyword">return</span> RevealSolutionConst &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgRevealSolution)</span> <span class="title">GetSigners</span><span class="params">()</span> []<span class="title">sdk</span>.<span class="title">AccAddress</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> []sdk.AccAddress&#123;sdk.AccAddress(msg.Scavenger)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetSignBytes gets the bytes for the message signer to sign on</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgRevealSolution)</span> <span class="title">GetSignBytes</span><span class="params">()</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">bz := ModuleCdc.MustMarshalJSON(msg)</span><br><span class="line"><span class="keyword">return</span> sdk.MustSortJSON(bz)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ValidateBasic validity check for the AnteHandler</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgRevealSolution)</span> <span class="title">ValidateBasic</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> msg.Scavenger.Empty() &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidAddress, <span class="string">"scavenger can't be empty"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> msg.SolutionHash == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, <span class="string">"solutionScavengerHash can't be empty"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> msg.Solution == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, <span class="string">"solutionHash can't be empty"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> solutionHash = sha256.Sum256([]<span class="keyword">byte</span>(msg.Solution))</span><br><span class="line"><span class="keyword">var</span> solutionHashString = hex.EncodeToString(solutionHash[:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> msg.SolutionHash != solutionHashString &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, fmt.Sprintf(<span class="string">"Hash of solution (%s) doesn't equal solutionHash (%s)"</span>, msg.SolutionHash, solutionHashString))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息<code>struct</code>包含揭示解决方案时的所有必要信息：</p><ul><li><code>Scavenger</code> -谁在透露解决方案。</li><li><code>SolutionHash</code> -混乱的解决方案。</li><li><code>Solution</code> -解决方案的纯文本版本。</li></ul><p>该消息也实现了<code>sdk.Msg</code>接口。</p><p>特别是看<code>ValidateBasic</code>功能。它验证是否进行了所有必要的输入以显示解决方案，并从提交的解决方案中创建了sha256哈希。</p><p>==MsgSetScavenge、MsgDeleteScavenge、MsgSetCommit、MsgDeleteCommit==</p><p>按文档一致即可</p><p>==Codec==</p><p>定义消息后，我们需要向编码器描述如何将其存储为字节。为此，我们编辑位于的文件<code>./x/scavenge/types/codec.go</code>。通过如下描述我们的类型，它们将与我们的编码库一起使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// RegisterCodec registers concrete types on codec</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterCodec</span><span class="params">(cdc *codec.Codec)</span></span> &#123;</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 1</span></span><br><span class="line">cdc.RegisterConcrete(MsgCommitSolution&#123;&#125;, <span class="string">"scavenge/CreateCommit"</span>, <span class="literal">nil</span>)</span><br><span class="line">cdc.RegisterConcrete(MsgSetCommit&#123;&#125;, <span class="string">"scavenge/SetCommit"</span>, <span class="literal">nil</span>)</span><br><span class="line">cdc.RegisterConcrete(MsgDeleteCommit&#123;&#125;, <span class="string">"scavenge/DeleteCommit"</span>, <span class="literal">nil</span>)</span><br><span class="line">cdc.RegisterConcrete(MsgCreateScavenge&#123;&#125;, <span class="string">"scavenge/CreateScavenge"</span>, <span class="literal">nil</span>)</span><br><span class="line">cdc.RegisterConcrete(MsgSetScavenge&#123;&#125;, <span class="string">"scavenge/SetScavenge"</span>, <span class="literal">nil</span>)</span><br><span class="line">cdc.RegisterConcrete(MsgDeleteScavenge&#123;&#125;, <span class="string">"scavenge/DeleteScavenge"</span>, <span class="literal">nil</span>)</span><br><span class="line">cdc.RegisterConcrete(MsgRevealSolution&#123;&#125;, <span class="string">"scavenge/MsgRevealSolution"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ModuleCdc defines the module codec</span></span><br><span class="line"><span class="keyword">var</span> ModuleCdc *codec.Codec</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">ModuleCdc = codec.New()</span><br><span class="line">RegisterCodec(ModuleCdc)</span><br><span class="line">codec.RegisterCrypto(ModuleCdc)</span><br><span class="line">ModuleCdc.Seal()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完这些文件后再次启动<code>starport serve</code>会出现错误,不用担心,后续全部修改完毕之后就ok了</p><p>我们已经拥有Message模块了,但是<strong>我们需要一些地方去存储他们发送的信息.所有相关的静态数据都与Keeper模块相关</strong></p><h2 id="7-Keep模块"><a href="#7-Keep模块" class="headerlink" title="7.Keep模块"></a>7.Keep模块</h2><p>使用该<code>starport</code>命令后，您应该<code>Keeper</code>在处有一个样板<code>./x/scavenge/keeper/keeper.go</code>。它包含了像基本功能引用一个基本的函数<code>Set</code>，<code>Get</code>和<code>Delete</code>。</p><p>管理器Keeper将所有数据存储在模块中。<strong>有时一个模块会导入另一个模块的管理器Keeper。这将允许在模块之间共享和修改状态</strong>。由于我们在处理模块中的coin作为赏金奖励，因此我们需要访问<code>bank</code>模块的管理员（我们称之为CoinKeeper）。看看我们完成的<code>Keeper</code>文件，你可以看到那里的<code>bank</code>管理员被引用，以及如何<code>Set</code>，<code>Get</code>以及<code>Delete</code></p><p><strong>Keeper、scavenge、commit详细代码见文档</strong></p><p>您可能会注意到<code>types.Commit</code>和<code>types.Scavenge</code>贯穿了整个参考Keeper。这些是定义的新结构，<code>./x/scavenge/types/type&lt;Type&gt;.go</code>(<code>typeCommit 、typeScavenge</code>)其中包含有关不同Scavenge挑战和针对这些挑战的不同已提交解决方案的所有必要信息。它们看起来类似于Msg我们之前看到的类型，因为它们包含相似的信息。我们将对模版文件进行一些修改。</p><p>在<code>TypeScavenge.go</code>文件中，我们需要删除该<code>ID</code>字段，因为我们将使用<code>SolutionHash</code>键作为键。我们还需要更新<code>Reward</code>到<code>sdk.Coins</code>，以及<code>Scavenger</code>到<code>sdk.AccAddress</code>，所以我们可以一次性解决。</p><p>修改完成后的结果:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Scavenge <span class="keyword">struct</span> &#123;</span><br><span class="line">Creator sdk.AccAddress <span class="string">`json:"creator" yaml:"creator"`</span></span><br><span class="line">    Description <span class="keyword">string</span> <span class="string">`json:"description" yaml:"description"`</span></span><br><span class="line">    SolutionHash <span class="keyword">string</span> <span class="string">`json:"solutionHash" yaml:"solutionHash"`</span></span><br><span class="line">    Reward sdk.Coins <span class="string">`json:"reward" yaml:"reward"`</span></span><br><span class="line">    Solution <span class="keyword">string</span> <span class="string">`json:"solution" yaml:"solution"`</span></span><br><span class="line">    Scavenger sdk.AccAddress <span class="string">`json:"scavenger" yaml:"scavenger"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>TypeCommit.go</code>文件我们需要删除ID字段,并且重命名Creator字段为Scavenger</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Commit <span class="keyword">struct</span> &#123;</span><br><span class="line">Scavenger sdk.AccAddress <span class="string">`json:"scavenger" yaml:"scavenger"`</span></span><br><span class="line">    SolutionHash <span class="keyword">string</span> <span class="string">`json:"solutionHash" yaml:"solutionHash"`</span></span><br><span class="line">    SolutionScavengerHash <span class="keyword">string</span> <span class="string">`json:"solutionScavengerHash" yaml:"solutionScavengerHash"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可以想象，未解决的字段<code>Scavenge</code>将包含<code>Solution</code>和<code>Scavenger</code>字段的空值。您可能还注意到每种类型都有该<code>String</code>方法。这有助于将结构呈现为字符串</p><h3 id="Prefixes"><a href="#Prefixes" class="headerlink" title="Prefixes"></a><strong>Prefixes</strong></h3><p>您可能会注意到的使用<code>types.ScavengePrefix</code>，<code>types.ScavengeCountPrefix</code>以及<code>types.CommitPrefix</code>或<code>types.CommitCountPrefix</code>。这些定义在一个名为的文件中<code>./x/scavenge/types/key.go</code>，可帮助我们保持Keeper组织良好。该Keeper实际上只是一个键值存储。这意味着，与Object<code>javascript</code>中的相似，所有值都在键下引用。要访问值，您需要知道存储它的键。这有点像唯一标识符（UID）。</p><p>在存储a时，==<code>Scavenge</code>我们使用的密钥<code>SolutionHash</code>作为唯一ID==，对于a时，==<code>Commit</code>我们使用的密钥<code>SolutionScavengeHash</code>==。但是，由于我们将这两种数据类型存储在同一位置，因此我们可能<strong>希望区分用作键的哈希类型。我们可以通过在散列上添加前缀来做到这一点</strong>，从而使我们能够识别出哪一个。因为<code>Scavenge</code>我们看到了前缀<code>scavenge-value</code>和<code>scavenge-count</code>，所以<code>Commit</code>我们看到了前缀<code>commit-value</code>和<code>commit-count</code>。<br>所以在<code>key.go</code>文件中可以看到如下内容:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// ModuleName is the name of the module</span></span><br><span class="line">ModuleName = <span class="string">"scavenge"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// StoreKey to be used when creating the KVStore</span></span><br><span class="line">StoreKey = ModuleName</span><br><span class="line"></span><br><span class="line"><span class="comment">// RouterKey to be used for routing msgs</span></span><br><span class="line">RouterKey = ModuleName</span><br><span class="line"></span><br><span class="line"><span class="comment">// QuerierRoute to be used for querier msgs</span></span><br><span class="line">QuerierRoute = ModuleName</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">ScavengePrefix = <span class="string">"scavenge-value-"</span></span><br><span class="line">ScavengeCountPrefix = <span class="string">"scavenge-count-"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">CommitPrefix = <span class="string">"commit-value-"</span></span><br><span class="line">CommitCountPrefix = <span class="string">"commit-count-"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Iterators"><a href="#Iterators" class="headerlink" title="Iterators"></a><strong>Iterators</strong></h3><p>有时，您可能想直接通过其键访问一个 <code>Commit</code>或一个 <code>Scavenge</code>。这就是为什么我们有方法<code>GetCommit</code>和的原因<code>GetScavenge</code>。</p><p>但是，有时您会想要<code>Scavenge</code>一次或一次获取所有内容<code>Commit</code>。为此，我们使用称为的迭代器<code>KVStorePrefixIterator</code>。此实用程序来自<code>cosmos sdk</code>并在密钥存储上进行迭代。如果提供前缀，它将仅对包含该前缀的键进行迭代。由于我们为<code>Scavenge</code>和<code>Commit</code>定义了前缀，因此我们可以在此处使用它们以仅返回所需的数据类型。</p><p>目前你已经知道了<code>Commit</code>和<code>Scavenge</code>的存储位置,我们需要将Messages连接到此存储.这个过程叫做<code>handling</code>消息,并且它是实现在<code>Handler</code>中.</p><h2 id="8-Handler模块"><a href="#8-Handler模块" class="headerlink" title="8.Handler模块"></a>8.Handler模块</h2><p>为了使消息到达<code>Keeper</code>，它必须经过<code>Handler</code>。在这里可以应用逻辑来允许或拒绝一个 <code>Message</code>成功。这也是逻辑准确显示状态更改应如何在<code>Keeper</code>中进行的地方。<strong>==如果您熟悉Model View Controller（MVC）架构，Keeper有点像Model，Handler有点像Controller==</strong>。如果您熟悉<code>React / Redux</code> 或<code>Vue / Vuex</code>架构，Keeper有点像<code>Reducer / Store</code>，而<code>Handler</code>有点像<code>Actions</code>。</p><p>我们的处理程序Handler将进入<code>./x/scavenge/handler.go</code>并遵循样板中列出的建议。我们将创建一个名为单独的文件处理功能，<code>handler&lt;Action.go</code>为我们的每一个三种<code>Message</code>类型<code>MsgCreateScavenge</code>，<code>MsgCommitSolution</code>和<code>MsgRevealSolution</code>。</p><p>运行<code>starport type</code>命令应该已经添加了<code>handlerMsgCreateScavenge.go</code>和<code>handlerMsgCreateCommit.go</code>文件。本质上，您可以重命名<code>handlerMsgCreateCommit</code>为<code>handlerMsgCommitSolution</code>。制作一份副本并将其用作的模板<code>handlerMsgRevealSolution</code>。</p><p>文件修改见官方文档</p><h3 id="moduleAcct"><a href="#moduleAcct" class="headerlink" title="moduleAcct"></a>moduleAcct</h3><p>你可能注意到handlerMsgCreateScavenge和handlerMsgRevealSolution处理函数中使用了moduleAcct。<strong>该帐户不受公钥对控制，而是对该实际模块拥有的帐户的引用</strong>。它被用来持有与scavenge连接的赏金，直到该scavenge被解决，在这一点上，赏金支付给解决了scavenge的帐户。</p><h3 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h3><p>每个处理程序的末尾是一个EventManager，它将在事务内<strong>创建日志</strong>，以显示有关在处理此消息期间发生的情况的信息。这对于希望确切了解状态转换结果发生的客户端软件很有用。这些事件使用一系列预定义的类型，可以在<code>./x/scavenge/types/events.go</code>以下类型中找到它们</p><p>现在我们创建了必要的管道去更新状态,我们需要考虑用什么方法去查询它们. 通常，这是通过REST端点或CLI完成的.这两个客户端都与查询状态的应用程序部分交互，称为<code>Querier</code></p><h2 id="9-Querier"><a href="#9-Querier" class="headerlink" title="9.Querier"></a>9.Querier</h2><p>为了查询应用程序的数据，我们需要使用来使其可访问<code>Querier</code>。该应用程序的一部分<code>Keeper</code>与访问状态并返回状态一起工作。<code>Querier</code>定义在<code>./x/scavenge/keeper/querier.go</code>。我们的<code>starport</code>工具为我们提供了一些外观方面的建议，类似于<code>Handler</code>我们想要处理不同查询路线的建议。</p><p>您可以<code>Querier</code>针对许多不同类型的查询在内建立许多不同的路由，但我们将只进行三个：</p><ul><li><p><code>listCommit</code> 将列出所有提交</p></li><li><p><code>getCommit</code> 将得到一个提交 solutionScavengerHash</p></li><li><p><code>listScavenge</code> 将列出所有Scavenge</p></li><li><p><code>getScavenge</code> 将会得到一次Scavenge 的 solutionHash</p></li></ul><p>合并到switch语句中，并充实每个函数，该文件应如下所示</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> keeper</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="comment">// this line is used by starport scaffolding # 1</span></span><br><span class="line"><span class="string">"github.com/github-username/scavenge/x/scavenge/types"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">abci <span class="string">"github.com/tendermint/tendermint/abci/types"</span></span><br><span class="line"></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewQuerier creates a new querier for scavenge clients.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewQuerier</span><span class="params">(k Keeper)</span> <span class="title">sdk</span>.<span class="title">Querier</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx sdk.Context, path []<span class="keyword">string</span>, req abci.RequestQuery)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> path[<span class="number">0</span>] &#123;</span><br><span class="line">    <span class="comment">// this line is used by starport scaffolding # 2</span></span><br><span class="line"><span class="keyword">case</span> types.QueryListCommit:</span><br><span class="line"><span class="keyword">return</span> listCommit(ctx, k)</span><br><span class="line"><span class="keyword">case</span> types.QueryGetCommit:</span><br><span class="line"><span class="keyword">return</span> getCommit(ctx, path[<span class="number">1</span>:], k)</span><br><span class="line"><span class="keyword">case</span> types.QueryListScavenge:</span><br><span class="line"><span class="keyword">return</span> listScavenge(ctx, k)</span><br><span class="line"><span class="keyword">case</span> types.QueryGetScavenge:</span><br><span class="line"><span class="keyword">return</span> getScavenge(ctx, path[<span class="number">1</span>:], k)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, <span class="string">"unknown scavenge query endpoint"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h3><p>您可能会注意到，我们在初始<code>switch</code>语句中使用了四种不同的导入类型。这些在我们的<code>./x/scavenge/types/querier.go</code>文件中定义为简单字符串。该文件应如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">QueryListScavenge = <span class="string">"list-scavenge"</span></span><br><span class="line">QueryGetScavenge  = <span class="string">"get-scavenge"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">QueryListCommit = <span class="string">"list-commit"</span></span><br><span class="line">QueryGetCommit  = <span class="string">"get-commit"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>我们的查询非常简单，因为我们已经<code>Keeper</code>为访问状态配备了所有必需的功能。您也可以在这里看到正在使用的迭代器。</p><p>现在，我们已经创建了模块的所有基本操作，我们希望使它们可访问。我们可以使用CLI客户端和REST客户端来做到这一点。在本教程中，我们将创建一个CLI客户端</p><h2 id="10-CLI"><a href="#10-CLI" class="headerlink" title="10.CLI"></a>10.CLI</h2><p>命令行界面（CLI）将在应用程序在某处机器上运行后帮助我们与它进行交互。<strong>每个模块在CLI内都有自己的名称空间，这使它能够创建和签名要由该模块处理的消息。</strong>它还具有查询该模块状态的功能。与该应用程序的其余部分结合使用时，CLI将允许您执行诸如为新帐户生成密钥或检查您已经与该应用程序进行交互的状态之类的操作</p><p>我们的模块CLI被分成两个文件名为<code>tx.go</code>以及<code>query.go</code>分别位于<code>./x/scavenge/client/cli/</code>。一个文件用于进行<strong>包含消息的事务</strong>，这些消息最终将更新我们的状态。另一个是进行<strong>查询</strong>，这将使我们能够从状态中读取信息</p><h3 id="tx-go"><a href="#tx-go" class="headerlink" title="tx.go"></a><strong>tx.go</strong></h3><p>该tx.go文件包含GetTxCmdCosmos SDK中的标准方法。稍后在module.go文件中引用该文件，该文件准确描述了模块具有的属性。这使得在实际应用程序级别更容易合并出于不同原因的不同模块。毕竟，我们现在将重点放在模块上，但是稍后我们将创建一个利用该模块以及Cosmos SDK中已经可用的其他模块的应用程序。</p><p>在内部，GetTxCmd我们创建一个新的模块特定命令并调用它scavenge。在此命令中，我们为定义的每种消息类型添加一个子命令：</p><p>GetCmdCreateScavenge<br>GetCmdCommitSolution<br>GetCmdRevealSolution<br>每个函数都从Cobra CLI工具中获取参数以创建一个新的msg，对其进行签名并将其提交给要处理的应用程序。这些函数应该放在<code>tx.go</code>和<code>tx&lt;Type&gt;.go</code>文件中</p><h3 id="query-go"><a href="#query-go" class="headerlink" title="query.go"></a>query.go</h3><p>该query.go文件包含类似的Cobra命令，这些命令保留了一个新的名称空间来引用我们的scavenge模块。但是，<code>query.go</code>和<code>query&lt;Type&gt;.go</code>文件不是创建和提交消息，而是创建查询并以人类可读的形式返回结果。它处理的查询与我们querier.go先前在文件中定义的查询相同：</p><ul><li><p>GetCmdListCommit</p></li><li><p>GetCmdGetCommit</p></li><li><p>GetCmdListScavenge</p></li><li><p>GetCmdGetScavenge</p></li></ul><h3 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h3><p>按照文档修改</p><h2 id="11-运行游戏"><a href="#11-运行游戏" class="headerlink" title="11.运行游戏"></a>11.运行游戏</h2><p><code>scavengecli tx scavenge create-scavenge &quot;What&#39;s brown and sticky?&quot; &quot;A stick&quot; 69token --from user1</code></p><p>问题:What’s brown and sticky</p><p>答案:A stick</p><p>并且设置69的奖励金</p><p>成功上链返回:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/Ggcayy.png" alt="Ggcayy"></p><p>查询你的交易</p><p><code>scavengecli q tx &lt;txhash&gt;</code> (txhash是你的hash,注意不要带&lt;&gt;)</p><p>返回结果会显示高度</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/34mTUt.png" alt="34mTUt"></p><p>另一个用户回答:</p><p><code>scavengecli tx scavenge commit-solution &quot;A stick&quot; --from user2 -y</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/s2KMUL.png" alt="s2KMUL"></p><p>查询:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/boIm78.png" alt="boIm78"></p><p>solutionScavengerHash是solution和自己账户的组合</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/dycrHP.png" alt="dycrHP"></p><p>游戏的思路:</p><p>scavenge可以看做问题,而solution就是答案, 问题的提出者给出问题与答案, 对应的取Hash,如果其他人给出的答案与问题相hash的结果与正确答案一致,那么就说明回答正确.</p><p>user2回答正确后,查询其余额变化</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/BoEqk5.png" alt="BoEqk5"></p><p>增加了69</p><p>如果您想看一下已完成的scavenge工作，可以先查询<strong>所有</strong>scavenge工作</p><p><code>scavengecli q scavenge list-scavenge</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/M6mvbq.png" alt="M6mvbq"></p><p>单独查询某个scavenge:</p><p><code>scavengecli q scavenge get-scavenge 2f9457a6e8fb202f9e10389a143a383106268c460743dd59d723c0f82d9ba906</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/BVKXln.png" alt="BVKXln"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;scavenger-hunt-game&quot;&gt;&lt;a href=&quot;#scavenger-hunt-game&quot; class=&quot;headerlink&quot; title=&quot;scavenger hunt game&quot;&gt;&lt;/a&gt;&lt;strong&gt;scavenger hunt&lt;/strong&gt; game&lt;/h1&gt;&lt;p&gt;cosmos官方给出的拾荒者狩猎游戏运行&lt;strong&gt;部署细节/重点记录,以及文档翻译&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;官方地址:&lt;a href=&quot;https://tutorials.cosmos.network/scavenge/tutorial/02-the-game.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Game | Cosmos SDK Tutorials&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文档翻译部分来源于:&lt;a href=&quot;https://blog.csdn.net/lk2684753/article/details/113849468&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/lk2684753/article/details/113849468&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="cosmos" scheme="https://xwjahahahaha.github.io/categories/technical/cosmos/"/>
    
    
    <category term="cosmos" scheme="https://xwjahahahaha.github.io/tags/cosmos/"/>
    
  </entry>
  
  <entry>
    <title>nodejs踩坑记录</title>
    <link href="https://xwjahahahaha.github.io/2021/03/01/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%89%8D%E7%AB%AF/Nodejs/nodejs%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://xwjahahahaha.github.io/2021/03/01/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%89%8D%E7%AB%AF/Nodejs/nodejs%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</id>
    <published>2021-03-01T04:41:22.000Z</published>
    <updated>2021-03-01T04:45:26.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="npm运行出错Missing-required-argument-1"><a href="#npm运行出错Missing-required-argument-1" class="headerlink" title="npm运行出错Missing required argument #1"></a>npm运行出错Missing required argument #1</h1><p>原因:目前的nodejs过时了,与npm不匹配</p><p>更新nodejs到最新版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1) sudo npm install -g n</span><br><span class="line">2) sudo n latest</span><br><span class="line">3) sudo npm install -g npm</span><br><span class="line">4) hash -d npm</span><br><span class="line">5) npm i</span><br></pre></td></tr></table></figure><a id="more"></a><p>原文:<a href="https://www.cyberhour.com/community/threads/how-to-fix-npm-err-typeerror-error-missing-required-argument-1.262/" target="_blank" rel="noopener">How to fix npm ERR! typeerror Error: Missing required argument #1 | Web Hosting Forum (cyberhour.com)</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;npm运行出错Missing-required-argument-1&quot;&gt;&lt;a href=&quot;#npm运行出错Missing-required-argument-1&quot; class=&quot;headerlink&quot; title=&quot;npm运行出错Missing required argument #1&quot;&gt;&lt;/a&gt;npm运行出错Missing required argument #1&lt;/h1&gt;&lt;p&gt;原因:目前的nodejs过时了,与npm不匹配&lt;/p&gt;
&lt;p&gt;更新nodejs到最新版本&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1) sudo npm install -g n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2) sudo n latest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3) sudo npm install -g npm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4) hash -d npm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5) npm i&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="nodejs" scheme="https://xwjahahahaha.github.io/categories/technical/nodejs/"/>
    
    
    <category term="nodejs" scheme="https://xwjahahahaha.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>日记_0132</title>
    <link href="https://xwjahahahaha.github.io/2021/03/01/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0132/"/>
    <id>https://xwjahahahaha.github.io/2021/03/01/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0132/</id>
    <published>2021-03-01T02:18:13.000Z</published>
    <updated>2021-03-02T00:23:46.266Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>英语</th><th>开发</th><th>项目</th><th><font color='red'>科研（No.1）</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>后端：go语言深化，框架gin等</strong>，<strong>go书看完</strong></td><td>区块链公链项目</td><td>论文一周两篇细读,每个月尝试写一篇</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td>英文视频(生活大爆炸开始)</td><td>区块链框架Cosmos</td><td>金窝窝项目需求准备cosmos</td><td>分布式课程论文</td><td>看比赛资讯，准备明年的<strong>区块链比赛</strong></td></tr><tr><td>③</td><td></td><td>Linux学完</td><td>本科毕业设计</td><td></td><td>为下学期的<strong>暑期实习</strong>做准备</td></tr><tr><td>④</td><td></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td></td><td></td></tr><tr><td>⑤</td><td></td><td>有时间的话：Java</td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td>代客泊车项目申报书</td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input disabled="" type="checkbox"> <p><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7467408" target="_blank" rel="noopener">Blockchains and Smart Contracts for the Internet of Things</a></p></li><li><input disabled="" type="checkbox"> <p>Where Is Current Research on Blockchain Technology?-A Systematic Review</p></li><li><input disabled="" type="checkbox"> <p>Blockstack: A Global Naming and Storage System Secured by Blockchains</p></li><li><input disabled="" type="checkbox"> <p>Plasma </p></li><li><input disabled="" type="checkbox"> <p><a href="https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md" target="_blank" rel="noopener">EOS.IO Technical White Paper v2</a></p></li><li><input disabled="" type="checkbox"> <p>Ocean Protocol: Tools for the Web3 Data Economy</p></li><li><input disabled="" type="checkbox"> <p>Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts</p></li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input disabled="" type="checkbox"> Decentralizing Privacy: Using Blockchain to Protect Personal Data</li><li><input disabled="" type="checkbox"> 《 Tendermint：关于拜占庭容错共识算法的最新进展》</li><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input disabled="" type="checkbox"> The Ripple Protocol Consensus Algorithm</li><li><input disabled="" type="checkbox"> <a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="noopener">以太坊白皮书</a></li><li><input disabled="" type="checkbox"> Hyperledger Fabric: A Distributed Operating System for Permissioned Blockchains</li><li><input disabled="" type="checkbox"> Secure Data Storage and Recovery in IndustrialBlockchain Network Environments</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li></ul><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> cosmos官方demo</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2><ul><li><p>近期感情维护较少,导致难堪,需要认真维护</p></li><li><p>按计划节奏来,不要忘记初心</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研（No.1）&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;后端：go语言深化，框架gin等&lt;/strong&gt;，&lt;strong&gt;go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;区块链公链项目&lt;/td&gt;
&lt;td&gt;论文一周两篇细读,每个月尝试写一篇&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;英文视频(生活大爆炸开始)&lt;/td&gt;
&lt;td&gt;区块链框架Cosmos&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;分布式课程论文&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备明年的&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;为下学期的&lt;strong&gt;暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;有时间的话：Java&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;代客泊车项目申报书&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>cosmos</title>
    <link href="https://xwjahahahaha.github.io/2021/02/28/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Cosmos/cosmos-2-%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/"/>
    <id>https://xwjahahahaha.github.io/2021/02/28/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Cosmos/cosmos-2-%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</id>
    <published>2021-02-28T06:39:07.000Z</published>
    <updated>2021-03-04T07:37:59.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二、开发基础"><a href="#二、开发基础" class="headerlink" title="二、开发基础"></a>二、开发基础</h1><h2 id="2-1-Cosmos-SDK"><a href="#2-1-Cosmos-SDK" class="headerlink" title="2.1. Cosmos SDK"></a>2.1. Cosmos SDK</h2><p>Cosmos  SDK是方便区块链应用开发的基础框架,方便程序员实现基于Tendermint的安全状态机.它将实现多重数据的持久化存储以及交易处理的路由功能.</p><h3 id="2-1-1-application-specific-blockchains"><a href="#2-1-1-application-specific-blockchains" class="headerlink" title="2.1.1 application-specific blockchains"></a>2.1.1 application-specific blockchains</h3><p>就是尽量让一个区块链应用使用单独的一条链,不会与其他的应用共享资源,拥有对该条链的完全主权.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">                ^  +-------------------------------+  ^</span><br><span class="line">                |  |                               |  |   Built <span class="keyword">with</span> Cosmos SDK</span><br><span class="line">                |  |  State-machine = Application  |  |</span><br><span class="line">                |  |                               |  v</span><br><span class="line">                |  +-------------------------------+</span><br><span class="line">                |  |                               |  ^</span><br><span class="line">Blockchain node |  |           Consensus           |  |</span><br><span class="line">                |  |                               |  |</span><br><span class="line">                |  +-------------------------------+  |   Tendermint Core</span><br><span class="line">                |  |                               |  |</span><br><span class="line">                |  |           Networking          |  |</span><br><span class="line">                |  |                               |  |</span><br><span class="line">                v  +-------------------------------+  v</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-1-2-BlockChain-Architecture"><a href="#2-1-2-BlockChain-Architecture" class="headerlink" title="2.1.2 BlockChain Architecture"></a>2.1.2 BlockChain Architecture</h3><p>区块链是重复储存的确定性状态机</p><p>Given a state S and a block of transactions B, the state machine will return a new state S’.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+--------+                              +--------+</span><br><span class="line">|        |                              |        |</span><br><span class="line">|   S    +----------------------------&gt; |   S<span class="string">'   |</span></span><br><span class="line"><span class="string">|        |   For each T in B: apply(T)  |        |</span></span><br><span class="line"><span class="string">+--------+                              +--------+</span></span><br></pre></td></tr></table></figure><h3 id="2-1-3-Main-Components-of-the-Cosmos-SDK"><a href="#2-1-3-Main-Components-of-the-Cosmos-SDK" class="headerlink" title="2.1.3 Main Components of the Cosmos SDK"></a>2.1.3 Main Components of the Cosmos SDK</h3><p>SDK是使用Golang执行ABCI的基本样板程序框架</p><p>Cosmos SDK 交易处理的一般简化过程:</p><ol><li>解码来自Tendermint共识引擎的交易</li><li>提取交易信息并且对交易做初步的合法检查</li><li>将各个消息发送给适合的模块进行执行</li><li>确认状态改变</li></ol><h4 id="baseapp"><a href="#baseapp" class="headerlink" title="baseapp"></a>baseapp</h4><p>作用: 执行ABCI连接基础共识引擎的样板文件</p><p>cosmos SDK继承baseapp实现了app.go</p><p>baseapp的目标是在<strong>数据存储store和可扩展状态机之间提供安全的接口</strong>，同时尽可能少地定义状态机。</p><p>baseapp的工作</p><ul><li><p>Decode transactions received from the Tendermint consensus engine.</p><p><strong>解码接受的交易</strong></p></li><li><p>Extract messages from transactions and do basic sanity checks.</p><p><strong>在交易中提取消息,并且做一些简单的验证</strong></p></li><li><p>Route the message to the appropriate module so that it can be processed. Note that <code>baseapp</code> has no knowledge of the specific modules you want to use. It is your job to declare such modules in <code>app.go</code>, as you will see later in this tutorial. <code>baseapp</code> only implements the core routing logic that can be applied to any module.</p><p><strong>路由消息到适合的模块, ==如果有自定义的特殊模块需要在app.go中申明,否则baseapp是无法自动识别的==,baseap只是实现了核心的路由逻辑</strong></p></li><li><p>Commit if the ABCI message is <a href="https://docs.tendermint.com/master/spec/abci/abci.html#delivertx" target="_blank" rel="noopener"><code>DeliverTx</code> (opens new window)</a>(<a href="https://docs.tendermint.com/master/spec/abci/abci.html#checktx" target="_blank" rel="noopener"><code>CheckTx</code> (opens new window)</a>changes are not persistent).</p></li></ul><ul><li><p>Help set up <a href="https://docs.tendermint.com/master/spec/abci/abci.html#beginblock" target="_blank" rel="noopener"><code>BeginBlock</code> (opens new window)</a>and <a href="https://docs.tendermint.com/master/spec/abci/abci.html#endblock" target="_blank" rel="noopener"><code>Endblock</code> (opens new window)</a>, two messages that enable you to define logic executed at the beginning and end of each block. In practice, each module implements its own <code>BeginBlock</code> and <code>EndBlock</code> sub-logic, and the role of the app is to aggregate everything together (<em>Note: you won’t be using these messages in your application</em>).</p><p><strong>根据两个消息的定义从区块链的开始区块执行到末尾区块,每一个模块都有自己的执行子逻辑,app的作用就是将其汇总</strong>==(这些消息在你的应用程序中不会使用)==</p></li><li><p>Help initialize your state.</p><p><strong>帮助初始化状态</strong></p></li><li><p>Help set up queries.</p><p><strong>帮助建立查询</strong>·</p></li></ul><h4 id="Multistore"><a href="#Multistore" class="headerlink" title="Multistore"></a>Multistore</h4><p>多样存储Multistore允许开发人员声明任意数量的kvstore数据库,但是kvstore的value只能是[]byte,在存储时一些特定的结构可能还需要先序列化</p><p><strong>Multistore抽象的理解就是分离各个状态,每一种状态都由自己的模块管理</strong></p><h4 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h4><p>cosmos的强大依赖于模块化,SDK应用就是基于一系列集合的互操作模块,每一个模块都定义了状态的子集和包含自己交易/消息的处理逻辑.而SDK的责任就在于作为转发各种消息的路由</p><p>每个模块可以看作一个小型的状态机,开发人员需要定义模块处理的状态的子集以及更改状态的特殊消息类型,<strong>每个模块在多存储Multistore中声明自己的KVStore，以持久化它定义的状态子集。</strong></p><p>开发者开发时会用到其他人开发的模块即第三方模块,但是安全性是不一定能够得到保证的,所以在 <a href="https://docs.cosmos.network/v0.41/core/ocap.html" target="_blank" rel="noopener">object-capabilities</a>上做了规则,这意味着，与让每个模块为其他模块保留访问控制列表不同，<strong>每个模块实现了称为keepers的特殊对象</strong>，<strong>可以将其传递给其他模块以授予预定义的功能集</strong>。</p><p>Here is a simplified view of how a transaction is processed by the application of each full-node when it is received in a valid block:</p><figure class="highlight js"><figcaption><span>+</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">                                      |</span><br><span class="line">                                      |  Transaction relayed <span class="keyword">from</span> the full-node<span class="string">'s Tendermint engine</span></span><br><span class="line"><span class="string">                                      |  to the node'</span>s application via DeliverTx</span><br><span class="line">                                      |</span><br><span class="line">                                      |</span><br><span class="line">                                      |</span><br><span class="line">                +---------------------v--------------------------+</span><br><span class="line">                |                 APPLICATION                    |</span><br><span class="line">                |                                                |</span><br><span class="line">                |     Using baseapp<span class="string">'s methods: Decode the Tx,    |</span></span><br><span class="line"><span class="string">                |     extract and route the message(s)           |</span></span><br><span class="line"><span class="string">                |                                                |</span></span><br><span class="line"><span class="string">                +---------------------+--------------------------+</span></span><br><span class="line"><span class="string">                                      |</span></span><br><span class="line"><span class="string">                                      |</span></span><br><span class="line"><span class="string">                                      |</span></span><br><span class="line"><span class="string">                                      +---------------------------+</span></span><br><span class="line"><span class="string">                                                                  |</span></span><br><span class="line"><span class="string">                                                                  |</span></span><br><span class="line"><span class="string">                                                                  |</span></span><br><span class="line"><span class="string">                                                                  |  Message routed to the correct</span></span><br><span class="line"><span class="string">                                                                  |  module to be processed</span></span><br><span class="line"><span class="string">                                                                  |</span></span><br><span class="line"><span class="string">                                                                  |</span></span><br><span class="line"><span class="string">+----------------+  +---------------+  +----------------+  +------v----------+</span></span><br><span class="line"><span class="string">|                |  |               |  |                |  |                 |</span></span><br><span class="line"><span class="string">|  AUTH MODULE   |  |  BANK MODULE  |  | STAKING MODULE |  |   GOV MODULE    |</span></span><br><span class="line"><span class="string">|                |  |               |  |                |  |                 |</span></span><br><span class="line"><span class="string">|                |  |               |  |                |  | Handles message,|</span></span><br><span class="line"><span class="string">|                |  |               |  |                |  | Updates state   |</span></span><br><span class="line"><span class="string">|                |  |               |  |                |  |                 |</span></span><br><span class="line"><span class="string">+----------------+  +---------------+  +----------------+  +------+----------+</span></span><br><span class="line"><span class="string">                                                                  |</span></span><br><span class="line"><span class="string">                                                                  |</span></span><br><span class="line"><span class="string">                                                                  |</span></span><br><span class="line"><span class="string">                                                                  |</span></span><br><span class="line"><span class="string">                                       +--------------------------+</span></span><br><span class="line"><span class="string">                                       |</span></span><br><span class="line"><span class="string">                                       | Return result to Tendermint</span></span><br><span class="line"><span class="string">                                       | (0=Ok, 1=Err)</span></span><br><span class="line"><span class="string">                                       v</span></span><br></pre></td></tr></table></figure><p>SDK modules are defined in the <code>x/</code> folder of the SDK. Some core modules include:</p><ul><li><code>x/auth</code>: Used to manage accounts and signatures.</li><li><code>x/bank</code>: Used to enable tokens and token transfers.</li><li><code>x/staking</code> + <code>x/slashing</code>: Used to build Proof-Of-Stake blockchains.</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;二、开发基础&quot;&gt;&lt;a href=&quot;#二、开发基础&quot; class=&quot;headerlink&quot; title=&quot;二、开发基础&quot;&gt;&lt;/a&gt;二、开发基础&lt;/h1&gt;&lt;h2 id=&quot;2-1-Cosmos-SDK&quot;&gt;&lt;a href=&quot;#2-1-Cosmos-SDK&quot; class=&quot;headerlink&quot; title=&quot;2.1. Cosmos SDK&quot;&gt;&lt;/a&gt;2.1. Cosmos SDK&lt;/h2&gt;&lt;p&gt;Cosmos  SDK是方便区块链应用开发的基础框架,方便程序员实现基于Tendermint的安全状态机.它将实现多重数据的持久化存储以及交易处理的路由功能.&lt;/p&gt;
&lt;h3 id=&quot;2-1-1-application-specific-blockchains&quot;&gt;&lt;a href=&quot;#2-1-1-application-specific-blockchains&quot; class=&quot;headerlink&quot; title=&quot;2.1.1 application-specific blockchains&quot;&gt;&lt;/a&gt;2.1.1 application-specific blockchains&lt;/h3&gt;&lt;p&gt;就是尽量让一个区块链应用使用单独的一条链,不会与其他的应用共享资源,拥有对该条链的完全主权.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;                ^  +-------------------------------+  ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                |  |                               |  |   Built &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; Cosmos SDK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                |  |  State-machine = Application  |  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                |  |                               |  v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                |  +-------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                |  |                               |  ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Blockchain node |  |           Consensus           |  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                |  |                               |  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                |  +-------------------------------+  |   Tendermint Core&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                |  |                               |  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                |  |           Networking          |  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                |  |                               |  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                v  +-------------------------------+  v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="block_chain" scheme="https://xwjahahahaha.github.io/categories/block-chain/"/>
    
    
    <category term="cosmos" scheme="https://xwjahahahaha.github.io/tags/cosmos/"/>
    
  </entry>
  
  <entry>
    <title>日记_0131</title>
    <link href="https://xwjahahahaha.github.io/2021/02/22/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-02/%E6%97%A5%E8%AE%B0-0131/"/>
    <id>https://xwjahahahaha.github.io/2021/02/22/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-02/%E6%97%A5%E8%AE%B0-0131/</id>
    <published>2021-02-22T09:10:30.000Z</published>
    <updated>2021-02-22T09:02:29.429Z</updated>
    
    <content type="html"><![CDATA[<h2 id="寒假待办任务："><a href="#寒假待办任务：" class="headerlink" title="寒假待办任务："></a>寒假待办任务：</h2><table><thead><tr><th>任务</th><th>每日任务（必须每天完成）</th><th>开发</th><th>项目</th><th><font color='red'>科研（No.1）</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>后端：go语言深化，框架gin等</strong>，<strong>go书看完</strong></td><td>博客小项目</td><td>区块链知识面拓展</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td><strong>leetcode每日一题</strong></td><td>前端：Vue</td><td>金窝窝项目需求准备cosmos</td><td><font color='red'><strong>论文粗读10篇，细读5篇，做好笔记</strong></font></td><td>看比赛资讯，准备明年的<strong>区块链比赛</strong></td></tr><tr><td>③</td><td></td><td>Linux学完</td><td>本科毕业设计</td><td><font color='red'><strong>核心: 产生自己的构思</strong></font></td><td>为下学期的<strong>暑期实习</strong>做准备</td></tr><tr><td>④</td><td></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td>分布式课程</td><td></td></tr><tr><td>⑤</td><td></td><td>有时间的话：Java</td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td><font color='red'><strong>代客泊车项目申报书</strong></font></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="每日时段划分"><a href="#每日时段划分" class="headerlink" title="每日时段划分"></a>每日时段划分</h2><table><thead><tr><th>时段</th><th>任务</th><th>S/F</th></tr></thead><tbody><tr><td>9:00~10:00</td><td>英语单词+语法课</td><td></td></tr><tr><td>10:00~1:00</td><td>算法</td><td></td></tr><tr><td>1:30~5:00</td><td>看论文</td><td></td></tr><tr><td>6:00~9:00</td><td>开发</td><td></td></tr><tr><td>9:00+</td><td>运动锻炼</td><td></td></tr></tbody></table><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input disabled="" type="checkbox"> <p><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7467408" target="_blank" rel="noopener">Blockchains and Smart Contracts for the Internet of Things</a></p></li><li><input disabled="" type="checkbox"> <p>Where Is Current Research on Blockchain Technology?-A Systematic Review</p></li><li><input disabled="" type="checkbox"> <p>Blockstack: A Global Naming and Storage System Secured by Blockchains</p></li><li><input disabled="" type="checkbox"> <p>Plasma </p></li><li><input disabled="" type="checkbox"> <p><a href="https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md" target="_blank" rel="noopener">EOS.IO Technical White Paper v2</a></p></li><li><input disabled="" type="checkbox"> <p>Ocean Protocol: Tools for the Web3 Data Economy</p></li><li><input disabled="" type="checkbox"> <p>Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts</p></li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input disabled="" type="checkbox"> Decentralizing Privacy: Using Blockchain to Protect Personal Data</li><li><input disabled="" type="checkbox"> 《 Tendermint：关于拜占庭容错共识算法的最新进展》</li><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input disabled="" type="checkbox"> The Ripple Protocol Consensus Algorithm</li><li><input disabled="" type="checkbox"> <a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="noopener">以太坊白皮书</a></li><li><input disabled="" type="checkbox"> Hyperledger Fabric: A Distributed Operating System for Permissioned Blockchains</li><li><input disabled="" type="checkbox"> Secure Data Storage and Recovery in IndustrialBlockchain Network Environments</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li></ul><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> V2X项目申报书</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2><ul><li>写申报书太累了，再也不想写了</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;寒假待办任务：&quot;&gt;&lt;a href=&quot;#寒假待办任务：&quot; class=&quot;headerlink&quot; title=&quot;寒假待办任务：&quot;&gt;&lt;/a&gt;寒假待办任务：&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每日任务（必须每天完成）&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研（No.1）&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;后端：go语言深化，框架gin等&lt;/strong&gt;，&lt;strong&gt;go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;博客小项目&lt;/td&gt;
&lt;td&gt;区块链知识面拓展&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;leetcode每日一题&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;前端：Vue&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;&lt;strong&gt;论文粗读10篇，细读5篇，做好笔记&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备明年的&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;&lt;strong&gt;核心: 产生自己的构思&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;为下学期的&lt;strong&gt;暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;分布式课程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;有时间的话：Java&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;&lt;strong&gt;代客泊车项目申报书&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>区块链分片技术的学习</title>
    <link href="https://xwjahahahaha.github.io/2021/02/19/%E7%9F%A5%E8%AF%86%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%88%86%E7%89%87%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>https://xwjahahahaha.github.io/2021/02/19/%E7%9F%A5%E8%AF%86%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%88%86%E7%89%87%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-02-19T09:11:20.000Z</published>
    <updated>2021-02-22T09:02:37.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="区块链分片技术"><a href="#区块链分片技术" class="headerlink" title="区块链分片技术"></a>区块链分片技术</h1><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;区块链分片技术&quot;&gt;&lt;a href=&quot;#区块链分片技术&quot; class=&quot;headerlink&quot; title=&quot;区块链分片技术&quot;&gt;&lt;/a&gt;区块链分片技术&lt;/h1&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    
    <category term="block_chain" scheme="https://xwjahahahaha.github.io/tags/block-chain/"/>
    
  </entry>
  
  <entry>
    <title>日记_0130</title>
    <link href="https://xwjahahahaha.github.io/2021/02/18/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-02/%E6%97%A5%E8%AE%B0-0130/"/>
    <id>https://xwjahahahaha.github.io/2021/02/18/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-02/%E6%97%A5%E8%AE%B0-0130/</id>
    <published>2021-02-18T13:42:20.000Z</published>
    <updated>2021-02-18T15:36:39.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="寒假待办任务："><a href="#寒假待办任务：" class="headerlink" title="寒假待办任务："></a>寒假待办任务：</h2><table><thead><tr><th>任务</th><th>每日任务（必须每天完成）</th><th>开发</th><th>项目</th><th><font color='red'>科研（No.1）</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>后端：go语言深化，框架gin等</strong>，<strong>go书看完</strong></td><td>博客小项目</td><td>区块链知识面拓展</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td><strong>leetcode每日一题</strong></td><td>前端：Vue</td><td>金窝窝项目需求准备cosmos</td><td><font color='red'><strong>论文粗读10篇，细读5篇，做好笔记</strong></font></td><td>看比赛资讯，准备明年的<strong>区块链比赛</strong></td></tr><tr><td>③</td><td></td><td>Linux学完</td><td>本科毕业设计</td><td><font color='red'><strong>核心: 产生自己的构思</strong></font></td><td>为下学期的<strong>暑期实习</strong>做准备</td></tr><tr><td>④</td><td></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td>分布式课程</td><td></td></tr><tr><td>⑤</td><td></td><td>有时间的话：Java</td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td><font color='red'><strong>代客泊车项目申报书</strong></font></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="每日时段划分"><a href="#每日时段划分" class="headerlink" title="每日时段划分"></a>每日时段划分</h2><table><thead><tr><th>时段</th><th>任务</th><th>S/F</th></tr></thead><tbody><tr><td>9:00~10:00</td><td>英语单词+语法课</td><td></td></tr><tr><td>10:00~1:00</td><td>算法</td><td></td></tr><tr><td>1:30~5:00</td><td>看论文</td><td></td></tr><tr><td>6:00~9:00</td><td>开发</td><td></td></tr><tr><td>9:00+</td><td>运动锻炼</td><td></td></tr></tbody></table><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input disabled="" type="checkbox"> <p><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7467408" target="_blank" rel="noopener">Blockchains and Smart Contracts for the Internet of Things</a></p></li><li><input disabled="" type="checkbox"> <p>Where Is Current Research on Blockchain Technology?-A Systematic Review</p></li><li><input disabled="" type="checkbox"> <p>Blockstack: A Global Naming and Storage System Secured by Blockchains</p></li><li><input disabled="" type="checkbox"> <p>Plasma </p></li><li><input disabled="" type="checkbox"> <p><a href="https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md" target="_blank" rel="noopener">EOS.IO Technical White Paper v2</a></p></li><li><input disabled="" type="checkbox"> <p>Ocean Protocol: Tools for the Web3 Data Economy</p></li><li><input disabled="" type="checkbox"> <p>Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts</p></li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input disabled="" type="checkbox"> Decentralizing Privacy: Using Blockchain to Protect Personal Data</li><li><input disabled="" type="checkbox"> 《 Tendermint：关于拜占庭容错共识算法的最新进展》</li><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input disabled="" type="checkbox"> The Ripple Protocol Consensus Algorithm</li><li><input disabled="" type="checkbox"> <a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="noopener">以太坊白皮书</a></li><li><input disabled="" type="checkbox"> Hyperledger Fabric: A Distributed Operating System for Permissioned Blockchains</li><li><input disabled="" type="checkbox"> Secure Data Storage and Recovery in IndustrialBlockchain Network Environments</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li></ul><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> <p>英语50词</p></li><li><input disabled="" type="checkbox"> <p>leetcode一题</p></li><li><input checked="" disabled="" type="checkbox"> <p>小程序工作基本结束</p></li><li><input checked="" disabled="" type="checkbox"> <p>go语言和区块链系统项目</p></li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2><ul><li>你还弱得很，别以为飘飘然</li><li>今天没看论文，早点休息明天早点起来，明天的重点是论文，要开始写了</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;寒假待办任务：&quot;&gt;&lt;a href=&quot;#寒假待办任务：&quot; class=&quot;headerlink&quot; title=&quot;寒假待办任务：&quot;&gt;&lt;/a&gt;寒假待办任务：&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每日任务（必须每天完成）&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研（No.1）&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;后端：go语言深化，框架gin等&lt;/strong&gt;，&lt;strong&gt;go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;博客小项目&lt;/td&gt;
&lt;td&gt;区块链知识面拓展&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;leetcode每日一题&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;前端：Vue&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;&lt;strong&gt;论文粗读10篇，细读5篇，做好笔记&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备明年的&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;&lt;strong&gt;核心: 产生自己的构思&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;为下学期的&lt;strong&gt;暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;分布式课程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;有时间的话：Java&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;&lt;strong&gt;代客泊车项目申报书&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>git版本控制</title>
    <link href="https://xwjahahahaha.github.io/2021/02/16/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    <id>https://xwjahahahaha.github.io/2021/02/16/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</id>
    <published>2021-02-16T12:30:18.000Z</published>
    <updated>2021-03-05T16:49:32.118Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><hr><blockquote><ul><li><p>在单人开发过程中，需要进行版本管理，以利于开发进度的控制。</p></li><li><p>在多人开发过程中，不仅需要<strong>版本管理</strong>，还需要进行<strong>多人协同控制</strong>。</p></li></ul></blockquote><a id="more"></a><h3 id="二、介绍"><a href="#二、介绍" class="headerlink" title="二、介绍"></a>二、介绍</h3><hr><blockquote><ul><li>Git是一个<strong>开源的分布式版本控制系统</strong>，用于敏捷高效地处理任何或小或大的项目。</li><li>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</li><li>官网：<a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></li></ul></blockquote><h3 id="三、Git安装"><a href="#三、Git安装" class="headerlink" title="三、Git安装"></a>三、Git安装</h3><hr><h4 id="3-1-下载Git"><a href="#3-1-下载Git" class="headerlink" title="3.1 下载Git"></a>3.1 下载Git</h4><blockquote><p>下载Git <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p></blockquote><h4 id="3-2-安装"><a href="#3-2-安装" class="headerlink" title="3.2 安装"></a>3.2 安装</h4><blockquote><p>安装，除了安装位置外，其他一直下一步即可</p></blockquote><h4 id="3-3-基本配置（设置全局变量）"><a href="#3-3-基本配置（设置全局变量）" class="headerlink" title="3.3 基本配置（设置全局变量）"></a>3.3 基本配置（设置全局变量）</h4><blockquote><ul><li><p>安装后，打开git的cmd窗口 ，自报家门</p></li><li><p>如下信息会在提交代码时要使用，记录在你的每次提交中。以后才知道哪次提交是谁做的。</p></li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "Your Name"  #用户名</span><br><span class="line">git config --global user.email "email@example.com"  #邮箱</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看信息</span></span><br><span class="line">git config -l</span><br></pre></td></tr></table></figure><h4 id="3-4-测试"><a href="#3-4-测试" class="headerlink" title="3.4 测试"></a>3.4 测试</h4><blockquote><p>测试：cmd中执行 ,查看git版本</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git version</span><br></pre></td></tr></table></figure><h3 id="四、架构"><a href="#四、架构" class="headerlink" title="四、架构"></a>四、架构</h3><hr><blockquote><ul><li><p>版本库：工作区中有一个<strong>隐藏目录</strong> <code>.git</code>，<strong>这个目录不属于工作区，而是git的 <code>版本库</code>，是git管理的所有内容</strong> </p></li><li><p>暂存区：版本库中包含一个临时区域，保存下一步要提交的文件</p></li><li><p>分支：版本库中包含若干分支，提交的文件存储在分支中</p></li></ul></blockquote><table><thead><tr><th align="center">架构图</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/sLzrdk.png" alt="sLzrdk"></td></tr></tbody></table><h3 id="五、仓库"><a href="#五、仓库" class="headerlink" title="五、仓库"></a>五、仓库</h3><hr><blockquote><p>对应的就是一个<a href="">目录</a>，这个目录中的所有文件被git管理起来。</p><p>以后会将一个<a href="">项目的根目录</a>，作为仓库。</p><p>仓库中的每个文件的改动 都由git跟踪。</p></blockquote><h4 id="5-1-新建仓库"><a href="#5-1-新建仓库" class="headerlink" title="5.1 新建仓库"></a>5.1 新建仓库</h4><blockquote><p>选择一个目录，执行指令：<a href="">git init</a></p></blockquote><table><thead><tr><th align="center">新建仓库</th><th align="center">仓库目录</th></tr></thead><tbody><tr><td align="center">![image-20210216205341427](/Users/xwj/Library/Application Support/typora-user-images/image-20210216205341427.png)</td><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/PU8ELh.png" alt="PU8ELh" /></td></tr></tbody></table><h4 id="5-2-工作区"><a href="#5-2-工作区" class="headerlink" title="5.2 工作区"></a>5.2 工作区</h4><blockquote><p>执行<a href="">git init</a>的目录即为工作区，如上例，<a href="">D:\repo1</a>目录即为工作区【不包含<a href="">.git</a>目录】</p></blockquote><blockquote><p>所有文件，都首先在工作区新建，然后可以存入仓库(版本库)，进行版本控制。</p></blockquote><h4 id="5-3-暂存区"><a href="#5-3-暂存区" class="headerlink" title="5.3 暂存区"></a>5.3 暂存区</h4><blockquote><p>暂存区也在 <a href="">.git</a> 目录内，工作区的文件进入仓库时，要先进入暂存区。</p></blockquote><h4 id="5-4-分支"><a href="#5-4-分支" class="headerlink" title="5.4 分支"></a>5.4 分支</h4><blockquote><p>版本控制，简单说，就是记录文件的诸多版本，分支就是这些版本的最终记录位置。</p></blockquote><h3 id="六、基本操作"><a href="#六、基本操作" class="headerlink" title="六、基本操作"></a>六、基本操作</h3><hr><h4 id="6-1-查看仓库状态"><a href="#6-1-查看仓库状态" class="headerlink" title="6.1 查看仓库状态"></a>6.1 查看仓库状态</h4><blockquote><p>执行 <a href="">git  status</a> 可以看到工作区中文件的状态</p></blockquote><table><thead><tr><th align="center">未记录过的文件，是未跟踪状态</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/xO3NjM.png" alt="xO3NjM"></td></tr></tbody></table><h4 id="6-2-暂存文件"><a href="#6-2-暂存文件" class="headerlink" title="6.2 暂存文件"></a>6.2 暂存文件</h4><blockquote><p>执行 <a href="">git add .</a> 将工作区中的文件全部<a href="">存入暂存区</a></p></blockquote><table><thead><tr><th align="center">将工作区中的文件存入暂存区</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/dQEOq0.png" alt="dQEOq0"></td></tr></tbody></table><h4 id="6-3-提交文件"><a href="#6-3-提交文件" class="headerlink" title="6.3 提交文件"></a>6.3 提交文件</h4><blockquote><p>执行 <a href="">git commit -m “这里写提交的描述信息”</a> 作用是==将暂存区的<strong>所有文件</strong>存入分支==，==形成一个新版本==</p></blockquote><table><thead><tr><th align="center">提交文件，形成一个版本</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/bgbtO1.png" alt="bgbtO1"></td></tr></tbody></table><h3 id="七、远程仓库"><a href="#七、远程仓库" class="headerlink" title="七、远程仓库"></a>七、远程仓库</h3><hr><blockquote><p>第5章中的仓库，其实是本地仓库。</p><p>当多人协同开发时，每人都在自己的本地仓库维护版本。</p><p>但很重要的一点是，多人之间需要共享代码、合并代码，此时就需要一个<a href="">远程仓库</a>。</p></blockquote><h4 id="7-1-远程仓库工作模式"><a href="#7-1-远程仓库工作模式" class="headerlink" title="7.1 远程仓库工作模式"></a>7.1 远程仓库工作模式</h4><table><thead><tr><th align="center">远程仓库工作模式</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/9otguV.png" alt="9otguV"></td></tr></tbody></table><h4 id="7-2-远程仓库选型"><a href="#7-2-远程仓库选型" class="headerlink" title="7.2 远程仓库选型"></a>7.2 远程仓库选型</h4><blockquote><ul><li><p>有很多远程仓库可以选择，比如 github(<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a>),码云(<a href="https://gitee.com/" target="_blank" rel="noopener">https://gitee.com/</a>)，<strong>注意github或者是码云都不是远程仓库而是git服务器，可以在其上构建远程仓库</strong>；</p><p> 此两种可以注册自己测试使用，但如果是商业项目，需要更多支持需要付费。</p></li><li><p>公司内部也可以有自己构建的远程仓库(<a href="http://qianfeng.qfjava.cn:8087/users/sign_in" target="_blank" rel="noopener">http://qianfeng.qfjava.cn:8087/users/sign_in</a>)。</p></li></ul></blockquote><h4 id="7-3-基本操作"><a href="#7-3-基本操作" class="headerlink" title="7.3 基本操作"></a>7.3 基本操作</h4><blockquote><p>每个开发人员，在面对远程仓库时，会面临的一些基本操作。</p></blockquote><h5 id="7-3-1-注册git服务器账号"><a href="#7-3-1-注册git服务器账号" class="headerlink" title="7.3.1 注册git服务器账号"></a>7.3.1 注册git服务器账号</h5><blockquote><p>在 <a href="https://gitee.com/" target="_blank" rel="noopener">码云</a> 注册账号，并登录。</p><p>进入公司后，很可能会使用公司自己搭建的git服务器，则账号向领导索要即可</p></blockquote><h5 id="7-3-2-新建远程仓库"><a href="#7-3-2-新建远程仓库" class="headerlink" title="7.3.2 新建远程仓库"></a>7.3.2 新建远程仓库</h5><p> <img src="http://xwjpics.gumptlu.work/qinniu_uPic/5kSA5g.png" alt="5kSA5g"></p><h5 id="7-3-3-本地关联远程仓库"><a href="#7-3-3-本地关联远程仓库" class="headerlink" title="7.3.3 本地关联远程仓库"></a>7.3.3 本地关联远程仓库</h5><blockquote><p>本文档中选用仓库的 https协议的地址，<strong>将此地址关联到本地git中</strong></p><p><code>git remote add origin [https地址\ssh地址]</code>添加远程地址</p><p><code>git remote -v</code>查看本地仓库目前关联的地址</p></blockquote><table><thead><tr><th align="center">如此后，本地即可用“origin” 代指远程仓库</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/wXpCOC.png" alt="wXpCOC"></td></tr></tbody></table><h5 id="推送文件到远程仓库"><a href="#推送文件到远程仓库" class="headerlink" title="推送文件到远程仓库"></a>推送文件到远程仓库</h5><blockquote><p>将本地仓库中已经commit的内容push到远程仓库，以共享自己的代码。</p></blockquote><table><thead><tr><th align="center">push</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/bRdmkS.png" alt="bRdmkS"></td></tr></tbody></table><table><thead><tr><th align="center">在github服务器上查看</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/8ZpEC4.png" alt="8ZpEC4"></td></tr></tbody></table><h5 id="7-3-5-克隆远程仓库"><a href="#7-3-5-克隆远程仓库" class="headerlink" title="7.3.5 克隆远程仓库"></a>7.3.5 克隆远程仓库</h5><blockquote><p>如果仓库已经由别人创建完毕，我们需要其中的内容，则可以通过 <a href="">git clone</a> 将其复制到本地。</p></blockquote><table><thead><tr><th align="center">新建目录“repo2”，然后在其中执行 git clone</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/NHnMO2.png" alt="NHnMO2"></td></tr></tbody></table><h5 id="7-3-6-代码共享"><a href="#7-3-6-代码共享" class="headerlink" title="7.3.6 代码共享"></a>7.3.6 代码共享</h5><blockquote><p>多人协同开发时，写好代码的<a href="">git push</a> 上传到远程仓库；需要代码的 <a href="">git pull</a> 拉取代码即可。 </p><p>==存==：有人将本地文件push到远程仓库：<code>git push origin master</code></p><p>==取==：重点：此时另一方如果想获得更新，则需要做一次拉取 <code>git pull origin master</code></p></blockquote><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/WkOGvK.png" alt="WkOGvK"></p><h5 id="7-3-7-命令汇总"><a href="#7-3-7-命令汇总" class="headerlink" title="7.3.7 命令汇总"></a>7.3.7 命令汇总</h5><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>git   remote   add  标识名(一般为origin)  远程地址</td><td>本地关联远程仓库</td></tr><tr><td>git   push  标识名  master</td><td>将本地仓库内容上传到远程仓库</td></tr><tr><td>git   pull  标识名   master</td><td>从远程仓库下载内容到本地仓库</td></tr><tr><td>git   clone  远程地址</td><td>将远程仓库复制到本地，并自动形成一个本地仓库</td></tr></tbody></table><p>==git clone 与 git pull 的区别在于：当本地为空的时候初始<strong>第一次</strong>使用时使用git clone，以后每次更新都采用git pull==</p><h5 id="7-3-8-origin"><a href="#7-3-8-origin" class="headerlink" title="7.3.8 origin"></a>7.3.8 origin</h5><p>Git里面的origin就是一个名字，它是在你clone一个托管在Github上代码库时，<strong>git为你默认创建的指向这个远程代码库的<u><em>标签</em></u>。</strong></p><p>你的代码库(repository)可以存放在你的电脑里，同时你也可以把代码库托管到Github的服务器上。<strong>在默认情况下，origin指向的就是你本地的代码库托管在Github上的版本。</strong></p><p><strong>origin指向的是repository，master只是这个repository中默认创建的第一个branch</strong>。(git push origin master )当你git push的时候因为origin和master都是默认创建的。</p><h3 id="八、分支"><a href="#八、分支" class="headerlink" title="八、分支"></a>八、分支</h3><hr><h4 id="8-1-分支简介"><a href="#8-1-分支简介" class="headerlink" title="8.1 分支简介"></a>8.1 分支简介</h4><blockquote><ul><li><p>分支，是一个个版本最终存储的位置。</p></li><li><p>分支，就是一条时间线，每次<a href="">git commit</a>形成一个个版本，一个个版本依次存储在分支的一个个提交点上。</p></li></ul></blockquote><table><thead><tr><th align="center">分支由多个提交点组成，分支上会有一个指针，默认总是指向最新的提交点</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/SlW3Kr.png" alt="SlW3Kr"></td></tr></tbody></table><p>==每次提交的新版本中陈旧的内容/未修改的内容在新版本中只保留其一个链接而不是在复制一份，这是一种优化方式==</p><h4 id="8-2-分支操作"><a href="#8-2-分支操作" class="headerlink" title="8.2 分支操作"></a>8.2 分支操作</h4><h5 id="8-2-1-查看分支"><a href="#8-2-1-查看分支" class="headerlink" title="8.2.1 查看分支"></a>8.2.1 查看分支</h5><blockquote><ul><li><p>查看当前仓库的分支 <a href="">git branch</a></p></li><li><p>仓库中默认只有 master 分支</p></li><li><p>执行<a href="">git commit</a>时，默认是在master分支上保存版本。</p></li></ul></blockquote><table><thead><tr><th align="center">默认只有master分支</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/4MqN0F.png" alt="4MqN0F"></td></tr></tbody></table><h5 id="8-2-2-创建分支"><a href="#8-2-2-创建分支" class="headerlink" title="8.2.2 创建分支"></a>8.2.2 创建分支</h5><blockquote><ul><li><p>在商业项目开发过程中，我们==不会轻易的在<a href="">master</a>分支上做操作。==</p></li><li><p>我们==会新建一个<a href="">开发用的分支</a>，在此分支上做版本的记录。==</p><p>==当代码确实没有问题时，才会将开发分支上成熟的代码版本添加到<a href="">master</a>分支上。==</p></li><li><p>保证开发过程中，可以及时记录版本，又保证<a href="">master</a>分支上每个提交点都是稳健版本。</p></li><li><p><code>git branch 新分支名</code></p></li><li><p>前面有*号的代表当前使用的分支，默认是主分支</p></li></ul></blockquote><table><thead><tr><th align="center">创建分支</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/QZazBX.png" alt="QZazBX"></td></tr></tbody></table><h5 id="8-2-3-切换分支"><a href="#8-2-3-切换分支" class="headerlink" title="8.2.3 切换分支"></a>8.2.3 切换分支</h5><blockquote><ul><li>默认情况下，当前使用的分支是 master分支</li><li>可以切换到 dev分支，则后续的<a href="">git commit</a> 便会在dev分支上新建版本(提交点)</li><li><code>git checkout 分支名</code></li></ul></blockquote><table><thead><tr><th align="center">切换分支</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/FO5C0A.png" alt="FO5C0A"></td></tr></tbody></table><table><thead><tr><th align="center">再次查看分支情况</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/9rE8pI.png" alt="9rE8pI"></td></tr></tbody></table><h4 id="8-3-新建分支细节"><a href="#8-3-新建分支细节" class="headerlink" title="8.3 新建分支细节"></a>8.3 新建分支细节</h4><blockquote><p>新建分支时，新分支，默认有哪些内容？分支中包含了哪些次提交？</p></blockquote><h5 id="8-3-1-新分支初始内容"><a href="#8-3-1-新分支初始内容" class="headerlink" title="8.3.1 新分支初始内容"></a>8.3.1 新分支初始内容</h5><blockquote><p>每个分支都有一个<a href="">指针</a>，==新建一个分支，首先是新建一个<a href="">指针</a>。==</p><p>而且新分支的指针会和当前分支指向<a href="">同一个提交点</a>。</p><p>新分支包含的提交点就是从第一个提交点到分支指针指向的提交点。</p></blockquote><table><thead><tr><th align="center">每个分支都有一个指针，新建一个分支，首先是新建一个指针</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/xefRyi.png" alt="xefRyi"></td></tr></tbody></table><h5 id="8-3-2-多分支走向"><a href="#8-3-2-多分支走向" class="headerlink" title="8.3.2 多分支走向"></a>8.3.2 多分支走向</h5><blockquote><p>在master分支和新分支，分别进行 <a href="">git add</a> 和 <a href="">git commit</a></p><p>分支情况如下图：</p></blockquote><table><thead><tr><th align="center">master分支未动，在dev分支增加一次commit</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/JvXtbD.png" alt="JvXtbD"></td></tr></tbody></table><table><thead><tr><th align="center">master分支增加一个commit，dev分支再增加一个commit</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/CswXUi.png" alt="CswXUi"></td></tr></tbody></table><h5 id="8-3-3-分支提交日志"><a href="#8-3-3-分支提交日志" class="headerlink" title="8.3.3 分支提交日志"></a>8.3.3 分支提交日志</h5><blockquote><p>查看分支的提交日志，进而看到<strong>当前分支中提交点的详细情况</strong>。</p><p> 简略的查看 <code>git log --oneline</code></p><p>带图的查看：<code>git log --oneline --graph</code></p><p>详细的查看：<code>git log</code></p></blockquote><table><thead><tr><th align="center">查看当前分支的提交日志</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/qZBQLz.png" alt="qZBQLz"></td></tr></tbody></table><h4 id="8-4-分支合并"><a href="#8-4-分支合并" class="headerlink" title="8.4 分支合并"></a>8.4 分支合并</h4><blockquote><p>两个分支内容的合并</p></blockquote><blockquote><p><a href="">git merge 分支a</a>  当前分支合并到分支a</p></blockquote><blockquote><p>合并的方式有两种：<strong>快速合并 和  三方合并</strong>。</p></blockquote><h5 id="8-4-1-快速合并"><a href="#8-4-1-快速合并" class="headerlink" title="8.4.1 快速合并"></a>8.4.1 快速合并</h5><blockquote><p>==如果分支A当前的修改，是完全基于分支B的修改而来，则B分支合并A分支，就是====<strong>移动指针</strong>即可==。</p><p>要求：<strong>主分支不动，其他分支一直更新</strong></p></blockquote><table><thead><tr><th align="center">合并前分支状态</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/4FQKBX.png" alt="4FQKBX"></td></tr></tbody></table><table><thead><tr><th align="center">快速合并效果（master 合并 dev）</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/ZueTRL.png" alt="ZueTRL"></td></tr></tbody></table><h5 id="8-4-2-三方合并"><a href="#8-4-2-三方合并" class="headerlink" title="8.4.2 三方合并"></a>8.4.2 三方合并</h5><blockquote><p>在下图的情况下直接移动指针是不可以的，master会丢失自己原本的状态，所以需要三方合并</p><p>在不具备快速合并的条件下，会采用三方合并。</p><p><strong>这个合并是git帮忙做的，其实我们是不用担心的</strong></p></blockquote><table><thead><tr><th align="center">合并前，分支状态</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/Jmt6jL.png" alt="Jmt6jL"></td></tr></tbody></table><table><thead><tr><th align="center">三方合并，==将<code>2</code>和<code>3</code>的更改都累加在<code>1</code>上，形成新的提交点==</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/awiIY2.png" alt="awiIY2"></td></tr></tbody></table><blockquote><p>三方合并,它是把两个分支的最新快照（2 和 3）以及二者最近的共同祖先（1）进行三方合并，合并的结果是生成一个新的快照（并提交）</p></blockquote><h5 id="8-4-3-合并冲突"><a href="#8-4-3-合并冲突" class="headerlink" title="8.4.3 合并冲突"></a>8.4.3 合并冲突</h5><blockquote><p>两个分支进行合并，但它们含有对<strong>同一个文件</strong>的修改，则在合并时出现冲突，git无法决断该保留改文件哪个分支的修改。</p></blockquote><h6 id="8-4-3-1-冲突演示"><a href="#8-4-3-1-冲突演示" class="headerlink" title="8.4.3.1 冲突演示"></a>8.4.3.1 冲突演示</h6><blockquote><p>场景模拟如下：</p><p>master分支修改hig.txt文件</p><p>dev分支修改hig.txt</p><p>对同一个文件做了不同的修改</p></blockquote><blockquote><p>然后在master分支 合并 dev分支</p></blockquote><table><thead><tr><th align="center">合并dev分支</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/3BpSsd.png" alt="3BpSsd"></td></tr></tbody></table><blockquote><p>此时，打开hig.txt 文件：</p></blockquote><table><thead><tr><th align="center">冲突后，git会将两个分支的内容都展示在文件中</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/97live.png" alt="97live"></td></tr></tbody></table><h6 id="8-4-3-2-冲突解决"><a href="#8-4-3-2-冲突解决" class="headerlink" title="8.4.3.2 冲突解决"></a>8.4.3.2 冲突解决</h6><blockquote><p>出现冲突后，如要由两个开发人员当面协商，该如何取舍，为冲突文件定义最终内容。</p><p>解决方案：</p><ol><li>保留某一方的，删除另一方的</li><li>保留双方的</li><li>但无论如何，要记得删除  <a href="">&lt;&lt;&lt;&lt;  ====  &gt;&gt;&gt;&gt;</a> 这些</li><li>本质是两人协商为冲突的内容，定制出合理的内容。</li><li>根据协商，再次编辑文件</li></ol></blockquote><table><thead><tr><th align="center">提交 再次编辑后的文件</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/8Thl31.png" alt="8Thl31"></td></tr></tbody></table><h3 id="九、IDE关联Git（以goland为例）"><a href="#九、IDE关联Git（以goland为例）" class="headerlink" title="九、IDE关联Git（以goland为例）"></a>九、IDE关联Git（以goland为例）</h3><hr><h4 id="9-1-关联Git"><a href="#9-1-关联Git" class="headerlink" title="9.1 关联Git"></a>9.1 关联Git</h4><blockquote><p><a href="">File &gt; Settings</a>  关联过程是自动的</p></blockquote><table><thead><tr><th align="center">此处关联是Idea可以自动完成的</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/Foq2va.png" alt="Foq2va"></td></tr></tbody></table><h4 id="9-2-创建仓库"><a href="#9-2-创建仓库" class="headerlink" title="9.2 创建仓库"></a>9.2 创建仓库</h4><blockquote><ul><li><p>新建项目后，将项目目录创建为git仓库</p></li><li><p>注意： ==要在建仓库<strong>前</strong>，设置<a href="">忽略文件 “.gitignore”</a>==</p><p>==作用：被忽略的文件会被版本记录忽略，版本中不包含它们。==</p><p>范围：<strong>不需要和其他开发共享的文件</strong>，具体见下图。</p></li></ul></blockquote><table><thead><tr><th align="center">创建仓库前，先添加忽略文件</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/ZImtlk.png" alt="ZImtlk"></td></tr></tbody></table><h4 id="9-3-提交-commit"><a href="#9-3-提交-commit" class="headerlink" title="9.3 提交-commit"></a>9.3 提交-commit</h4><blockquote><p>创建好仓库后，做第一次提交。</p></blockquote><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/sj1Kqh.png" alt="sj1Kqh"></p><h4 id="9-4-创建分支"><a href="#9-4-创建分支" class="headerlink" title="9.4 创建分支"></a>9.4 创建分支</h4><blockquote><p>新建开发分支</p><p>点击右下角链接</p></blockquote><h4 id="9-5-上传到远程仓库-push"><a href="#9-5-上传到远程仓库-push" class="headerlink" title="9.5 上传到远程仓库(push)"></a>9.5 上传到远程仓库(push)</h4><blockquote><ul><li><p>请首先参照第7章，创建一个远程仓库。</p></li><li><p>要求是裸库，且建议库名和项目名同名。</p></li></ul></blockquote><h4 id="9-6-复制到本地仓库-clone"><a href="#9-6-复制到本地仓库-clone" class="headerlink" title="9.6 复制到本地仓库(clone)"></a>9.6 复制到本地仓库(clone)</h4><blockquote><p>如果有建好的远程仓库，比如公司内已经在用的仓库，或者github，码云上的一些公开仓库，</p><p>可以将远程仓库的项目复制到本地使用。</p></blockquote><h4 id="9-7-更新本地项目"><a href="#9-7-更新本地项目" class="headerlink" title="9.7 更新本地项目"></a>9.7 更新本地项目</h4><blockquote><p>如果远程仓库有更新，则你的本地项目也需要一起更新。</p></blockquote><h4 id="9-8-冲突解决"><a href="#9-8-冲突解决" class="headerlink" title="9.8 冲突解决"></a>9.8 冲突解决</h4><blockquote><p>合并分支时，如果出现冲突，则需要解决冲突。</p><p>当远端的文件与本地尚未上传远端的文件不同时，在本地拉取更新时就会造成冲突。 </p></blockquote><table><thead><tr><th align="center">冲突出现，弹窗中可以选择如下</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/6fFLr8.png" alt="6fFLr8"></td></tr></tbody></table><p>两人协商保留什么代码然后修改即可</p><p>也可以直接修改冲突文件，然后commit即可</p><h3 id="十、多人协同开发"><a href="#十、多人协同开发" class="headerlink" title="十、多人协同开发"></a>十、多人协同开发</h3><hr><blockquote><p>多人开发协同，git操作</p></blockquote><h4 id="10-1-项目管理员-项目经理"><a href="#10-1-项目管理员-项目经理" class="headerlink" title="10.1 项目管理员( 项目经理 )"></a>10.1 项目管理员( 项目经理 )</h4><blockquote><p>1&gt; 由管理员负责创建一个远程库，初始的库中什么也没有，为裸库。库的名称建议和项目同名</p></blockquote><blockquote><p>2&gt; 管理员会在idea中创建一个初始项目,其中包含.gitignore文件。                                                                                               </p><p>并在项目根目录下 建立本地库。并建立 dev分支。</p></blockquote><blockquote><p>3&gt; 管理员将本地库上传到远程库</p></blockquote><blockquote><p>4&gt; 将其他开发人员拉入远程库的 <a href="">开发成员列表中</a> ，使得其他开发人员可以访问该远程库。</p></blockquote><h4 id="10-2-开发人员"><a href="#10-2-开发人员" class="headerlink" title="10.2 开发人员"></a>10.2 开发人员</h4><blockquote><ul><li><p>初始化：在idea中clone 远程库，获得项目。会建立本地库</p></li><li><p>后续的开发中，都要在dev分支上进行。开发完一个功能并测试通过后就commit      提交到本地的dev分支中，然后 上传(push)到远程dev分支中。    </p></li><li><p>需要更新项目内容时，通过 pull 从远程仓库拉取内容。                                                                       </p></li><li><p>注意：==多人协同时，每次在 push 到远程库前，都先做一次pull==，一来是把远程最新内容合并到本地，二来是核实本地内容是否和远程内容有冲突。</p></li><li><p>后续的开发，会接到一个个的功能任务，往复操作 2&gt;、3&gt;、4&gt; 而已。</p></li></ul></blockquote><h3 id="十一、经典问题"><a href="#十一、经典问题" class="headerlink" title="十一、经典问题"></a>十一、经典问题</h3><hr><blockquote><p>在使用https协议做push时，如果曾经使用过码云，但密码有过改动，此时会报错</p><p>之前的账号凭证与新的git账号凭证对不上，所以会出现以下问题：</p></blockquote><table><thead><tr><th align="center">使用https协议报错</th></tr></thead><tbody><tr><td align="center"><img src="http://xwjpics.gumptlu.work/qinniu_uPic/Iey1TN.png" alt="Iey1TN"></td></tr></tbody></table><blockquote><p>解决方案:  <a href="">控制面板  》 凭据管理器 》</a> 删除对应凭证，再次使用时会提示重新输入密码。</p><p>删除之前的码云凭证，然后重新push即可</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;一、引言&quot;&gt;&lt;a href=&quot;#一、引言&quot; class=&quot;headerlink&quot; title=&quot;一、引言&quot;&gt;&lt;/a&gt;一、引言&lt;/h3&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在单人开发过程中，需要进行版本管理，以利于开发进度的控制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在多人开发过程中，不仅需要&lt;strong&gt;版本管理&lt;/strong&gt;，还需要进行&lt;strong&gt;多人协同控制&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="git" scheme="https://xwjahahahaha.github.io/categories/technical/git/"/>
    
    
    <category term="git" scheme="https://xwjahahahaha.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>35_搜索插入位置</title>
    <link href="https://xwjahahahaha.github.io/2021/02/16/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/35-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/"/>
    <id>https://xwjahahahaha.github.io/2021/02/16/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/35-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</id>
    <published>2021-02-16T02:41:00.000Z</published>
    <updated>2021-02-16T02:57:55.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h4 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35. 搜索插入位置"></a><a href="https://leetcode-cn.com/problems/search-insert-position/" target="_blank" rel="noopener">35. 搜索插入位置</a></h4><p>难度简单</p><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>你可以假设数组中无重复元素。</p><a id="more"></a><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 5</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 2</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 7</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 0</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure><h2 id="解题思路及代码"><a href="#解题思路及代码" class="headerlink" title="解题思路及代码"></a>解题思路及代码</h2><p>二分法</p><p>时间复杂度O(logN)</p><p>空间复杂度O(1)</p><p>要理解二分法中的循环不变量，就是区间！这样边界问题就可以解决</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// //二分法 循环不变量：区间左闭右闭[l, r]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchInsert</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    l, r := <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> target &lt; nums[<span class="number">0</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> l &lt;= r &#123;</span><br><span class="line">        mid := l + (r - l) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &lt; target&#123;</span><br><span class="line">            l = mid + <span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &gt; target&#123;</span><br><span class="line">            r = mid - <span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//1.目标值在数组区间中且对应数组中的元素，返回具体下标</span></span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//分情况讨论：</span></span><br><span class="line">    <span class="comment">//2. 目标值在数组区间之前即比第一个元素还小，那么此时推出循环一定为l=0, r=-1</span></span><br><span class="line">    <span class="comment">//3. 目标值在数组区间中但是没有对应的元素，那么一定是l=r+1，此时返回值就是r+1</span></span><br><span class="line">    <span class="comment">//4. 目标值在数组区间之后，那么此时一定是l=len(nums), r=l-1, 此时也返回r+1</span></span><br><span class="line">    <span class="keyword">return</span> r+<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二分法 循环不变量 左闭右开[l, r)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchInsert</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">//注意r = len(nums)</span></span><br><span class="line">    l, r := <span class="number">0</span>, <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">if</span> target &lt; nums[<span class="number">0</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//l == r 对于[l, r)是没有意义的</span></span><br><span class="line">    <span class="keyword">for</span> l &lt; r &#123;</span><br><span class="line">        mid := l + (r - l) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &lt; target&#123;</span><br><span class="line">            l = mid + <span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &gt; target&#123;</span><br><span class="line">            <span class="comment">//因为右开，所以继续在[l, r)中寻找</span></span><br><span class="line">            r = mid</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//1.目标值在数组区间中且对应数组中的元素，返回具体下标</span></span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//分情况讨论：</span></span><br><span class="line">    <span class="comment">//2. 目标值在数组区间之前即比第一个元素还小，那么此时推出循环一定为l=0, r=0</span></span><br><span class="line">    <span class="comment">//3. 目标值在数组区间中但是没有对应的元素，那么一定是l=r，此时返回值就是r</span></span><br><span class="line">    <span class="comment">//4. 目标值在数组区间之后，那么此时一定是l=len(nums), r=l, 此时也返回r</span></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;h4 id=&quot;35-搜索插入位置&quot;&gt;&lt;a href=&quot;#35-搜索插入位置&quot; class=&quot;headerlink&quot; title=&quot;35. 搜索插入位置&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/search-insert-position/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;35. 搜索插入位置&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;难度简单&lt;/p&gt;
&lt;p&gt;给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。&lt;/p&gt;
&lt;p&gt;你可以假设数组中无重复元素。&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="leetcode" scheme="https://xwjahahahaha.github.io/categories/technical/leetcode/"/>
    
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>日记_0129</title>
    <link href="https://xwjahahahaha.github.io/2021/02/16/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-02/%E6%97%A5%E8%AE%B0-0129/"/>
    <id>https://xwjahahahaha.github.io/2021/02/16/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-02/%E6%97%A5%E8%AE%B0-0129/</id>
    <published>2021-02-16T00:53:03.000Z</published>
    <updated>2021-02-16T19:35:49.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="寒假待办任务："><a href="#寒假待办任务：" class="headerlink" title="寒假待办任务："></a>寒假待办任务：</h2><table><thead><tr><th>任务</th><th>每日任务（必须每天完成）</th><th>开发</th><th>项目</th><th><font color='red'>科研（No.1）</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>后端：go语言深化，框架gin等</strong>，<strong>go书看完</strong></td><td>博客小项目</td><td>区块链知识面拓展</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td><strong>leetcode每日一题</strong></td><td>前端：Vue</td><td>金窝窝项目需求准备cosmos</td><td><font color='red'><strong>论文粗读10篇，细读5篇，做好笔记</strong></font></td><td>看比赛资讯，准备明年的<strong>区块链比赛</strong></td></tr><tr><td>③</td><td></td><td>Linux学完</td><td>本科毕业设计</td><td><font color='red'><strong>核心: 产生自己的构思</strong></font></td><td>为下学期的<strong>暑期实习</strong>做准备</td></tr><tr><td>④</td><td></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td>分布式课程</td><td></td></tr><tr><td>⑤</td><td></td><td>有时间的话：Java</td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td><font color='red'><strong>代客泊车项目申报书</strong></font></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="每日时段划分"><a href="#每日时段划分" class="headerlink" title="每日时段划分"></a>每日时段划分</h2><table><thead><tr><th>时段</th><th>任务</th><th>S/F</th></tr></thead><tbody><tr><td>9:00~10:00</td><td>英语单词+语法课</td><td>S</td></tr><tr><td>10:00~1:00</td><td>算法</td><td>S</td></tr><tr><td>1:30~5:00</td><td>看论文</td><td>S</td></tr><tr><td>6:00~9:00</td><td>开发</td><td>S</td></tr><tr><td>9:00+</td><td>运动锻炼</td><td></td></tr></tbody></table><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input disabled="" type="checkbox"> <p><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7467408" target="_blank" rel="noopener">Blockchains and Smart Contracts for the Internet of Things</a></p></li><li><input disabled="" type="checkbox"> <p>Where Is Current Research on Blockchain Technology?-A Systematic Review</p></li><li><input disabled="" type="checkbox"> <p>Blockstack: A Global Naming and Storage System Secured by Blockchains</p></li><li><input disabled="" type="checkbox"> <p>Plasma </p></li><li><input disabled="" type="checkbox"> <p><a href="https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md" target="_blank" rel="noopener">EOS.IO Technical White Paper v2</a></p></li><li><input disabled="" type="checkbox"> <p>Ocean Protocol: Tools for the Web3 Data Economy</p></li><li><input disabled="" type="checkbox"> <p>Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts</p></li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input disabled="" type="checkbox"> Decentralizing Privacy: Using Blockchain to Protect Personal Data</li><li><input disabled="" type="checkbox"> 《 Tendermint：关于拜占庭容错共识算法的最新进展》</li><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input disabled="" type="checkbox"> The Ripple Protocol Consensus Algorithm</li><li><input disabled="" type="checkbox"> <a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="noopener">以太坊白皮书</a></li><li><input disabled="" type="checkbox"> Hyperledger Fabric: A Distributed Operating System for Permissioned Blockchains</li><li><input disabled="" type="checkbox"> Secure Data Storage and Recovery in IndustrialBlockchain Network Environments</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li></ul><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> 英语50词</li><li><input checked="" disabled="" type="checkbox"> leetcode一题</li><li><input checked="" disabled="" type="checkbox"> 闪电网络看了部分</li><li><input checked="" disabled="" type="checkbox"> 系统的学习了git</li><li><input checked="" disabled="" type="checkbox"> go语言强化P10</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2><ul><li>发现了两个宝藏学习up</li><li>效率低下，路径有问题？</li><li>总想一口吃成个胖子</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;寒假待办任务：&quot;&gt;&lt;a href=&quot;#寒假待办任务：&quot; class=&quot;headerlink&quot; title=&quot;寒假待办任务：&quot;&gt;&lt;/a&gt;寒假待办任务：&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每日任务（必须每天完成）&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研（No.1）&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;后端：go语言深化，框架gin等&lt;/strong&gt;，&lt;strong&gt;go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;博客小项目&lt;/td&gt;
&lt;td&gt;区块链知识面拓展&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;leetcode每日一题&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;前端：Vue&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;&lt;strong&gt;论文粗读10篇，细读5篇，做好笔记&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备明年的&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;&lt;strong&gt;核心: 产生自己的构思&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;为下学期的&lt;strong&gt;暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;分布式课程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;有时间的话：Java&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;&lt;strong&gt;代客泊车项目申报书&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>日记_0128</title>
    <link href="https://xwjahahahaha.github.io/2021/02/15/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-02/%E6%97%A5%E8%AE%B0-0128/"/>
    <id>https://xwjahahahaha.github.io/2021/02/15/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-02/%E6%97%A5%E8%AE%B0-0128/</id>
    <published>2021-02-15T08:13:21.000Z</published>
    <updated>2021-02-16T00:52:35.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="寒假待办任务："><a href="#寒假待办任务：" class="headerlink" title="寒假待办任务："></a>寒假待办任务：</h2><table><thead><tr><th>任务</th><th>每日任务（必须每天完成）</th><th>开发</th><th>项目</th><th><font color='red'>科研（No.1）</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>后端：go语言深化，框架gin等</strong>，<strong>go书看完</strong></td><td>博客小项目</td><td>区块链知识面拓展</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td><strong>leetcode每日一题</strong></td><td>前端：Vue</td><td>金窝窝项目需求准备cosmos</td><td><font color='red'><strong>论文粗读10篇，细读5篇，做好笔记</strong></font></td><td>看比赛资讯，准备明年的<strong>区块链比赛</strong></td></tr><tr><td>③</td><td></td><td>Linux学完</td><td>本科毕业设计</td><td><font color='red'><strong>核心: 产生自己的构思</strong></font></td><td>为下学期的<strong>暑期实习</strong>做准备</td></tr><tr><td>④</td><td></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td>分布式课程</td><td></td></tr><tr><td>⑤</td><td></td><td>有时间的话：Java</td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td><font color='red'><strong>代客泊车项目申报书</strong></font></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="每日时段划分"><a href="#每日时段划分" class="headerlink" title="每日时段划分"></a>每日时段划分</h2><table><thead><tr><th>时段</th><th>任务</th><th>S/F</th></tr></thead><tbody><tr><td>9:00~10:00</td><td>英语单词+语法课</td><td>S</td></tr><tr><td>10:00~1:00</td><td>算法</td><td>S</td></tr><tr><td>1:30~5:00</td><td>看论文</td><td></td></tr><tr><td>6:00~9:00</td><td>开发</td><td></td></tr><tr><td>9:00+</td><td>运动锻炼</td><td></td></tr></tbody></table><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input disabled="" type="checkbox"> <p><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7467408" target="_blank" rel="noopener">Blockchains and Smart Contracts for the Internet of Things</a></p></li><li><input disabled="" type="checkbox"> <p>Where Is Current Research on Blockchain Technology?-A Systematic Review</p></li><li><input disabled="" type="checkbox"> <p>Blockstack: A Global Naming and Storage System Secured by Blockchains</p></li><li><input disabled="" type="checkbox"> <p>Plasma </p></li><li><input disabled="" type="checkbox"> <p><a href="https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md" target="_blank" rel="noopener">EOS.IO Technical White Paper v2</a></p></li><li><input disabled="" type="checkbox"> <p>Ocean Protocol: Tools for the Web3 Data Economy</p></li><li><input disabled="" type="checkbox"> <p>Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts</p></li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input disabled="" type="checkbox"> Decentralizing Privacy: Using Blockchain to Protect Personal Data</li><li><input disabled="" type="checkbox"> 《 Tendermint：关于拜占庭容错共识算法的最新进展》</li><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input disabled="" type="checkbox"> The Ripple Protocol Consensus Algorithm</li><li><input disabled="" type="checkbox"> <a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="noopener">以太坊白皮书</a></li><li><input disabled="" type="checkbox"> Hyperledger Fabric: A Distributed Operating System for Permissioned Blockchains</li><li><input disabled="" type="checkbox"> Secure Data Storage and Recovery in IndustrialBlockchain Network Environments</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li></ul><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> 英语50词</li><li><input checked="" disabled="" type="checkbox"> leetcode一题</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2><ul><li>吃饭要节制</li><li>规定时间就做规定事</li><li>没有完成任务！</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;寒假待办任务：&quot;&gt;&lt;a href=&quot;#寒假待办任务：&quot; class=&quot;headerlink&quot; title=&quot;寒假待办任务：&quot;&gt;&lt;/a&gt;寒假待办任务：&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;每日任务（必须每天完成）&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研（No.1）&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;后端：go语言深化，框架gin等&lt;/strong&gt;，&lt;strong&gt;go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;博客小项目&lt;/td&gt;
&lt;td&gt;区块链知识面拓展&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;leetcode每日一题&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;前端：Vue&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;&lt;strong&gt;论文粗读10篇，细读5篇，做好笔记&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备明年的&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;&lt;strong&gt;核心: 产生自己的构思&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;为下学期的&lt;strong&gt;暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;分布式课程&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;有时间的话：Java&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;&lt;strong&gt;代客泊车项目申报书&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>在mac与windows之间共享文件</title>
    <link href="https://xwjahahahaha.github.io/2021/02/15/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%B0%8F%E6%8A%80%E5%B7%A7/%E5%9C%A8mac%E4%B8%8Ewindows%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6/"/>
    <id>https://xwjahahahaha.github.io/2021/02/15/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%B0%8F%E6%8A%80%E5%B7%A7/%E5%9C%A8mac%E4%B8%8Ewindows%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6/</id>
    <published>2021-02-14T17:57:43.000Z</published>
    <updated>2021-02-14T20:07:40.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mac访问windows的文件"><a href="#mac访问windows的文件" class="headerlink" title="mac访问windows的文件"></a>mac访问windows的文件</h1><p>前提：双方在同一个wifi下</p><p>首先在windows中对需要共享的文件夹右键选择共享到家庭组（此时可能会提示需要开启家庭网络，开启即可）</p><p>然后在mac中打开访达，按住command + k 然后输入<code>smb://对应windows在该局域网下的ip地址</code>即可看到之前共享的文件夹。</p><a id="more"></a><p><a href="https://blog.csdn.net/weixin_39522312/article/details/111228666" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39522312/article/details/111228666</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;mac访问windows的文件&quot;&gt;&lt;a href=&quot;#mac访问windows的文件&quot; class=&quot;headerlink&quot; title=&quot;mac访问windows的文件&quot;&gt;&lt;/a&gt;mac访问windows的文件&lt;/h1&gt;&lt;p&gt;前提：双方在同一个wifi下&lt;/p&gt;
&lt;p&gt;首先在windows中对需要共享的文件夹右键选择共享到家庭组（此时可能会提示需要开启家庭网络，开启即可）&lt;/p&gt;
&lt;p&gt;然后在mac中打开访达，按住command + k 然后输入&lt;code&gt;smb://对应windows在该局域网下的ip地址&lt;/code&gt;即可看到之前共享的文件夹。&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    
  </entry>
  
  <entry>
    <title>139_单词拆分</title>
    <link href="https://xwjahahahaha.github.io/2021/02/15/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/139-%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/"/>
    <id>https://xwjahahahaha.github.io/2021/02/15/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/139-%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/</id>
    <published>2021-02-14T16:15:59.000Z</published>
    <updated>2021-02-15T09:56:36.981Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h4 id="139-单词拆分"><a href="#139-单词拆分" class="headerlink" title="139. 单词拆分"></a><a href="https://leetcode-cn.com/problems/word-break/" target="_blank" rel="noopener">139. 单词拆分</a></h4><p>难度中等</p><p>给定一个<strong>非空</strong>字符串 <em>s</em> 和一个包含<strong>非空</strong>单词的列表 <em>wordDict*，判定 *s</em> 是否可以被空格拆分为一个或多个在字典中出现的单词。</p><a id="more"></a><p><strong>说明：</strong></p><ul><li>拆分时可以重复使用字典中的单词。</li><li>你可以假设字典中没有重复的单词。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;leetcode&quot;, wordDict &#x3D; [&quot;leet&quot;, &quot;code&quot;]</span><br><span class="line">输出: true</span><br><span class="line">解释: 返回 true 因为 &quot;leetcode&quot; 可以被拆分成 &quot;leet code&quot;。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;applepenapple&quot;, wordDict &#x3D; [&quot;apple&quot;, &quot;pen&quot;]</span><br><span class="line">输出: true</span><br><span class="line">解释: 返回 true 因为 &quot;applepenapple&quot; 可以被拆分成 &quot;apple pen apple&quot;。</span><br><span class="line">     注意你可以重复使用字典中的单词。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;catsandog&quot;, wordDict &#x3D; [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><h2 id="解题思路及代码"><a href="#解题思路及代码" class="headerlink" title="解题思路及代码"></a>解题思路及代码</h2><p><a href="https://leetcode-cn.com/problems/word-break/solution/shou-hui-tu-jie-san-chong-fang-fa-dfs-bfs-dong-tai/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/word-break/solution/shou-hui-tu-jie-san-chong-fang-fa-dfs-bfs-dong-tai/</a></p><ul><li><p>方法一： DFS</p><p>构建递归树</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/ig85fY.jpg" alt="ig85fY"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/IMG_0096.jpg" alt="IMG_0096"></p><p>避免重复操作，记录中间值</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/uIWkCz.jpg" alt="uIWkCz"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/DvvXcR.jpg" alt="DvvXcR"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/IMG_0095.jpg" alt="IMG_0095"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DFS</span></span><br><span class="line"><span class="comment">//采用单词拆分的方式，画出递归回溯方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//wordMap是保存当前字符串是否在wordDict中存在，在为true否则为false</span></span><br><span class="line"><span class="comment">//memo用来记录中间结果，防止超时,标识为start指</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canBreak</span><span class="params">(start <span class="keyword">int</span>, s <span class="keyword">string</span>, wordMap <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span>, memo <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">bool</span>)</span> <span class="title">bool</span></span>&#123;</span><br><span class="line">    <span class="comment">//空串为true</span></span><br><span class="line">    <span class="keyword">if</span> start == <span class="built_in">len</span>(s) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//先看是否有记录，避免重复耗时</span></span><br><span class="line">    <span class="keyword">if</span> res, ok := memo[start]; ok&#123;</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i:=start+<span class="number">1</span>; i&lt;=<span class="built_in">len</span>(s); i++&#123;</span><br><span class="line">        <span class="comment">//获取前缀字符串</span></span><br><span class="line">        prefix := s[start:i]</span><br><span class="line">        <span class="comment">//判断前缀字符串是否在wordDict中以及对剩下的字符串进行递归</span></span><br><span class="line">        <span class="keyword">if</span> wordMap[prefix] &amp;&amp; canBreak(i, s, wordMap, memo)&#123;</span><br><span class="line">            <span class="comment">//记录</span></span><br><span class="line">            memo[start] = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//i到底还没有return true那么就返回false</span></span><br><span class="line">    memo[start] = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">wordBreak</span><span class="params">(s <span class="keyword">string</span>, wordDict []<span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    wordMap := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> wordDict &#123;</span><br><span class="line">        wordMap[v] = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> canBreak(<span class="number">0</span>, s, wordMap, <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">bool</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>方法二：BFS</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/5sqzmo.jpg" alt="5sqzmo"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/IMG_0097.jpg" alt="IMG_0097"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BFS </span></span><br><span class="line"><span class="comment">//采用队列结构，唯一返回true的条件是当前前缀合法且下标i越界（到末尾）</span></span><br><span class="line"><span class="comment">//同样的使用memo记录唯一标识start是否已经被考察，减少重复计算，考察过为true，否则为false</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">wordBreak</span><span class="params">(s <span class="keyword">string</span>, wordDict []<span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    length := <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="comment">//同样的创建wordMap来判断当前前缀是否在wordDist存在/合法</span></span><br><span class="line">    wordMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span>)</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> wordDict &#123;</span><br><span class="line">        wordMap[v] = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建记忆数组</span></span><br><span class="line">    memo := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">bool</span>)</span><br><span class="line">    queue := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//插入初始值0</span></span><br><span class="line">    queue = <span class="built_in">append</span>(queue, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">//弹出当前队列元素</span></span><br><span class="line">        start := queue[<span class="number">0</span>]</span><br><span class="line">        queue = queue[<span class="number">1</span>:]</span><br><span class="line">        <span class="comment">//判断是否已经考察过</span></span><br><span class="line">        <span class="keyword">if</span> memo[start] &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//弹出代表已经被考察过了记录为true</span></span><br><span class="line">        memo[start] = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">for</span> i:=start+<span class="number">1</span>; i&lt;=length; i++&#123;</span><br><span class="line">            prefix := s[start:i]</span><br><span class="line">            <span class="comment">//只有是合法单词才判断</span></span><br><span class="line">            <span class="keyword">if</span> wordMap[prefix] &#123;</span><br><span class="line">                <span class="keyword">if</span> i &lt; length &#123;</span><br><span class="line">                    <span class="comment">//是合法单词，但是还未切完，那么加入队列继续考察</span></span><br><span class="line">                    queue = <span class="built_in">append</span>(queue, i)</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//是合法单词且i到达末尾，那么就可以返回true</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果循环结束还未返回true，则说明无法拆分</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法三：动态规划</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 动态规划</span></span><br><span class="line"><span class="comment">//当前长度为len的单词是否能用单词表表示问题拆分为子问题：</span></span><br><span class="line"><span class="comment">//对于划分点j</span></span><br><span class="line"><span class="comment">//1. 字符串[0:j]是否可以被单词表表示</span></span><br><span class="line"><span class="comment">//2. [j:len]是否是单词表中的一个单词</span></span><br><span class="line"><span class="comment">//两者同时满足则整体满足</span></span><br><span class="line"><span class="comment">//dp[len+1] 表示s[0:len]字符串是否能被表示</span></span><br><span class="line"><span class="comment">//递推式：dp[i] = dp[j] &amp;&amp; s[i:j]是否合法</span></span><br><span class="line"><span class="comment">//base case dp[0] = true空串满足题意</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">wordBreak</span><span class="params">(s <span class="keyword">string</span>, wordDict []<span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    length := <span class="built_in">len</span>(s)</span><br><span class="line">    dp := <span class="built_in">make</span>([]<span class="keyword">bool</span>, length+<span class="number">1</span>)</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="literal">true</span></span><br><span class="line">    wordMap := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> wordDict&#123;</span><br><span class="line">        wordMap[v] = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//i用于考量s(0, i)字符串</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>; i&lt;=length; i++&#123;</span><br><span class="line">        <span class="keyword">for</span> j:=i<span class="number">-1</span>; j&gt;=<span class="number">0</span>; j--&#123;</span><br><span class="line">            suffix := s[j:i]</span><br><span class="line">            <span class="keyword">if</span> dp[j] &amp;&amp; wordMap[suffix] &#123;</span><br><span class="line">                dp[i] = <span class="literal">true</span></span><br><span class="line">                <span class="comment">//此时s(0, i)已经能划分为单词表单词了，所以不必在移动j</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[length]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;h4 id=&quot;139-单词拆分&quot;&gt;&lt;a href=&quot;#139-单词拆分&quot; class=&quot;headerlink&quot; title=&quot;139. 单词拆分&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/word-break/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;139. 单词拆分&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;难度中等&lt;/p&gt;
&lt;p&gt;给定一个&lt;strong&gt;非空&lt;/strong&gt;字符串 &lt;em&gt;s&lt;/em&gt; 和一个包含&lt;strong&gt;非空&lt;/strong&gt;单词的列表 &lt;em&gt;wordDict*，判定 *s&lt;/em&gt; 是否可以被空格拆分为一个或多个在字典中出现的单词。&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="leetcode" scheme="https://xwjahahahaha.github.io/categories/technical/leetcode/"/>
    
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/tags/golang/"/>
    
  </entry>
  
</feed>
