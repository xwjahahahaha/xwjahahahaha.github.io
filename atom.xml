<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知识与头发不可兼得</title>
  
  <subtitle>文杰的博客</subtitle>
  <link href="https://xwjahahahaha.github.io/atom.xml" rel="self"/>
  
  <link href="https://xwjahahahaha.github.io/"/>
  <updated>2021-03-25T05:44:57.405Z</updated>
  <id>https://xwjahahahaha.github.io/</id>
  
  <author>
    <name>DDDemons hide</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2-两数相加</title>
    <link href="https://xwjahahahaha.github.io/2021/03/25/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>https://xwjahahahaha.github.io/2021/03/25/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</id>
    <published>2021-03-25T05:41:44.000Z</published>
    <updated>2021-03-25T05:44:57.405Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h4 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2. 两数相加"></a><a href="https://leetcode-cn.com/problems/add-two-numbers/" target="_blank" rel="noopener">2. 两数相加</a></h4><p>难度中等</p><p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><a id="more"></a> <p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]</span><br><span class="line">输出：[7,0,8]</span><br><span class="line">解释：342 + 465 &#x3D; 807.</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 &#x3D; [0], l2 &#x3D; [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 &#x3D; [9,9,9,9,9,9,9], l2 &#x3D; [9,9,9,9]</span><br><span class="line">输出：[8,9,9,9,0,0,0,1]</span><br></pre></td></tr></table></figure><h2 id="解题思路及代码"><a href="#解题思路及代码" class="headerlink" title="解题思路及代码"></a>解题思路及代码</h2><p>时间复杂度O(max(m, n))</p><p>空间复杂度O(max(m,n))</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基础运算的规律: 两个数按位相加</span></span><br><span class="line"><span class="comment">// 当前位的计算: (n1 + n2 + carry) % 10</span></span><br><span class="line"><span class="comment">// 进位的计算: (n1 + n2 + carry) / 10</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoNumbers</span><span class="params">(l1 *ListNode, l2 *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line">   carry := <span class="number">0</span></span><br><span class="line">   <span class="keyword">var</span> tail, head  *ListNode</span><br><span class="line">   <span class="keyword">for</span> l1 != <span class="literal">nil</span> || l2 != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// 取值, 如果已经取完那么默认就是0</span></span><br><span class="line">        n1, n2 := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> l1 != <span class="literal">nil</span> &#123;</span><br><span class="line">           n1 = l1.Val</span><br><span class="line">           l1 = l1.Next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> l2 != <span class="literal">nil</span> &#123;</span><br><span class="line">           n2 = l2.Val</span><br><span class="line">           l2 = l2.Next</span><br><span class="line">        &#125;</span><br><span class="line">        digit := (n1 + n2 + carry) % <span class="number">10</span></span><br><span class="line">        carry = (n1 +  n2 + carry) / <span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="comment">// 第一处创建</span></span><br><span class="line">            tail = &amp;ListNode&#123;Val : digit&#125;</span><br><span class="line">            head = tail</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 随后</span></span><br><span class="line">            tail.Next = &amp;ListNode&#123;Val : digit&#125;</span><br><span class="line">            tail = tail.Next</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 检查是否需要再进位. 这一步是关键</span></span><br><span class="line">   <span class="keyword">if</span> carry &gt; <span class="number">0</span> &#123;</span><br><span class="line">        tail.Next = &amp;ListNode&#123;Val : carry&#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;h4 id=&quot;2-两数相加&quot;&gt;&lt;a href=&quot;#2-两数相加&quot; class=&quot;headerlink&quot; title=&quot;2. 两数相加&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/add-two-numbers/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2. 两数相加&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;难度中等&lt;/p&gt;
&lt;p&gt;给你两个 &lt;strong&gt;非空&lt;/strong&gt; 的链表，表示两个非负的整数。它们每位数字都是按照 &lt;strong&gt;逆序&lt;/strong&gt; 的方式存储的，并且每个节点只能存储 &lt;strong&gt;一位&lt;/strong&gt; 数字。&lt;/p&gt;
&lt;p&gt;请你将两个数相加，并以相同形式返回一个表示和的链表。&lt;/p&gt;
&lt;p&gt;你可以假设除了数字 0 之外，这两个数都不会以 0 开头。&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="leetcode" scheme="https://xwjahahahaha.github.io/categories/technical/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>日记_0144</title>
    <link href="https://xwjahahahaha.github.io/2021/03/25/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0144/"/>
    <id>https://xwjahahahaha.github.io/2021/03/25/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0144/</id>
    <published>2021-03-25T00:27:36.000Z</published>
    <updated>2021-03-25T01:36:52.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>英语</th><th>开发</th><th>项目</th><th><font color='red'>科研</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语单词</strong></td><td><strong>go学习体系 go书看完</strong></td><td>区块链公链项目</td><td>论文一周两篇细读,每个月尝试写一篇</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td>语法课看完</td><td>区块链框架Cosmos</td><td>金窝窝项目需求准备cosmos</td><td>分布式课程论文</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>③</td><td>英文视频学习</td><td>Linux学完</td><td>本科毕业设计</td><td></td><td>为<strong>7月暑期实习</strong>做准备</td></tr><tr><td>④</td><td><font color='red'>六级</font></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td></td><td></td></tr><tr><td>⑤</td><td></td><td></td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li>学弟的cosmos隐私保护项目</li><li>第一篇论文</li><li>科技部编程比赛</li><li>暑期实习准备(Go, 算法等)</li></ul><p>三月 </p><ul><li><input checked="" disabled="" type="checkbox"> <p>3-3 ~ 3-7 cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></p></li><li><input checked="" disabled="" type="checkbox"> <p>3-8 ~ 3-20 科技部编程比赛项目实现(使用cosmos)</p></li><li><input disabled="" type="checkbox"> <p>3-20~3-31 Go公链实现项目</p></li><li><input disabled="" type="checkbox"> <p>确定研究主方向,第一篇论文初稿与老师讨论</p></li></ul><p>四月 主要准备算法与Go后端框架的学习</p><p>四五月中要好好准备六级, 这次要过.</p><p>五月~七月 算法、面试准备</p><p><strong>走go开发, 有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input disabled="" type="checkbox"> 英语70词 + 语法课P7完结</li><li><input disabled="" type="checkbox"> 一篇六级阅读</li><li><input disabled="" type="checkbox"> leetcode</li><li><input disabled="" type="checkbox"> </li><li><input disabled="" type="checkbox"> </li><li><input disabled="" type="checkbox"> </li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;go学习体系 go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;区块链公链项目&lt;/td&gt;
&lt;td&gt;论文一周两篇细读,每个月尝试写一篇&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;区块链框架Cosmos&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;分布式课程论文&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;英文视频学习&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;7月暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>mac使用typora快捷多颜色文字和公式设置</title>
    <link href="https://xwjahahahaha.github.io/2021/03/24/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%B0%8F%E6%8A%80%E5%B7%A7/mac%E4%BD%BF%E7%94%A8typroa%E5%BF%AB%E6%8D%B7%E5%A4%9A%E9%A2%9C%E8%89%B2%E6%96%87%E5%AD%97%E5%92%8C%E5%85%AC%E5%BC%8F%E8%AE%BE%E7%BD%AE/"/>
    <id>https://xwjahahahaha.github.io/2021/03/24/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%B0%8F%E6%8A%80%E5%B7%A7/mac%E4%BD%BF%E7%94%A8typroa%E5%BF%AB%E6%8D%B7%E5%A4%9A%E9%A2%9C%E8%89%B2%E6%96%87%E5%AD%97%E5%92%8C%E5%85%AC%E5%BC%8F%E8%AE%BE%E7%BD%AE/</id>
    <published>2021-03-24T06:36:46.000Z</published>
    <updated>2021-03-24T07:22:40.205Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mac使用typora快捷多颜色文字-公式设置"><a href="#mac使用typora快捷多颜色文字-公式设置" class="headerlink" title="mac使用typora快捷多颜色文字/公式设置"></a>mac使用typora快捷多颜色文字/公式设置</h1><h2 id="需要的工具"><a href="#需要的工具" class="headerlink" title="需要的工具:"></a>需要的工具:</h2><ul><li>typora</li><li>Alfred</li></ul><p>typora搜索官网下载,Alfred可以<a href="https://xclient.info/s/alfred.html#versions" target="_blank" rel="noopener">点此</a>下载</p><a id="more"></a><h2 id="设置过程"><a href="#设置过程" class="headerlink" title="设置过程:"></a>设置过程:</h2><ol><li><p>在typora上设置好内联公式设置:(不使用多颜色公式的可以跳过)</p><p>打开偏好设置:勾选即可</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/ACLZvi.png" alt="ACLZvi"></p></li><li><p>打开Alfred偏好设置 :</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/uz9Qof.png" alt="uz9Qof"></p></li><li><p>点击左侧下面的加号,新建一个文字拓展分组:</p><p>  <img src="http://xwjpics.gumptlu.work/qinniu_uPic/c9eOVY.png" alt="c9eOVY"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/i85r1e.png" alt="i85r1e"></p></li><li><p>点击右侧加号,在typora分组下新建一个文字拓展</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/waghXp.png" alt="waghXp"></p></li><li><p>黄颜色公式拓展示例:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/cdwTTW.png" alt="cdwTTW"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/THBN1k.png" alt="THBN1k"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/mURWhi.png" alt="mURWhi"></p></li><li><p>拓展内容</p><p>所有的公式颜色:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">\textcolor&#123;GreenYellow&#125;&#123;GreenYellow&#125; $$\textcolor&#123;Yellow&#125;&#123;Yellow&#125;$$\textcolor&#123;Goldenrod&#125;&#123;Goldenrod&#125; $$\textcolor&#123;Dandelion&#125;&#123;Dandelion&#125;$$\textcolor&#123;Apricot&#125;&#123;Apricot&#125; $$\textcolor&#123;Peach&#125;&#123;Peach&#125;$$\textcolor&#123;Melon&#125;&#123;Melon&#125; $$\textcolor&#123;YellowOrange&#125;&#123;YellowOrange&#125;$$\textcolor&#123;Orange&#125;&#123;Orange&#125; $$\textcolor&#123;BurntOrange&#125;&#123;BurntOrange&#125;$$\textcolor&#123;Bittersweet&#125;&#123;Bittersweet&#125;$$\textcolor&#123;RedOrange&#125;&#123;RedOrange&#125; $$\textcolor&#123;Mahogany&#125;&#123;Mahogany&#125;$$\textcolor&#123;Maroon&#125;&#123;Maroon&#125; $$\textcolor&#123;BrickRed&#125;&#123;BrickRed&#125;$$\textcolor&#123;Red&#125;&#123;Red&#125; $$\textcolor&#123;OrangeRed&#125;&#123;OrangeRed&#125;$$\textcolor&#123;RubineRed&#125;&#123;RubineRed&#125;$$\textcolor&#123;WildStrawberry&#125;&#123;WildStrawberry&#125;$$\textcolor&#123;Salmon&#125;&#123;Salmon&#125;$$\textcolor&#123;CarnationPink&#125;&#123;CarnationPink&#125;$$\textcolor&#123;Magenta&#125;&#123;Magenta&#125; $$\textcolor&#123;VioletRed&#125;&#123;VioletRed&#125;$$\textcolor&#123;Rhodamine&#125;&#123;Rhodamine&#125; $$\textcolor&#123;Mulberry&#125;&#123;Mulberry&#125;$$\textcolor&#123;RedViolet&#125;&#123;RedViolet&#125; $$\textcolor&#123;Fuchsia&#125;&#123;Fuchsia&#125;$$\textcolor&#123;Lavender&#125;&#123;Lavender&#125; $$\textcolor&#123;Thistle&#125;&#123;Thistle&#125;$$\textcolor&#123;Orchid&#125;&#123;Orchid&#125; $$\textcolor&#123;DarkOrchid&#125;&#123;DarkOrchid&#125;$$\textcolor&#123;Purple&#125;&#123;Purple&#125; $$\textcolor&#123;Plum&#125;&#123;Plum&#125;$$\textcolor&#123;Violet&#125;&#123;Violet&#125; $$\textcolor&#123;RoyalPurple&#125;&#123;RoyalPurple&#125;$$\textcolor&#123;BlueViolet&#125;&#123;BlueViolet&#125;$$\textcolor&#123;Periwinkle&#125;&#123;Periwinkle&#125;$$\textcolor&#123;CadetBlue&#125;&#123;CadetBlue&#125;$$\textcolor&#123;CornflowerBlue&#125;&#123;CornflowerBlue&#125;$$\textcolor&#123;MidnightBlue&#125;&#123;MidnightBlue&#125;$$\textcolor&#123;NavyBlue&#125;&#123;NavyBlue&#125; $$\textcolor&#123;RoyalBlue&#125;&#123;RoyalBlue&#125;$$\textcolor&#123;Blue&#125;&#123;Blue&#125; $$\textcolor&#123;Cerulean&#125;&#123;Cerulean&#125;$$\textcolor&#123;Cyan&#125;&#123;Cyan&#125; $$\textcolor&#123;ProcessBlue&#125;&#123;ProcessBlue&#125;$$\textcolor&#123;SkyBlue&#125;&#123;SkyBlue&#125; $$\textcolor&#123;Turquoise&#125;&#123;Turquoise&#125;$$\textcolor&#123;TealBlue&#125;&#123;TealBlue&#125; $$\textcolor&#123;Aquamarine&#125;&#123;Aquamarine&#125;$$\textcolor&#123;BlueGreen&#125;&#123;BlueGreen&#125; $$\textcolor&#123;Emerald&#125;&#123;Emerald&#125;$$\textcolor&#123;JungleGreen&#125;&#123;JungleGreen&#125;$$\textcolor&#123;SeaGreen&#125;&#123;SeaGreen&#125; $$\textcolor&#123;Green&#125;&#123;Green&#125;$$\textcolor&#123;ForestGreen&#125;&#123;ForestGreen&#125;$$\textcolor&#123;PineGreen&#125;&#123;PineGreen&#125; $$\textcolor&#123;LimeGreen&#125;&#123;LimeGreen&#125;$$\textcolor&#123;YellowGreen&#125;&#123;YellowGreen&#125;$$\textcolor&#123;SpringGreen&#125;&#123;SpringGreen&#125;$$\textcolor&#123;OliveGreen&#125;&#123;OliveGreen&#125;$$\textcolor&#123;RawSienna&#125;&#123;RawSienna&#125; $$\textcolor&#123;Sepia&#125;&#123;Sepia&#125;$$\textcolor&#123;Brown&#125;&#123;Brown&#125; $$\textcolor&#123;Tan&#125;&#123;Tan&#125;$$\textcolor&#123;Gray&#125;&#123;Gray&#125; $$\textcolor&#123;Black&#125;&#123;Black&#125;$</span></span><br></pre></td></tr></table></figure><p><strong>文字的拓展</strong></p><p><font color='red'>color属性值:   </font></p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>颜色名</em></td><td align="left">通过颜色名指定文本颜色（例如：“red”）</td></tr><tr><td align="left"><em>十六进制颜色值</em></td><td align="left">通过十六进制颜色值指定文本颜色（例如：“#ff0000”）</td></tr><tr><td align="left"><em>RGB颜色值</em></td><td align="left">通过RGB颜色值指定文本颜色（例如：“rgb(255,0,0)”）</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">'yellow'</span>&gt;</span>    <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/EXV8M6.png" alt="EXV8M6"></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;mac使用typora快捷多颜色文字-公式设置&quot;&gt;&lt;a href=&quot;#mac使用typora快捷多颜色文字-公式设置&quot; class=&quot;headerlink&quot; title=&quot;mac使用typora快捷多颜色文字/公式设置&quot;&gt;&lt;/a&gt;mac使用typora快捷多颜色文字/公式设置&lt;/h1&gt;&lt;h2 id=&quot;需要的工具&quot;&gt;&lt;a href=&quot;#需要的工具&quot; class=&quot;headerlink&quot; title=&quot;需要的工具:&quot;&gt;&lt;/a&gt;需要的工具:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;typora&lt;/li&gt;
&lt;li&gt;Alfred&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;typora搜索官网下载,Alfred可以&lt;a href=&quot;https://xclient.info/s/alfred.html#versions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点此&lt;/a&gt;下载&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    
  </entry>
  
  <entry>
    <title>334-递增的三元子序列</title>
    <link href="https://xwjahahahaha.github.io/2021/03/24/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/334-%E9%80%92%E5%A2%9E%E7%9A%84%E4%B8%89%E5%85%83%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>https://xwjahahahaha.github.io/2021/03/24/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/334-%E9%80%92%E5%A2%9E%E7%9A%84%E4%B8%89%E5%85%83%E5%AD%90%E5%BA%8F%E5%88%97/</id>
    <published>2021-03-24T06:11:42.000Z</published>
    <updated>2021-03-24T06:13:12.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h4 id="334-递增的三元子序列"><a href="#334-递增的三元子序列" class="headerlink" title="334. 递增的三元子序列"></a><a href="https://leetcode-cn.com/problems/increasing-triplet-subsequence/" target="_blank" rel="noopener">334. 递增的三元子序列</a></h4><p>难度中等</p><p>给你一个整数数组 <code>nums</code> ，判断这个数组中是否存在长度为 <code>3</code> 的递增子序列。</p><p>如果存在这样的三元组下标 <code>(i, j, k)</code> 且满足 <code>i &lt; j &lt; k</code> ，使得 <code>nums[i] &lt; nums[j] &lt; nums[k]</code> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p> <a id="more"></a><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [1,2,3,4,5]</span><br><span class="line">输出：true</span><br><span class="line">解释：任何 i &lt; j &lt; k 的三元组都满足题意</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [5,4,3,2,1]</span><br><span class="line">输出：false</span><br><span class="line">解释：不存在满足题意的三元组</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [2,1,5,0,4,6]</span><br><span class="line">输出：true</span><br><span class="line">解释：三元组 (3, 4, 5) 满足题意，因为 nums[3] &#x3D;&#x3D; 0 &lt; nums[4] &#x3D;&#x3D; 4 &lt; nums[5] &#x3D;&#x3D; 6</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li></ul><h2 id="解题思路及代码"><a href="#解题思路及代码" class="headerlink" title="解题思路及代码"></a>解题思路及代码</h2><p>题解:</p><p><a href="https://leetcode-cn.com/problems/increasing-triplet-subsequence/solution/pou-xi-ben-zhi-yi-wen-bang-ni-kan-qing-t-3ye2/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/increasing-triplet-subsequence/solution/pou-xi-ben-zhi-yi-wen-bang-ni-kan-qing-t-3ye2/</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 线性复杂度O(N) 空间复杂度O(1)</span></span><br><span class="line"><span class="keyword">const</span> INT_MAX = <span class="keyword">int</span>(^<span class="keyword">uint32</span>((<span class="number">0</span>)) &gt;&gt; <span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">increasingTriplet</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    one, two := INT_MAX, INT_MAX</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] &gt; two &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> nums[i] &lt;= two &amp;&amp; nums[i] &gt; one &#123;</span><br><span class="line">            two = nums[i]</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            one = nums[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;h4 id=&quot;334-递增的三元子序列&quot;&gt;&lt;a href=&quot;#334-递增的三元子序列&quot; class=&quot;headerlink&quot; title=&quot;334. 递增的三元子序列&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/increasing-triplet-subsequence/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;334. 递增的三元子序列&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;难度中等&lt;/p&gt;
&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt; ，判断这个数组中是否存在长度为 &lt;code&gt;3&lt;/code&gt; 的递增子序列。&lt;/p&gt;
&lt;p&gt;如果存在这样的三元组下标 &lt;code&gt;(i, j, k)&lt;/code&gt; 且满足 &lt;code&gt;i &amp;lt; j &amp;lt; k&lt;/code&gt; ，使得 &lt;code&gt;nums[i] &amp;lt; nums[j] &amp;lt; nums[k]&lt;/code&gt; ，返回 &lt;code&gt;true&lt;/code&gt; ；否则，返回 &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="leetcode" scheme="https://xwjahahahaha.github.io/categories/technical/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>日记_0143</title>
    <link href="https://xwjahahahaha.github.io/2021/03/24/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0143/"/>
    <id>https://xwjahahahaha.github.io/2021/03/24/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0143/</id>
    <published>2021-03-24T00:01:50.000Z</published>
    <updated>2021-03-25T00:27:26.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>英语</th><th>开发</th><th>项目</th><th><font color='red'>科研</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语单词</strong></td><td><strong>go学习体系 go书看完</strong></td><td>区块链公链项目</td><td>论文一周两篇细读,每个月尝试写一篇</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td>语法课看完</td><td>区块链框架Cosmos</td><td>金窝窝项目需求准备cosmos</td><td>分布式课程论文</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>③</td><td>英文视频学习</td><td>Linux学完</td><td>本科毕业设计</td><td></td><td>为<strong>7月暑期实习</strong>做准备</td></tr><tr><td>④</td><td><font color='red'>六级</font></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td></td><td></td></tr><tr><td>⑤</td><td></td><td></td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li>学弟的cosmos隐私保护项目</li><li>第一篇论文</li><li>科技部编程比赛</li><li>暑期实习准备(Go, 算法等)</li></ul><p>三月 </p><ul><li><input checked="" disabled="" type="checkbox"> <p>3-3 ~ 3-7 cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></p></li><li><input checked="" disabled="" type="checkbox"> <p>3-8 ~ 3-20 科技部编程比赛项目实现(使用cosmos)</p></li><li><input disabled="" type="checkbox"> <p>3-20~3-31 Go公链实现项目</p></li><li><input disabled="" type="checkbox"> <p>确定研究主方向,第一篇论文初稿与老师讨论</p></li></ul><p>四月 主要准备算法与Go后端框架的学习</p><p>四五月中要好好准备六级, 这次要过.</p><p>五月~七月 算法、面试准备</p><p><strong>走go开发, 有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input disabled="" type="checkbox"> <p>英语</p></li><li><input checked="" disabled="" type="checkbox"> <p>leetcode一题解 + 一题</p></li><li><input checked="" disabled="" type="checkbox"> <p>机器学习复习 P8</p></li><li><input checked="" disabled="" type="checkbox"> <p>论文p11</p></li><li><input checked="" disabled="" type="checkbox"> <p>go小test</p></li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;go学习体系 go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;区块链公链项目&lt;/td&gt;
&lt;td&gt;论文一周两篇细读,每个月尝试写一篇&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;区块链框架Cosmos&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;分布式课程论文&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;英文视频学习&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;7月暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>5-最长回文子串</title>
    <link href="https://xwjahahahaha.github.io/2021/03/23/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/5-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <id>https://xwjahahahaha.github.io/2021/03/23/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/5-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</id>
    <published>2021-03-23T04:51:42.000Z</published>
    <updated>2021-03-24T00:45:43.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h4 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">5. 最长回文子串</a></h4><p>难度中等</p><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p> <a id="more"></a><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s &#x3D; &quot;babad&quot;</span><br><span class="line">输出：&quot;bab&quot;</span><br><span class="line">解释：&quot;aba&quot; 同样是符合题意的答案。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s &#x3D; &quot;cbbd&quot;</span><br><span class="line">输出：&quot;bb&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s &#x3D; &quot;a&quot;</span><br><span class="line">输出：&quot;a&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s &#x3D; &quot;ac&quot;</span><br><span class="line">输出：&quot;a&quot;</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 仅由数字和英文字母（大写和/或小写）组成</li></ul><h2 id="解题思路及代码"><a href="#解题思路及代码" class="headerlink" title="解题思路及代码"></a>解题思路及代码</h2><p>此题目视频题解很详细,建议看视频</p><h3 id="方法一-动态规划"><a href="#方法一-动态规划" class="headerlink" title="方法一:动态规划"></a>方法一:动态规划</h3><p>时间复杂度O(n^2^), 空间复杂度(n^2^)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态规划</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestPalindrome</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line">    width, maxLen := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    maxI := <span class="number">0</span></span><br><span class="line">    dp := <span class="built_in">make</span>([][]<span class="keyword">int</span>, n)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        dp[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, n)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 状态转移</span></span><br><span class="line">    <span class="comment">// dp(i, j) = dp(i+1, j-1) &amp;&amp; s[i] == s[j]</span></span><br><span class="line">    <span class="comment">// 注意: 此题的状态转移必须从短串向大串才能可以</span></span><br><span class="line">    <span class="comment">// 从二维数组来看,[i+1][j-1]必须先知道当前数组位置其下右位置的数才能填充此位置,所以需要按列遍历!</span></span><br><span class="line">    <span class="keyword">for</span> j:=<span class="number">0</span>; j&lt;n; j++&#123;</span><br><span class="line">        <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;=j; i++&#123;</span><br><span class="line">            <span class="keyword">if</span> i == j &#123;         <span class="comment">// 长度为1,单个字母直接赋值为true</span></span><br><span class="line">                dp[i][j] = <span class="number">1</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> i+<span class="number">1</span> == j &#123; <span class="comment">// 长度为2,两个字母,检查是否相同</span></span><br><span class="line">                <span class="keyword">if</span> s[i] == s[j] &#123;</span><br><span class="line">                    dp[i][j] = <span class="number">1</span></span><br><span class="line">                &#125;           </span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;             <span class="comment">// 长度&gt;2,状态转移</span></span><br><span class="line">                <span class="keyword">if</span> s[i] == s[j] &#123;</span><br><span class="line">                    dp[i][j] = dp[i+<span class="number">1</span>][j<span class="number">-1</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 比较长度</span></span><br><span class="line">            width = j-i+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> dp[i][j] == <span class="number">1</span> &amp;&amp; width &gt; maxLen &#123;</span><br><span class="line">                maxI = i</span><br><span class="line">                maxLen = width</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s[maxI:maxI+maxLen]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二-中心拓展方法"><a href="#方法二-中心拓展方法" class="headerlink" title="方法二:中心拓展方法"></a>方法二:中心拓展方法</h3><p>状态转移时,从子串不断向父串拓展,其中<strong>状态转移是连续的</strong>,<strong>一旦子串不满足就不用继续拓展父串了</strong></p><p><em>P</em>(<em>i</em>,<em>j</em>)←<em>P</em>(<em>i</em>+1,<em>j</em>−1)←<em>P</em>(<em>i</em>+2,<em>j</em>−2)←⋯←某一边界情况</p><p>我们可以从每一种边界情况开始「扩展」，也可以得出所有的状态对应的答案</p><p>而边界的情况就是<strong>单字母和双字母(相同)</strong>这两种情况,其实边界问题也就是对应着回文串的中心,这就是中心拓展方法</p><p>时间复杂度O(N^2^) 外层N,拓展最长拓展N次</p><p>空间复杂度O(1)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中心拓展方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestPalindrome</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="comment">// 遍历各个中心</span></span><br><span class="line">    start, maxLen := <span class="number">0</span>, <span class="number">0</span>      <span class="comment">//最大回文子串的起始位和长度</span></span><br><span class="line">    <span class="comment">// 分为两种</span></span><br><span class="line">    <span class="comment">//1.以单个字母为中心 2.以两个相同的字母为中心</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        <span class="comment">// 以单个字母为中心</span></span><br><span class="line">        left_1, right_1 := expandFunc(s, i, i)</span><br><span class="line">        <span class="comment">// 以两个字母位中心</span></span><br><span class="line">        left_2, right_2 := expandFunc(s, i, i+<span class="number">1</span>)</span><br><span class="line">        <span class="comment">// 比较两者长度的最大者</span></span><br><span class="line">        width_1 := right_1 - left_1 + <span class="number">1</span></span><br><span class="line">        width_2 := right_2 - left_2 + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> width_1 &gt; maxLen &#123;</span><br><span class="line">            maxLen = width_1</span><br><span class="line">            start = left_1</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> width_2 &gt; maxLen &#123;</span><br><span class="line">            maxLen = width_2</span><br><span class="line">            start = left_2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s[start:start+maxLen]</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拓展函数</span></span><br><span class="line"><span class="comment">// 返回能拓展的最大长度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">expandFunc</span><span class="params">(s <span class="keyword">string</span>, left, right <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 如果碰到边界或者两边字母不相同就退出</span></span><br><span class="line">    <span class="keyword">for</span> left &gt;=<span class="number">0</span> &amp;&amp; right &lt; <span class="built_in">len</span>(s) &amp;&amp; s[left] == s[right] &#123;</span><br><span class="line">        left --</span><br><span class="line">        right ++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left + <span class="number">1</span>, right <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;h4 id=&quot;5-最长回文子串&quot;&gt;&lt;a href=&quot;#5-最长回文子串&quot; class=&quot;headerlink&quot; title=&quot;5. 最长回文子串&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/longest-palindromic-substring/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;5. 最长回文子串&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;难度中等&lt;/p&gt;
&lt;p&gt;给你一个字符串 &lt;code&gt;s&lt;/code&gt;，找到 &lt;code&gt;s&lt;/code&gt; 中最长的回文子串。&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="leetcode" scheme="https://xwjahahahaha.github.io/categories/technical/leetcode/"/>
    
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>日记_0142</title>
    <link href="https://xwjahahahaha.github.io/2021/03/22/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0142/"/>
    <id>https://xwjahahahaha.github.io/2021/03/22/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0142/</id>
    <published>2021-03-22T02:21:53.000Z</published>
    <updated>2021-03-25T01:29:20.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>英语</th><th>开发</th><th>项目</th><th><font color='red'>科研</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语单词</strong></td><td><strong>go学习体系 go书看完</strong></td><td>区块链公链项目</td><td>论文一周两篇细读,每个月尝试写一篇</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td>语法课看完</td><td>区块链框架Cosmos</td><td>金窝窝项目需求准备cosmos</td><td>分布式课程论文</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>③</td><td>英文视频学习</td><td>Linux学完</td><td>本科毕业设计</td><td></td><td>为<strong>7月暑期实习</strong>做准备</td></tr><tr><td>④</td><td><font color='red'>六级</font></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td></td><td></td></tr><tr><td>⑤</td><td></td><td></td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li>学弟的cosmos隐私保护项目</li><li>第一篇论文</li><li>科技部编程比赛</li><li>暑期实习准备(Go, 算法等)</li></ul><p>三月 </p><ul><li><input checked="" disabled="" type="checkbox"> <p>3-3 ~ 3-7 cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></p></li><li><input checked="" disabled="" type="checkbox"> <p>3-8 ~ 3-20 科技部编程比赛项目实现(使用cosmos)</p></li><li><input disabled="" type="checkbox"> <p>3-20~3-31 Go公链实现项目</p></li><li><input disabled="" type="checkbox"> <p>确定研究主方向,第一篇论文初稿与老师讨论</p></li></ul><p>四月 主要准备算法与Go后端框架的学习</p><p>四五月中要好好准备六级, 这次要过.</p><p>五月~七月 算法、面试准备</p><p><strong>走go开发, 有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> 英语70词 + 并列句 P7未完待续</li><li><input checked="" disabled="" type="checkbox"> leetcode1题一种解法</li><li><input checked="" disabled="" type="checkbox"> 论文</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;go学习体系 go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;区块链公链项目&lt;/td&gt;
&lt;td&gt;论文一周两篇细读,每个月尝试写一篇&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;区块链框架Cosmos&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;分布式课程论文&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;英文视频学习&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;7月暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>3-无重复字符的最长子串</title>
    <link href="https://xwjahahahaha.github.io/2021/03/21/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
    <id>https://xwjahahahaha.github.io/2021/03/21/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</id>
    <published>2021-03-21T03:08:13.000Z</published>
    <updated>2021-03-21T03:24:07.248Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h4 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">3. 无重复字符的最长子串</a></h4><p>难度中等</p><p>给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><a id="more"></a> <p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;&quot;</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 104</code></li><li><code>s</code> 由英文字母、数字、符号和空格组成</li></ul><h2 id="解题思路及代码"><a href="#解题思路及代码" class="headerlink" title="解题思路及代码"></a>解题思路及代码</h2><p>方法: ==<strong>滑动窗口</strong>==</p><p><strong>==涉及子串考虑滑动窗口==</strong></p><p>我们不妨以示例一中的字符串  abcabcbb 为例，找出<strong>从每一个字符开始的，不包含重复字符的最长子串</strong>，那么其中最长的那个字符串即为答案。对于示例一中的字符串，我们列举出这些结果，其中括号中表示选中的字符以及最长的字符串：</p><p>以  (a)bcabcbb 开始的最长字符串为  (abc)abcbb}(abc)abcbb；<br>以  a(b)cabcbb 开始的最长字符串为  a(bca)bcbb}a(bca)bcbb；<br>以  ab(c)abcbb 开始的最长字符串为  ab(cab)cbb}ab(cab)cbb；<br>以  abc(a)bcbb 开始的最长字符串为  abc(abc)bb}abc(abc)bb；<br>以  abca(b)cbb 开始的最长字符串为  abca(bc)bb}abca(bc)bb；<br>以  abcab(c)bb 开始的最长字符串为  abcab(cb)b}abcab(cb)b；<br>以  abcabc(b)b 开始的最长字符串为  abcabc(b)b}abcabc(b)b；<br>以  abcabcb(b) 开始的最长字符串为  abcabcb(b)}abcabcb(b)。</p><p>发现了什么？如果我们依次递增地枚举子串的起始位置，那么子串的结束位置也是递增的！</p><p><strong>==选择第k个位置作为起始的位置, 设当前情况下不重复最长连续字符子串的结束位置为rk, 那么当选择k+1作为下一个起始位置时,[k+1, rk]子串一定是不重复的!所以只需要继续向后延伸即可(移动rk)==</strong></p><p><strong>==滑动窗口:左少右多,中间满足,不断移动==</strong></p><p>步骤:</p><ul><li><p>我们使用两个指针表示字符串中的某个子串（或窗口）的左右边界，其中左指针代表着上文中「枚举子串的起始位置」，而右指针即为上文中的 rk；</p></li><li><p>在每一步的操作中，我们会将左指针向右移动一格，表示 我们开始枚举<strong>下一个字符作为起始位置</strong>，然后我们可以不断地向右移动右指针，但需要保证这两个指针对应的子串中没有重复的字符。在移动结束后，这个子串就对应着 <strong>以左指针开始的，不包含重复字符的最长子串</strong>。我们记录下这个子串的长度；</p></li><li><p>在枚举结束后，我们找到的最长的子串的长度即为答案。</p></li></ul><p>使用数据结构判断<strong>是否有重复字符</strong> =&gt; 散列表 map</p><p>==<strong>题目看到重复/统计/次数 =&gt; 散列表 key为字母,value为次数</strong>== </p><blockquote><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/wu-zhong-fu-zi-fu-de-zui-chang-zi-chuan-by-leetc-2/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/wu-zhong-fu-zi-fu-de-zui-chang-zi-chuan-by-leetc-2/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><p>时间复杂度: O(N)</p><p>空间复杂度:O(M(所有字母集的个数))</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 滑动窗口 + 散列表判断重复</span></span><br><span class="line"><span class="comment">//start表示窗口起始位置</span></span><br><span class="line"><span class="comment">//over表示窗口结束位置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    length := <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="comment">// -1 代表字符串左侧边界(还未开始)</span></span><br><span class="line">    start, over := <span class="number">0</span>, <span class="number">-1</span></span><br><span class="line">    <span class="comment">// width当前起始位start的极大不重复字符串长度</span></span><br><span class="line">    <span class="comment">// 全局最大长度</span></span><br><span class="line">    width, maxLen := <span class="number">0</span>, <span class="number">0</span>   </span><br><span class="line">    <span class="comment">// 判断重复</span></span><br><span class="line">    existMap := <span class="keyword">map</span>[<span class="keyword">byte</span>]<span class="keyword">int</span>&#123;&#125;   </span><br><span class="line">    <span class="comment">//1. 逐个从左侧遍历字母(start)</span></span><br><span class="line">    <span class="keyword">for</span> start &lt; length &#123;</span><br><span class="line">        <span class="comment">//2. 右侧移动</span></span><br><span class="line">        <span class="comment">//3. 每次移动检查是否有重复,有则结束,无则继续</span></span><br><span class="line">        <span class="comment">// over小于边界并且新加入的字符出现次数为0</span></span><br><span class="line">        <span class="keyword">for</span> over + <span class="number">1</span> &lt; length &amp;&amp; existMap[s[over + <span class="number">1</span>]] == <span class="number">0</span> &#123;</span><br><span class="line">            existMap[s[over + <span class="number">1</span>]] = <span class="number">1</span></span><br><span class="line">            over ++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 记录当前极大长度, 比较最大长度</span></span><br><span class="line">        width = over - start + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> width &gt; maxLen &#123;</span><br><span class="line">            maxLen = width</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// start向右移动一个位置</span></span><br><span class="line">        start ++</span><br><span class="line">        <span class="comment">// start起始位置每移动一次就删除掉上个字母的存在记录</span></span><br><span class="line">        existMap[s[start<span class="number">-1</span>]] = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLen</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;h4 id=&quot;3-无重复字符的最长子串&quot;&gt;&lt;a href=&quot;#3-无重复字符的最长子串&quot; class=&quot;headerlink&quot; title=&quot;3. 无重复字符的最长子串&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;3. 无重复字符的最长子串&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;难度中等&lt;/p&gt;
&lt;p&gt;给定一个字符串，请你找出其中不含有重复字符的 &lt;strong&gt;最长子串&lt;/strong&gt; 的长度。&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="leetcode" scheme="https://xwjahahahaha.github.io/categories/technical/leetcode/"/>
    
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>日记_0141</title>
    <link href="https://xwjahahahaha.github.io/2021/03/21/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0141/"/>
    <id>https://xwjahahahaha.github.io/2021/03/21/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0141/</id>
    <published>2021-03-21T00:23:23.000Z</published>
    <updated>2021-03-22T02:21:36.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>英语</th><th>开发</th><th>项目</th><th><font color='red'>科研</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语单词</strong></td><td><strong>go学习体系 go书看完</strong></td><td>区块链公链项目</td><td>论文一周两篇细读,每个月尝试写一篇</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td>语法课看完</td><td>区块链框架Cosmos</td><td>金窝窝项目需求准备cosmos</td><td>分布式课程论文</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>③</td><td>英文视频学习</td><td>Linux学完</td><td>本科毕业设计</td><td></td><td>为<strong>7月暑期实习</strong>做准备</td></tr><tr><td>④</td><td><font color='red'>六级</font></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td></td><td></td></tr><tr><td>⑤</td><td></td><td></td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li><li><input disabled="" type="checkbox"> Federated Machine Learning: Concept and Applications</li><li><input disabled="" type="checkbox"> Blockchained On-Device Federated Learning</li><li><input disabled="" type="checkbox"> DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li>学弟的cosmos隐私保护项目</li><li>第一篇论文</li><li>科技部编程比赛</li><li>暑期实习准备(Go, 算法等)</li></ul><p>三月 </p><ul><li><input checked="" disabled="" type="checkbox"> <p>3-3 ~ 3-7 cosmos项目架构熟悉,<del>做完全部的案例</del>,<del>并且熟悉SDK</del></p></li><li><input checked="" disabled="" type="checkbox"> <p>3-8 ~ 3-20 科技部编程比赛项目实现(使用cosmos)</p></li><li><input disabled="" type="checkbox"> <p>3-20~3-31 Go公链实现项目</p></li><li><input disabled="" type="checkbox"> <p>确定研究主方向,第一篇论文初稿与老师讨论</p></li></ul><p>四月 主要准备算法与Go后端框架的学习</p><p>四五月中要好好准备六级, 这次要过.</p><p>五月~七月 算法、面试准备</p><p><strong>走go开发, 有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> <p>英语70词</p></li><li><input checked="" disabled="" type="checkbox"> <p>leetcode一题</p></li><li><input checked="" disabled="" type="checkbox"> <p>联邦学习论文=&gt; p5</p></li><li><input checked="" disabled="" type="checkbox"> <p>go语言=&gt; p39</p></li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语单词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;go学习体系 go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;区块链公链项目&lt;/td&gt;
&lt;td&gt;论文一周两篇细读,每个月尝试写一篇&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;区块链框架Cosmos&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;分布式课程论文&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;英文视频学习&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;7月暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《Federated_Machine_Learning:Concept_and_Applications》</title>
    <link href="https://xwjahahahaha.github.io/2021/03/20/%E7%9F%A5%E8%AF%86%E8%B4%B4/%E8%AE%BA%E6%96%87/%E3%80%8AFederated-Machine-Learning-Concept-and-Applications%E3%80%8B/"/>
    <id>https://xwjahahahaha.github.io/2021/03/20/%E7%9F%A5%E8%AF%86%E8%B4%B4/%E8%AE%BA%E6%96%87/%E3%80%8AFederated-Machine-Learning-Concept-and-Applications%E3%80%8B/</id>
    <published>2021-03-20T07:41:05.000Z</published>
    <updated>2021-03-24T14:07:30.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《Federated-Machine-Learning-Concept-and-Applications》"><a href="#《Federated-Machine-Learning-Concept-and-Applications》" class="headerlink" title="《Federated_Machine_Learning:Concept_and_Applications》"></a>《Federated_Machine_Learning:Concept_and_Applications》</h1><p>《联邦学习的概念和应用》论文的学习</p><h1 id="一、基本信息"><a href="#一、基本信息" class="headerlink" title="一、基本信息"></a>一、基本信息</h1><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/qSQV3b.png" alt="qSQV3b"></p><a id="more"></a><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念:"></a>基本概念:</h2><h3 id="Honest-but-Curious-HBC"><a href="#Honest-but-Curious-HBC" class="headerlink" title="Honest-but-Curious(HBC)"></a><strong>Honest-but-Curious(HBC)</strong></h3><p>(1)节点将不会了解到关于数据集合的任何有用信息</p><p>(2)节点可以被赋予搜索集合的权利并将适当的(加密的)文档返回给其他节点的能力。</p><h3 id="同态加密"><a href="#同态加密" class="headerlink" title="同态加密"></a>同态加密</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>如果我们有一个加密函数 <em>f</em> , 把明文A变成密文A’, 把明文B变成密文B’，也就是说<em>f</em>(A) = A’ ，<em>f</em>(B) = B’ 。另外我们还有一个解密函数$f^{-1}$，能够将 <em>f</em> 加密后的密文解密成加密前的明文。对于一般的加密函数，如果我们将A’和B’相加，得到C’。我们用$f^{-1}$对C’进行解密得到的结果一般是毫无意义的乱码。</p><p>但是，如果 <em>f</em> 是个可以进行同态加密的加密函数， 我们对C’使用$f^{-1}$</p><p>进行解密得到结果C， 这时候的C = A + B。这样，<font color='red'><strong>数据处理权与数据所有权可以分离，这样企业可以防止自身数据泄露的同时，利用云服务的算力。</strong>    </font></p><h4 id="同态分类"><a href="#同态分类" class="headerlink" title="同态分类"></a>同态分类</h4><p>a) 如果满足 <em>f</em>(A)+f(B)=<em>f</em>(A+B)， 我们将这种加密函数叫做加法同态<br>b) 如果满足 <em>f</em>(A)×f(B)=<em>f</em>(A×B)， 我们将这种加密函数叫做乘法同态。</p><p>如果一个加密函数<em>f</em>只满足<strong>加法同态</strong>，就只能进行<strong>加减法运算</strong>；</p><p>如果一个加密函数<em>f</em>只满足<strong>乘法同态</strong>，就只能进行<strong>乘除法运算</strong>;</p><p>如果一个加密函数同时满足<strong>加法同态和乘法同态</strong>，称为<font color='red'><strong>全同态加密</strong>    </font>。<strong>那么这个使用这个加密函数完成各种加密后的运算(加减乘除、多项式求值、指数、对数、三角函数)。</strong></p><p>第一个满足加法和乘法同态的同态加密方法直到2009年才由Craig Gentry提出。</p><h4 id="同态加密算法"><a href="#同态加密算法" class="headerlink" title="同态加密算法"></a>同态加密算法</h4><ol><li>RSA 算法对于乘法操作是同态的。</li><li>Paillier 算法则是对加法同态的。</li><li>Gentry 算法则是全同态的</li></ol><h1 id="二、学习记录"><a href="#二、学习记录" class="headerlink" title="二、学习记录"></a>二、学习记录</h1><h2 id="2-1-Introduction"><a href="#2-1-Introduction" class="headerlink" title="2.1 Introduction"></a>2.1 Introduction</h2><p>目前的数据共享两大问题</p><ol><li><p>data exists in the form of isolated islands</p></li><li><p>data privacy and security</p></li></ol><h2 id="2-2-An-overview-of-federated-learning"><a href="#2-2-An-overview-of-federated-learning" class="headerlink" title="2.2 An overview of federated learning"></a>2.2 An overview of federated learning</h2><p>联邦学习的三种框架:</p><ol><li>horizontal federated learning     水平联邦学习</li><li>vertical federated learning         垂直联邦学习</li><li>federated transfer learning       联邦迁移学习</li></ol><h3 id="2-2-1-Definition-of-Federated-Learning"><a href="#2-2-1-Definition-of-Federated-Learning" class="headerlink" title="2.2.1 Definition of Federated Learning"></a>2.2.1 Definition of Federated Learning</h3><p>Define N data owners <code>{F1, . . . FN }</code>, all of whom wish to train a machine-learning model by consolidating their respective data <code>{D1, . . . DN }</code>. A conventional method is to put all data together and use <code>D=D1 ∪ ··· ∪ DN</code>to train a model <strong>M<del>SUM</del></strong>. A federated-learning system is a learning process in which the data owners collaboratively train a model <strong>M<del>FED</del></strong>, in which process any data owner<code>Fi</code>does not expose its data <code>Di</code>to others. In addition, the accuracy of <strong>M<del>FED</del></strong>, denoted as <strong>V<del>FED</del></strong>, should bevery close to the performance of <strong>M<del>SUM</del></strong>, *<em>V<del>SUM</del> *</em>. Formally,let <code>δ</code> be a non-negative real number;</p><p> if <code>|VFED−VSUM |&lt;δ</code>, </p><p>we say that the federated learning algorithm has δ -accuracy loss.</p><p>对于数据的拥有方<code>{F1, . . . FN }</code>, 传统的做法是集合所有的数据训练出模型<strong>M<del>SUM</del></strong>, ==联邦学习系统的训练过程中,所有的数据拥有者<strong>共同</strong>训练一个模型称之为<strong>M<del>FED</del></strong>,在整个训练的过程中,数据的拥有者<code>Fi</code>不会把自己的数据<code>Di</code>给其他人, 此外联邦学习的精准度<strong>V<del>FED</del></strong>表现需要非常接近于传统方式的精准度*<em>V<del>SUM</del> *</em>==, 设<code>δ</code>为一个非负的实数,则有<code>|VFED−VSUM |&lt;δ</code>, 这样我们称之为联邦学习算法有<code>δ</code>精准度的缺失.</p><h3 id="2-2-2-Privacy-of-Federated-Learning"><a href="#2-2-2-Privacy-of-Federated-Learning" class="headerlink" title="2.2.2 Privacy of Federated Learning"></a>2.2.2 Privacy of Federated Learning</h3><p>分析比较联邦学习中不同的隐私保护技术:</p><h4 id="1-SMC-Secure-Multiparty-Computation-安全多方计算"><a href="#1-SMC-Secure-Multiparty-Computation-安全多方计算" class="headerlink" title="1.SMC(Secure Multiparty Computation 安全多方计算)"></a>1.SMC(Secure Multiparty Computation 安全多方计算)</h4><p>安全多方计算包含: 多重部分(multiple parties)和基于良好模拟框架下的<strong>完全零知识隐私保护证明</strong>.这意味着每一个部分都只知道自己的输入与输出是什么,而其他的知识一概不知.</p><p>能够达到完全的零知识证明是最好的期望,但是其通常要求的复杂的计算协议框架可能导致难以高效的实现.在一些主要的场景中,已经给出了安全保证那么部分的透露‘知识’也是可以考虑的.</p><p>在牺牲部分安全性的低安全要求下很可能使用SMC框架去训练机器学习的模型,以此来提高效率.</p><p>除了SMC架构还有MPC协议,MPC协议一般是除去用户暴露的敏感隐私数据.</p><p>这些工作都是基于部分数据能够被加密分享在没有共谋的服务商之间.</p><h4 id="2-Differential-Private-差分隐私"><a href="#2-Differential-Private-差分隐私" class="headerlink" title="2.Differential Private 差分隐私"></a>2.Differential Private 差分隐私</h4><p>差分隐私、k-匿名(k-anonymity)、多样化(Diversification)数据隐私保护方法都包含了<strong>向数据添加噪音</strong>或者<strong>使用更为一般的方法去模糊重要敏感数据属性使得第三方不能够单独的识别出来</strong>,这样让数据不能被修复从而达到保护用户的隐私数据.</p><p>从根本上来说这些方法都需要将数据传输到其他地方,这通常涉及到隐私性与安全性的权衡.</p><h4 id="3-Homomorphic-Encryption-同态加密"><a href="#3-Homomorphic-Encryption-同态加密" class="headerlink" title="3.Homomorphic Encryption 同态加密"></a>3.Homomorphic Encryption 同态加密</h4><p>同态加密通过在机器学习中<strong>对参数进行置换</strong>从而保护隐私数据,与差分隐私不同的是,数据或者模型本身并不会被传递,也不能推测够对方的数据.因此有很小的可能性泄漏原始数据.</p><p>最新的研究是在云上使用同态加密进行集中的训练数据, 此外，同态加密被广泛使用，并且在机器学习算法中需要进行多项式近似来评估非线性函数，从而在准确性和隐私之间进行权衡.</p><h4 id="4-间接数据泄露"><a href="#4-间接数据泄露" class="headerlink" title="4.间接数据泄露"></a>4.间接数据泄露</h4><p>在例如SGD随机梯度下降这样的最优化算法中,联邦学习会可能暴露参数更新时的中间结果.然而在没有安全保障的支持下,当中间结果例如梯度和模型的数据结构一起暴露时,就很可能暴露重要的数据信息.例如图像的像素</p><p>研究人员已经考虑过这样的情况:一个联邦学习系统的成员这样对联邦学习系统进行恶意的攻击:插入一个程序后门学习其他人的数据.</p><p>已有研究表明,在协作学习中不同各方使用的训练数据容易受到“推理攻击”,他们表明，一个敌对的参与者可以推断出成员身份以及与训练数据子集相关的属性。他们也讨论了这种攻击的防范措施.</p><p>在[62]中，作者揭露了与不同方之间的梯度交换相关的潜在安全问题，并提出了梯度下降法的一种安全变体。他们表明，它能容忍一定比例的拜占庭作恶</p><p>研究人员也开始考虑<strong>将区块链作为一个促进联邦学习的平台</strong>。<strong>在[34]中，研究人员考虑了区块链联邦学习(BlockFL)</strong>框架</p><h2 id="2-3-The-Categorization-of-Federated-Learning"><a href="#2-3-The-Categorization-of-Federated-Learning" class="headerlink" title="2.3 The Categorization of Federated Learning"></a>2.3 The Categorization of Federated Learning</h2><p>根据数据的<strong>分布特点</strong>对联邦学习的分类</p><p>矩阵<code>Di</code>代表数据拥有者<code>i</code>的数据,矩阵的行为每个样例,列为属性。同时许多数据集还会有标签lable,我们使用<code>X</code>代表特征空间,<code>Y</code>表示标签空间/集合,同时我们使用<code>I</code>代表样例的ID空间.X,Y,I构建了训练集数据<code>(I,X,Y)</code>.</p><p>The feature <code>X</code>,label <code>Y</code>, and sample Ids <code>I</code>constitute the complete training dataset<code>(I,X,Y)</code></p><p><strong>==根据数据各方的<u>特征和样本空间</u>可能不相同，依据<u>数据在特征和样本ID空间</u>的分布, 我们将联邦学习分类为<u>水平</u>联邦学习(horizontally federated learning)、垂直联合学习(vertically federated learning)和联合迁移学习(federated transfer learning)==</strong>，</p><h3 id="2-3-1-Horizontal-Federated-Learning"><a href="#2-3-1-Horizontal-Federated-Learning" class="headerlink" title="2.3.1 Horizontal Federated Learning"></a>2.3.1 Horizontal Federated Learning</h3><p>水平联邦学习又叫<strong>基于样例的联邦学习</strong>Sample-based federated learning</p><p>特点: ==有相同的特征空间,但是样例空间不同== , 见下图红色区域</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/gAKZl6.png" alt="gAKZl6"></p><p>例如，两个区域银行可能有来自各自地区的非常不同的用户组，并且它们的用户交集非常小。然而，它们的业务非常相似，所以特征空间是相同的.</p><ul><li><p>关于目前水平联邦学习的相关研究:</p><p>[58]的作者提出了一种协作式深度学习方案，其中参与者独立训练，只共享参数更新的子集</p><p>2017年，谷歌为Android手机型号更新提出了水平联邦学习解决方案[41] , 在该框架中，使用安卓手机的单个用户在本地更新模型参数，并将参数上传到Android云，从而与其他数据所有者共同训练集中式模型。</p><p>[9]中还引入了一种安全的聚合方案，以在联邦学习框架下保护聚合用户更新的隐私。</p><p>[51]的作者附加使用同态加密进行模型参数聚合，以提供针对中央服务器的安全性。</p><p>在[60]中，提出了一个多任务风格的联邦学习系统，允许多个站点在共享知识和保持安全性的同时完成独立的任务。他们提出的多任务学习模型也可以解决高通信成本、掉线和容错问题。在[41]中，作者提议构建一个安全的客户机-服务器结构，在该结构中，联邦学习系统按用户划分数据，并允许在客户机设备上构建的模型在服务器站点上协作，以构建一个全局联邦模型。模型的构建过程确保了没有数据泄漏。同样，在[36]中，作者提出了改进通信成本的方法，以促进基于分布在移动客户端的数据的集中式模型的培训。最近，一种被称为深度梯度压缩[39]的压缩方法被提出，以极大地降低大规模分布式训练中的通信带宽.</p></li></ul><p><strong>我们总结水平联邦学习为:</strong></p><p>$$<br>X_i = X_j, Y_i = Y_j, I_i \neq I_j, \forall D_i, D_j, i \neq j<br>$$</p><p><strong>安全定义:</strong></p><p>一般假设建立在诚实的参与节点中,只有服务器能够破坏参与者的隐私.</p><p>最近，另一种考虑恶意用户[29]的安全模型也被提出,但是这给隐私带来了额外的挑战,它在训练结束时,将通用模型和所有模型参数暴露给所有参与者.</p><h3 id="2-3-2-Vertical-Federated-Learning"><a href="#2-3-2-Vertical-Federated-Learning" class="headerlink" title="2.3.2 Vertical Federated Learning"></a>2.3.2 Vertical Federated Learning</h3><p>垂直联邦学习又叫做基于<strong>特征</strong>的联邦学习(feature-based federated learning)</p><p><strong>==适用于两个数据集有相同的样例 ID空间，但特征空间不同的情况==</strong></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/5HZIcn.png" alt="5HZIcn"></p><p>针对<strong>垂直</strong>划分的数据，提出了保护隐私的机器学习算法, 包括合作统计分析[15]，关联规则挖掘[65]，安全线性回归[22,32,55]，分类[16]，梯度下降[68]</p><p>最近，[27,49]的作者提出了一个垂直联邦学习计划,训练一个隐私保护的逻辑回归模型。研究了实体分辨率对学习性能的影响，并对损失函数和梯度函数应用泰勒近似，从而使同态加密能够用于隐私保护计算</p><p>例如，考虑同一城市中的两家不同的公司:一家是银行，另一家是电子商务公司。他们的用户集可能包含该地区的大多数居民;因此，它们的<strong>用户空间的交集很大</strong>。但是，由于银行记录了用户的收支行为和信用评级，电子商务保留了用户的浏览和购买历史，<strong>两者的特征空间有很大的不同</strong>.假设我们希望双方都有一个基于用户和产品信息的产品购买预测模型.</p><p>垂直联合学习是将这些不同的特征聚集起来，并以一种隐私保护的方式计算训练损失和梯度，从而利用来自双方的数据协作构建模型的过程。</p><p>在这样的联邦机制下，参与各方的身份和地位都是相同的，联邦系统帮助每个人建立“共同财富”战略，这就是为什么这个系统被称为联邦学习。因此，在这样一个系统中，我们有:<br>$$<br>X_i \neq X_j, Y_i \neq Y_j, I_i = I_j  , \forall D_i, D_j, i\neq j<br>$$<br><strong>安全定义:</strong></p><p>垂直联合学习系统通常假设参与者是HBC的。</p><p>例如，在两党情况下，两党是不合谋的，最多有一方被对手妥协。安全定义是，对手只能从被破坏的客户端了解数据，而不能从其他客户端了解输入和输出以外的数据。</p><p>为了帮助在双方之间实现安全计算,有时候会引入半成熟的第三方(semi-honest third party STP), 在这种情况下，假定STP不与任何一方串通。SMC为这些协议[25]提供了正式的隐私证明。</p><p>在学习结束时，每一方只持有那些与自己的特征相关的模型参数。因此，在预测时，双方还需要协作来生成输出</p><h3 id="2-3-3-Federated-Transfer-Learning-FTL"><a href="#2-3-3-Federated-Transfer-Learning-FTL" class="headerlink" title="2.3.3 Federated Transfer Learning(FTL)"></a>2.3.3 Federated Transfer Learning(FTL)</h3><p>联邦迁移学习适用于两个数据集不仅在样本上不同，在特征空间上也不同的场景</p><p>考虑两家机构:一家是位于中国的银行，另一家是位于美国的电子商务公司。由于地理上的限制，这两个机构的用户群有一个较小的交叉点。另一方面，由于业务的不同，双方的特征空间只有一小部分重叠</p><p>在这种情况下，迁移学习[50]技术可以被用于在联邦下为整个样本和特征空间提供解决方案</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/JaIL4j.png" alt="JaIL4j"></p><p>特别是，使用有限的共同样本集来学习两个特征空间之间的共同表示，然后应用于只有一侧特征的样本的预测。FTL是对现有联邦学习系统的重要扩展，因为它处理的问题超出了现有联邦学习算法的范围:<br>$$<br>X_i \neq X_j, Y_i \neq Y_j, I_i \neq I_j, \forall D_i,D_j, i \neq j<br>$$<br><strong>安全定义:</strong></p><p>一个迁移联邦学习需要包含两个部分.后面将会详细的介绍,它的协议类似于垂直联邦学习中的协议，在这种情况下，垂直联合学习的安全定义可以在这里扩展.</p><h2 id="2-4-Architecture-for-a-Federated-Learning-System"><a href="#2-4-Architecture-for-a-Federated-Learning-System" class="headerlink" title="2.4 Architecture for a Federated Learning System"></a>2.4 Architecture for a Federated Learning System</h2><p>在本节中，我们将举例说明联邦学习系统的通用架构。请注意，<strong>水平和垂直联邦学习系统的架构在设计上是非常不同的</strong>，我们将分别介绍它们</p><h3 id="2-4-1-Horizontal-Federated-Learning"><a href="#2-4-1-Horizontal-Federated-Learning" class="headerlink" title="2.4.1 Horizontal Federated Learning"></a>2.4.1 Horizontal Federated Learning</h3><p>一个典型的水平学习框架入下图所示:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/8iRczy.png" alt="8iRczy"></p><p>具有相同数据结构的协作参与者在参数或云服务器的帮助下相对地学习机器学习模型, 一个典型的假设是参与者是诚实的，而服务器是HBC的, 因此,不会允许任何参与者泄露信息到服务器.</p><p>这样的系统一般为以下四个步骤:</p><ol><li>参与者本地计算训练的梯度,在不断变换的梯度选择中使用差分隐私(differential privacy)、加密算法、秘密共享(secert shareing)等技术,然后发送隐藏/加密后的数据给服务器.</li><li>服务器进行安全聚合函数并且不需要了解参与者的信息,也难以了解</li><li>服务器返回聚合结果给每个参与者</li><li>参与者根据解密的梯度更新自己的模型</li></ol><p>迭代以上步直到损失函数收敛,完成整个训练的过程.该架构独立于<strong>特定的机器学习算法</strong>(logistic regression, DNN等)，所有参与者将共享最终的模型参数</p><p><strong>安全分析:</strong></p><p>当使用SMC[9]同态加密进行梯度聚合时，证明了上述体系结构对半诚实服务器的数据泄漏具有保护作用</p><p>然而，在另一个安全模型中[29]，它可能在协作学习过程中受到恶意参与者通过训练生成对抗网络(GAN)进行攻击</p><h3 id="2-4-2-Vertical-Federated-Learning"><a href="#2-4-2-Vertical-Federated-Learning" class="headerlink" title="2.4.2 Vertical Federated Learning"></a>2.4.2 Vertical Federated Learning</h3><p>假设公司A和B想联合训练机器学习模型并且他们的商业系统都有自己的数据。另外，B公司也有模型需要预测的标签数据.由于数据隐私和安全的原因，A和B不能直接交换数据。为了训练过程中数据的保密性，第三方合作者C参与其中。</p><p>在此，我们假设合作方C是诚实的，不与A和B双方串通，但A、B是HBC的</p><p>可信的第三方C是一个合理的假设,在实际的环境中可能是有强大信用背书的第三方(例如:政府)或者是一个安全计算节点(例如Intel Software Guard Extensions(SGXs) [7])</p><p>水平联邦学习系统由两个部分组成,如图:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/O1DBic.png" alt="O1DBic"></p><h4 id="部分1-Encrypted-model-alignment"><a href="#部分1-Encrypted-model-alignment" class="headerlink" title="部分1: Encrypted model alignment"></a>部分1: Encrypted model alignment</h4><p>由于两家公司的用户组不相同，系统使用[38,56]中描述的<strong>基于加密的用户ID对齐技术</strong>(encryption-based user ID alignment techniques)来确认双方的普通用户，而A和B不公开各自的数据。在实体对齐期间，系统不会公开彼此不重叠的用户。</p><h4 id="部分2-Encrypted-model-training"><a href="#部分2-Encrypted-model-training" class="headerlink" title="部分2: Encrypted model training"></a>部分2: Encrypted model training</h4><p>在确定公共实体后，我们可以使用这些公共实体的数据来训练机器学习模型。培训过程可以分为以下四个步骤:</p><ol><li><p>合作者/公证人C创建加密对并向a和B发送公钥</p></li><li><p>为了后面的梯度和损失计算,A和B加密和交换中间结果</p></li><li><p>A和B分别计算加密后的梯度并且添加遮照(additional mask).B也会计算加密损失.A和B发送加密的结果给C</p></li><li><p>C解密数据并且发送解密的梯度和损失返回给A和B,A和B去掉梯度上的遮照(unmask)并且随后更新模型的参数.</p></li></ol><p>这里，我们以线性回归和同态加密为例来说明训练过程.为了用梯度下降法训练线性回归模型，我们需要安全计算其损失和梯度.</p><p>假设学习率为<code>η</code>，正则化参数<code>λ</code>，数据集${X_i^A},i\in D_A, {X_i^B, y_i}, i \in D_B\$ <font color='blue'>(B有标签,A没有)</font>并且模型的参数$\Theta _A, \Theta_B$分别关联特征空间$X_i^A,X_i^B$</p><p>训练对象是:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/li4du2.png" alt="li4du2"></p><p>让$u_i^A = \Theta_AX_i^A, u_i^B=\Theta_BX_i^B$,  则加密的损失函数就变成如下:</p><p>$[[L]] = [[\sum_i((u_i^A+u_i^B-y_i))^2 + \frac {\lambda}{2}(\Theta_A^2 + \Theta_B^2) ]]$</p><p>其中，加法同态加密(additive homomorphic encryption, <code>f(a) + f(b) = f(a + b)</code> )记为[[·]]。<font color='blue'> 上面的[[]]就代表经过了加法同态加密</font></p><p>分别设A和B的同态加密后的损失函数为:</p><p>$[[L_A]] = [[\sum_i((u_i^A)^2)+ \frac {\lambda}{2} \Theta^2_A ]]$</p><p>$[[L_B]] = [[\sum_i((u_i^B- y_i)^2 )+ \frac {\lambda}{2} \Theta^2_B ]]$</p><p>并且:</p><p>$[[L_{AB}]] = 2\sum_i(<a href="u_i^B-y_i">[u_i^A]</a>)$</p><p>所以:</p><p>$[[L]] = [[L_A]] + [[L_B]] + [[L_{AB}]]$</p><p><font color='red'>这个其实就是二次方的因式分解 </font></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/LIR1dy.png" alt="LIR1dy"></p><p>同样的,让$[[d_i]] = [[u_i^A]] + [[u_i^B - y_i]]$</p><p>那么就有: </p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/RumtZX.png" alt="RumtZX"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/Pyg6Tr.png" alt="Pyg6Tr"></p><p>表格一与表格二展示了详细的过程:</p><p>表一: 垂直联邦学习的<strong>训练</strong>过程</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/Xfujcl.png" alt="Xfujcl"></p><p>表二:垂直联邦学习的<strong>评估</strong>过程</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/NfXcPe.png" alt="NfXcPe"></p><p>在实体对齐和模型训练过程中，A和B的数据都保存在本地，训练过程中的数据交互不会导致数据隐私泄露</p><p>请注意，潜在的信息泄漏给C可能被认为是隐私侵犯，也可能不被认为是隐私侵犯</p><p>在此案例中,为了在未来阻止C在A和B中学习/获取信息数据,A和B可以通过<strong>添加加密随机掩</strong>码(即表中第三部的RA和RB)计算梯度给C</p><p>所以，双方在联合学习的帮助下合作实现了一个共同模型的训练。因为，在训练过程中，如果在没有隐私约束的情况下，将从一个地方收集的数据联合构建一个模型，那么各方接收到的损失和梯度与他们将接收到的损失和梯度完全相同，即该模型是无损的.</p><p>该模型的有效性取决于加密数据的通信代价和计算代价, 在每一个循环, A和B之间发送的信息与重叠样本的数量成正比。<font color='red'>因此，采用<strong>分布式并行计算技术</strong>可以进一步提高该算法的性能    </font></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;《Federated-Machine-Learning-Concept-and-Applications》&quot;&gt;&lt;a href=&quot;#《Federated-Machine-Learning-Concept-and-Applications》&quot; class=&quot;headerlink&quot; title=&quot;《Federated_Machine_Learning:Concept_and_Applications》&quot;&gt;&lt;/a&gt;《Federated_Machine_Learning:Concept_and_Applications》&lt;/h1&gt;&lt;p&gt;《联邦学习的概念和应用》论文的学习&lt;/p&gt;
&lt;h1 id=&quot;一、基本信息&quot;&gt;&lt;a href=&quot;#一、基本信息&quot; class=&quot;headerlink&quot; title=&quot;一、基本信息&quot;&gt;&lt;/a&gt;一、基本信息&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://xwjpics.gumptlu.work/qinniu_uPic/qSQV3b.png&quot; alt=&quot;qSQV3b&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="knowledge" scheme="https://xwjahahahaha.github.io/categories/knowledge/"/>
    
    <category term="machine_learning" scheme="https://xwjahahahaha.github.io/categories/knowledge/machine-learning/"/>
    
    
    <category term="machine_learning" scheme="https://xwjahahahaha.github.io/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>49-字母异位词分组</title>
    <link href="https://xwjahahahaha.github.io/2021/03/20/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/49-%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/"/>
    <id>https://xwjahahahaha.github.io/2021/03/20/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/49-%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/</id>
    <published>2021-03-20T03:33:17.000Z</published>
    <updated>2021-03-20T05:15:58.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h4 id="49-字母异位词分组"><a href="#49-字母异位词分组" class="headerlink" title="49. 字母异位词分组"></a><a href="https://leetcode-cn.com/problems/group-anagrams/" target="_blank" rel="noopener">49. 字母异位词分组</a></h4><p>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],</span><br><span class="line">  [&quot;nat&quot;,&quot;tan&quot;],</span><br><span class="line">  [&quot;bat&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="解题思路及代码"><a href="#解题思路及代码" class="headerlink" title="解题思路及代码"></a>解题思路及代码</h2><p>视频：<a href="https://leetcode-cn.com/problems/group-anagrams/solution/zi-mu-yi-wei-ci-fen-zu-by-leetcode-solut-gyoc/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/group-anagrams/solution/zi-mu-yi-wei-ci-fen-zu-by-leetcode-solut-gyoc/</a></p><p>==<strong>在异构中寻找相同的点：</strong>==</p><p><strong>1. 异构单词的字母出现次数相同,</strong></p><p><strong>2. 如果排序字母后,每个异构单词都是相同的</strong></p><p><strong>==本题是根据特征进行分类问题,那么就应该想到使用散列表(哈希表)==</strong></p><p>根据第一个特点可以构建唯一字母出现次数字符串,根据第二个特点可以先对单词的字母排序作为key</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：根据排序后的字母顺序构建散列表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">groupAnagrams</span><span class="params">(strs []<span class="keyword">string</span>)</span> [][]<span class="title">string</span></span> &#123;</span><br><span class="line">    resMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span>)</span><br><span class="line">    res := [][]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 1. 遍历数组</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> strs &#123;</span><br><span class="line">        <span class="comment">// 2. 对每个单词的字母排序 =&gt; key (使用sort.Slice)</span></span><br><span class="line">        s := []<span class="keyword">byte</span>(v)</span><br><span class="line">        sort.Slice(s, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> s[i] &lt; s[j] &#125;)</span><br><span class="line">        key := <span class="keyword">string</span>(s)</span><br><span class="line">        <span class="comment">// 3. 相同的集合到value</span></span><br><span class="line">        resMap[key] = <span class="built_in">append</span>(resMap[key], v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4. 格式转换输出</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> resMap&#123;</span><br><span class="line">        res = <span class="built_in">append</span>(res, v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二：构造数量字符串作为key构建散列表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">groupAnagrams</span><span class="params">(strs []<span class="keyword">string</span>)</span> [][]<span class="title">string</span></span> &#123;</span><br><span class="line">    resMap := <span class="keyword">map</span>[[<span class="number">26</span>]<span class="keyword">int</span>][]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 1. 统计单词字母出现数量</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> strs &#123;</span><br><span class="line">        <span class="comment">// 2. 构建数量表达字符串 =&gt; key</span></span><br><span class="line">        key := makeSortedSymbol(v)</span><br><span class="line">        <span class="comment">// 3. 累加相同key的字符串</span></span><br><span class="line">        resMap[key] = <span class="built_in">append</span>(resMap[key], v)</span><br><span class="line">    &#125;</span><br><span class="line">    res := <span class="built_in">make</span>([][]<span class="keyword">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(resMap))</span><br><span class="line">    <span class="comment">// 4. 格式化结果</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> resMap &#123;</span><br><span class="line">        res = <span class="built_in">append</span>(res, v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeSortedSymbol</span><span class="params">(s <span class="keyword">string</span>)</span> [26]<span class="title">int</span></span>&#123;</span><br><span class="line">    cnt := [<span class="number">26</span>]<span class="keyword">int</span>&#123;&#125; </span><br><span class="line">    <span class="keyword">for</span> _, c := <span class="keyword">range</span> s &#123;</span><br><span class="line">        cnt[c - <span class="string">'a'</span>] ++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;h4 id=&quot;49-字母异位词分组&quot;&gt;&lt;a href=&quot;#49-字母异位词分组&quot; class=&quot;headerlink&quot; title=&quot;49. 字母异位词分组&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/group-anagrams/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;49. 字母异位词分组&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入: [&amp;quot;eat&amp;quot;, &amp;quot;tea&amp;quot;, &amp;quot;tan&amp;quot;, &amp;quot;ate&amp;quot;, &amp;quot;nat&amp;quot;, &amp;quot;bat&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&amp;quot;ate&amp;quot;,&amp;quot;eat&amp;quot;,&amp;quot;tea&amp;quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&amp;quot;nat&amp;quot;,&amp;quot;tan&amp;quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&amp;quot;bat&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="leetcode" scheme="https://xwjahahahaha.github.io/categories/technical/leetcode/"/>
    
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>日记_0140</title>
    <link href="https://xwjahahahaha.github.io/2021/03/20/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0140/"/>
    <id>https://xwjahahahaha.github.io/2021/03/20/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0140/</id>
    <published>2021-03-20T01:57:18.000Z</published>
    <updated>2021-03-21T00:22:32.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>英语</th><th>开发</th><th>项目</th><th><font color='red'>科研</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>go学习体系 go书看完</strong></td><td>区块链公链项目</td><td>论文一周两篇细读,每个月尝试写一篇</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td>语法课看完</td><td>区块链框架Cosmos</td><td>金窝窝项目需求准备cosmos</td><td>分布式课程论文</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>③</td><td>英文视频学习</td><td>Linux学完</td><td>本科毕业设计</td><td></td><td>为<strong>7月暑期实习</strong>做准备</td></tr><tr><td>④</td><td><font color='red'>六级</font></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td></td><td></td></tr><tr><td>⑤</td><td></td><td></td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li>学弟的cosmos隐私保护项目</li><li>第一篇论文</li><li>科技部编程比赛</li><li>暑期实习准备(Go, 算法等)</li></ul><p>三月 </p><ul><li><input disabled="" type="checkbox"> <p>3-3 ~ 3-7 cosmos项目架构熟悉,做完全部的案例,并且熟悉SDK</p></li><li><input disabled="" type="checkbox"> <p>3-8 ~ 3-20 科技部编程比赛项目实现(使用cosmos)</p></li><li><input disabled="" type="checkbox"> <p>3-20~3-31 Go公链实现项目</p></li><li><input disabled="" type="checkbox"> <p>确定研究主方向,第一篇论文初稿与老师讨论</p></li></ul><p>四月 主要准备算法与Go后端框架的学习</p><p>四五月中要好好准备六级, 这次要过.</p><p>五月~七月 算法、面试准备</p><p><strong>走go开发, 有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> <p>英语70词 + 两句子 + 并列句子P6结束</p></li><li><input checked="" disabled="" type="checkbox"> <p>leetcode</p></li><li><input checked="" disabled="" type="checkbox"> <p>Advance Go P34结束</p></li><li><input checked="" disabled="" type="checkbox"> <p>联邦学习论文</p></li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;go学习体系 go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;区块链公链项目&lt;/td&gt;
&lt;td&gt;论文一周两篇细读,每个月尝试写一篇&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;区块链框架Cosmos&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;分布式课程论文&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;英文视频学习&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;7月暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>日记_0139</title>
    <link href="https://xwjahahahaha.github.io/2021/03/19/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0139/"/>
    <id>https://xwjahahahaha.github.io/2021/03/19/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0139/</id>
    <published>2021-03-19T00:32:05.000Z</published>
    <updated>2021-03-20T01:57:02.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>英语</th><th>开发</th><th>项目</th><th><font color='red'>科研</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>go学习体系 go书看完</strong></td><td>区块链公链项目</td><td>论文一周两篇细读,每个月尝试写一篇</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td>语法课看完</td><td>区块链框架Cosmos</td><td>金窝窝项目需求准备cosmos</td><td>分布式课程论文</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>③</td><td>英文视频学习</td><td>Linux学完</td><td>本科毕业设计</td><td></td><td>为<strong>7月暑期实习</strong>做准备</td></tr><tr><td>④</td><td><font color='red'>六级</font></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td></td><td></td></tr><tr><td>⑤</td><td></td><td></td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> <p>Cosmos whitepaper</p></li><li><input checked="" disabled="" type="checkbox"> <p>《区块链共识协议综述》</p></li><li><input checked="" disabled="" type="checkbox"> <p>《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</p><p>联邦学习与区块链</p></li><li><input disabled="" type="checkbox"> <p>Federated Machine Learning: Concept and Applications</p></li><li><input disabled="" type="checkbox"> <p>On-Device Federated Learning via Blockchain and its Latency Analysis.</p></li><li><input disabled="" type="checkbox"> <p>DeepChain: Auditable and Privacy-Preserving Deep Learning with Blockchain-based Incentive</p></li><li><input disabled="" type="checkbox"> <p>Decentralizing Privacy: Using Blockchain to Protect Personal Data</p></li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li>学弟的cosmos隐私保护项目</li><li>第一篇论文</li><li>科技部编程比赛</li><li>暑期实习准备(Go, 算法等)</li></ul><p>三月 </p><ul><li><input checked="" disabled="" type="checkbox"> <p>3-3 ~ 3-7 cosmos项目架构熟悉,做完全部的案例,<del>并且熟悉SDK</del></p></li><li><input checked="" disabled="" type="checkbox"> <p>3-8 ~ 3-20 科技部编程比赛项目实现(使用cosmos)</p></li><li><input disabled="" type="checkbox"> <p>3-20~3-31 Go公链实战项目，看论文，数字中国比赛</p></li><li><input disabled="" type="checkbox"> <p>确定研究主方向,第一篇论文初稿与老师讨论</p></li></ul><p>四月 主要准备算法与Go后端框架的学习</p><p>四五月中要好好准备六级, 这次要过.</p><p>五月~七月 算法、面试准备</p><p><strong>走go开发, 有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> <p>英语</p></li><li><input disabled="" type="checkbox"> <p>leetcode</p></li><li><input checked="" disabled="" type="checkbox"> <p>3.9～3.19：院系统开发竞赛结束</p></li><li><input checked="" disabled="" type="checkbox"> <p>部分论文</p></li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2><ul><li>抓紧时间！！信仰无法动摇   </li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;go学习体系 go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;区块链公链项目&lt;/td&gt;
&lt;td&gt;论文一周两篇细读,每个月尝试写一篇&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;区块链框架Cosmos&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;分布式课程论文&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;英文视频学习&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;7月暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>woodpecker啄米鸟医疗</title>
    <link href="https://xwjahahahaha.github.io/2021/03/14/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Cosmos/woodpecker%E5%95%84%E7%B1%B3%E9%B8%9F%E5%8C%BB%E7%96%97/"/>
    <id>https://xwjahahahaha.github.io/2021/03/14/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Cosmos/woodpecker%E5%95%84%E7%B1%B3%E9%B8%9F%E5%8C%BB%E7%96%97/</id>
    <published>2021-03-14T13:52:13.000Z</published>
    <updated>2021-03-19T00:24:45.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="啄木鸟-基于cosmos的电子病历管理系统"><a href="#啄木鸟-基于cosmos的电子病历管理系统" class="headerlink" title="啄木鸟-基于cosmos的电子病历管理系统"></a>啄木鸟-基于cosmos的电子病历管理系统</h1><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/xwjahahahaha/woodpecker.git</span><br><span class="line">starport serve -v</span><br></pre></td></tr></table></figure><a id="more"></a><p>实现链上的电子医疗病历的CRUD， 解决电子病历链上共享与隐私保护。</p><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p><strong>（仓库仅cosmos模块代码，但提供了接口可自行实现前端）</strong></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/tNlRRf.png" alt="tNlRRf"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/xyG4Ay.png" alt="xyG4Ay"></p><p>链上登陆</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/H0ifiT.png" alt="H0ifiT"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/fKMOSG.png" alt="fKMOSG"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/6wvFjD.png" alt="6wvFjD"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/MatrUX.png" alt="MatrUX"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/MXiIV8.png" alt="MXiIV8"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/IhZQmm.png" alt="IhZQmm"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>病历被分为三部分存储Attribute、MedicalHistory、BodyIndex</p><p>hashkey字段为病历唯一key，Attribute、BodyIndex没有创建create直接set即可，所以没有ID（没有创建就是创建，创建过了就是修改）</p><p>MedicalHistory创建需要使用create，其有ID字段，即表示一个病人的病历会有多个</p><h3 id="Attribute"><a href="#Attribute" class="headerlink" title="Attribute"></a>Attribute</h3><h4 id="1-cli客户端"><a href="#1-cli客户端" class="headerlink" title="1.cli客户端"></a>1.cli客户端</h4><h5 id="创建"><a href="#创建" class="headerlink" title="创建:"></a>创建:</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodpecker <span class="built_in">set</span>-attribute [name] [idNumber] [address] [job] [nation] [hashKey] [flags] --from user</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodpecker <span class="built_in">set</span>-attribute xwj 123 cq it china 1902 --from user1 -y</span></span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/Ag8dab.png" alt="Ag8dab"></p><h5 id="查询："><a href="#查询：" class="headerlink" title="查询："></a>查询：</h5><p>all：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli query woodpecker list-attribute</span></span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/pwUJ4H.png" alt="pwUJ4H"></p><p>one：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli query woodpecker list-attribute [hashKey]</span></span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/vH4D7Q.png" alt="vH4D7Q"></p><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodpecker <span class="built_in">set</span>-attribute [name] [idNumber] [address] [job] [nation] [hashKey] [flags] --from user</span></span><br></pre></td></tr></table></figure><p>同创建</p><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodpecker delete-attribute [hashKey]</span></span><br></pre></td></tr></table></figure><h4 id="2-Rest接口"><a href="#2-Rest接口" class="headerlink" title="2.Rest接口"></a>2.Rest接口</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> one</span></span><br><span class="line">your IP:1317/woodpecker/attribute/[hashKey]</span><br><span class="line"><span class="meta">#</span><span class="bash"> all</span></span><br><span class="line">your IP:1317/woodpecker/attribute</span><br></pre></td></tr></table></figure><p>交易通过接口无法签名，可以通过前端js实现<a href="https://github.com/cosmostation/cosmosjs" target="_blank" rel="noopener">cosmosJs</a></p><h3 id="MedicalHistory"><a href="#MedicalHistory" class="headerlink" title="MedicalHistory"></a>MedicalHistory</h3><h4 id="1-cli客户端-1"><a href="#1-cli客户端-1" class="headerlink" title="1.cli客户端"></a>1.cli客户端</h4><h5 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h5><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/fGXayh.png" alt="fGXayh"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodpecker create-medicalHistory 协和医院 2021/03/14 精神科 脑子 小阳 深井冰 放弃治疗 1902 --from user1 -y</span></span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/RWATVn.png" alt="RWATVn"></p><h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h5><h6 id="查询所有人的所有病历"><a href="#查询所有人的所有病历" class="headerlink" title="查询所有人的所有病历"></a>查询所有人的所有病历</h6><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/xxzvdR.png" alt="xxzvdR"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli query woodpecker list-all-medicalHistory</span></span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/kDTyct.png" alt="kDTyct"></p><h6 id="查询一个人的所有病历"><a href="#查询一个人的所有病历" class="headerlink" title="查询一个人的所有病历"></a>查询一个人的所有病历</h6><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/OS8Rzj.png" alt="OS8Rzj"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli query woodpecker list-medicalHistory 1902</span></span><br></pre></td></tr></table></figure><p>1902:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/xTsVU0.png" alt="xTsVU0"></p><p>xwj:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/AM0Byh.png" alt="AM0Byh"></p><h6 id="查询一个人的单个病历"><a href="#查询一个人的单个病历" class="headerlink" title="查询一个人的单个病历"></a>查询一个人的单个病历</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli query woodpecker get-medicalHistory [hashKey] [id]</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli query woodpecker get-medicalHistory 1902 0</span></span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/N7I2Ri.png" alt="N7I2Ri"></p><h5 id="修改-1"><a href="#修改-1" class="headerlink" title="修改"></a>修改</h5><h6 id="修改一个人的某个病历"><a href="#修改一个人的某个病历" class="headerlink" title="修改一个人的某个病历"></a>修改一个人的某个病历</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodpecker <span class="built_in">set</span>-medicalHistory [id]  [medicalInstitutionName] [diagnosisTime] [diagnosisDepartment] [diagnosisType] [diagnosisDoctor] [diagnosisResult] [treatmentOptions] [hashKey] [flags]</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodpecker <span class="built_in">set</span>-medicalHistory 0 北京医院 2021/4/10 骨科 骨质疏松 小阳 骨头坏死 截肢 1902 --from user1 -y</span></span><br></pre></td></tr></table></figure><p>再次查询:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/6uYHfr.png" alt="6uYHfr"></p><h5 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodpecker delete-medicalHistory [id] [hashKey]</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodpecker delete-medicalHistory 4 xwj --from user1 -y</span></span><br></pre></td></tr></table></figure><p>再次查询;</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/KlBMU4.png" alt="KlBMU4"></p><h4 id="2-rest接口测试"><a href="#2-rest接口测试" class="headerlink" title="2.rest接口测试"></a>2.rest接口测试</h4><p>注意：需要交易的方法（创建、修改、删除）都需要本地签名才会生效, 建议前端使用cosmosjs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Then sign this transaction</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NOTE: In a real environment the raw transaction should be signed on the client side. Also the sequence needs to be adjusted, depending on what the query of user2<span class="string">'s account has shown.</span></span></span><br><span class="line">woodpeckercli tx sign unsignedTx.json --from user1 --offline --chain-id namechain --sequence 1 --account-number 0 &gt; signedTx.json</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> And finally broadcast the signed transaction</span></span><br><span class="line">woodpeckercli tx broadcast signedTx.json</span><br></pre></td></tr></table></figure><h5 id="创建-2"><a href="#创建-2" class="headerlink" title="创建"></a>创建</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">URL :</span> <span class="string">IP</span> <span class="string">Address:1317/woodpecker/medicalHistory</span></span><br><span class="line"><span class="string">POST</span></span><br><span class="line"><span class="attr">Data Simple:</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="attr">"base_req":</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">"from":</span> <span class="string">"cosmos15qfsrthwsfu378m5epe2fzggsu5m7r7d0yexep"</span><span class="string">,</span></span><br><span class="line"><span class="attr">"chain_id":</span> <span class="string">"woodpacker"</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">"creator":</span> <span class="string">"cosmos15qfsrthwsfu378m5epe2fzggsu5m7r7d0yexep"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"medicalInstitutionName":</span> <span class="string">"南京和谐"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"diagnosisTime":</span> <span class="string">"2021/08/24"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"diagnosisDepartment":</span> <span class="string">"dkaskd"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"diagnosisType":</span> <span class="string">"脑壳"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"diagnosisDoctor":</span> <span class="string">"小样"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"diagnosisResult":</span> <span class="string">"deal"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"treatmentOptions":</span> <span class="string">"ldsl"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"hash_key":</span> <span class="string">"xwj"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h5><h6 id="查询所有人的所有病历-1"><a href="#查询所有人的所有病历-1" class="headerlink" title="查询所有人的所有病历"></a>查询所有人的所有病历</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">URL:</span> <span class="string">IP</span> <span class="string">Address:1317/woodpecker/medicalHistory</span></span><br><span class="line"><span class="string">GET</span></span><br></pre></td></tr></table></figure><p>result simple:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"height"</span>: <span class="string">"0"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"creator"</span>: <span class="string">"cosmos1r304rwx7z4vh6yz4wkp4utwchg03ymc6rw45je"</span>,</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"0"</span>,</span><br><span class="line">            <span class="attr">"medicalInstitutionName"</span>: <span class="string">"协和医院"</span>,</span><br><span class="line">            <span class="attr">"diagnosisTime"</span>: <span class="string">"2021/03/14"</span>,</span><br><span class="line">            <span class="attr">"diagnosisDepartment"</span>: <span class="string">"精神科"</span>,</span><br><span class="line">            <span class="attr">"diagnosisType"</span>: <span class="string">"脑子"</span>,</span><br><span class="line">            <span class="attr">"diagnosisDoctor"</span>: <span class="string">"小阳"</span>,</span><br><span class="line">            <span class="attr">"diagnosisResult"</span>: <span class="string">"深井冰"</span>,</span><br><span class="line">            <span class="attr">"treatmentOptions"</span>: <span class="string">"放弃治疗"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"creator"</span>: <span class="string">"cosmos1r304rwx7z4vh6yz4wkp4utwchg03ymc6rw45je"</span>,</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="attr">"medicalInstitutionName"</span>: <span class="string">"协和医院"</span>,</span><br><span class="line">            <span class="attr">"diagnosisTime"</span>: <span class="string">"2021/03/14"</span>,</span><br><span class="line">            <span class="attr">"diagnosisDepartment"</span>: <span class="string">"精神科"</span>,</span><br><span class="line">            <span class="attr">"diagnosisType"</span>: <span class="string">"脑子"</span>,</span><br><span class="line">            <span class="attr">"diagnosisDoctor"</span>: <span class="string">"小阳"</span>,</span><br><span class="line">            <span class="attr">"diagnosisResult"</span>: <span class="string">"深井冰"</span>,</span><br><span class="line">            <span class="attr">"treatmentOptions"</span>: <span class="string">"放弃治疗"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="查询一个人的所有病历-1"><a href="#查询一个人的所有病历-1" class="headerlink" title="查询一个人的所有病历"></a>查询一个人的所有病历</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">URL:</span> <span class="string">IP</span> <span class="string">Address:1317/woodpecker/medicalHistory/[hashKey]</span></span><br><span class="line"><span class="string">GET</span></span><br></pre></td></tr></table></figure><h6 id="查询一个人的单个病历-1"><a href="#查询一个人的单个病历-1" class="headerlink" title="查询一个人的单个病历"></a>查询一个人的单个病历</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">URL:</span> <span class="string">IP</span> <span class="string">Address:1317/woodpecker/medicalHistory/[hashKey]/[id]</span></span><br><span class="line"><span class="string">GET</span></span><br></pre></td></tr></table></figure><h5 id="修改-2"><a href="#修改-2" class="headerlink" title="修改"></a>修改</h5><h6 id="修改一个人的某个病历-1"><a href="#修改一个人的某个病历-1" class="headerlink" title="修改一个人的某个病历"></a>修改一个人的某个病历</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">URL:</span> <span class="string">IP</span> <span class="string">Address:1317/woodpecker/medicalHistory</span></span><br><span class="line"><span class="string">PUT</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Data Sample:</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="attr">"base_req":</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">"from":</span> <span class="string">"cosmos1x7acsyd53mmjc3znwt8xw2ju3vpwm6gku7muu0"</span><span class="string">,</span></span><br><span class="line"><span class="attr">"chain_id":</span> <span class="string">"woodpacker"</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">"creator":</span> <span class="string">"cosmos1x7acsyd53mmjc3znwt8xw2ju3vpwm6gku7muu0"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"medicalInstitutionName":</span> <span class="string">"xxxx"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"diagnosisTime":</span> <span class="string">"xxxxxs"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"diagnosisDepartment":</span> <span class="string">"dkaskd"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"diagnosisType":</span> <span class="string">"xxxxx"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"diagnosisDoctor":</span> <span class="string">"小样"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"diagnosisResult":</span> <span class="string">"deal"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"treatmentOptions":</span> <span class="string">"ldsl"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"hash_key":</span> <span class="string">"xwj"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"id":</span> <span class="string">"3"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">URL:</span> <span class="string">IP</span> <span class="string">Address:1317/woodpecker/medicalHistory</span></span><br><span class="line"><span class="string">DELET</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Data Sample:</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="attr">"base_req":</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">"from":</span> <span class="string">"cosmos1x7acsyd53mmjc3znwt8xw2ju3vpwm6gku7muu0"</span><span class="string">,</span></span><br><span class="line"><span class="attr">"chain_id":</span> <span class="string">"woodpacker"</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">"creator":</span> <span class="string">"cosmos1x7acsyd53mmjc3znwt8xw2ju3vpwm6gku7muu0"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"hash_key":</span> <span class="string">"xwj"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"id":</span> <span class="string">"3"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="BodyIndex"><a href="#BodyIndex" class="headerlink" title="BodyIndex"></a>BodyIndex</h3><p>参数较长建议使用文件</p><h4 id="1-cli"><a href="#1-cli" class="headerlink" title="1.cli"></a>1.cli</h4><h5 id="创建-更新"><a href="#创建-更新" class="headerlink" title="创建/更新"></a>创建/更新</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodpecker <span class="built_in">set</span>-bodyIndex [age] [sex] [nation] [weight] [height] [weightIndex] [obesityWaistline] [waistline] [maxBloodPressure] [minBloodPressure] [goodCholesterol] [batCholesterol] [totalCholesterol] [Dyslipidemia] [pvd] [sportActivities] [education] [marry] [income] [sourceCase] [visionBad] [drink] [highBloodPressure] [familialHighBloodPressure] [diabetes] [familialDiabetes] [hepatitis] [familialHepatitis] [chronicFatigue] [alf] [hashKey]</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodepecker <span class="built_in">set</span>-bodyIndex $(&lt;data.txt)</span></span><br></pre></td></tr></table></figure><h5 id="查询-2"><a href="#查询-2" class="headerlink" title="查询"></a>查询</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> all</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli query woodpecker list-bodyIndex</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> one</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli query woodpecker list-bodyIndex [hashKey]</span></span><br></pre></td></tr></table></figure><h5 id="删除-3"><a href="#删除-3" class="headerlink" title="删除"></a>删除</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> woodpeckercli tx woodpecker delete-bodyIndex [hashKey]</span></span><br></pre></td></tr></table></figure><h4 id="2-Rest"><a href="#2-Rest" class="headerlink" title="2.Rest"></a>2.Rest</h4><h5 id="查询-3"><a href="#查询-3" class="headerlink" title="查询"></a>查询</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> all</span></span><br><span class="line">IP:1317/woodpecker/attribute</span><br><span class="line"><span class="meta">#</span><span class="bash"> one</span></span><br><span class="line">IP:1317/woodpecker/attribute/[hashKey]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;啄木鸟-基于cosmos的电子病历管理系统&quot;&gt;&lt;a href=&quot;#啄木鸟-基于cosmos的电子病历管理系统&quot; class=&quot;headerlink&quot; title=&quot;啄木鸟-基于cosmos的电子病历管理系统&quot;&gt;&lt;/a&gt;啄木鸟-基于cosmos的电子病历管理系统&lt;/h1&gt;&lt;h2 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https://github.com/xwjahahahaha/woodpecker.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;starport serve -v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="cosmos" scheme="https://xwjahahahaha.github.io/categories/technical/cosmos/"/>
    
    
    <category term="cosmos" scheme="https://xwjahahahaha.github.io/tags/cosmos/"/>
    
  </entry>
  
  <entry>
    <title>日记_0138</title>
    <link href="https://xwjahahahaha.github.io/2021/03/13/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0138/"/>
    <id>https://xwjahahahaha.github.io/2021/03/13/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0138/</id>
    <published>2021-03-13T00:48:41.000Z</published>
    <updated>2021-03-19T00:51:18.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>英语</th><th>开发</th><th>项目</th><th><font color='red'>科研</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>go学习体系 go书看完</strong></td><td>区块链公链项目</td><td>论文一周两篇细读,每个月尝试写一篇</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td>语法课看完</td><td>区块链框架Cosmos</td><td>金窝窝项目需求准备cosmos</td><td>分布式课程论文</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>③</td><td>英文视频学习</td><td>Linux学完</td><td>本科毕业设计</td><td></td><td>为<strong>7月暑期实习</strong>做准备</td></tr><tr><td>④</td><td><font color='red'>六级</font></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td></td><td></td></tr><tr><td>⑤</td><td></td><td></td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li>学弟的cosmos隐私保护项目</li><li>第一篇论文</li><li>科技部编程比赛</li><li>暑期实习准备(Go, 算法等)</li></ul><p>三月 </p><ul><li><input disabled="" type="checkbox"> <p>3-3 ~ 3-7 cosmos项目架构熟悉,做完全部的案例,并且熟悉SDK</p></li><li><input disabled="" type="checkbox"> <p>3-8 ~ 3-20 科技部编程比赛项目实现(使用cosmos)</p></li><li><input disabled="" type="checkbox"> <p>3-20~3-31 Go公链实现项目</p></li><li><input disabled="" type="checkbox"> <p>确定研究主方向,第一篇论文初稿与老师讨论</p></li></ul><p>四月 主要准备算法与Go后端框架的学习</p><p>四五月中要好好准备六级, 这次要过.</p><p>五月~七月 算法、面试准备</p><p><strong>走go开发, 有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> 英语60词</li><li><input checked="" disabled="" type="checkbox"> 项目开发</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;go学习体系 go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;区块链公链项目&lt;/td&gt;
&lt;td&gt;论文一周两篇细读,每个月尝试写一篇&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;语法课看完&lt;/td&gt;
&lt;td&gt;区块链框架Cosmos&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;分布式课程论文&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;英文视频学习&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;7月暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;font color=&#39;red&#39;&gt;六级&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Go语言-4-其他</title>
    <link href="https://xwjahahahaha.github.io/2021/03/06/%E6%8A%80%E6%9C%AF%E8%B4%B4/GoLang/Go%E8%AF%AD%E8%A8%80-4-%E5%85%B6%E4%BB%96/"/>
    <id>https://xwjahahahaha.github.io/2021/03/06/%E6%8A%80%E6%9C%AF%E8%B4%B4/GoLang/Go%E8%AF%AD%E8%A8%80-4-%E5%85%B6%E4%BB%96/</id>
    <published>2021-03-06T08:43:53.000Z</published>
    <updated>2021-03-06T09:13:56.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Goland-IDE"><a href="#Goland-IDE" class="headerlink" title="Goland IDE"></a>Goland IDE</h1><h2 id="goland无法识别go-mod的依赖包"><a href="#goland无法识别go-mod的依赖包" class="headerlink" title="goland无法识别go mod的依赖包"></a>goland无法识别go mod的依赖包</h2><p>解决方法: 在编辑器设置GOPROXY, 这样goland就会识别索引你项目使用go mod在<code>GOPATH/pkg/mod</code>文件夹下的依赖包</p><a id="more"></a><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/PtyEVd.png" alt="PtyEVd"></p><h2 id="使用go-mod模式导致本地包无法导入问题"><a href="#使用go-mod模式导致本地包无法导入问题" class="headerlink" title="使用go mod模式导致本地包无法导入问题"></a>使用go mod模式导致本地包无法导入问题</h2><p>因为使用go module进行包管理, 所以引用包路径不再是从<code>GOPATH/src</code>开始的相对位置</p><ol><li><p>查看你项目下的go.mod文件</p></li><li><p>第一行的modul名就是你本地原始包的前缀名</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/wfe1hF.png" alt="wfe1hF"></p></li><li><p>修改项目中的引用即可</p><p><code>import &quot;github.com/user/nameservice/[本地包名/路径]&quot;</code></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Goland-IDE&quot;&gt;&lt;a href=&quot;#Goland-IDE&quot; class=&quot;headerlink&quot; title=&quot;Goland IDE&quot;&gt;&lt;/a&gt;Goland IDE&lt;/h1&gt;&lt;h2 id=&quot;goland无法识别go-mod的依赖包&quot;&gt;&lt;a href=&quot;#goland无法识别go-mod的依赖包&quot; class=&quot;headerlink&quot; title=&quot;goland无法识别go mod的依赖包&quot;&gt;&lt;/a&gt;goland无法识别go mod的依赖包&lt;/h2&gt;&lt;p&gt;解决方法: 在编辑器设置GOPROXY, 这样goland就会识别索引你项目使用go mod在&lt;code&gt;GOPATH/pkg/mod&lt;/code&gt;文件夹下的依赖包&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/categories/technical/golang/"/>
    
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>日记_0137</title>
    <link href="https://xwjahahahaha.github.io/2021/03/06/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0137/"/>
    <id>https://xwjahahahaha.github.io/2021/03/06/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0137/</id>
    <published>2021-03-06T01:43:10.000Z</published>
    <updated>2021-03-07T00:48:29.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>英语</th><th>开发</th><th>项目</th><th><font color='red'>科研（No.1）</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>后端：go语言深化，框架gin等</strong>，<strong>go书看完</strong></td><td>区块链公链项目</td><td>论文一周两篇细读,每个月尝试写一篇</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td>英文视频(生活大爆炸开始)</td><td>区块链框架Cosmos</td><td>金窝窝项目需求准备cosmos</td><td>分布式课程论文</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>③</td><td></td><td>Linux学完</td><td>本科毕业设计</td><td></td><td>为<strong>暑期实习</strong>做准备</td></tr><tr><td>④</td><td></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td></td><td></td></tr><tr><td>⑤</td><td></td><td>有时间的话：Java</td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td>代客泊车项目申报书</td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input disabled="" type="checkbox"> <a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7467408" target="_blank" rel="noopener">Blockchains and Smart Contracts for the Internet of Things</a></li><li><input disabled="" type="checkbox"> Where Is Current Research on Blockchain Technology?-A Systematic Review</li><li><input disabled="" type="checkbox"> Blockstack: A Global Naming and Storage System Secured by Blockchains</li><li><input disabled="" type="checkbox"> Plasma </li><li><input disabled="" type="checkbox"> <a href="https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md" target="_blank" rel="noopener">EOS.IO Technical White Paper v2</a></li><li><input disabled="" type="checkbox"> Ocean Protocol: Tools for the Web3 Data Economy</li><li><input disabled="" type="checkbox"> Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts</li><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input disabled="" type="checkbox"> Decentralizing Privacy: Using Blockchain to Protect Personal Data</li><li><input disabled="" type="checkbox"> 《 Tendermint：关于拜占庭容错共识算法的最新进展》</li><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input disabled="" type="checkbox"> The Ripple Protocol Consensus Algorithm</li><li><input disabled="" type="checkbox"> <a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="noopener">以太坊白皮书</a></li><li><input disabled="" type="checkbox"> Hyperledger Fabric: A Distributed Operating System for Permissioned Blockchains</li><li><input disabled="" type="checkbox"> Secure Data Storage and Recovery in IndustrialBlockchain Network Environments</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li>学弟的cosmos隐私保护项目</li><li>第一篇论文</li><li>科技部编程比赛</li><li>暑期实习准备(Go, 算法等)</li></ul><p>三月 </p><ul><li><input disabled="" type="checkbox"> <p>3-3 ~ 3-7 cosmos项目架构熟悉,做完全部的案例,并且熟悉SDK</p></li><li><input disabled="" type="checkbox"> <p>3-8 ~ 3-20 科技部编程比赛项目实现(使用cosmos)</p></li><li><input disabled="" type="checkbox"> <p>3-20~3-31 Go公链实现项目</p></li><li><input disabled="" type="checkbox"> <p>确定研究主方向,第一篇论文初稿与老师讨论</p></li></ul><p>四月 主要准备算法与Go后端框架的学习</p><p>五月~七月 算法、面试准备</p><p><strong>走go开发, 有底层技术才有实现想法的权利</strong></p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> 英语60词 + 语法课复习</li><li><input checked="" disabled="" type="checkbox"> leetcode面试题库一题 (一种解法)</li><li><input checked="" disabled="" type="checkbox"> cosmos</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2><ul><li>时间把握还不够!</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研（No.1）&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;后端：go语言深化，框架gin等&lt;/strong&gt;，&lt;strong&gt;go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;区块链公链项目&lt;/td&gt;
&lt;td&gt;论文一周两篇细读,每个月尝试写一篇&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;英文视频(生活大爆炸开始)&lt;/td&gt;
&lt;td&gt;区块链框架Cosmos&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;分布式课程论文&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;为&lt;strong&gt;暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;有时间的话：Java&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;代客泊车项目申报书&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>golang坑与注意点</title>
    <link href="https://xwjahahahaha.github.io/2021/03/05/%E6%8A%80%E6%9C%AF%E8%B4%B4/GoLang/golang%E5%9D%91%E4%B8%8E%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
    <id>https://xwjahahahaha.github.io/2021/03/05/%E6%8A%80%E6%9C%AF%E8%B4%B4/GoLang/golang%E5%9D%91%E4%B8%8E%E6%B3%A8%E6%84%8F%E7%82%B9/</id>
    <published>2021-03-05T12:30:01.000Z</published>
    <updated>2021-03-05T12:40:26.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><a id="more"></a><h2 id="append陷阱"><a href="#append陷阱" class="headerlink" title="append陷阱"></a>append陷阱</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array =[]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;<span class="comment">// len:5,capacity:5</span></span><br><span class="line"><span class="keyword">var</span> newArray=array[<span class="number">1</span>:<span class="number">3</span>]<span class="comment">// len:2,capacity:4   (已经使用了两个位置，所以还空两位置可以append)</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>,array) <span class="comment">//0xc420098000</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>,newArray) <span class="comment">//0xc420098008 可以看到newArray的地址指向的是array[1]的地址，即他们底层使用的还是一个数组</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,array) <span class="comment">//[1 2 3 4 5]</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,newArray) <span class="comment">//[2 3]</span></span><br><span class="line"></span><br><span class="line">newArray[<span class="number">1</span>]=<span class="number">9</span> <span class="comment">//更改后array、newArray都改变了</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,array) <span class="comment">// [1 2 9 4 5]</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,newArray) <span class="comment">// [2 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重点1 : 对切片append可能会导致切片引用的数组改变</span></span><br><span class="line">newArray=<span class="built_in">append</span>(newArray,<span class="number">11</span>,<span class="number">12</span>)<span class="comment">//append 操作之后，array的len和capacity不变,newArray的len变为4，capacity：4。因为这是对newArray的操作</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,array) <span class="comment">//[1 2 9 11 12] //注意对newArray做append操作之后，array[3],array[4]的值也发生了改变</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,newArray) <span class="comment">//[2 9 11 12]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重点2 : append扩容可能会导致原底层数组的改变! </span></span><br><span class="line">newArray=<span class="built_in">append</span>(newArray,<span class="number">13</span>,<span class="number">14</span>) <span class="comment">// 因为newArray的len已经等于capacity，所以再次append就会超过capacity值，</span></span><br><span class="line"><span class="comment">// 此时，append函数内部会创建一个新的底层数组（是一个扩容过的数组），并将array指向的底层数组拷贝过去，然后在追加新的值。</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>,array) <span class="comment">//0xc420098000</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>,newArray) <span class="comment">//0xc4200a0000</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,array) <span class="comment">//[1 2 9 11 12]</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>,newArray) <span class="comment">//[2 9 11 12 13 14]  他两已经不再是指向同一个底层数组y了</span></span><br></pre></td></tr></table></figure><p>==<strong>append操作可能会导致原本使用同一个底层数组的两个Slice变量变为使用不同的底层数组。</strong>==</p><p>==<strong>所以, 切片在作为函数传参时,要注意在函数中不能append越界</strong>==</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;headerlink&quot; title=&quot;基础语法&quot;&gt;&lt;/a&gt;基础语法&lt;/h1&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="Golang" scheme="https://xwjahahahaha.github.io/categories/technical/Golang/"/>
    
    
    <category term="golang" scheme="https://xwjahahahaha.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>日记_0136</title>
    <link href="https://xwjahahahaha.github.io/2021/03/05/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0136/"/>
    <id>https://xwjahahahaha.github.io/2021/03/05/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/%E6%97%A5%E8%AE%B0/2021-03/%E6%97%A5%E8%AE%B0-0136/</id>
    <published>2021-03-05T06:58:26.000Z</published>
    <updated>2021-03-05T16:42:21.415Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><table><thead><tr><th>任务</th><th>英语</th><th>开发</th><th>项目</th><th><font color='red'>科研（No.1）</font></th><th>预备事宜</th></tr></thead><tbody><tr><td>①</td><td><strong>英语50词</strong></td><td><strong>后端：go语言深化，框架gin等</strong>，<strong>go书看完</strong></td><td>区块链公链项目</td><td>论文一周两篇细读,每个月尝试写一篇</td><td>准备参加<strong>编程类的比赛或者拿编程证书</strong></td></tr><tr><td>②</td><td>英文视频(生活大爆炸开始)</td><td>区块链框架Cosmos</td><td>金窝窝项目需求准备cosmos</td><td>分布式课程论文</td><td>看比赛资讯，准备<strong>区块链比赛</strong></td></tr><tr><td>③</td><td></td><td>Linux学完</td><td>本科毕业设计</td><td></td><td>为下学期的<strong>暑期实习</strong>做准备</td></tr><tr><td>④</td><td></td><td>看源码Fabric、以太坊、比特币等</td><td>科技部编程比赛</td><td></td><td></td></tr><tr><td>⑤</td><td></td><td>有时间的话：Java</td><td>微信小程序前端uni-app</td><td></td><td></td></tr><tr><td>⑥</td><td></td><td></td><td>代客泊车项目申报书</td><td></td><td></td></tr></tbody></table><a id="more"></a><h2 id="论文阅读梳理："><a href="#论文阅读梳理：" class="headerlink" title="论文阅读梳理："></a>论文阅读梳理：</h2><h3 id="粗读："><a href="#粗读：" class="headerlink" title="粗读："></a>粗读：</h3><ul><li><input disabled="" type="checkbox"> <a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7467408" target="_blank" rel="noopener">Blockchains and Smart Contracts for the Internet of Things</a></li><li><input disabled="" type="checkbox"> Where Is Current Research on Blockchain Technology?-A Systematic Review</li><li><input disabled="" type="checkbox"> Blockstack: A Global Naming and Storage System Secured by Blockchains</li><li><input disabled="" type="checkbox"> Plasma </li><li><input disabled="" type="checkbox"> <a href="https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md" target="_blank" rel="noopener">EOS.IO Technical White Paper v2</a></li><li><input disabled="" type="checkbox"> Ocean Protocol: Tools for the Web3 Data Economy</li><li><input disabled="" type="checkbox"> Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts</li><li><input checked="" disabled="" type="checkbox"> 网上资料学习:闪电网络</li></ul><h3 id="细读："><a href="#细读：" class="headerlink" title="细读："></a>细读：</h3><ul><li><input disabled="" type="checkbox"> Decentralizing Privacy: Using Blockchain to Protect Personal Data</li><li><input disabled="" type="checkbox"> 《 Tendermint：关于拜占庭容错共识算法的最新进展》</li><li><input checked="" disabled="" type="checkbox"> Cosmos whitepaper</li><li><input disabled="" type="checkbox"> The Ripple Protocol Consensus Algorithm</li><li><input disabled="" type="checkbox"> <a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="noopener">以太坊白皮书</a></li><li><input disabled="" type="checkbox"> Hyperledger Fabric: A Distributed Operating System for Permissioned Blockchains</li><li><input disabled="" type="checkbox"> Secure Data Storage and Recovery in IndustrialBlockchain Network Environments</li><li><input checked="" disabled="" type="checkbox"> 《区块链共识协议综述》</li><li><input checked="" disabled="" type="checkbox"> 《基于区块链技术的车联网高效匿名认证方案_陈葳葳》</li></ul><h2 id="学期规划"><a href="#学期规划" class="headerlink" title="学期规划:"></a>学期规划:</h2><ul><li>学弟的cosmos隐私保护项目</li><li>第一篇论文</li><li>科技部编程比赛</li><li>暑期实习准备(Go, 算法等)</li></ul><p>三月 </p><ul><li><input disabled="" type="checkbox"> <p>3-3 ~ 3-7 cosmos项目架构熟悉,做完全部的案例,并且熟悉SDK</p></li><li><input disabled="" type="checkbox"> <p>3-8 ~ 3-20 科技部编程比赛项目实现(使用cosmos)</p></li><li><input disabled="" type="checkbox"> <p>3-20~3-31 Go公链实现项目</p></li><li><input disabled="" type="checkbox"> <p>确定研究主方向,第一篇论文初稿与老师讨论</p></li></ul><p>四月 主要准备算法与Go后端框架的学习</p><p>五月~七月 算法、面试准备</p><h2 id="今日完成的任务："><a href="#今日完成的任务：" class="headerlink" title="今日完成的任务："></a>今日完成的任务：</h2><ul><li><input checked="" disabled="" type="checkbox"> 英语50词</li><li><input disabled="" type="checkbox"> leetcode一题</li><li><input checked="" disabled="" type="checkbox"> goroutine的复习</li><li><input checked="" disabled="" type="checkbox"> cosmos nameservice项目的学习</li><li><input checked="" disabled="" type="checkbox"> goAdvance 视频课 p28</li><li><input checked="" disabled="" type="checkbox"> 比特币实战P10</li></ul><h2 id="今日自省"><a href="#今日自省" class="headerlink" title="今日自省"></a>今日自省</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;任务&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;开发&lt;/th&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;&lt;font color=&#39;red&#39;&gt;科研（No.1）&lt;/font&gt;&lt;/th&gt;
&lt;th&gt;预备事宜&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;①&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;英语50词&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;后端：go语言深化，框架gin等&lt;/strong&gt;，&lt;strong&gt;go书看完&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;区块链公链项目&lt;/td&gt;
&lt;td&gt;论文一周两篇细读,每个月尝试写一篇&lt;/td&gt;
&lt;td&gt;准备参加&lt;strong&gt;编程类的比赛或者拿编程证书&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;②&lt;/td&gt;
&lt;td&gt;英文视频(生活大爆炸开始)&lt;/td&gt;
&lt;td&gt;区块链框架Cosmos&lt;/td&gt;
&lt;td&gt;金窝窝项目需求准备cosmos&lt;/td&gt;
&lt;td&gt;分布式课程论文&lt;/td&gt;
&lt;td&gt;看比赛资讯，准备&lt;strong&gt;区块链比赛&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;③&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linux学完&lt;/td&gt;
&lt;td&gt;本科毕业设计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;为下学期的&lt;strong&gt;暑期实习&lt;/strong&gt;做准备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;④&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;看源码Fabric、以太坊、比特币等&lt;/td&gt;
&lt;td&gt;科技部编程比赛&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑤&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;有时间的话：Java&lt;/td&gt;
&lt;td&gt;微信小程序前端uni-app&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;⑥&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;代客泊车项目申报书&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/categories/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
    
    <category term="每日一记" scheme="https://xwjahahahaha.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Nameservice测试项目部署</title>
    <link href="https://xwjahahahaha.github.io/2021/03/04/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Cosmos/%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B%E5%BA%93/Nameservice%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    <id>https://xwjahahahaha.github.io/2021/03/04/%E6%8A%80%E6%9C%AF%E8%B4%B4/%E5%8C%BA%E5%9D%97%E9%93%BE/Cosmos/%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B%E5%BA%93/Nameservice%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</id>
    <published>2021-03-04T02:10:48.000Z</published>
    <updated>2021-03-19T00:47:03.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>[TOC]</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h1 id="1-Getting-Started"><a href="#1-Getting-Started" class="headerlink" title="1.Getting Started"></a>1.Getting Started</h1><p>使用<strong>scratch</strong>部署区块链</p><p>项目最后会构建一个Nameservice, 就是一个映射关系 string-&gt;other string(<code>map[string]string</code>)</p><a id="more"></a><p>类似于Namecoin、EN、DNS等,用户创建需要使用的域名</p><p>前置要求:</p><ul><li><a href="https://golang.org/doc/install" target="_blank" rel="noopener"><code>golang</code> &gt;1.15 (opens new window)</a>installed</li><li>Github account and either <a href="https://hub.github.com/" target="_blank" rel="noopener">Github CLI (opens new window)</a>or <a href="https://help.github.com/en/desktop/getting-started-with-github-desktop/installing-github-desktop" target="_blank" rel="noopener">Github Desktop (64-bit required)(opens new window)</a></li><li>Desire to create your own blockchain!</li></ul><ul><li>==starport V0.13.1==注意版本, 可能默认下载的最新版. 各系统下载地址[install Starport (opens new window)](<a href="https://github.com/tendermint/starport/blob/develop/docs/1" target="_blank" rel="noopener">https://github.com/tendermint/starport/blob/develop/docs/1</a> Introduction/2 Install.md).</li></ul><h1 id="2-Application-Goals"><a href="#2-Application-Goals" class="headerlink" title="2.Application Goals"></a>2.Application Goals</h1><p>目标:用户购买域名,系统设置存储对应的value,域名都是最高出价售出</p><p>Here are the modules you will need for the nameservice application:</p><ul><li><p><code>auth</code>: This module defines accounts and fees and gives access to these functionalities to the rest of your application.</p><p><strong>定义账户和费用</strong></p></li><li><p><code>bank</code>: This module enables the application to create and manage tokens and token balances.</p><p><strong>使应用程序管理与创建tokens</strong></p></li><li><p><code>staking</code> : This module enables the application to have validators that people can delegate to.</p><p><strong>使得应用程序实现用户委托代理</strong></p></li><li><p><code>distribution</code> : This module give a functional way to passively distribute rewards between validators and delegators.</p><p><strong>在验证者与代理者之间分配奖励</strong></p></li><li><p><code>slashing</code> : This module disincentivizes people with value staked in the network, ie. Validators.</p><p>*<em>以削减质押金额(例如Validators)来惩罚 *</em></p></li><li><p><code>supply</code> : This module holds the total supply of the chain.</p><p><strong>控制区块链的总供应</strong></p></li><li><p><code>nameservice</code>: This module does not exist yet! It will handle the core logic for the <code>nameservice</code> application you are building. It is the main piece of software you have to work on to build your application.</p><p><strong>nameservice的核心逻辑,由开发人员自己编写</strong></p></li></ul><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>token和用户的状态都已经在auth和bank模块中定义了,所以我们无需操心.</p><p>但是我们需要定义部分特别的与nameservice相关的状态</p><p>在SDK,所有的数据存储在叫做multistore的数据库中(k/v数据库)</p><p>我们使用一个存储域名和其代表的人的映射,这个结构体包含了域名的值、拥有者以及余额</p><h2 id="Messages"><a href="#Messages" class="headerlink" title="Messages"></a>Messages</h2><p>==消息包含在交易中==,它们触发状态交易</p><p>每个模块都定义了一系列的消息和操作它们的方法</p><p>nameservice应用中需要定义的两类基本消息:</p><ul><li><code>MsgSetName</code>: This message allows name owners to set a value for a given name.</li><li><code>MsgBuyName</code>: This message allows accounts to buy a name and become its owner.<ul><li>购买当前的域名,你的价格要比前任支付的价格高才可以,如果该域名之前没有人购买,那么必须支付最小的金额即<code>MinPrice</code></li></ul></li></ul><p>==一般性过程:==</p><ol><li><p>已经打包进区块的交易到达Tendermint节点</p></li><li><p>节点通过ABCI与应用程序cosmos SDK交流,</p></li><li><p>cosmos SDK解码交易获取消息</p></li><li><p>SDK将消息路由到合适的模块去执行,执行遵循<code>Handler</code>(可认为是控制器)中的定义</p></li><li><p><code>Handler</code>运行<code>Keeper</code>(可认为是module)进行数据的更新或删除等操作</p></li></ol><h1 id="3-Start-your-application"><a href="#3-Start-your-application" class="headerlink" title="3.Start your application"></a>3.Start your application</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">starport app github.com/user/nameservice --sdk-version="launchpad"</span><br><span class="line">cd nameservice</span><br></pre></td></tr></table></figure><p>如果你克隆了项目,那么<code>user</code>字段可以换成自己的项目地址</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/iW71tT.png" alt="iW71tT"></p><p>==Tendermint通过来自网络的交易与应用程序交互的接口叫做 =&gt; ABCI==</p><p>结构如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+---------------------+</span><br><span class="line">|                     |</span><br><span class="line">|     Application     |</span><br><span class="line">|                     |</span><br><span class="line">+--------+---+--------+</span><br><span class="line">         ^   |</span><br><span class="line">         |   | ABCI</span><br><span class="line">         |   v</span><br><span class="line">+--------+---+--------+</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">|     Tendermint      |</span><br><span class="line">|                     |</span><br><span class="line">|                     |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure><p><strong>这些接口cosmos SDK都提供了样板文件在<code>basseapp</code>中</strong>,baseapp的作用可见cosmos开发基础.</p><p>在这个案例中可以使用<code>nameservice</code> &amp; <code>NameServiceApp</code>这些types,这些type会嵌入到<code>baseapp</code>中</p><p>baseapp不能够识别用户自定义模块的路由和应用程序中自定义的用户接口, <strong>您的应用程序的主要作用是定义这些路由, 另一个作用是定义初始状态</strong>. 这些都要求在你的应用程序添加模块.</p><p> <code>auth</code>, <code>bank</code>, <code>staking</code>, <code>distribution</code>, <code>slashing</code> and <code>nameservice</code>. The first five already exist, but not the last! 后面需要修改.</p><h1 id="4-Types"><a href="#4-Types" class="headerlink" title="4.Types"></a>4.Types</h1><p>创建<code>whois</code>类型</p><p><code>starport type whois value price</code></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/qP4v1r.png" alt="qP4v1r"></p><p>目前我们只给whois类型添加了两个字段,我们还会对部分自动生成的字段进行修改, 删除<code>ID</code>字段, 代替<code>Creator</code>字段为<code>Owner</code></p><p>脚手架工具为我们自动创建了以下文件:</p><p>在 <code>./x/nameservice/types</code>目录下:</p><p> <code>MsgCreateWhois.go</code>, <code>MsgDeleteWhois.go</code>, <code>MsgSetWhois.go</code>, and <code>TypeWhois.go</code>.</p><h2 id="Whois"><a href="#Whois" class="headerlink" title="Whois"></a>Whois</h2><p>每一个域名都有三个字段</p><ul><li><p>Value - The value that a name resolves to. This is just an arbitrary string, but in the future you can modify this to require it fitting a specific format, such as an IP address, DNS Zone file, or blockchain address.</p><p><strong>域名解析的值,string类型,但是后面可以自己设置为特定的数据类型</strong></p></li><li><p>Owner - The address of the current owner of the name</p><p><strong>域名的主人</strong></p></li><li><p>Price - The price you will need to pay in order to buy the name</p><p><strong>购买的价格</strong></p></li></ul><p>To start your SDK module, define your <code>nameservice.Whois</code> struct in the <code>./x/nameservice/types/TypeWhois.go</code> file:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义最小域名转卖金额</span></span><br><span class="line"><span class="keyword">var</span> MinNamePrice = sdk.Coins&#123;sdk.NewInt64Coin(<span class="string">"nametoken"</span>, <span class="number">1</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Whois <span class="keyword">struct</span> &#123;</span><br><span class="line">Creator sdk.AccAddress <span class="string">`json:"creator" yaml:"creator"`</span></span><br><span class="line">ID      <span class="keyword">string</span>         <span class="string">`json:"id" yaml:"id"`</span></span><br><span class="line">    Value <span class="keyword">string</span> <span class="string">`json:"value" yaml:"value"`</span></span><br><span class="line">    Price <span class="keyword">string</span> <span class="string">`json:"price" yaml:"price"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回一个新的Whois，因为新的域名还没有人购买，所以设置金额为最小</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewWhois</span><span class="params">()</span> <span class="title">Whois</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> Whois&#123;</span><br><span class="line">Price:   MinNamePrice,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-Key"><a href="#5-Key" class="headerlink" title="5.Key"></a>5.Key</h1><p>在<code>key.go</code>文件中已经创建了模块需要的一些全局常量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// ModuleName is the name of the module</span></span><br><span class="line"><span class="comment">// 模块名</span></span><br><span class="line">ModuleName = <span class="string">"nameservice"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// StoreKey to be used when creating the KVStore</span></span><br><span class="line"><span class="comment">// 模块存储空间的键/key</span></span><br><span class="line">StoreKey = ModuleName</span><br><span class="line"></span><br><span class="line"><span class="comment">// RouterKey to be used for routing msgs</span></span><br><span class="line"><span class="comment">// 路由消息的键名</span></span><br><span class="line">RouterKey = ModuleName</span><br><span class="line"></span><br><span class="line"><span class="comment">// QuerierRoute to be used for querier msgs</span></span><br><span class="line"><span class="comment">// 查询消息的查询路由名</span></span><br><span class="line">QuerierRoute = ModuleName</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// whois结构体的前缀，即在模块空间中k/v的前缀key</span></span><br><span class="line">WhoisPrefix      = <span class="string">"whois-value-"</span></span><br><span class="line"><span class="comment">// 存储总记数的前缀key，是WhoisPrefix的特例</span></span><br><span class="line">WhoisCountPrefix = <span class="string">"whois-count-"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="6-Errors"><a href="#6-Errors" class="headerlink" title="6.Errors"></a>6.Errors</h1><p>定义了模块的自定义错误以及错误代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ErrNameDoesNotExist = sdkerrors.Register(ModuleName, <span class="number">1</span>, <span class="string">"name does not exist"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>你应该还定义错误的方法,当发生错误的时候.</p><h1 id="7-Keeper"><a href="#7-Keeper" class="headerlink" title="7.Keeper"></a>7.Keeper</h1><p>主要负责数据的增删改查</p><h2 id="Keeper-Struct"><a href="#Keeper-Struct" class="headerlink" title="Keeper Struct"></a>Keeper Struct</h2><p>Your <code>nameservice.Keeper</code> should already be defined in the <code>./x/nameservice/keeper/keeper.go</code> file. Let’s have a short introduction of the <code>keeper.go</code> file.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> keeper</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 1</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/tendermint/tendermint/libs/log"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/bank"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Keeper of the nameservice store</span></span><br><span class="line"><span class="comment">// Keeper结构体</span></span><br><span class="line"><span class="keyword">type</span> Keeper <span class="keyword">struct</span> &#123;</span><br><span class="line">CoinKeeper bank.Keeper<span class="comment">// bank模块, 底层管理token的模块</span></span><br><span class="line">storeKey   sdk.StoreKey<span class="comment">// cosmos-sdk/types的通用存储key类型</span></span><br><span class="line">cdc        *codec.Codec<span class="comment">// 底层编码模块</span></span><br><span class="line"><span class="comment">// paramspace types.ParamSubspace</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewKeeper creates a nameservice keeper</span></span><br><span class="line"><span class="comment">// 返回Keeper的对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewKeeper</span><span class="params">(coinKeeper bank.Keeper, cdc *codec.Codec, key sdk.StoreKey)</span> <span class="title">Keeper</span></span> &#123;</span><br><span class="line">keeper := Keeper&#123;</span><br><span class="line">CoinKeeper: coinKeeper,</span><br><span class="line">storeKey:   key,</span><br><span class="line">cdc:        cdc,</span><br><span class="line"><span class="comment">// paramspace: paramspace.WithKeyTable(types.ParamKeyTable()),</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> keeper</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logger returns a module-specific logger.</span></span><br><span class="line"><span class="comment">// 使用当前的模块名生成特定的log返回</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">Logger</span><span class="params">(ctx sdk.Context)</span> <span class="title">log</span>.<span class="title">Logger</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> ctx.Logger().With(<span class="string">"module"</span>, fmt.Sprintf(<span class="string">"x/%s"</span>, types.ModuleName))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于代码中import的两个不同的types:</p><ul><li><p><a href="https://godoc.org/github.com/cosmos/cosmos-sdk/types" target="_blank" rel="noopener"><code>types</code> (as sdk) (opens new window)</a>- this contains commonly used types throughout the SDK.</p><p><strong>包含整个sdk通常使用的类型</strong></p></li><li><p><code>types</code> - it contains <code>BankKeeper</code> you have defined in previous section.</p><p><strong>包含之前介绍的<code>BankKeeper</code></strong></p></li></ul><p>Keeper结构体解释:</p><ul><li><p><code>types.BankKeeper</code> - This is an interface you had defined on previous section to use <code>bank</code> module. Including it allows code in this module to call functions from the <code>bank</code> module. The SDK uses an <a href="https://en.wikipedia.org/wiki/Object-capability_model" target="_blank" rel="noopener">object capabilities (opens new window)</a>approach to accessing sections of the application state. This is to allow developers to employ a least authority approach, limiting the capabilities of a faulty or malicious module from affecting parts of state it doesn’t need access to.</p><p><strong>BankKeeper 这是在上一节介绍的bank,这里使用bank模块的接口。==它允许该模块中的代码调用bank模块中的函数==。SDK使用 object capabilities方法来访问应用程序状态的部分。这允许开发人员采用最小权限的方法，限制错误或恶意模块的功能，使其不影响它不需要访问的状态部分。</strong></p></li><li><p><a href="https://godoc.org/github.com/cosmos/cosmos-sdk/codec#Codec" target="_blank" rel="noopener"><code>*codec.Codec</code> (opens new window)</a>- This is a pointer to the codec that is used by Amino to encode and decode binary structs.</p><p><strong>这是Amino用于编码和解码二进制结构的编解码器的指针,用于编码/解码数据</strong></p></li><li><p><a href="https://godoc.org/github.com/cosmos/cosmos-sdk/types#StoreKey" target="_blank" rel="noopener"><code>sdk.StoreKey</code> (opens new window)</a>- This is a store key which gates access to a <code>sdk.KVStore</code>which persists the state of your application: the Whois struct that the name points to (i.e. <code>map[name]Whois</code>).</p><p><strong>==这是一个用于访问sdk 持久化应用程序状态的KVStore对应的key==。数据库存储也就是域名所指向的Whois结构体</strong></p></li></ul><h2 id="Getters-and-Setters"><a href="#Getters-and-Setters" class="headerlink" title="Getters and Setters"></a>Getters and Setters</h2><p>In our <code>keeper</code> directory we find the <code>whois.go</code> file which has been created with our <code>starport type</code> command.</p><p>我们需要修改部分, 使用<code>Name</code>作为key去查找每一个<code>Whois</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> keeper</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetWhoisCount get the total number of whois</span></span><br><span class="line"><span class="comment">// 获取whois的所有数量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">GetWhoisCount</span><span class="params">(ctx sdk.Context)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取keeper对象的key,也就是在key.go文件中定义的存储StoreKey常量</span></span><br><span class="line"><span class="comment">// 提取上下文中对应key的store</span></span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line"><span class="comment">// 将key.go中的数量统计前缀转换为byte数组</span></span><br><span class="line">byteKey := []<span class="keyword">byte</span>(types.WhoisCountPrefix)</span><br><span class="line"><span class="comment">// 根据WhoisCountPrefix查询存储的数量值</span></span><br><span class="line">bz := store.Get(byteKey)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Count doesn't exist: no element</span></span><br><span class="line"><span class="comment">// 不存在则返回默认的0</span></span><br><span class="line"><span class="keyword">if</span> bz == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parse bytes</span></span><br><span class="line"><span class="comment">// 解析字查询到的数量string =&gt; int</span></span><br><span class="line">count, err := strconv.ParseInt(<span class="keyword">string</span>(bz), <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// Panic because the count should be always formattable to int64</span></span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"cannot decode count"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetWhoisCount set the total number of whois</span></span><br><span class="line"><span class="comment">// 存储whois的总数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">SetWhoisCount</span><span class="params">(ctx sdk.Context, count <span class="keyword">int64</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取数据库 =&gt; 格式化key =&gt; 存储</span></span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line">byteKey := []<span class="keyword">byte</span>(types.WhoisCountPrefix)</span><br><span class="line">bz := []<span class="keyword">byte</span>(strconv.FormatInt(count, <span class="number">10</span>))</span><br><span class="line"><span class="comment">// 设置</span></span><br><span class="line">store.Set(byteKey, bz)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateWhois creates a whois. This function is included in starport type scaffolding.</span></span><br><span class="line"><span class="comment">// We won't use this function in our application, so it can be commented out.</span></span><br><span class="line"><span class="comment">// 脚手架自动创建的创建whois结构体的函数, 不想使用可以注释掉, 一般写在Tpye&#123;your type&#125;.go中,这里就是TypeWhois.go</span></span><br><span class="line"><span class="comment">// func (k Keeper) CreateWhois(ctx sdk.Context, whois types.Whois) &#123;</span></span><br><span class="line"><span class="comment">// store := ctx.KVStore(k.storeKey)</span></span><br><span class="line"><span class="comment">// key := []byte(types.WhoisPrefix + whois.Value)</span></span><br><span class="line"><span class="comment">// value := k.cdc.MustMarshalBinaryLengthPrefixed(whois)</span></span><br><span class="line"><span class="comment">// store.Set(key, value)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GetWhois returns the whois information</span></span><br><span class="line"><span class="comment">// 获取whois结构体数据, key就是域名的name</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">GetWhois</span><span class="params">(ctx sdk.Context, key <span class="keyword">string</span>)</span> <span class="params">(types.Whois, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 1. 获取namservice数据库</span></span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line"><span class="keyword">var</span> whois types.Whois</span><br><span class="line"><span class="comment">// 2. 拼接key, whois前缀 + 获取参数key</span></span><br><span class="line">byteKey := []<span class="keyword">byte</span>(types.WhoisPrefix + key)</span><br><span class="line"><span class="comment">// 3. 使用keeper的codec类型cdc解码, 赋值给whois结构体</span></span><br><span class="line">err := k.cdc.UnmarshalBinaryLengthPrefixed(store.Get(byteKey), &amp;whois)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> whois, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4. 返回</span></span><br><span class="line"><span class="keyword">return</span> whois, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetWhois sets a whois. We modified this function to use the `name` value as the key instead of msg.ID</span></span><br><span class="line"><span class="comment">// 存储Whois, 我们修改了这个函数，使用' name '值作为键，而不是msg.ID</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">SetWhois</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>, whois types.Whois)</span></span> &#123;</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line"><span class="comment">// 使用cdc编码参数whois结构体返回的bz是byte切片</span></span><br><span class="line"><span class="comment">// MustMarshalBinaryLengthPrefixed 有Must代表不返回其错误直接Panic处理， 即使有err的话，没有的话返回可能的错误</span></span><br><span class="line">bz := k.cdc.MustMarshalBinaryLengthPrefixed(whois)</span><br><span class="line"><span class="comment">// 使用' name '值作为键，而不是msg.ID</span></span><br><span class="line">key := []<span class="keyword">byte</span>(types.WhoisPrefix + name)</span><br><span class="line"><span class="comment">// 存储</span></span><br><span class="line">store.Set(key, bz)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DeleteWhois deletes a whois</span></span><br><span class="line"><span class="comment">// 删除一个whois结构体</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">DeleteWhois</span><span class="params">(ctx sdk.Context, key <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line">store.Delete([]<span class="keyword">byte</span>(types.WhoisPrefix + key))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Functions used by querier  为用户查询的函数</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询whois的集合</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">listWhois</span><span class="params">(ctx sdk.Context, k Keeper)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> whoisList []types.Whois</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line"><span class="comment">// 根据前缀创建循环迭代器, 遍历所有包含此前缀字段的key对应的value</span></span><br><span class="line"><span class="comment">// KVStorePrefixIterator 按升序迭代所有带有特定前缀的键</span></span><br><span class="line">iterator := sdk.KVStorePrefixIterator(store, []<span class="keyword">byte</span>(types.WhoisPrefix))</span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span> ; iterator.Valid(); iterator.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> whois types.Whois</span><br><span class="line"><span class="comment">// 1. 迭代器获取包含特定前缀的完整key</span></span><br><span class="line"><span class="comment">// 2. 获取whois（[]byte）进行解码</span></span><br><span class="line"><span class="comment">// 3. 赋值给whois</span></span><br><span class="line">k.cdc.MustUnmarshalBinaryLengthPrefixed(store.Get(iterator.Key()), &amp;whois)</span><br><span class="line"><span class="comment">// 添加到集合中</span></span><br><span class="line">whoisList = <span class="built_in">append</span>(whoisList, whois)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 再将整个list解码/序列化成字节数组，</span></span><br><span class="line"><span class="comment">// MustMarshalJSONIndent有Must代表不返回其错误直接Panic处理， 即使有err的话，没有的话返回可能的错误</span></span><br><span class="line">res := codec.MustMarshalJSONIndent(k.cdc, whoisList)</span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询单个Whois</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getWhois</span><span class="params">(ctx sdk.Context, path []<span class="keyword">string</span>, k Keeper)</span> <span class="params">(res []<span class="keyword">byte</span>, sdkError error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取key, path的第一个参数(用户命令行输入)</span></span><br><span class="line">key := path[<span class="number">0</span>]</span><br><span class="line"><span class="comment">// 调用keeper的基本方法GetWhois(见上方)</span></span><br><span class="line">whois, err := k.GetWhois(ctx, key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编码/序列化为字节数组,</span></span><br><span class="line">res, err = codec.MarshalJSONIndent(k.cdc, whois)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrJSONMarshal, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Resolves a name, returns the value</span></span><br><span class="line"><span class="comment">// 解析域名对应的值,也就是whois中的字段value</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">resolveName</span><span class="params">(ctx sdk.Context, path []<span class="keyword">string</span>, keeper Keeper)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 直接调用keeper的解析函数(见下方), key是path[0]</span></span><br><span class="line">value := keeper.ResolveName(ctx, path[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> value == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">byte</span>&#123;&#125;, sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, <span class="string">"could not resolve name"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编码/序列化为字节数组</span></span><br><span class="line"><span class="comment">// QueryResResolve是types/querier文件下的函数, QueryResResolve就是解析值的一个结构体</span></span><br><span class="line"><span class="comment">// 因为MarshalJSONIndent解析需要一个结构体， 所以创建了这样的QueryResResolve结构体以赋值</span></span><br><span class="line">res, err := codec.MarshalJSONIndent(keeper.cdc, types.QueryResResolve&#123;Value: value&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrJSONMarshal, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get creator of the item</span></span><br><span class="line"><span class="comment">// 获取域名的创建者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">GetCreator</span><span class="params">(ctx sdk.Context, key <span class="keyword">string</span>)</span> <span class="title">sdk</span>.<span class="title">AccAddress</span></span> &#123;</span><br><span class="line">whois, _ := k.GetWhois(ctx, key)</span><br><span class="line"><span class="keyword">return</span> whois.Creator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if the key exists in the store</span></span><br><span class="line"><span class="comment">// 检查当前域名key/name是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">Exists</span><span class="params">(ctx sdk.Context, key <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line"><span class="keyword">return</span> store.Has([]<span class="keyword">byte</span>(types.WhoisPrefix + key))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ResolveName - returns the string that the name resolves to</span></span><br><span class="line"><span class="comment">// 获取域名的解析值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">ResolveName</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">whois, _ := k.GetWhois(ctx, name)</span><br><span class="line"><span class="keyword">return</span> whois.Value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetName - sets the value string that a name resolves to</span></span><br><span class="line"><span class="comment">// 设置域名对应的解析值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">SetName</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>, value <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">whois, _ := k.GetWhois(ctx, name)</span><br><span class="line">whois.Value = value</span><br><span class="line">k.SetWhois(ctx, name, whois)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HasOwner - returns whether or not the name already has an owner</span></span><br><span class="line"><span class="comment">// 检查当前域名是否有创建人</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">HasCreator</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">whois, _ := k.GetWhois(ctx, name)</span><br><span class="line"><span class="keyword">return</span> !whois.Creator.Empty()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetOwner - sets the current owner of a name</span></span><br><span class="line"><span class="comment">// 设置域名的当前拥有者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">SetCreator</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>, creator sdk.AccAddress)</span></span> &#123;</span><br><span class="line">whois, _ := k.GetWhois(ctx, name)</span><br><span class="line">whois.Creator = creator</span><br><span class="line">k.SetWhois(ctx, name, whois)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetPrice - gets the current price of a name</span></span><br><span class="line"><span class="comment">// 获取域名的价格</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">GetPrice</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>)</span> <span class="title">sdk</span>.<span class="title">Coins</span></span> &#123;</span><br><span class="line">whois, _ := k.GetWhois(ctx, name)</span><br><span class="line"><span class="keyword">return</span> whois.Price</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetPrice - sets the current price of a name</span></span><br><span class="line"><span class="comment">// 设置域名的价格</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">SetPrice</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>, price sdk.Coins)</span></span> &#123;</span><br><span class="line">whois, _ := k.GetWhois(ctx, name)</span><br><span class="line">whois.Price = price</span><br><span class="line">k.SetWhois(ctx, name, whois)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if the name is present in the store or not</span></span><br><span class="line"><span class="comment">// 检查当前的name参数是否存在于store中，注意于Exists函数的区别：没有加前缀</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">IsNamePresent</span><span class="params">(ctx sdk.Context, name <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line"><span class="keyword">return</span> store.Has([]<span class="keyword">byte</span>(name))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get an iterator over all names in which the keys are the names and the values are the whois</span></span><br><span class="line"><span class="comment">// 获取固定前缀的迭代器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">GetNamesIterator</span><span class="params">(ctx sdk.Context)</span> <span class="title">sdk</span>.<span class="title">Iterator</span></span> &#123;</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line"><span class="keyword">return</span> sdk.KVStorePrefixIterator(store, []<span class="keyword">byte</span>(types.WhoisPrefix))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get creator of the item</span></span><br><span class="line"><span class="comment">// 根据key = id获取whois的创建者， 但是可能会返回err</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">GetWhoisOwner</span><span class="params">(ctx sdk.Context, key <span class="keyword">string</span>)</span> <span class="title">sdk</span>.<span class="title">AccAddress</span></span> &#123;</span><br><span class="line">whois, err := k.GetWhois(ctx, key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> whois.Creator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if the key exists in the store</span></span><br><span class="line"><span class="comment">// 根绝key查询是否存在， key是域名结构体中的id</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keeper)</span> <span class="title">WhoisExists</span><span class="params">(ctx sdk.Context, key <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line"><span class="keyword">return</span> store.Has([]<span class="keyword">byte</span>(types.WhoisPrefix + key))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-Msgs-and-Handlers"><a href="#8-Msgs-and-Handlers" class="headerlink" title="8.Msgs and Handlers"></a>8.Msgs and Handlers</h1><h2 id="Msgs"><a href="#Msgs" class="headerlink" title="Msgs"></a>Msgs</h2><p>msgs触发状态交易,Msg包含在Tx接口中,Tx就是网络中用户提交的交易</p><p>Cosmos sdk中的源码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Tx defines the interface a transaction must fulfill.</span></span><br><span class="line">Tx <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// Gets the all the transaction's messages.</span></span><br><span class="line">GetMsgs() []Msg</span><br><span class="line"></span><br><span class="line"><span class="comment">// ValidateBasic does a simple and lightweight validation check that doesn't</span></span><br><span class="line"><span class="comment">// require access to any other information.</span></span><br><span class="line">ValidateBasic() error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作为开发者只需要定义Msg即可,Msg必须要满足以下接口:</p><p><code>./x/nameservice/types/msg.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Transactions messages must fulfill the Msg</span></span><br><span class="line"><span class="comment">// 实现接口必须实现所有的函数</span></span><br><span class="line"><span class="keyword">type</span> Msg <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// Return the message type.</span></span><br><span class="line"><span class="comment">// Must be alphanumeric or empty.</span></span><br><span class="line"><span class="comment">// 返回消息类型， 必须是字母或者空</span></span><br><span class="line">Type() <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns a human-readable string for the message, intended for utilization</span></span><br><span class="line"><span class="comment">// within tags</span></span><br><span class="line"><span class="comment">// 返回消息的可读string,用于在标签中使用</span></span><br><span class="line">Route() <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ValidateBasic does a simple validation check that</span></span><br><span class="line"><span class="comment">// doesn't require access to any other information.</span></span><br><span class="line"><span class="comment">// 做一些基本的验证, 不需要访问其他信息</span></span><br><span class="line">ValidateBasic() error</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the canonical byte representation of the Msg.</span></span><br><span class="line"><span class="comment">// 获取Msg的规范字节表示即字节数组</span></span><br><span class="line">GetSignBytes() []<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Signers returns the addrs of signers that must sign.</span></span><br><span class="line"><span class="comment">// CONTRACT: All signatures must be present to be valid.</span></span><br><span class="line"><span class="comment">// CONTRACT: Returns addrs in some deterministic order.</span></span><br><span class="line"><span class="comment">// 返回必须签名的签名者地址集合， 所有的签名必须在当下还有效， 返回的签名集合会以某种确定的顺序</span></span><br><span class="line">GetSigners() []sdk.AccAddress</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Handlers"><a href="#Handlers" class="headerlink" title="Handlers"></a>Handlers</h2><p>可看作为controller</p><p>定义了当接受到Msg时, 哪些数据存储需要更新,在什么样的环境下更新等</p><h1 id="9-Msgs"><a href="#9-Msgs" class="headerlink" title="9.Msgs"></a>9.Msgs</h1><p>现在开始编写本项目场景需要的Msg</p><h2 id="SetName"><a href="#SetName" class="headerlink" title="SetName"></a>SetName</h2><h3 id="MsgSetSetName"><a href="#MsgSetSetName" class="headerlink" title="MsgSetSetName"></a>MsgSetSetName</h3><p>首先实现<code>SetName</code>, 这个消息Msg允许域名的所有者在解析器中设置该域名的返回值</p><p>Start by renaming the <code>./x/nameservice/types/MsgSetWhois.go</code> file to <code>./x/nameservice/types/MsgSetName.go</code>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">  sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//const RouterKey = ModuleName // this was defined in your key.go file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MsgSetName defines a SetName message</span></span><br><span class="line"><span class="comment">// 定义MsgSetName的结构</span></span><br><span class="line"><span class="keyword">type</span> MsgSetName <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name  <span class="keyword">string</span>         <span class="string">`json:"name"`</span>    <span class="comment">// 目标域名</span></span><br><span class="line">  Value <span class="keyword">string</span>         <span class="string">`json:"value"`</span>   <span class="comment">// 对应的值/解析值</span></span><br><span class="line">  Owner sdk.AccAddress <span class="string">`json:"owner"`</span>   <span class="comment">// 拥有者</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewMsgSetName is a constructor function for MsgSetName</span></span><br><span class="line"><span class="comment">// MsgSetName构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMsgSetName</span><span class="params">(name <span class="keyword">string</span>, value <span class="keyword">string</span>, owner sdk.AccAddress)</span> <span class="title">MsgSetName</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> MsgSetName&#123;</span><br><span class="line">    Name:  name,</span><br><span class="line">    Value: value,</span><br><span class="line">    Owner: owner,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Route should return the name of the module</span></span><br><span class="line"><span class="comment">// 返回路由消息的键， 这里就是模块名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgSetName)</span> <span class="title">Route</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> RouterKey &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type should return the action</span></span><br><span class="line"><span class="comment">// 操作名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgSetName)</span> <span class="title">Type</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> <span class="string">"set_name"</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ValidateBasic runs stateless checks on the message</span></span><br><span class="line"><span class="comment">// 基本参数检测</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgSetName)</span> <span class="title">ValidateBasic</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> msg.Owner.Empty() &#123;</span><br><span class="line">    <span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidAddress, msg.Owner.String())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(msg.Name) == <span class="number">0</span> || <span class="built_in">len</span>(msg.Value) == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, <span class="string">"Name and/or Value cannot be empty"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetSignBytes encodes the message for signing</span></span><br><span class="line"><span class="comment">// GetSignBytes对整个MsgSetName消息本身进行编码、排序以进行后续的签名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgSetName)</span> <span class="title">GetSignBytes</span><span class="params">()</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">  <span class="comment">// MustMarshalJSON序列化msg为字节切片</span></span><br><span class="line">  <span class="comment">// MustSortJSON返回根据key排序的json</span></span><br><span class="line">  <span class="keyword">return</span> sdk.MustSortJSON(ModuleCdc.MustMarshalJSON(msg))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetSigners defines whose signature is required</span></span><br><span class="line"><span class="comment">// 定义该需要谁的签名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgSetName)</span> <span class="title">GetSigners</span><span class="params">()</span> []<span class="title">sdk</span>.<span class="title">AccAddress</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> []sdk.AccAddress&#123;msg.Owner&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>MsgSetName</code> has the three attributes needed to set the value for a name:</p><ul><li><code>name</code> - The name trying to be set. 域名</li><li><code>value</code> - What the name resolves to. 要解析的值</li><li><code>owner</code> - The owner of that name. 域名的使用者</li></ul><p><strong>==SDK使用上述函数将消息路由到适当的模块进行处理==</strong>。它们还将人类可读的操作名称添加到用于索引的数据库标签中。</p><p><code>GetSignBytes</code>定义了消息Msg怎样对自身进行编码以方便签名, 一般都是序列化+排序, 一般不需要改动.</p><p><code>GetSigners</code>定义了在Tx中那些人的签名是必须的,这样才能保证有效.</p><p>在此案例中, 当需要重新设置域名的解析时,<code>MsgSetName</code>需要Owner签名交易才能生效.</p><h3 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h3><p>目前<code>MsgSetName</code>已经规定好了, <strong>==当接收到了消息后<code>Handler</code>负责定义接下来的行动.==</strong> </p><p><code>NewHandler</code>本质上是一个子路由器，它将进入该模块的消息指示给适当的处理程序。目前，只有一个<code>Msg/Handler</code>。</p><p>Let’s rename our <code>x/nameservice/handlerMsgSetWhois.go</code> to <code>x/nameservice/handlerMsgSetName.go</code>.</p><p><code>mv x/nameservice/handlerMsgSetWhois.go x/nameservice/handlerMsgSetName.go</code></p><p>修改如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nameservice</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/keeper"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handle a message to set name</span></span><br><span class="line"><span class="comment">// 接受到msg， 进一步的处理，相当于controller层， 操作keeper层</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleMsgSetName</span><span class="params">(ctx sdk.Context, keeper keeper.Keeper, msg types.MsgSetName)</span> <span class="params">(*sdk.Result, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 检查MsgSetName的提供者是否为想要设置域名的域名拥有者， 即验证身份</span></span><br><span class="line"><span class="keyword">if</span> !msg.Owner.Equals(keeper.GetWhoisOwner(ctx, msg.Name)) &#123; <span class="comment">// Checks if the the msg sender is the same as the current owner</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrUnauthorized, <span class="string">"Incorrect Owner"</span>) <span class="comment">// If not, throw an error</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果是本人的话设置所规定的值</span></span><br><span class="line"><span class="comment">// 调用keeper进行域名的解析值设定</span></span><br><span class="line">keeper.SetName(ctx, msg.Name, msg.Value) <span class="comment">// If so, set the name to the value specified in the msg.</span></span><br><span class="line"><span class="keyword">return</span> &amp;sdk.Result&#123;&#125;, <span class="literal">nil</span>                <span class="comment">// return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the file (<code>./x/nameservice/handler.go</code>) make sure to replace the <code>types.MsgSetWhois</code> with the following code:</p><p>==<strong><code>handler.go</code>是各个handlerxxxx.go的总路由,  所以每一个对应的msg都需要在这里注册, 下面是修改完整的<code>handler.go</code>:</strong>==</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nameservice</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/keeper"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewHandler returns a handler for "nameservice" type messages.</span></span><br><span class="line"><span class="comment">// 返回一个操作nameservice各类消息的Handler对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewHandler</span><span class="params">(keeper keeper.Keeper)</span> <span class="title">sdk</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx sdk.Context, msg sdk.Msg)</span> <span class="params">(*sdk.Result, error)</span></span> &#123;</span><br><span class="line"><span class="comment">//.(type)获取接口实例实际的类型指针, 以此调用实例所有可调用的方法，包括接口方法及自有方法。</span></span><br><span class="line"><span class="comment">//需要注意的是该写法必须与switch case联合使用，case中列出实现该接口的类型。</span></span><br><span class="line"><span class="keyword">switch</span> msg := msg.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="comment">// 添加操作类型</span></span><br><span class="line"><span class="keyword">case</span> types.MsgSetName:</span><br><span class="line"><span class="keyword">return</span> handleMsgSetName(ctx, keeper, msg)</span><br><span class="line"><span class="keyword">case</span> types.MsgBuyName:</span><br><span class="line"><span class="keyword">return</span> handleMsgBuyName(ctx, keeper, msg)</span><br><span class="line"><span class="keyword">case</span> types.MsgDeleteName:</span><br><span class="line"><span class="keyword">return</span> handleMsgDeleteName(ctx, keeper, msg)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, fmt.Sprintf(<span class="string">"Unrecognized nameservice Msg type: %v"</span>, msg.Type()))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在, 拥有者可以设置域名的解析了, 但是如果是一个域名不存在拥有者的情况呢?</p><p>现在模块需要提供一种方式让用户去购买域名, 下面就定义<code>BuyName</code>消息</p><h2 id="Buy-Name"><a href="#Buy-Name" class="headerlink" title="Buy Name"></a>Buy Name</h2><h3 id="MsgBuyName"><a href="#MsgBuyName" class="headerlink" title="MsgBuyName"></a>MsgBuyName</h3><p><code>./x/nameservice/types/MsgBuyName.go</code>很类似于setName</p><p>We can replace the file <code>MsgCreateWhois.go</code>, as these two files are similar in nature, and we won’t be using <code>MsgCreateWhois</code>.</p><p><code>mv x/nameservice/types/MsgCreateWhois.go x/nameservice/types/MsgBuyName.go</code></p><p>Replace <code>handlerMsgCreateWhois</code> by <code>handlerMsgBuyName</code>:</p><p><code>mv x/nameservice/handlerMsgCreateWhois.go x/nameservice/handlerMsgBuyName.go</code></p><p><strong>MsgBuyName.go:</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Originally, this file was named MsgCreateWhois, and has been modified using search-and-replace to our Msg needs.</span></span><br><span class="line"><span class="comment">// 根据MsgCreateWhois文件改写</span></span><br><span class="line"><span class="comment">// MsgBuyName defines the BuyName message</span></span><br><span class="line"><span class="keyword">type</span> MsgBuyName <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span>         <span class="string">`json:"name"`</span><span class="comment">// 想购买的域名</span></span><br><span class="line">Bid   sdk.Coins      <span class="string">`json:"bid"`</span><span class="comment">// 出价</span></span><br><span class="line">Buyer sdk.AccAddress <span class="string">`json:"buyer"`</span><span class="comment">// 购买者</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewMsgBuyName is the constructor function for MsgBuyName</span></span><br><span class="line"><span class="comment">// MsgBuyName构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMsgBuyName</span><span class="params">(name <span class="keyword">string</span>, bid sdk.Coins, buyer sdk.AccAddress)</span> <span class="title">MsgBuyName</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> MsgBuyName&#123;</span><br><span class="line">Name:  name,</span><br><span class="line">Bid:   bid,</span><br><span class="line">Buyer: buyer,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Route should return the name of the module</span></span><br><span class="line"><span class="comment">// 路由返回模块名nameService</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgBuyName)</span> <span class="title">Route</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> RouterKey &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type should return the action</span></span><br><span class="line"><span class="comment">// 操作类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgBuyName)</span> <span class="title">Type</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> <span class="string">"buy_name"</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ValidateBasic runs stateless checks on the message</span></span><br><span class="line"><span class="comment">// 基本的检查</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgBuyName)</span> <span class="title">ValidateBasic</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> msg.Buyer.Empty() &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidAddress, msg.Buyer.String())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(msg.Name) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, <span class="string">"Name cannot be empty"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !msg.Bid.IsAllPositive() &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.ErrInsufficientFunds</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetSignBytes encodes the message for signing</span></span><br><span class="line"><span class="comment">// 返回消息的编码后格式[]byte</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgBuyName)</span> <span class="title">GetSignBytes</span><span class="params">()</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> sdk.MustSortJSON(ModuleCdc.MustMarshalJSON(msg))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetSigners defines whose signature is required</span></span><br><span class="line"><span class="comment">// 要求签名的对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgBuyName)</span> <span class="title">GetSigners</span><span class="params">()</span> []<span class="title">sdk</span>.<span class="title">AccAddress</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> []sdk.AccAddress&#123;msg.Buyer&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，更新执行由消息触发的状态转换的BuyName处理程序函数。请记住，此时消息已经运行了ValidateBasic函数，因此已经进行了一些输入验证。但是，==ValidateBasic不能查询应用程序状态。<strong>依赖于网络状态(如账户余额)的验证</strong>逻辑应该在handler函数中执行==</p><p>Let’s rename <code>handlerMsgCreateWhois.go</code> to <code>handlerMsgBuyName.go</code></p><p><code>mv x/nameservice/handlerMsgCreateWhois.go x/nameservice/handlerMsgBuyName.go</code></p><p>Go to <code>./x/nameservice/handlerMsgBuyName.go</code></p><p><strong><code>handlerMsgBuyName.go</code>:</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nameservice</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line"></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/keeper"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handle a message to buy name</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleMsgBuyName</span><span class="params">(ctx sdk.Context, k keeper.Keeper, msg types.MsgBuyName)</span> <span class="params">(*sdk.Result, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// Checks if the the bid price is greater than the price paid by the current owner</span></span><br><span class="line"><span class="comment">// 1.检查当前出价是否高于目前的价格, 注意Msg本身的检查只是简单的检查，这里需要额外数据的检查就只能在Handler中做</span></span><br><span class="line"><span class="comment">// GetPrice返回coin类型对象，其IsAllGT函数是比较大小（逐个字母比较，全部大于返回true）</span></span><br><span class="line"><span class="comment">// 当需要的价格 &gt; bid那么就返回错误</span></span><br><span class="line"><span class="keyword">if</span> k.GetPrice(ctx, msg.Name).IsAllGT(msg.Bid) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrInsufficientFunds, <span class="string">"Bid not high enough"</span>) <span class="comment">// If not, throw an error</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.检查当前域名是否已经有拥有者了</span></span><br><span class="line"><span class="comment">// 不论是已拥有或者没有人拥有， 如果购买者支付出价出现错误，那么都会造成资金的回滚</span></span><br><span class="line"><span class="keyword">if</span> k.HasCreator(ctx, msg.Name) &#123;</span><br><span class="line"><span class="comment">// 如果已经是别人拥有的，那么购买者支付对应的出价给域名原来的拥有者</span></span><br><span class="line"><span class="comment">// coin转移方向： msg.Buyer =&gt; Creator</span></span><br><span class="line"><span class="comment">// 金额： Bid</span></span><br><span class="line">err := k.CoinKeeper.SendCoins(ctx, msg.Buyer, k.GetCreator(ctx, msg.Name), msg.Bid)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 如果没有，那么从购买者处减去出价金额, 发送给一个不可回收的地址（burns）</span></span><br><span class="line">_, err := k.CoinKeeper.SubtractCoins(ctx, msg.Buyer, msg.Bid) <span class="comment">// If so, deduct the Bid amount from the sender</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 分别为域名设置新的所有者与金额</span></span><br><span class="line">k.SetCreator(ctx, msg.Name, msg.Buyer)</span><br><span class="line">k.SetPrice(ctx, msg.Name, msg.Bid)</span><br><span class="line"><span class="keyword">return</span> &amp;sdk.Result&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个处理程序使用来自<code>coinKeeper</code>的函数来执行货币操作。如果您的应用程序正在执行货币操作，您可能需要查看此模块的 <a href="https://godoc.org/github.com/cosmos/cosmos-sdk/x/bank#BaseKeeper" target="_blank" rel="noopener">godocs for this module (opens new window)</a>，看看它公开了哪些函数。</p><h2 id="Delete-Name"><a href="#Delete-Name" class="headerlink" title="Delete Name"></a>Delete Name</h2><h3 id="MsgDeleteName"><a href="#MsgDeleteName" class="headerlink" title="MsgDeleteName"></a>MsgDeleteName</h3><p>Now it is time to update the <code>Msg</code> for deleting names. Let’s rename our <code>MsgDeleteWhois.go</code> to <code>MsgDeleteName.go</code></p><p><code>mv x/nameservice/types/MsgDeleteWhois.go x/nameservice/types/MsgDeleteName.go</code></p><p>add it to the <code>./x/nameservice/types/MsgDeleteName.go</code> file.</p><p>Replace <code>MsgDeleteWhois</code> by <code>MsgDeleteName</code>:</p><p><code>mv x/nameservice/types/MsgDeleteWhois.go x/nameservice/types/MsgDeleteName.go</code></p><p><strong><code>MsgDeleteName.go</code>:</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ sdk.Msg = &amp;MsgDeleteName&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MsgDeleteName <span class="keyword">struct</span> &#123;</span><br><span class="line">ID      <span class="keyword">string</span>         <span class="string">`json:"id" yaml:"id"`</span></span><br><span class="line">Creator sdk.AccAddress <span class="string">`json:"creator" yaml:"creator"`</span><span class="comment">// 创建者</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMsgDeleteName</span><span class="params">(id <span class="keyword">string</span>, creator sdk.AccAddress)</span> <span class="title">MsgDeleteName</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> MsgDeleteName&#123;</span><br><span class="line">ID:      id,</span><br><span class="line">Creator: creator,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgDeleteName)</span> <span class="title">Route</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> RouterKey</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgDeleteName)</span> <span class="title">Type</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"DeleteName"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgDeleteName)</span> <span class="title">GetSigners</span><span class="params">()</span> []<span class="title">sdk</span>.<span class="title">AccAddress</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> []sdk.AccAddress&#123;msg.Creator&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgDeleteName)</span> <span class="title">GetSignBytes</span><span class="params">()</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">bz := ModuleCdc.MustMarshalJSON(msg)</span><br><span class="line"><span class="keyword">return</span> sdk.MustSortJSON(bz)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msg MsgDeleteName)</span> <span class="title">ValidateBasic</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> msg.Creator.Empty() &#123;</span><br><span class="line"><span class="keyword">return</span> sdkerrors.Wrap(sdkerrors.ErrInvalidAddress, <span class="string">"creator can't be empty"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Replace <code>handlerMsgDeleteWhois</code> by <code>handlerMsgDeleteName</code>:</p><p><code>mv x/nameservice/handlerMsgDeleteWhois.go x/nameservice/handlerMsgDeleteName.go</code></p><p><strong><code>handlerMsgDeleteName.go</code>:</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nameservice</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/keeper"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handle a message to delete name</span></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleMsgDeleteName</span><span class="params">(ctx sdk.Context, k keeper.Keeper, msg types.MsgDeleteName)</span> <span class="params">(*sdk.Result, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 使用id检查是否存在该域名</span></span><br><span class="line"><span class="keyword">if</span> !k.WhoisExists(ctx, msg.ID) &#123;</span><br><span class="line"><span class="comment">// replace with ErrKeyNotFound for 0.39+</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, msg.ID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检查是否是本人</span></span><br><span class="line"><span class="keyword">if</span> !msg.Creator.Equals(k.GetWhoisOwner(ctx, msg.ID)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrUnauthorized, <span class="string">"Incorrect Owner"</span>)</span><br><span class="line">&#125;</span><br><span class="line">k.DeleteWhois(ctx, msg.ID)</span><br><span class="line"><span class="keyword">return</span> &amp;sdk.Result&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Afterwards, we’ll follow the same steps as earlier and add the <code>MsgDeleteName</code>handler to the module router in <code>./x/nameservice/handler.go</code>:</p><p>同样的要在Handler.go函数中注册这个子函数(在上面已经全部注册完毕了)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nameservice</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/keeper"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewHandler returns a handler for "nameservice" type messages.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewHandler</span><span class="params">(keeper keeper.Keeper)</span> <span class="title">sdk</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx sdk.Context, msg sdk.Msg)</span> <span class="params">(*sdk.Result, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> msg := msg.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="comment">// 添加操作类型</span></span><br><span class="line"><span class="keyword">case</span> types.MsgSetName:</span><br><span class="line"><span class="keyword">return</span> handleMsgSetName(ctx, keeper, msg)</span><br><span class="line"><span class="keyword">case</span> types.MsgBuyName:</span><br><span class="line"><span class="keyword">return</span> handleMsgBuyName(ctx, keeper, msg)</span><br><span class="line"><span class="keyword">case</span> types.MsgDeleteName:</span><br><span class="line"><span class="keyword">return</span> handleMsgDeleteName(ctx, keeper, msg)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, fmt.Sprintf(<span class="string">"Unrecognized nameservice Msg type: %v"</span>, msg.Type()))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-Queriers"><a href="#10-Queriers" class="headerlink" title="10.Queriers"></a>10.Queriers</h1><h2 id="Query-Types"><a href="#Query-Types" class="headerlink" title="Query Types"></a>Query Types</h2><p>Start by navigating to <code>./x/nameservice/types/querier.go</code> file. This is where you will define your querier types</p><p>查询模块.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"strings"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询常量，对应客户端输入的参数</span></span><br><span class="line"><span class="keyword">const</span> QueryListWhois = <span class="string">"list-whois"</span></span><br><span class="line"><span class="keyword">const</span> QueryGetWhois = <span class="string">"get-whois"</span></span><br><span class="line"><span class="keyword">const</span> QueryResolveName = <span class="string">"resolve-name"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// QueryResResolve Queries Result Payload for a resolve query</span></span><br><span class="line"><span class="comment">// 查询域名解析结果结构体函数</span></span><br><span class="line"><span class="comment">// 因为MarshalJSONIndent解析需要一个结构体， 所以创建了这样的QueryResResolve结构体以赋值</span></span><br><span class="line"><span class="keyword">type</span> QueryResResolve <span class="keyword">struct</span> &#123;</span><br><span class="line">Value <span class="keyword">string</span> <span class="string">`json:"value"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// implement fmt.Stringer</span></span><br><span class="line"><span class="comment">// 重写string方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r QueryResResolve)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.Value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// QueryResNames Queries Result Payload for a names query</span></span><br><span class="line"><span class="comment">// 查询域名群集合的解析结果，返回结果的切片</span></span><br><span class="line"><span class="keyword">type</span> QueryResNames []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// implement fmt.Stringer</span></span><br><span class="line"><span class="comment">// 格式化输出解析结果切片的数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n QueryResNames)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> strings.Join(n[:], <span class="string">"\n"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Querier"><a href="#Querier" class="headerlink" title="Querier"></a>Querier</h2><p>Now you can navigate to the <code>./x/nameservice/keeper/querier.go</code> file.</p><p>在这里可以定义<strong>针对应用程序状态用户可以进行哪些查询</strong></p><p>Your <code>nameservice</code> module will expose three queries:</p><ul><li><p><code>resolveName</code>: This takes a <code>name</code> and returns the <code>value</code> that is stored by the <code>nameservice</code>. This is similar to a DNS query.</p><p><strong>解析值</strong></p></li><li><p><code>getWhois</code>: This takes a <code>name</code> and returns the <code>price</code>, <code>value</code>, and <code>owner</code> of the name. Used for figuring out how much names cost when you want to buy them.</p><p><strong>查询域名的所有相关信息</strong></p></li><li><p><code>listWhois</code> : This does not take a parameter, it returns all the names stored in the <code>nameservice</code> store.</p><p><strong>查询所有的已存在域名</strong></p></li></ul><p>你需要修改switch语句的用例(它们不能从query .Route()函数中取出):</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> keeper</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 1</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line"></span><br><span class="line">abci <span class="string">"github.com/tendermint/tendermint/abci/types"</span></span><br><span class="line"></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line">sdkerrors <span class="string">"github.com/cosmos/cosmos-sdk/types/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewQuerier creates a new querier for nameservice clients.</span></span><br><span class="line"><span class="comment">// 创建了一个keeper层的查询对象给客户端</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewQuerier</span><span class="params">(k Keeper)</span> <span class="title">sdk</span>.<span class="title">Querier</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx sdk.Context, path []<span class="keyword">string</span>, req abci.RequestQuery)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> path[<span class="number">0</span>] &#123; <span class="comment">// 根据客户端输入的路径的第一个变量，确定查询的类型</span></span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 2</span></span><br><span class="line"><span class="comment">// 客户端输入的内容在types/querier.go中定义了常量作为路由</span></span><br><span class="line"><span class="keyword">case</span> types.QueryResolveName:</span><br><span class="line"><span class="keyword">return</span> resolveName(ctx, path[<span class="number">1</span>:], k)</span><br><span class="line"><span class="keyword">case</span> types.QueryListWhois:</span><br><span class="line"><span class="keyword">return</span> listWhois(ctx, k)</span><br><span class="line"><span class="keyword">case</span> types.QueryGetWhois:</span><br><span class="line"><span class="keyword">return</span> getWhois(ctx, path[<span class="number">1</span>:], k)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, <span class="string">"unknown nameservice query endpoint"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now that the router is defined, we can verify that our querier functions in <code>./x/nameservice/keeper/whois.go</code> looks like this:</p><p><strong>现在我们可以在上述文件中找到对应路由的实现:</strong></p><p><strong>之前在<code>./x/nameservice/keeper/whois.go</code>中可以找到的Functions used by querier部分(不是keeper方法的函数都是querier)</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Functions used by querier</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">listWhois</span><span class="params">(ctx sdk.Context, k Keeper)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> whoisList []types.Whois</span><br><span class="line">store := ctx.KVStore(k.storeKey)</span><br><span class="line">iterator := sdk.KVStorePrefixIterator(store, []<span class="keyword">byte</span>(types.WhoisPrefix))</span><br><span class="line"><span class="keyword">for</span> ; iterator.Valid(); iterator.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> whois types.Whois</span><br><span class="line">k.cdc.MustUnmarshalBinaryLengthPrefixed(store.Get(iterator.Key()), &amp;whois)</span><br><span class="line">whoisList = <span class="built_in">append</span>(whoisList, whois)</span><br><span class="line">&#125;</span><br><span class="line">res := codec.MustMarshalJSONIndent(k.cdc, whoisList)</span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getWhois</span><span class="params">(ctx sdk.Context, path []<span class="keyword">string</span>, k Keeper)</span> <span class="params">(res []<span class="keyword">byte</span>, sdkError error)</span></span> &#123;</span><br><span class="line">key := path[<span class="number">0</span>]</span><br><span class="line">whois, err := k.GetWhois(ctx, key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res, err = codec.MarshalJSONIndent(k.cdc, whois)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrJSONMarshal, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Resolves a name, returns the value</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">resolveName</span><span class="params">(ctx sdk.Context, path []<span class="keyword">string</span>, keeper Keeper)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">value := keeper.ResolveName(ctx, path[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> value == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">byte</span>&#123;&#125;, sdkerrors.Wrap(sdkerrors.ErrUnknownRequest, <span class="string">"could not resolve name"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res, err := codec.MarshalJSONIndent(keeper.cdc, types.QueryResResolve&#123;Value: value&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, sdkerrors.Wrap(sdkerrors.ErrJSONMarshal, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that <code>listWhois</code> and <code>getWhois</code> should already be defined, so you would only need to add <code>resolveName</code>.</p><ul><li><p>在这里，你的Keeper的getter和setter被大量使用。当构建任何其他使用此模块的应用程序时，您可能需要返回并定义更多的getter /setter来访问您需要的状态片段。</p></li><li><p><strong>按照约定，==每个输出类型都应该是JSON可编组的和字符串可编的==(实现了Golang fmt接口)</strong>。<strong>返回的字节应该是输出结果的JSON编码。</strong></p></li><li><p>因此，对于resolve的输出类型，我们<strong>将解析字符串包装在一个名为QueryResResolve的结构中，该结构既可用于JSON编组，又有一个. string()方法。</strong></p></li><li><p>对于Whois的输出，<u>正常的Whois结构已经是可以JSON编组的，但是我们需要在其上添加一个. string()方法。</u></p><ul><li>对于names查询的输出也是一样的，<u>[]字符串已经是本机可编组的，但是我们想在其上添加一个. string()方法</u>。</li></ul></li><li><p>类型Whois没有在<code>./x/nameservice/types/</code>查询器中定义。因为它是在<code>./x/nameservice/types/TypeWhois. go</code>文件中创建的.go文件。</p></li></ul><h1 id="11-Codec-File"><a href="#11-Codec-File" class="headerlink" title="11.Codec File"></a>11.Codec File</h1><p>there is a bit of code that needs to be placed in <code>./x/nameservice/types/codec.go</code>. Any interface you create and any struct that implements an interface needs to be declared in the <code>RegisterCodec</code> function</p><p>一系列代码需要修改,许多实现的接口等函数和结构体都需要在RegisterCodec函数中申明</p><p> In this module the three <code>Msg</code>implementations (<code>SetName</code>, <code>BuyName</code> and <code>DeleteName</code>) have been registered, but your <code>Whois</code> query return type needs to be registered.</p><p>在此案例中,我们创建了三个Msg结构的实现:(<code>SetName</code>, <code>BuyName</code> and <code>DeleteName</code>) ,这些都需要被注册</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// RegisterCodec registers concrete types on codec</span></span><br><span class="line"><span class="comment">// codec上注册具体的类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterCodec</span><span class="params">(cdc *codec.Codec)</span></span> &#123;</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 1</span></span><br><span class="line">cdc.RegisterConcrete(MsgBuyName&#123;&#125;, <span class="string">"nameservice/BuyName"</span>, <span class="literal">nil</span>)</span><br><span class="line">cdc.RegisterConcrete(MsgSetName&#123;&#125;, <span class="string">"nameservice/SetName"</span>, <span class="literal">nil</span>)</span><br><span class="line">cdc.RegisterConcrete(MsgDeleteName&#123;&#125;, <span class="string">"nameservice/DeleteName"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ModuleCdc defines the module codec</span></span><br><span class="line"><span class="keyword">var</span> ModuleCdc *codec.Codec</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建实例codec</span></span><br><span class="line">ModuleCdc = codec.New()</span><br><span class="line">RegisterCodec(ModuleCdc)</span><br><span class="line"><span class="comment">// Register the go-crypto to the codec</span></span><br><span class="line"><span class="comment">// 注册加密函数信息</span></span><br><span class="line">codec.RegisterCrypto(ModuleCdc)</span><br><span class="line"><span class="comment">// 封装</span></span><br><span class="line">ModuleCdc.Seal()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This function should be used to register concrete types that will appear in</span></span><br><span class="line"><span class="comment">// interface fields/elements to be encoded/decoded by go-amino.</span></span><br><span class="line"><span class="comment">// Usage:</span></span><br><span class="line"><span class="comment">// `amino.RegisterConcrete(MyStruct1&#123;&#125;, "com.tendermint/MyStruct1", nil)`</span></span><br><span class="line"><span class="comment">//这个函数应该用来注册将出现在go-amino编码/解码的接口字段/元素中的具体类型。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cdc *Codec)</span> <span class="title">RegisterConcrete</span><span class="params">(o <span class="keyword">interface</span>&#123;&#125;, name <span class="keyword">string</span>, copts *ConcreteOptions)</span></span> &#123;...&#125;</span><br></pre></td></tr></table></figure><h1 id="12-Nameservice-Module-CLI"><a href="#12-Nameservice-Module-CLI" class="headerlink" title="12.Nameservice Module CLI"></a>12.Nameservice Module CLI</h1><p>cosmos sdk使用了 <a href="https://github.com/spf13/cobra" target="_blank" rel="noopener"><code>cobra</code> (opens new window)</a>客户端工具</p><p>This library makes it easy for each module to expose its own commands. The <code>type</code> command should have scaffolded the following files for us -</p><ul><li><code>./x/nameservice/client/cli/queryWhois.go</code></li><li><code>./x/nameservice/client/cli/txWhois.go</code></li></ul><h2 id="Queries"><a href="#Queries" class="headerlink" title="Queries"></a>Queries</h2><p>Start in <code>queryWhois.go</code>. Here, define <code>cobra.Command</code>s for each of your modules <code>Queriers</code> (<code>resolve</code>, and <code>whois</code>):</p><p>实现查询的客户端命令逻辑:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cli</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/context"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line"><span class="string">"github.com/spf13/cobra"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有的whois</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdListWhois</span><span class="params">(queryRoute <span class="keyword">string</span>, cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"list-whois"</span>,<span class="comment">// 使用的命令</span></span><br><span class="line">Short: <span class="string">"list all whois"</span>,<span class="comment">// 介绍</span></span><br><span class="line"><span class="comment">// 运行的内容</span></span><br><span class="line">RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line">res, _, err := cliCtx.QueryWithData(fmt.Sprintf(<span class="string">"custom/%s/%s"</span>, queryRoute, types.QueryListWhois), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"could not list Whois\n%s\n"</span>, err.Error())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> out []types.Whois</span><br><span class="line"><span class="comment">// 解码结果放到out中</span></span><br><span class="line">cdc.MustUnmarshalJSON(res, &amp;out)</span><br><span class="line"><span class="keyword">return</span> cliCtx.PrintOutput(out)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一个whois</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdGetWhois</span><span class="params">(queryRoute <span class="keyword">string</span>, cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"get-whois [key]"</span>,</span><br><span class="line">Short: <span class="string">"Query a whois by key"</span>,</span><br><span class="line">Args:  cobra.ExactArgs(<span class="number">1</span>),<span class="comment">// 参数对应key</span></span><br><span class="line">RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line">key := args[<span class="number">0</span>]<span class="comment">// 获取命令中的key</span></span><br><span class="line">res, _, err := cliCtx.QueryWithData(fmt.Sprintf(<span class="string">"custom/%s/%s/%s"</span>, queryRoute, types.QueryGetWhois, key), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"could not resolve whois %s \n%s\n"</span>, key, err.Error())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> out types.Whois</span><br><span class="line">cdc.MustUnmarshalJSON(res, &amp;out)</span><br><span class="line"><span class="keyword">return</span> cliCtx.PrintOutput(out)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetCmdResolveName queries information about a name</span></span><br><span class="line"><span class="comment">// 查询域名的解析值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdResolveName</span><span class="params">(queryRoute <span class="keyword">string</span>, cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"resolve [name]"</span>,</span><br><span class="line">Short: <span class="string">"resolve name"</span>,</span><br><span class="line">Args:  cobra.ExactArgs(<span class="number">1</span>),</span><br><span class="line">RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line">name := args[<span class="number">0</span>]</span><br><span class="line">res, _, err := cliCtx.QueryWithData(fmt.Sprintf(<span class="string">"custom/%s/%s/%s"</span>, queryRoute, types.QueryResolveName, name), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"could not resolve name - %s \n"</span>, name)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> out types.QueryResResolve</span><br><span class="line">cdc.MustUnmarshalJSON(res, &amp;out)</span><br><span class="line"><span class="keyword">return</span> cliCtx.PrintOutput(out)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>cli创建了一个新的<code>CLIContext</code>, 它携带了有关cli交互所需要的用户输入和应用程序配置的数据</p></li><li><p><code>cliCtx.QueryWithdata()</code>函数所需的路径直接映射到查询路由器中的名称。</p><ul><li>路径的第一部分用于区分SDK应用程序可能使用的查询类型:<code>custom</code> is for <code>Queriers</code>.</li><li>第二个部分是要查询路由的模块的名字</li><li>最后，模块中将有一个特定的查询器，该查询器将被调用</li><li>在本例中，第四部分是查询。这是因为查询参数是一个简单的字符串。要启用更复杂的查询输入，您需要使用querywithdata()函数的第二个参数来传递数据。有关此示例，请参阅Staking模块中的查询器.</li></ul></li></ul><p>在<code>cli/query.go</code>中添加子命令:</p><p>==<strong>这个文件官方没有写,但是需要改动!</strong>==</p><p> <strong>==注意一定添加<code>GetCmdResolveName(queryRoute, cdc),</code>, 不然的话使用命令行测试时resolve命令无法解析!!!==</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cli</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="comment">// "strings"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/spf13/cobra"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/flags"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// "github.com/cosmos/cosmos-sdk/client/context"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line"><span class="comment">// sdk "github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetQueryCmd returns the cli query commands for this module</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetQueryCmd</span><span class="params">(queryRoute <span class="keyword">string</span>, cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="comment">// Group nameservice queries under a subcommand</span></span><br><span class="line">nameserviceQueryCmd := &amp;cobra.Command&#123;</span><br><span class="line">Use:                        types.ModuleName,</span><br><span class="line">Short:                      fmt.Sprintf(<span class="string">"Querying commands for the %s module"</span>, types.ModuleName),</span><br><span class="line">DisableFlagParsing:         <span class="literal">true</span>,</span><br><span class="line">SuggestionsMinimumDistance: <span class="number">2</span>,</span><br><span class="line">RunE:                       client.ValidateCmd,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nameserviceQueryCmd.AddCommand(</span><br><span class="line">flags.GetCommands(</span><br><span class="line">      <span class="comment">// this line is used by starport scaffolding # 1</span></span><br><span class="line">GetCmdListWhois(queryRoute, cdc),</span><br><span class="line">GetCmdGetWhois(queryRoute, cdc),</span><br><span class="line">      <span class="comment">// 注意一定添加这个命令, 不然的话使用命令行测试时resolve命令无法解析!!!</span></span><br><span class="line">GetCmdResolveName(queryRoute, cdc),</span><br><span class="line">)...,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">return</span> nameserviceQueryCmd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h2><p>实现交易命令的客户端</p><p>Now that the query interactions are defined, it is time to move on to transaction generation in <code>txWhois.go</code>:</p><p><strong>NOTE</strong>: Your application needs to import the code you just wrote. Here the import path is set to this repository (<code>github.com/cosmos/sdk-tutorials/nameservice/x/nameservice</code>). If you are following along in your own repo you will need to change the import path to reflect that (<code>github.com/{ .Username }/{ .Project.Repo }/x/nameservice</code>). </p><p>如果你用的是自己的仓库记得改路径</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cli</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/spf13/cobra"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/context"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/auth"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/auth/client/utils"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 购买新域名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdBuyName</span><span class="params">(cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"buy-name [name] [price]"</span>,</span><br><span class="line">Short: <span class="string">"Buys a new name"</span>,</span><br><span class="line">Args:  cobra.ExactArgs(<span class="number">2</span>),</span><br><span class="line">RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">argsName := <span class="keyword">string</span>(args[<span class="number">0</span>])<span class="comment">//获取购买的名字name</span></span><br><span class="line"></span><br><span class="line">cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line"><span class="comment">// 获取标准读入</span></span><br><span class="line">inBuf := bufio.NewReader(cmd.InOrStdin())</span><br><span class="line"><span class="comment">// 创建交易创建器</span></span><br><span class="line">txBldr := auth.NewTxBuilderFromCLI(inBuf).WithTxEncoder(utils.GetTxEncoder(cdc))</span><br><span class="line"></span><br><span class="line">coins, err := sdk.ParseCoins(args[<span class="number">1</span>])<span class="comment">//解析出价</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 构建NewMsgBuyName实例</span></span><br><span class="line">msg := types.NewMsgBuyName(argsName, coins, cliCtx.GetFromAddress())</span><br><span class="line"><span class="comment">// 做基本的验证</span></span><br><span class="line">err = msg.ValidateBasic()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生成或广播交易</span></span><br><span class="line"><span class="keyword">return</span> utils.GenerateOrBroadcastMsgs(cliCtx, txBldr, []sdk.Msg&#123;msg&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置域名解析</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdSetWhois</span><span class="params">(cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"set-name [value] [name]"</span>,</span><br><span class="line">Short: <span class="string">"Set a new name"</span>,</span><br><span class="line">Args:  cobra.ExactArgs(<span class="number">2</span>),</span><br><span class="line">RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">argsValue := args[<span class="number">0</span>]</span><br><span class="line">argsName := args[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line">inBuf := bufio.NewReader(cmd.InOrStdin())</span><br><span class="line">txBldr := auth.NewTxBuilderFromCLI(inBuf).WithTxEncoder(utils.GetTxEncoder(cdc))</span><br><span class="line">msg := types.NewMsgSetName(argsName, argsValue, cliCtx.GetFromAddress())</span><br><span class="line">err := msg.ValidateBasic()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> utils.GenerateOrBroadcastMsgs(cliCtx, txBldr, []sdk.Msg&#123;msg&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除一个域名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetCmdDeleteWhois</span><span class="params">(cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"delete-name [id]"</span>,</span><br><span class="line">Short: <span class="string">"Delete a new name by ID"</span>,</span><br><span class="line">Args:  cobra.ExactArgs(<span class="number">1</span>),</span><br><span class="line">RunE: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line">cliCtx := context.NewCLIContext().WithCodec(cdc)</span><br><span class="line">inBuf := bufio.NewReader(cmd.InOrStdin())</span><br><span class="line">txBldr := auth.NewTxBuilderFromCLI(inBuf).WithTxEncoder(utils.GetTxEncoder(cdc))</span><br><span class="line"></span><br><span class="line">msg := types.NewMsgDeleteName(args[<span class="number">0</span>], cliCtx.GetFromAddress())</span><br><span class="line">err := msg.ValidateBasic()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> utils.GenerateOrBroadcastMsgs(cliCtx, txBldr, []sdk.Msg&#123;msg&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We also need to add the commands to our <code>tx</code> command in</p><p><code>x/nameservice/client/cli/tx.go</code> file:</p><p><code>./x/nameservice/client/cli/tx.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cli</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/spf13/cobra"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/flags"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetTxCmd returns the transaction commands for this module</span></span><br><span class="line"><span class="comment">// 返回模块的交易命令</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetTxCmd</span><span class="params">(cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line">nameserviceTxCmd := &amp;cobra.Command&#123;</span><br><span class="line">Use:                        types.ModuleName,</span><br><span class="line">Short:                      fmt.Sprintf(<span class="string">"%s transactions subcommands"</span>, types.ModuleName),</span><br><span class="line">DisableFlagParsing:         <span class="literal">true</span>,</span><br><span class="line">SuggestionsMinimumDistance: <span class="number">2</span>,</span><br><span class="line">RunE:                       client.ValidateCmd,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把txWhois.go中的命令都添加</span></span><br><span class="line">nameserviceTxCmd.AddCommand(flags.PostCommands(</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding</span></span><br><span class="line">GetCmdBuyName(cdc),</span><br><span class="line">GetCmdSetWhois(cdc),</span><br><span class="line">GetCmdDeleteWhois(cdc),</span><br><span class="line">)...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> nameserviceTxCmd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用的是authcmd包。它提供对CLI控制的帐户的访问，并方便签名。</p><h1 id="13-NameService-Module-Rest-Interface"><a href="#13-NameService-Module-Rest-Interface" class="headerlink" title="13.NameService Module Rest Interface"></a>13.NameService Module Rest Interface</h1><p>你的模型也可以使用REST接口实现命令行客户端</p><p>To get started navigate to <code>./x/nameservice/client/rest/rest.go</code> where HTTP handlers are held.</p><h2 id="RegisterRoutes"><a href="#RegisterRoutes" class="headerlink" title="RegisterRoutes"></a>RegisterRoutes</h2><p>首先定义REST接口在<code>RegisterRoutes</code>函数中</p><p>使路由全部以您的模块名称开头，以防止名称空间与其他模块的路由冲突</p><p><strong><code>./x/nameservice/client/rest/rest.go</code>：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gorilla/mux"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/context"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// RegisterRoutes registers nameservice-related REST handlers to a router</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterRoutes</span><span class="params">(cliCtx context.CLIContext, r *mux.Router)</span></span> &#123;</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding</span></span><br><span class="line">r.HandleFunc(<span class="string">"/nameservice/whois"</span>, buyNameHandler(cliCtx)).Methods(<span class="string">"POST"</span>)</span><br><span class="line">r.HandleFunc(<span class="string">"/nameservice/whois"</span>, listWhoisHandler(cliCtx, <span class="string">"nameservice"</span>)).Methods(<span class="string">"GET"</span>)</span><br><span class="line">r.HandleFunc(<span class="string">"/nameservice/whois/&#123;key&#125;"</span>, getWhoisHandler(cliCtx, <span class="string">"nameservice"</span>)).Methods(<span class="string">"GET"</span>)</span><br><span class="line">r.HandleFunc(<span class="string">"/nameservice/whois/&#123;key&#125;/resolve"</span>, resolveNameHandler(cliCtx, <span class="string">"nameservice"</span>)).Methods(<span class="string">"GET"</span>)</span><br><span class="line">r.HandleFunc(<span class="string">"/nameservice/whois"</span>, setWhoisHandler(cliCtx)).Methods(<span class="string">"PUT"</span>)</span><br><span class="line">r.HandleFunc(<span class="string">"/nameservice/whois"</span>, deleteWhoisHandler(cliCtx)).Methods(<span class="string">"DELETE"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Query-Handlers"><a href="#Query-Handlers" class="headerlink" title="Query Handlers"></a>Query Handlers</h2><p>Next, its time to define the handlers mentioned above in <code>queryWhois.go</code>. These will be very similar to the CLI methods defined earlier. <code>listWhoisHandler</code> and <code>getWhoisHandler</code> should already be defined, and you can use <code>getWhois</code> as a template to write the <code>resolveNameHandler</code> function.</p><p><strong>查询接口函数的编写(类似于cli的编写): <code>queryWhois.go</code></strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/context"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/types/rest"</span></span><br><span class="line"><span class="string">"github.com/gorilla/mux"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有的whois</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">listWhoisHandler</span><span class="params">(cliCtx context.CLIContext, storeName <span class="keyword">string</span>)</span> <span class="title">http</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">res, _, err := cliCtx.QueryWithData(fmt.Sprintf(<span class="string">"custom/%s/%s"</span>, storeName, types.QueryListWhois), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusNotFound, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">rest.PostProcessResponse(w, cliCtx, res)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一个域名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getWhoisHandler</span><span class="params">(cliCtx context.CLIContext, storeName <span class="keyword">string</span>)</span> <span class="title">http</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取参数</span></span><br><span class="line">vars := mux.Vars(r)</span><br><span class="line">key := vars[<span class="string">"key"</span>]</span><br><span class="line"></span><br><span class="line">res, _, err := cliCtx.QueryWithData(fmt.Sprintf(<span class="string">"custom/%s/%s/%s"</span>, storeName, types.QueryGetWhois, key), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusNotFound, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">rest.PostProcessResponse(w, cliCtx, res)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析域名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">resolveNameHandler</span><span class="params">(cliCtx context.CLIContext, storeName <span class="keyword">string</span>)</span> <span class="title">http</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">vars := mux.Vars(r)</span><br><span class="line">paramType := vars[<span class="string">"key"</span>]</span><br><span class="line"></span><br><span class="line">res, _, err := cliCtx.QueryWithData(fmt.Sprintf(<span class="string">"custom/%s/%s/%s"</span>, storeName, types.QueryResolveName, paramType), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusNotFound, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rest.PostProcessResponse(w, cliCtx, res)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notes on the above code:</p><ul><li>Notice we are using the same <code>cliCtx.QueryWithData</code> function to fetch the data</li><li>These functions are almost the same as the corresponding CLI functionality</li></ul><p>同样使用了QueryWithData函数,编写类似于cli</p><h2 id="Tx-Handlers"><a href="#Tx-Handlers" class="headerlink" title="Tx Handlers"></a>Tx Handlers</h2><p>Now define the <code>buyName</code>, <code>setName</code> and <code>deleteName</code> transaction routes in <code>txWhois.go</code> - you can replace the existing handlers that were generated by <code>starport type</code>. </p><p>请注意，这些实际上并没有执行购买，设置和删除名称的交易，因为在一般情况下，这需要某种形式的身份验证。取而代之的是，这些端点构建并返回每个特定的交易，然后可以以安全的方式对其进行签名，然后使用诸如<code>/txs</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/context"</span></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/types/rest"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/auth/client/utils"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> buyNameRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">BaseReq rest.BaseReq <span class="string">`json:"base_req"`</span><span class="comment">// 包含了创建交易的基本的请求字段</span></span><br><span class="line">Buyer   <span class="keyword">string</span>       <span class="string">`json:"buyer"`</span></span><br><span class="line">Name    <span class="keyword">string</span>       <span class="string">`json:"name"`</span></span><br><span class="line">Price   <span class="keyword">string</span>       <span class="string">`json:"price"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 购买域名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">buyNameHandler</span><span class="params">(cliCtx context.CLIContext)</span> <span class="title">http</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> req buyNameRequest</span><br><span class="line"><span class="comment">// 读取请求</span></span><br><span class="line"><span class="keyword">if</span> !rest.ReadRESTReq(w, r, cliCtx.Codec, &amp;req) &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusBadRequest, <span class="string">"failed to parse request"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">baseReq := req.BaseReq.Sanitize()</span><br><span class="line"><span class="comment">// 基本的验证</span></span><br><span class="line"><span class="keyword">if</span> !baseReq.ValidateBasic(w) &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// AccAddressFromBech32转换string为32位地址的方法</span></span><br><span class="line">addr, err := sdk.AccAddressFromBech32(req.Buyer)</span><br><span class="line">fmt.Println(addr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 解析金额</span></span><br><span class="line"><span class="comment">// ParseCoins 将字符串转为coin</span></span><br><span class="line">coins, err := sdk.ParseCoins(req.Price)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建NewMsgBuyName对象</span></span><br><span class="line">msg := types.NewMsgBuyName(req.Name, coins, addr)</span><br><span class="line"><span class="comment">// 简单的验证</span></span><br><span class="line">err = msg.ValidateBasic()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回响应</span></span><br><span class="line">utils.WriteGenerateStdTxResponse(w, cliCtx, baseReq, []sdk.Msg&#123;msg&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> setWhoisRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">BaseReq rest.BaseReq <span class="string">`json:"base_req"`</span></span><br><span class="line">Name    <span class="keyword">string</span>       <span class="string">`json:"name"`</span></span><br><span class="line">Value   <span class="keyword">string</span>       <span class="string">`json:"value"`</span></span><br><span class="line">Creator <span class="keyword">string</span>       <span class="string">`json:"creator"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置解析值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setWhoisHandler</span><span class="params">(cliCtx context.CLIContext)</span> <span class="title">http</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> req setWhoisRequest</span><br><span class="line"><span class="keyword">if</span> !rest.ReadRESTReq(w, r, cliCtx.Codec, &amp;req) &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusBadRequest, <span class="string">"failed to parse request"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">baseReq := req.BaseReq.Sanitize()</span><br><span class="line"><span class="keyword">if</span> !baseReq.ValidateBasic(w) &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">addr, err := sdk.AccAddressFromBech32(req.Creator)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">msg := types.NewMsgSetName(req.Name, req.Value, addr)</span><br><span class="line"></span><br><span class="line">err = msg.ValidateBasic()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">utils.WriteGenerateStdTxResponse(w, cliCtx, baseReq, []sdk.Msg&#123;msg&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> deleteWhoisRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">BaseReq rest.BaseReq <span class="string">`json:"base_req"`</span></span><br><span class="line">Owner   <span class="keyword">string</span>       <span class="string">`json:"owner"`</span></span><br><span class="line">Name    <span class="keyword">string</span>       <span class="string">`json:"name"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除消息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteWhoisHandler</span><span class="params">(cliCtx context.CLIContext)</span> <span class="title">http</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> req deleteWhoisRequest</span><br><span class="line"><span class="keyword">if</span> !rest.ReadRESTReq(w, r, cliCtx.Codec, &amp;req) &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusBadRequest, <span class="string">"failed to parse request"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">baseReq := req.BaseReq.Sanitize()</span><br><span class="line"><span class="keyword">if</span> !baseReq.ValidateBasic(w) &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">addr, err := sdk.AccAddressFromBech32(req.Owner)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">msg := types.NewMsgDeleteName(req.Name, addr)</span><br><span class="line"></span><br><span class="line">err = msg.ValidateBasic()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rest.WriteErrorResponse(w, http.StatusBadRequest, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">utils.WriteGenerateStdTxResponse(w, cliCtx, baseReq, []sdk.Msg&#123;msg&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点:</p><ul><li><p><a href="https://godoc.org/github.com/cosmos/cosmos-sdk/client/utils#BaseReq" target="_blank" rel="noopener"><code>BaseReq</code> </a>包含了创建交易的基本的请求字段 (which key to use, how to decode it, which chain you are on, etc…)并且设计成嵌入</p></li><li><p><code>baseReq.ValidateBasic</code> handles setting the response code for you and therefore you don’t need to worry about handling errors or successes when using those functions.</p><p><strong><code>baseReq.ValidateBasic</code>为你设置了响应代码</strong></p></li></ul><h1 id="14-AppModule-Interface"><a href="#14-AppModule-Interface" class="headerlink" title="14.AppModule Interface"></a>14.AppModule Interface</h1><p>The Cosmos SDK provides a standard interface for modules. This <a href="https://github.com/cosmos/cosmos-sdk/blob/master/types/module.go" target="_blank" rel="noopener"><code>AppModule</code> (opens new window)</a>interface requires modules to provide a set of methods used by the <code>ModuleBasicsManager</code> to incorporate them into your application.</p><p>We should already have a <code>module.go</code> file in <code>./nameservice</code>, and we don’t need to change anything, but it should look like this.</p><p>Cosmos SDK为模块提供了一个标准接口。这个AppModule接口要求模块提供一组ModuleBasicsManager使用的方法，以便将它们合并到你的应用程序中。</p><p>我们应该已经有一个模块了。进入<code>./nameservice</code>文件，我们不需要修改任何东西，但它应该是这样的。</p><p><strong><code>x/nameservice/module.go</code>:</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nameservice</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/gorilla/mux"</span></span><br><span class="line"><span class="string">"github.com/spf13/cobra"</span></span><br><span class="line"></span><br><span class="line">abci <span class="string">"github.com/tendermint/tendermint/abci/types"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/context"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/types/module"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/bank"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/client/cli"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/client/rest"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/keeper"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type check to ensure the interface is properly implemented</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">_ module.AppModule      = AppModule&#123;&#125;</span><br><span class="line">_ module.AppModuleBasic = AppModuleBasic&#123;&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// AppModuleBasic defines the basic application module used by the nameservice module.</span></span><br><span class="line"><span class="keyword">type</span> AppModuleBasic <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Name returns the nameservice module's name.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(AppModuleBasic)</span> <span class="title">Name</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> types.ModuleName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RegisterCodec registers the nameservice module's types for the given codec.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(AppModuleBasic)</span> <span class="title">RegisterCodec</span><span class="params">(cdc *codec.Codec)</span></span> &#123;</span><br><span class="line">types.RegisterCodec(cdc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DefaultGenesis returns default genesis state as raw bytes for the nameservice</span></span><br><span class="line"><span class="comment">// module.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(AppModuleBasic)</span> <span class="title">DefaultGenesis</span><span class="params">()</span> <span class="title">json</span>.<span class="title">RawMessage</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> types.ModuleCdc.MustMarshalJSON(types.DefaultGenesisState())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ValidateGenesis performs genesis state validation for the nameservice module.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(AppModuleBasic)</span> <span class="title">ValidateGenesis</span><span class="params">(bz json.RawMessage)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> data types.GenesisState</span><br><span class="line">err := types.ModuleCdc.UnmarshalJSON(bz, &amp;data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> types.ValidateGenesis(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RegisterRESTRoutes registers the REST routes for the nameservice module.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(AppModuleBasic)</span> <span class="title">RegisterRESTRoutes</span><span class="params">(ctx context.CLIContext, rtr *mux.Router)</span></span> &#123;</span><br><span class="line">rest.RegisterRoutes(ctx, rtr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetTxCmd returns the root tx command for the nameservice module.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(AppModuleBasic)</span> <span class="title">GetTxCmd</span><span class="params">(cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> cli.GetTxCmd(cdc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetQueryCmd returns no root query command for the nameservice module.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(AppModuleBasic)</span> <span class="title">GetQueryCmd</span><span class="params">(cdc *codec.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> cli.GetQueryCmd(types.StoreKey, cdc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//____________________________________________________________________________</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// AppModule implements an application module for the nameservice module.</span></span><br><span class="line"><span class="keyword">type</span> AppModule <span class="keyword">struct</span> &#123;</span><br><span class="line">AppModuleBasic</span><br><span class="line"></span><br><span class="line">keeper     keeper.Keeper</span><br><span class="line">coinKeeper bank.Keeper</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Add keepers that your application depends on</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewAppModule creates a new AppModule object</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewAppModule</span><span class="params">(k keeper.Keeper, bankKeeper bank.Keeper)</span> <span class="title">AppModule</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> AppModule&#123;</span><br><span class="line">AppModuleBasic: AppModuleBasic&#123;&#125;,</span><br><span class="line">keeper:         k,</span><br><span class="line">coinKeeper:     bankKeeper,</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Add keepers that your application depends on</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Name returns the nameservice module's name.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(AppModule)</span> <span class="title">Name</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> types.ModuleName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RegisterInvariants registers the nameservice module invariants.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(am AppModule)</span> <span class="title">RegisterInvariants</span><span class="params">(_ sdk.InvariantRegistry)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Route returns the message routing key for the nameservice module.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(AppModule)</span> <span class="title">Route</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> types.RouterKey</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewHandler returns an sdk.Handler for the nameservice module.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(am AppModule)</span> <span class="title">NewHandler</span><span class="params">()</span> <span class="title">sdk</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> NewHandler(am.keeper)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// QuerierRoute returns the nameservice module's querier route name.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(AppModule)</span> <span class="title">QuerierRoute</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> types.QuerierRoute</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewQuerierHandler returns the nameservice module sdk.Querier.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(am AppModule)</span> <span class="title">NewQuerierHandler</span><span class="params">()</span> <span class="title">sdk</span>.<span class="title">Querier</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> keeper.NewQuerier(am.keeper)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// InitGenesis performs genesis initialization for the nameservice module. It returns</span></span><br><span class="line"><span class="comment">// no validator updates.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(am AppModule)</span> <span class="title">InitGenesis</span><span class="params">(ctx sdk.Context, data json.RawMessage)</span> []<span class="title">abci</span>.<span class="title">ValidatorUpdate</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> genesisState types.GenesisState</span><br><span class="line">types.ModuleCdc.MustUnmarshalJSON(data, &amp;genesisState)</span><br><span class="line">InitGenesis(ctx, am.keeper, genesisState)</span><br><span class="line"><span class="keyword">return</span> []abci.ValidatorUpdate&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExportGenesis returns the exported genesis state as raw bytes for the nameservice</span></span><br><span class="line"><span class="comment">// module.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(am AppModule)</span> <span class="title">ExportGenesis</span><span class="params">(ctx sdk.Context)</span> <span class="title">json</span>.<span class="title">RawMessage</span></span> &#123;</span><br><span class="line">gs := ExportGenesis(ctx, am.keeper)</span><br><span class="line"><span class="keyword">return</span> types.ModuleCdc.MustMarshalJSON(gs)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BeginBlock returns the begin blocker for the nameservice module.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(am AppModule)</span> <span class="title">BeginBlock</span><span class="params">(ctx sdk.Context, req abci.RequestBeginBlock)</span></span> &#123;</span><br><span class="line">BeginBlocker(ctx, req, am.keeper)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EndBlock returns the end blocker for the nameservice module. It returns no validator</span></span><br><span class="line"><span class="comment">// updates.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(AppModule)</span> <span class="title">EndBlock</span><span class="params">(_ sdk.Context, _ abci.RequestEndBlock)</span> []<span class="title">abci</span>.<span class="title">ValidatorUpdate</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> []abci.ValidatorUpdate&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="15-Genesis"><a href="#15-Genesis" class="headerlink" title="15.Genesis"></a>15.Genesis</h1><p>AppModule接口包含了许多用于初始化和导出初始化状态的区块链函数。当启动、停止或导出链时，ModuleBasicManager在每个模块上调用这些函数。下面是一个非常基本的实现，您可以对其进行扩展。</p><p>在 <code>x/nameservice/types/genesis.go</code>。我们会定义初始状态是什么，默认的初始状态以及验证它的方法这样我们就不会遇到任何错误当我们以预先存在的状态开始链的时候。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> types</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GenesisState - all nameservice state that must be provided at genesis</span></span><br><span class="line"><span class="keyword">type</span> GenesisState <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Fill out what is needed by the module for genesis</span></span><br><span class="line">WhoisRecords []Whois <span class="string">`json:"whois_records"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewGenesisState creates a new GenesisState object</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGenesisState</span><span class="params">( /* TODO: Fill out with what is needed <span class="keyword">for</span> genesis state */ )</span> <span class="title">GenesisState</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> GenesisState&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Fill out according to your genesis state</span></span><br><span class="line">WhoisRecords: <span class="literal">nil</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DefaultGenesisState - default GenesisState used by Cosmos Hub</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DefaultGenesisState</span><span class="params">()</span> <span class="title">GenesisState</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> GenesisState&#123;</span><br><span class="line">WhoisRecords: []Whois&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ValidateGenesis validates the nameservice genesis parameters</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ValidateGenesis</span><span class="params">(data GenesisState)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Create a sanity check to make sure the state conforms to the modules needs</span></span><br><span class="line"><span class="keyword">for</span> _, record := <span class="keyword">range</span> data.WhoisRecords &#123;</span><br><span class="line"><span class="keyword">if</span> record.Creator == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"invalid WhoisRecord: Creator: %s. Error: Missing Creator"</span>, record.Creator)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> record.Value == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"invalid WhoisRecord: Value: %s. Error: Missing Value"</span>, record.Value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> record.Price == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"invalid WhoisRecord: Price: %s. Error: Missing Price"</span>, record.Price)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next we can update our <code>x/nameservice/genesis.go</code> file, and modify the functions <code>InitGenesis</code> and <code>ExportGenesis</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nameservice</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/keeper"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line"><span class="comment">// abci "github.com/tendermint/tendermint/abci/types"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// InitGenesis initialize default parameters</span></span><br><span class="line"><span class="comment">// and the keeper's address to pubkey map</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitGenesis</span><span class="params">(ctx sdk.Context, keeper keeper.Keeper, data types.GenesisState)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, record := <span class="keyword">range</span> data.WhoisRecords &#123;</span><br><span class="line">keeper.SetWhois(ctx, record.Value, record)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExportGenesis writes the current store values</span></span><br><span class="line"><span class="comment">// to a genesis file, which can be imported again</span></span><br><span class="line"><span class="comment">// with InitGenesis</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExportGenesis</span><span class="params">(ctx sdk.Context, k keeper.Keeper)</span> <span class="title">types</span>.<span class="title">GenesisState</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> records []types.Whois</span><br><span class="line">iterator := k.GetNamesIterator(ctx)</span><br><span class="line"><span class="keyword">for</span> ; iterator.Valid(); iterator.Next() &#123;</span><br><span class="line"></span><br><span class="line">name := <span class="keyword">string</span>(iterator.Key())</span><br><span class="line">whois, _ := k.GetWhois(ctx, name)</span><br><span class="line">records = <span class="built_in">append</span>(records, whois)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> types.GenesisState&#123;WhoisRecords: records&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于上述代码的一些注意事项:</p><ul><li><code>ValidateGenesis()</code>验证提供的生成状态，以确保所期望的不变量保持不变</li><li><code>DefaultGenesisState()</code>主要用于测试。这提供了一个最小的起源状态。</li><li>在链启动时调用<code>InitGenesis()</code>，该函数将生成状态导入到keeper中。</li><li><code>ExportGenesis()</code>在停止链后被调用，此函数将应用程序状态加载到GenesisState结构中，以便稍后导出到<code>genesis.json</code>以及来自其他模块的数据。</li></ul><p><strong>==用来配置区块数据保存/再记载的逻辑==</strong></p><h1 id="16-Complete-App"><a href="#16-Complete-App" class="headerlink" title="16 Complete App"></a>16 Complete App</h1><p>When you used the <code>starport type</code> command, your application has already been incorporated in the <code>.app/app.go</code> file.</p><p>在<code>app/app.go</code>文件，它做了以下改变:</p><ul><li><p>从每个需要的模块实例化所需的保存器。</p></li><li><p>生成每个管理员Keeper所需的storekey。</p></li><li><p>从每个模块注册处理程序。baseapp路由器的AddRoute()方法用于此目的。</p></li><li><p>从每个模块注册查询器。baseapp的queryRouter中的AddRoute()方法用于此目的。</p></li><li><p>将KVStores挂载到baseApp多存储区中提供的密钥。</p></li><li><p>设置initChainer以定义初始应用程序状态。</p></li></ul><p>因此，该文件应该如下所示</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"></span><br><span class="line">abci <span class="string">"github.com/tendermint/tendermint/abci/types"</span></span><br><span class="line"><span class="string">"github.com/tendermint/tendermint/libs/log"</span></span><br><span class="line">tmos <span class="string">"github.com/tendermint/tendermint/libs/os"</span></span><br><span class="line">dbm <span class="string">"github.com/tendermint/tm-db"</span></span><br><span class="line"></span><br><span class="line">bam <span class="string">"github.com/cosmos/cosmos-sdk/baseapp"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/codec"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/simapp"</span></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/types/module"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/version"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/auth"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/bank"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/genutil"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/params"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/staking"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/supply"</span></span><br><span class="line"><span class="string">"github.com/user/nameservice/x/nameservice"</span></span><br><span class="line">nameservicekeeper <span class="string">"github.com/user/nameservice/x/nameservice/keeper"</span></span><br><span class="line">nameservicetypes <span class="string">"github.com/user/nameservice/x/nameservice/types"</span></span><br><span class="line"><span class="comment">// this line is used by starport scaffolding</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> appName = <span class="string">"nameservice"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// 在用户目录创建两个命令文件</span></span><br><span class="line"><span class="comment">// 客户端执行文件</span></span><br><span class="line">DefaultCLIHome  = os.ExpandEnv(<span class="string">"$HOME/.nameservicecli"</span>)</span><br><span class="line"><span class="comment">// 节点执行文件</span></span><br><span class="line">DefaultNodeHome = os.ExpandEnv(<span class="string">"$HOME/.nameserviced"</span>)</span><br><span class="line"><span class="comment">// 模型的基本模块引入</span></span><br><span class="line">ModuleBasics    = module.NewBasicManager(</span><br><span class="line">genutil.AppModuleBasic&#123;&#125;,</span><br><span class="line">auth.AppModuleBasic&#123;&#125;,</span><br><span class="line">bank.AppModuleBasic&#123;&#125;,</span><br><span class="line">staking.AppModuleBasic&#123;&#125;,</span><br><span class="line">params.AppModuleBasic&#123;&#125;,</span><br><span class="line">supply.AppModuleBasic&#123;&#125;,</span><br><span class="line">nameservice.AppModuleBasic&#123;&#125;,</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">maccPerms = <span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span>&#123;</span><br><span class="line">auth.FeeCollectorName:     <span class="literal">nil</span>,</span><br><span class="line">staking.BondedPoolName:    &#123;supply.Burner, supply.Staking&#125;,</span><br><span class="line">staking.NotBondedPoolName: &#123;supply.Burner, supply.Staking&#125;,</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建codec</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MakeCodec</span><span class="params">()</span> *<span class="title">codec</span>.<span class="title">Codec</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> cdc = codec.New()</span><br><span class="line"></span><br><span class="line">ModuleBasics.RegisterCodec(cdc)</span><br><span class="line">sdk.RegisterCodec(cdc)</span><br><span class="line">codec.RegisterCrypto(cdc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> cdc.Seal()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新的app结构体</span></span><br><span class="line"><span class="keyword">type</span> NewApp <span class="keyword">struct</span> &#123;</span><br><span class="line">*bam.BaseApp</span><br><span class="line">cdc *codec.Codec</span><br><span class="line"></span><br><span class="line">invCheckPeriod <span class="keyword">uint</span></span><br><span class="line"></span><br><span class="line">keys  <span class="keyword">map</span>[<span class="keyword">string</span>]*sdk.KVStoreKey</span><br><span class="line">tKeys <span class="keyword">map</span>[<span class="keyword">string</span>]*sdk.TransientStoreKey</span><br><span class="line"></span><br><span class="line">subspaces <span class="keyword">map</span>[<span class="keyword">string</span>]params.Subspace</span><br><span class="line"></span><br><span class="line">accountKeeper     auth.AccountKeeper</span><br><span class="line">bankKeeper        bank.Keeper</span><br><span class="line">stakingKeeper     staking.Keeper</span><br><span class="line">supplyKeeper      supply.Keeper</span><br><span class="line">paramsKeeper      params.Keeper</span><br><span class="line">nameserviceKeeper nameservicekeeper.Keeper</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 3</span></span><br><span class="line">mm *module.Manager</span><br><span class="line"></span><br><span class="line">sm *module.SimulationManager</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ simapp.App = (*NewApp)(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化app</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewInitApp</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">logger log.Logger, db dbm.DB, traceStore io.Writer, loadLatest <span class="keyword">bool</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">invCheckPeriod <span class="keyword">uint</span>, baseAppOptions ...<span class="keyword">func</span>(*bam.BaseApp)</span>,</span></span><br><span class="line">) *NewApp &#123;</span><br><span class="line">cdc := MakeCodec()</span><br><span class="line"></span><br><span class="line">bApp := bam.NewBaseApp(appName, logger, db, auth.DefaultTxDecoder(cdc), baseAppOptions...)</span><br><span class="line">bApp.SetCommitMultiStoreTracer(traceStore)</span><br><span class="line">bApp.SetAppVersion(version.Version)</span><br><span class="line"></span><br><span class="line">keys := sdk.NewKVStoreKeys(</span><br><span class="line">bam.MainStoreKey,</span><br><span class="line">auth.StoreKey,</span><br><span class="line">staking.StoreKey,</span><br><span class="line">supply.StoreKey,</span><br><span class="line">params.StoreKey,</span><br><span class="line">nameservicetypes.StoreKey,</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 5</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">tKeys := sdk.NewTransientStoreKeys(staking.TStoreKey, params.TStoreKey)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = &amp;NewApp&#123;</span><br><span class="line">BaseApp:        bApp,</span><br><span class="line">cdc:            cdc,</span><br><span class="line">invCheckPeriod: invCheckPeriod,</span><br><span class="line">keys:           keys,</span><br><span class="line">tKeys:          tKeys,</span><br><span class="line">subspaces:      <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]params.Subspace),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.paramsKeeper = params.NewKeeper(app.cdc, keys[params.StoreKey], tKeys[params.TStoreKey])</span><br><span class="line">app.subspaces[auth.ModuleName] = app.paramsKeeper.Subspace(auth.DefaultParamspace)</span><br><span class="line">app.subspaces[bank.ModuleName] = app.paramsKeeper.Subspace(bank.DefaultParamspace)</span><br><span class="line">app.subspaces[staking.ModuleName] = app.paramsKeeper.Subspace(staking.DefaultParamspace)</span><br><span class="line"></span><br><span class="line">app.accountKeeper = auth.NewAccountKeeper(</span><br><span class="line">app.cdc,</span><br><span class="line">keys[auth.StoreKey],</span><br><span class="line">app.subspaces[auth.ModuleName],</span><br><span class="line">auth.ProtoBaseAccount,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app.bankKeeper = bank.NewBaseKeeper(</span><br><span class="line">app.accountKeeper,</span><br><span class="line">app.subspaces[bank.ModuleName],</span><br><span class="line">app.ModuleAccountAddrs(),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app.supplyKeeper = supply.NewKeeper(</span><br><span class="line">app.cdc,</span><br><span class="line">keys[supply.StoreKey],</span><br><span class="line">app.accountKeeper,</span><br><span class="line">app.bankKeeper,</span><br><span class="line">maccPerms,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">stakingKeeper := staking.NewKeeper(</span><br><span class="line">app.cdc,</span><br><span class="line">keys[staking.StoreKey],</span><br><span class="line">app.supplyKeeper,</span><br><span class="line">app.subspaces[staking.ModuleName],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app.stakingKeeper = *stakingKeeper.SetHooks(</span><br><span class="line">staking.NewMultiStakingHooks(),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app.nameserviceKeeper = nameservicekeeper.NewKeeper(</span><br><span class="line">app.bankKeeper,</span><br><span class="line">app.cdc,</span><br><span class="line">keys[nameservicetypes.StoreKey],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 4</span></span><br><span class="line"></span><br><span class="line">app.mm = module.NewManager(</span><br><span class="line">genutil.NewAppModule(app.accountKeeper, app.stakingKeeper, app.BaseApp.DeliverTx),</span><br><span class="line">auth.NewAppModule(app.accountKeeper),</span><br><span class="line">bank.NewAppModule(app.bankKeeper, app.accountKeeper),</span><br><span class="line">supply.NewAppModule(app.supplyKeeper, app.accountKeeper),</span><br><span class="line">nameservice.NewAppModule(app.nameserviceKeeper, app.bankKeeper),</span><br><span class="line">staking.NewAppModule(app.stakingKeeper, app.accountKeeper, app.supplyKeeper),</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 6</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app.mm.SetOrderEndBlockers(staking.ModuleName)</span><br><span class="line"></span><br><span class="line">app.mm.SetOrderInitGenesis(</span><br><span class="line">staking.ModuleName,</span><br><span class="line">auth.ModuleName,</span><br><span class="line">bank.ModuleName,</span><br><span class="line">nameservicetypes.ModuleName,</span><br><span class="line">supply.ModuleName,</span><br><span class="line">genutil.ModuleName,</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 7</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app.mm.RegisterRoutes(app.Router(), app.QueryRouter())</span><br><span class="line"></span><br><span class="line">app.SetInitChainer(app.InitChainer)</span><br><span class="line">app.SetBeginBlocker(app.BeginBlocker)</span><br><span class="line">app.SetEndBlocker(app.EndBlocker)</span><br><span class="line"></span><br><span class="line">app.SetAnteHandler(</span><br><span class="line">auth.NewAnteHandler(</span><br><span class="line">app.accountKeeper,</span><br><span class="line">app.supplyKeeper,</span><br><span class="line">auth.DefaultSigVerificationGasConsumer,</span><br><span class="line">),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app.MountKVStores(keys)</span><br><span class="line">app.MountTransientStores(tKeys)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> loadLatest &#123;</span><br><span class="line">err := app.LoadLatestVersion(app.keys[bam.MainStoreKey])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">tmos.Exit(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GenesisState <span class="keyword">map</span>[<span class="keyword">string</span>]json.RawMessage</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDefaultGenesisState</span><span class="params">()</span> <span class="title">GenesisState</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> ModuleBasics.DefaultGenesis()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(app *NewApp)</span> <span class="title">InitChainer</span><span class="params">(ctx sdk.Context, req abci.RequestInitChain)</span> <span class="title">abci</span>.<span class="title">ResponseInitChain</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> genesisState simapp.GenesisState</span><br><span class="line"></span><br><span class="line">app.cdc.MustUnmarshalJSON(req.AppStateBytes, &amp;genesisState)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> app.mm.InitGenesis(ctx, genesisState)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(app *NewApp)</span> <span class="title">BeginBlocker</span><span class="params">(ctx sdk.Context, req abci.RequestBeginBlock)</span> <span class="title">abci</span>.<span class="title">ResponseBeginBlock</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> app.mm.BeginBlock(ctx, req)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(app *NewApp)</span> <span class="title">EndBlocker</span><span class="params">(ctx sdk.Context, req abci.RequestEndBlock)</span> <span class="title">abci</span>.<span class="title">ResponseEndBlock</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> app.mm.EndBlock(ctx, req)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(app *NewApp)</span> <span class="title">LoadHeight</span><span class="params">(height <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> app.LoadVersion(height, app.keys[bam.MainStoreKey])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(app *NewApp)</span> <span class="title">ModuleAccountAddrs</span><span class="params">()</span> <span class="title">map</span>[<span class="title">string</span>]<span class="title">bool</span></span> &#123;</span><br><span class="line">modAccAddrs := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span>)</span><br><span class="line"><span class="keyword">for</span> acc := <span class="keyword">range</span> maccPerms &#123;</span><br><span class="line">modAccAddrs[supply.NewModuleAddress(acc).String()] = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> modAccAddrs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(app *NewApp)</span> <span class="title">Codec</span><span class="params">()</span> *<span class="title">codec</span>.<span class="title">Codec</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> app.cdc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(app *NewApp)</span> <span class="title">SimulationManager</span><span class="params">()</span> *<span class="title">module</span>.<span class="title">SimulationManager</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> app.sm</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetMaccPerms</span><span class="params">()</span> <span class="title">map</span>[<span class="title">string</span>][]<span class="title">string</span></span> &#123;</span><br><span class="line">modAccPerms := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> maccPerms &#123;</span><br><span class="line">modAccPerms[k] = v</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> modAccPerms</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面提到的TransientStore是KVStore的内存中实现，用于不持久的状态。</p><p>注意<strong>模块的启动方式</strong>：顺序很重要！在这里，<strong>序列是Auth-&gt; Bank-&gt; Feecollection-&gt; Stake-&gt; Distribution-&gt; Slashing，</strong>然后为stake模块设置了钩子。这是因为其中一些模块在使用之前就依赖于其他现有模块</p><p>您将注意到文件末尾有几个函数。<strong>initChainer在生成中定义帐户</strong>。json在初始链启动时映射到应用程序状态。<strong>ExportAppStateAndValidators函数帮助引导应用程序的初始状态。**</strong>BeginBlocker和EndBlocker是可选的方法，开发者可以在他们的模块中实现**。当从底层共识引擎接收到BeginBlock和EndBlock ABCI消息时，它们将分别在每个块的开始和结束被触发。</p><h1 id="17-Entry-points"><a href="#17-Entry-points" class="headerlink" title="17.Entry points"></a>17.Entry points</h1><p>In Golang the convention is to place files that compile to a binary in the <code>./cmd</code>folder of a project. For your application there are 2 binaries that you want to create:</p><p>根据golang的规则, 需要编译可执行程序到cmd目录下, 这个项目需要编译创建两个二进制文件</p><p>nameservicecli:这个二进制文件提供了==允许用户与应用程序交互的命令==。</p><p>nameserviced:这个二进制文件与bitcoind或其他加密货币守护进程类似，==因为它维护p2p连接、传播事务、处理本地存储并提供RPC接口来与网络交互==。在这种情况下，使用Tendermint进行联网和交易排序。</p><p>我们应该已经为我们搭建了以下两个文件:</p><ul><li><code>./cmd/nameserviced/main.go</code></li><li><code>./cmd/nameservicecli/main.go</code></li></ul><h2 id="nameserviced"><a href="#nameserviced" class="headerlink" title="nameserviced"></a>nameserviced</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/spf13/cobra"</span></span><br><span class="line"><span class="string">"github.com/spf13/viper"</span></span><br><span class="line"></span><br><span class="line">abci <span class="string">"github.com/tendermint/tendermint/abci/types"</span></span><br><span class="line"><span class="string">"github.com/tendermint/tendermint/libs/cli"</span></span><br><span class="line"><span class="string">"github.com/tendermint/tendermint/libs/log"</span></span><br><span class="line">tmtypes <span class="string">"github.com/tendermint/tendermint/types"</span></span><br><span class="line">dbm <span class="string">"github.com/tendermint/tm-db"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/user/nameservice/app"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/baseapp"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/debug"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/flags"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/server"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/store"</span></span><br><span class="line">sdk <span class="string">"github.com/cosmos/cosmos-sdk/types"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/auth"</span></span><br><span class="line">genutilcli <span class="string">"github.com/cosmos/cosmos-sdk/x/genutil/client/cli"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/staking"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> flagInvCheckPeriod = <span class="string">"inv-check-period"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> invCheckPeriod <span class="keyword">uint</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cdc := app.MakeCodec()</span><br><span class="line"></span><br><span class="line">app.SetConfig()</span><br><span class="line"></span><br><span class="line">ctx := server.NewDefaultContext()</span><br><span class="line">cobra.EnableCommandSorting = <span class="literal">false</span></span><br><span class="line">rootCmd := &amp;cobra.Command&#123;</span><br><span class="line">Use:               <span class="string">"nameserviced"</span>,</span><br><span class="line">Short:             <span class="string">"app Daemon (server)"</span>,</span><br><span class="line">PersistentPreRunE: server.PersistentPreRunEFn(ctx),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rootCmd.AddCommand(genutilcli.InitCmd(ctx, cdc, app.ModuleBasics, app.DefaultNodeHome))</span><br><span class="line">rootCmd.AddCommand(genutilcli.CollectGenTxsCmd(ctx, cdc, auth.GenesisAccountIterator&#123;&#125;, app.DefaultNodeHome))</span><br><span class="line">rootCmd.AddCommand(genutilcli.MigrateGenesisCmd(ctx, cdc))</span><br><span class="line">rootCmd.AddCommand(</span><br><span class="line">genutilcli.GenTxCmd(</span><br><span class="line">ctx, cdc, app.ModuleBasics, staking.AppModuleBasic&#123;&#125;,</span><br><span class="line">auth.GenesisAccountIterator&#123;&#125;, app.DefaultNodeHome, app.DefaultCLIHome,</span><br><span class="line">),</span><br><span class="line">)</span><br><span class="line">rootCmd.AddCommand(genutilcli.ValidateGenesisCmd(ctx, cdc, app.ModuleBasics))</span><br><span class="line">rootCmd.AddCommand(AddGenesisAccountCmd(ctx, cdc, app.DefaultNodeHome, app.DefaultCLIHome))</span><br><span class="line">rootCmd.AddCommand(flags.NewCompletionCmd(rootCmd, <span class="literal">true</span>))</span><br><span class="line">rootCmd.AddCommand(debug.Cmd(cdc))</span><br><span class="line"></span><br><span class="line">server.AddCommands(ctx, cdc, rootCmd, newApp, exportAppStateAndTMValidators)</span><br><span class="line"></span><br><span class="line"><span class="comment">// prepare and add flags</span></span><br><span class="line">executor := cli.PrepareBaseCmd(rootCmd, <span class="string">"AU"</span>, app.DefaultNodeHome)</span><br><span class="line">rootCmd.PersistentFlags().UintVar(&amp;invCheckPeriod, flagInvCheckPeriod,</span><br><span class="line"><span class="number">0</span>, <span class="string">"Assert registered invariants every N blocks"</span>)</span><br><span class="line">err := executor.Execute()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newApp</span><span class="params">(logger log.Logger, db dbm.DB, traceStore io.Writer)</span> <span class="title">abci</span>.<span class="title">Application</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> cache sdk.MultiStorePersistentCache</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> viper.GetBool(server.FlagInterBlockCache) &#123;</span><br><span class="line">cache = store.NewCommitKVStoreCacheManager()</span><br><span class="line">&#125;</span><br><span class="line">pruningOpts, err := server.GetPruningOptionsFromFlags()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> app.NewInitApp(</span><br><span class="line">logger, db, traceStore, <span class="literal">true</span>, invCheckPeriod,</span><br><span class="line">baseapp.SetPruning(pruningOpts),</span><br><span class="line">baseapp.SetMinGasPrices(viper.GetString(server.FlagMinGasPrices)),</span><br><span class="line">baseapp.SetHaltHeight(viper.GetUint64(server.FlagHaltHeight)),</span><br><span class="line">baseapp.SetHaltTime(viper.GetUint64(server.FlagHaltTime)),</span><br><span class="line">baseapp.SetInterBlockCache(cache),</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exportAppStateAndTMValidators</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">logger log.Logger, db dbm.DB, traceStore io.Writer, height <span class="keyword">int64</span>, forZeroHeight <span class="keyword">bool</span>, jailWhiteList []<span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> <span class="params">(json.RawMessage, []tmtypes.GenesisValidator, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> height != <span class="number">-1</span> &#123;</span><br><span class="line">aApp := app.NewInitApp(logger, db, traceStore, <span class="literal">false</span>, <span class="keyword">uint</span>(<span class="number">1</span>))</span><br><span class="line">err := aApp.LoadHeight(height)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> aApp.ExportAppStateAndValidators(forZeroHeight, jailWhiteList)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">aApp := app.NewInitApp(logger, db, traceStore, <span class="literal">true</span>, <span class="keyword">uint</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> aApp.ExportAppStateAndValidators(forZeroHeight, jailWhiteList)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>•上面的大多数代码结合了Tendermint的CLI命令，•Cosmos-SDK和您的Nameservice模块</p><h2 id="nameservicecli"><a href="#nameservicecli" class="headerlink" title="nameservicecli"></a>nameservicecli</h2><p>Finish up by confirming your <code>nameservicecli</code> command looks as follows:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"path"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/flags"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/keys"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/lcd"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/client/rpc"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/version"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/auth"</span></span><br><span class="line">authcmd <span class="string">"github.com/cosmos/cosmos-sdk/x/auth/client/cli"</span></span><br><span class="line">authrest <span class="string">"github.com/cosmos/cosmos-sdk/x/auth/client/rest"</span></span><br><span class="line"><span class="string">"github.com/cosmos/cosmos-sdk/x/bank"</span></span><br><span class="line">bankcmd <span class="string">"github.com/cosmos/cosmos-sdk/x/bank/client/cli"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/spf13/cobra"</span></span><br><span class="line"><span class="string">"github.com/spf13/viper"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/tendermint/go-amino"</span></span><br><span class="line"><span class="string">"github.com/tendermint/tendermint/libs/cli"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/user/nameservice/app"</span></span><br><span class="line"><span class="comment">// this line is used by starport scaffolding</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Configure cobra to sort commands</span></span><br><span class="line">cobra.EnableCommandSorting = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Instantiate the codec for the command line application</span></span><br><span class="line">cdc := app.MakeCodec()</span><br><span class="line"></span><br><span class="line">app.SetConfig()</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> setup keybase, viper object, etc. to be passed into</span></span><br><span class="line"><span class="comment">// the below functions and eliminate global vars, like we do</span></span><br><span class="line"><span class="comment">// with the cdc</span></span><br><span class="line"></span><br><span class="line">rootCmd := &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"nameservicecli"</span>,</span><br><span class="line">Short: <span class="string">"Command line interface for interacting with nameserviced"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add --chain-id to persistent flags and mark it required</span></span><br><span class="line">rootCmd.PersistentFlags().String(flags.FlagChainID, <span class="string">""</span>, <span class="string">"Chain ID of tendermint node"</span>)</span><br><span class="line">rootCmd.PersistentPreRunE = <span class="function"><span class="keyword">func</span><span class="params">(_ *cobra.Command, _ []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> initConfig(rootCmd)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Construct Root Command</span></span><br><span class="line">rootCmd.AddCommand(</span><br><span class="line">rpc.StatusCommand(),</span><br><span class="line">client.ConfigCmd(app.DefaultCLIHome),</span><br><span class="line">queryCmd(cdc),</span><br><span class="line">txCmd(cdc),</span><br><span class="line">flags.LineBreak,</span><br><span class="line">lcd.ServeCommand(cdc, registerRoutes),</span><br><span class="line">flags.LineBreak,</span><br><span class="line">keys.Commands(),</span><br><span class="line">flags.LineBreak,</span><br><span class="line">version.Cmd,</span><br><span class="line">flags.NewCompletionCmd(rootCmd, <span class="literal">true</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add flags and prefix all env exposed with AA</span></span><br><span class="line">executor := cli.PrepareMainCmd(rootCmd, <span class="string">"AA"</span>, app.DefaultCLIHome)</span><br><span class="line"></span><br><span class="line">err := executor.Execute()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Failed executing CLI command: %s, exiting...\n"</span>, err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryCmd</span><span class="params">(cdc *amino.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line">queryCmd := &amp;cobra.Command&#123;</span><br><span class="line">Use:     <span class="string">"query"</span>,</span><br><span class="line">Aliases: []<span class="keyword">string</span>&#123;<span class="string">"q"</span>&#125;,</span><br><span class="line">Short:   <span class="string">"Querying subcommands"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">queryCmd.AddCommand(</span><br><span class="line">authcmd.GetAccountCmd(cdc),</span><br><span class="line">flags.LineBreak,</span><br><span class="line">rpc.ValidatorCommand(cdc),</span><br><span class="line">rpc.BlockCommand(),</span><br><span class="line">authcmd.QueryTxsByEventsCmd(cdc),</span><br><span class="line">authcmd.QueryTxCmd(cdc),</span><br><span class="line">flags.LineBreak,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// add modules' query commands</span></span><br><span class="line">app.ModuleBasics.AddQueryCommands(queryCmd, cdc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> queryCmd</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">txCmd</span><span class="params">(cdc *amino.Codec)</span> *<span class="title">cobra</span>.<span class="title">Command</span></span> &#123;</span><br><span class="line">txCmd := &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">"tx"</span>,</span><br><span class="line">Short: <span class="string">"Transactions subcommands"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">txCmd.AddCommand(</span><br><span class="line">bankcmd.SendTxCmd(cdc),</span><br><span class="line">flags.LineBreak,</span><br><span class="line">authcmd.GetSignCommand(cdc),</span><br><span class="line">authcmd.GetMultiSignCommand(cdc),</span><br><span class="line">flags.LineBreak,</span><br><span class="line">authcmd.GetBroadcastCommand(cdc),</span><br><span class="line">authcmd.GetEncodeCommand(cdc),</span><br><span class="line">authcmd.GetDecodeCommand(cdc),</span><br><span class="line">flags.LineBreak,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// add modules' tx commands</span></span><br><span class="line">app.ModuleBasics.AddTxCommands(txCmd, cdc)</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove auth and bank commands as they're mounted under the root tx command</span></span><br><span class="line"><span class="keyword">var</span> cmdsToRemove []*cobra.Command</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, cmd := <span class="keyword">range</span> txCmd.Commands() &#123;</span><br><span class="line"><span class="keyword">if</span> cmd.Use == auth.ModuleName || cmd.Use == bank.ModuleName &#123;</span><br><span class="line">cmdsToRemove = <span class="built_in">append</span>(cmdsToRemove, cmd)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">txCmd.RemoveCommand(cmdsToRemove...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> txCmd</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// registerRoutes registers the routes from the different modules for the LCD.</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> details on the routes added for each module are in the module documentation</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> If making updates here you also need to update the test helper in client/lcd/test_helper.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">registerRoutes</span><span class="params">(rs *lcd.RestServer)</span></span> &#123;</span><br><span class="line">client.RegisterRoutes(rs.CliCtx, rs.Mux)</span><br><span class="line">authrest.RegisterTxRoutes(rs.CliCtx, rs.Mux)</span><br><span class="line">app.ModuleBasics.RegisterRESTRoutes(rs.CliCtx, rs.Mux)</span><br><span class="line"><span class="comment">// this line is used by starport scaffolding # 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initConfig</span><span class="params">(cmd *cobra.Command)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">home, err := cmd.PersistentFlags().GetString(cli.HomeFlag)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cfgFile := path.Join(home, <span class="string">"config"</span>, <span class="string">"config.toml"</span>)</span><br><span class="line"><span class="keyword">if</span> _, err := os.Stat(cfgFile); err == <span class="literal">nil</span> &#123;</span><br><span class="line">viper.SetConfigFile(cfgFile)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := viper.ReadInConfig(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := viper.BindPFlag(flags.FlagChainID, cmd.PersistentFlags().Lookup(flags.FlagChainID)); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := viper.BindPFlag(cli.EncodingFlag, cmd.PersistentFlags().Lookup(cli.EncodingFlag)); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> viper.BindPFlag(cli.OutputFlag, cmd.PersistentFlags().Lookup(cli.OutputFlag))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:</p><p>代码结合了来自Tendermint、Cosmos-SDK和Nameservice模块的CLI命令。<br>cobra CLI文档(打开新窗口)将有助于理解上述代码。<br>您可以在这里看到早些时候定义的ModuleClient。<br>注意这些路由是如何包含在registerRoutes函数中的。</p><h1 id="18-go-mod-and-Makefile"><a href="#18-go-mod-and-Makefile" class="headerlink" title="18.go.mod and Makefile"></a>18.go.mod and Makefile</h1><h2 id="Starport-serve"><a href="#Starport-serve" class="headerlink" title="Starport serve"></a>Starport serve</h2><p>Having bootstrapped your application with starport you can use the Starport utility <code>starport serve</code> to get your blockchain running. Make sure to include your <code>nametoken</code> into your <code>config.yml</code> file</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="number">1</span></span><br><span class="line">accounts:</span><br><span class="line">  - name: user1</span><br><span class="line">    coins: [<span class="string">"1000token"</span>, <span class="string">"100000000stake"</span>, <span class="string">"10000nametoken"</span>]</span><br><span class="line">  - name: user2</span><br><span class="line">    coins: [<span class="string">"500token"</span>, <span class="string">"1000nametoken"</span>]</span><br><span class="line">validator:</span><br><span class="line">  name: user1</span><br><span class="line">  staked: <span class="string">"100000000stake"</span></span><br></pre></td></tr></table></figure><h2 id="go-mod-and-Makefile"><a href="#go-mod-and-Makefile" class="headerlink" title="go.mod and Makefile"></a>go.mod and Makefile</h2><h3 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h3><p>Help users build your application by writing a <code>./Makefile</code> in the root directory that includes common commands. The scaffolding tool has created a generic makefile that you will be able to use:</p><p>通过在包含常用命令的根目录中编写./Makefile来帮助用户构建应用程序。 脚手架工具已经创建了一个通用的makefile，您将可以使用：</p><p><strong>NOTE</strong>: The below Makefile contains some of same commands as the Cosmos SDK and Tendermint Makefiles.</p><p>下面的Makefile包含与Cosmos SDK和Tendermint Makefile相同的命令。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PACKAGES=$(shell <span class="keyword">go</span> list ./... | grep -v <span class="string">'/simulation'</span>)</span><br><span class="line"></span><br><span class="line">VERSION := $(shell echo $(shell git describe --tags) | sed <span class="string">'s/^v//'</span>)</span><br><span class="line">COMMIT := $(shell git log <span class="number">-1</span> --format=<span class="string">'%H'</span>)</span><br><span class="line"></span><br><span class="line">ldflags = -X github.com/cosmos/cosmos-sdk/version.Name=NameService \</span><br><span class="line">-X github.com/cosmos/cosmos-sdk/version.ServerName=nameserviced \</span><br><span class="line">-X github.com/cosmos/cosmos-sdk/version.ClientName=nameservicecli \</span><br><span class="line">-X github.com/cosmos/cosmos-sdk/version.Version=$(VERSION) \</span><br><span class="line">-X github.com/cosmos/cosmos-sdk/version.Commit=$(COMMIT) </span><br><span class="line"></span><br><span class="line">BUILD_FLAGS := -ldflags <span class="string">'$(ldflags)'</span></span><br><span class="line"></span><br><span class="line">all: install</span><br><span class="line"></span><br><span class="line">install: <span class="keyword">go</span>.sum</span><br><span class="line">@echo <span class="string">"--&gt; Installing nameserviced &amp; nameservicecli"</span></span><br><span class="line">@<span class="keyword">go</span> install -mod=readonly $(BUILD_FLAGS) ./cmd/nameserviced</span><br><span class="line">@<span class="keyword">go</span> install -mod=readonly $(BUILD_FLAGS) ./cmd/nameservicecli</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span>.sum: <span class="keyword">go</span>.mod</span><br><span class="line">@echo <span class="string">"--&gt; Ensure dependencies have not been modified"</span></span><br><span class="line">GO111MODULE=on <span class="keyword">go</span> mod verify</span><br><span class="line"></span><br><span class="line">test:</span><br><span class="line">@<span class="keyword">go</span> test -mod=readonly $(PACKAGES)</span><br></pre></td></tr></table></figure><h4 id="How-about-including-Ledger-Nano-S-support"><a href="#How-about-including-Ledger-Nano-S-support" class="headerlink" title="How about including Ledger Nano S support?"></a>How about including Ledger Nano S support?</h4><p>This requires a few small changes:</p><ul><li><p>Create a file <code>Makefile.ledger</code> with the following content:</p><p><code>404: Not Found</code></p></li><li><p>Add <code>include Makefile.ledger</code> at the beginning of the Makefile:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BUILD_FLAGS := -ldflags <span class="string">'$(ldflags)'</span></span><br><span class="line"></span><br><span class="line">include Makefile.ledger</span><br><span class="line">all: install</span><br></pre></td></tr></table></figure></li></ul><h3 id="go-mod"><a href="#go-mod" class="headerlink" title="go.mod"></a>go.mod</h3><p>Cosmos SDK apps currently depend on specific versions of some libraries. The below manifest contains all the necessary versions. To get started replace the contents of the <code>./go.mod</code> file with the <code>constraints</code> and <code>overrides</code> below:</p><p>Golang有一些依赖管理工具。 在本教程中，您将使用Go模块。 Go Modules在存储库的根目录中使用go.mod文件来定义应用程序需要的依赖项。 Cosmos SDK应用程序当前取决于某些库的特定版本。 以下清单包含所有必需的版本。 首先，将./go.mod文件的内容替换为以下约束和替代：</p><ul><li>You will have to run <code>go get ./...</code> to get all the modules the application is using. This command will get the dependency version stated in the <code>go.mod</code> file.</li><li>If you would like to use a specific version of a dependency then you have to run <code>go get github.com/&lt;github_org&gt;/&lt;repo_name&gt;@&lt;version&gt;</code></li></ul><h4 id="Building-the-app"><a href="#Building-the-app" class="headerlink" title="Building the app"></a>Building the app</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Install the app into your $GOBIN</span><br><span class="line"><span class="built_in">make</span> install</span><br><span class="line"></span><br><span class="line"># Now you should be able to run the following commands:</span><br><span class="line">nameserviced help</span><br><span class="line">nameservicecli help</span><br></pre></td></tr></table></figure><p><strong>mac M1 Big Sur 11.2.1 make install 会报错:</strong> </p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/kGFHvi.png" alt="kGFHvi"></p><p>unbutu服务器环境没问题:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/uLBvnx.png" alt="uLBvnx"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/W4IGk9.png" alt="W4IGk9"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/1ZdPsS.png" alt="1ZdPsS"></p><h1 id="19-Build-and-run-the-app"><a href="#19-Build-and-run-the-app" class="headerlink" title="19 Build and run the app"></a>19 Build and run the app</h1><h2 id="Building-the-nameservice-application"><a href="#Building-the-nameservice-application" class="headerlink" title="Building the nameservice application"></a>Building the <code>nameservice</code> application</h2><p>This repo contains a complete <code>nameservice</code> application, scaffolded with starport. You should be able to run the application using <code>starport serve</code> in the home directory:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ starport serve</span><br><span class="line"></span><br><span class="line">📦 Installing dependencies...</span><br><span class="line">🛠️  Building the app...</span><br><span class="line">🙂 Created an account. Password (mnemonic): insane flash movie sketch saddle antique mean season damp thunder tag reunion quantum sock cube early glimpse cabbage smile photo hill relax couch sweet</span><br><span class="line">🙂 Created an account. Password (mnemonic): whip bone crane flag lesson mule valley soup faith include october monkey volume iron mushroom cry acid <span class="keyword">case</span> village clog abstract antenna wife eyebrow</span><br><span class="line">🌍 Running a Cosmos <span class="string">'nameservice'</span> app with Tendermint at http:<span class="comment">//localhost:26657.</span></span><br><span class="line">🌍 Running a server at http:<span class="comment">//localhost:1317 (LCD)</span></span><br><span class="line"></span><br><span class="line">🚀 Get started: http:<span class="comment">//localhost:12345/</span></span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/fRB7hY.png" alt="fRB7hY"></p><p>Now, you can install and run the application.</p><p>If you have not completed the tutorial then you can follow the below cloning instructions:</p><p>tutorial的所有项目完整代码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Clone the source of the tutorial repository</span><br><span class="line">git clone https:<span class="comment">//github.com/cosmos/sdk-tutorials.git</span></span><br><span class="line">cd sdk-tutorials</span><br><span class="line">cd nameservice/nameservice</span><br><span class="line">starport serve</span><br></pre></td></tr></table></figure><p>注意: 如果你有用于ledger的Cosmos应用，你想使用它，当你用nameservicecli键创建键时，只需在末尾添加——ledger即可。这就是你所需要的。当您签名时，user1将被识别为分类帐密钥，并将需要一个设备。</p><p>After you have generated a genesis transaction, you will have to input the genTx into the genesis file, so that your nameservice chain is aware of the validators. To do so, run:</p><p>在生成了一个创世交易之后，您必须将genTx输入到生成文件中，这样您的<strong>namesservice链才能知道验证器</strong>。为此，运行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserviced collect-gentxs</span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/7lmvlW.png" alt="7lmvlW"></p><p>格式化以后内容为:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"app_message"</span>: &#123;</span><br><span class="line"><span class="attr">"auth"</span>: &#123;</span><br><span class="line"><span class="attr">"accounts"</span>: [&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"cosmos-sdk/Account"</span>,</span><br><span class="line"><span class="attr">"value"</span>: &#123;</span><br><span class="line"><span class="attr">"account_number"</span>: <span class="string">"0"</span>,</span><br><span class="line"><span class="attr">"address"</span>: <span class="string">"cosmos108egxhu7u7c63erhkxqr23zuydh07zhuner794"</span>,</span><br><span class="line"><span class="attr">"coins"</span>: [&#123;</span><br><span class="line"><span class="attr">"amount"</span>: <span class="string">"10000"</span>,</span><br><span class="line"><span class="attr">"denom"</span>: <span class="string">"nametoken"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">"amount"</span>: <span class="string">"100000000"</span>,</span><br><span class="line"><span class="attr">"denom"</span>: <span class="string">"stake"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">"amount"</span>: <span class="string">"1000"</span>,</span><br><span class="line"><span class="attr">"denom"</span>: <span class="string">"token"</span></span><br><span class="line">&#125;],</span><br><span class="line"><span class="attr">"public_key"</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">"sequence"</span>: <span class="string">"0"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"cosmos-sdk/Account"</span>,</span><br><span class="line"><span class="attr">"value"</span>: &#123;</span><br><span class="line"><span class="attr">"account_number"</span>: <span class="string">"0"</span>,</span><br><span class="line"><span class="attr">"address"</span>: <span class="string">"cosmos1ynhnxn39c5w00p4qh3647c35k4gjgq4cprgvza"</span>,</span><br><span class="line"><span class="attr">"coins"</span>: [&#123;</span><br><span class="line"><span class="attr">"amount"</span>: <span class="string">"1000"</span>,</span><br><span class="line"><span class="attr">"denom"</span>: <span class="string">"nametoken"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">"amount"</span>: <span class="string">"500"</span>,</span><br><span class="line"><span class="attr">"denom"</span>: <span class="string">"token"</span></span><br><span class="line">&#125;],</span><br><span class="line"><span class="attr">"public_key"</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">"sequence"</span>: <span class="string">"0"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;],</span><br><span class="line"><span class="attr">"params"</span>: &#123;</span><br><span class="line"><span class="attr">"max_memo_characters"</span>: <span class="string">"256"</span>,</span><br><span class="line"><span class="attr">"sig_verify_cost_ed25519"</span>: <span class="string">"590"</span>,</span><br><span class="line"><span class="attr">"sig_verify_cost_secp256k1"</span>: <span class="string">"1000"</span>,</span><br><span class="line"><span class="attr">"tx_sig_limit"</span>: <span class="string">"7"</span>,</span><br><span class="line"><span class="attr">"tx_size_cost_per_byte"</span>: <span class="string">"10"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"bank"</span>: &#123;</span><br><span class="line"><span class="attr">"send_enabled"</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"genutil"</span>: &#123;</span><br><span class="line"><span class="attr">"gentxs"</span>: [&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"cosmos-sdk/StdTx"</span>,</span><br><span class="line"><span class="attr">"value"</span>: &#123;</span><br><span class="line"><span class="attr">"fee"</span>: &#123;</span><br><span class="line"><span class="attr">"amount"</span>: [],</span><br><span class="line"><span class="attr">"gas"</span>: <span class="string">"200000"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"memo"</span>: <span class="string">"70dfc95d3f9869145d79387c201eae58399074d8@172.17.59.2:26656"</span>,</span><br><span class="line"><span class="attr">"msg"</span>: [&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"cosmos-sdk/MsgCreateValidator"</span>,</span><br><span class="line"><span class="attr">"value"</span>: &#123;</span><br><span class="line"><span class="attr">"commission"</span>: &#123;</span><br><span class="line"><span class="attr">"max_change_rate"</span>: <span class="string">"0.010000000000000000"</span>,</span><br><span class="line"><span class="attr">"max_rate"</span>: <span class="string">"0.200000000000000000"</span>,</span><br><span class="line"><span class="attr">"rate"</span>: <span class="string">"0.100000000000000000"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"delegator_address"</span>: <span class="string">"cosmos108egxhu7u7c63erhkxqr23zuydh07zhuner794"</span>,</span><br><span class="line"><span class="attr">"description"</span>: &#123;</span><br><span class="line"><span class="attr">"details"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"identity"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"moniker"</span>: <span class="string">"mynode"</span>,</span><br><span class="line"><span class="attr">"security_contact"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"website"</span>: <span class="string">""</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"min_self_delegation"</span>: <span class="string">"1"</span>,</span><br><span class="line"><span class="attr">"pubkey"</span>: <span class="string">"cosmosvalconspub1zcjduepq2ndyr7spzqr0u3pufhdwmqlxkcg9cww3ywesywvn376h4aheqdfqqgjsue"</span>,</span><br><span class="line"><span class="attr">"validator_address"</span>: <span class="string">"cosmosvaloper108egxhu7u7c63erhkxqr23zuydh07zhukdhtfx"</span>,</span><br><span class="line"><span class="attr">"value"</span>: &#123;</span><br><span class="line"><span class="attr">"amount"</span>: <span class="string">"100000000"</span>,</span><br><span class="line"><span class="attr">"denom"</span>: <span class="string">"stake"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;],</span><br><span class="line"><span class="attr">"signatures"</span>: [&#123;</span><br><span class="line"><span class="attr">"pub_key"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"tendermint/PubKeySecp256k1"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"A0ETGI578auv3BEwLbbDJwtLF3A+2MnWLtjexi1f/r5G"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"signature"</span>: <span class="string">"WtBOWmg6ZI5cywhQQFbJ8bBNUODESALzwnXXXRmeb8U672UkX1y6xNSl4L8tj+mxLgDcpndprqhgTVK5gE+wKA=="</span></span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"nameservice"</span>: &#123;</span><br><span class="line"><span class="attr">"whois_records"</span>: []</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"params"</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">"staking"</span>: &#123;</span><br><span class="line"><span class="attr">"delegations"</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">"exported"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"last_total_power"</span>: <span class="string">"0"</span>,</span><br><span class="line"><span class="attr">"last_validator_powers"</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">"params"</span>: &#123;</span><br><span class="line"><span class="attr">"bond_denom"</span>: <span class="string">"stake"</span>,</span><br><span class="line"><span class="attr">"historical_entries"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"max_entries"</span>: <span class="number">7</span>,</span><br><span class="line"><span class="attr">"max_validators"</span>: <span class="number">100</span>,</span><br><span class="line"><span class="attr">"unbonding_time"</span>: <span class="string">"1814400000000000"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"redelegations"</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">"unbonding_delegations"</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">"validators"</span>: <span class="literal">null</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"supply"</span>: &#123;</span><br><span class="line"><span class="attr">"supply"</span>: []</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"chain_id"</span>: <span class="string">"nameservice"</span>,</span><br><span class="line"><span class="attr">"gentxs_dir"</span>: <span class="string">"/root/.nameserviced/config/gentx"</span>,</span><br><span class="line"><span class="attr">"moniker"</span>: <span class="string">"mynode"</span>,</span><br><span class="line"><span class="attr">"node_id"</span>: <span class="string">"70dfc95d3f9869145d79387c201eae58399074d8"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and to make sure your genesis file is correct, run:</p><p>并且确定你的创世文件是正确的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserviced validate-genesis</span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/KRO6CI.png" alt="KRO6CI"></p><p>You can now start <code>nameserviced</code> by calling <code>nameserviced start</code>. You will see logs begin streaming that represent blocks being produced, this will take a couple of seconds.</p><p>你现在可以通过调用’ nameserviced start ‘来启动’ nameserviced ‘。您将看到表示正在生成的块的日志流开始，这需要几秒钟的时间。</p><p><strong>==注意官方有命令(set-name)写反了~!!!==</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> First check the accounts to ensure they have funds</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查资金余额</span></span><br><span class="line">nameservicecli query account $(nameservicecli keys show user1 -a)</span><br><span class="line">nameservicecli query account $(nameservicecli keys show user2 -a)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Buy your first name using your coins from the genesis file</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用coins购买域名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 发起购买域名交易</span></span><br><span class="line">nameservicecli tx nameservice buy-name user1.id 5nametoken --from user1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set the value <span class="keyword">for</span> the name you just bought</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置域名的解析值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置域名解析值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意官方写反了!!!!!!</span></span><br><span class="line">nameservicecli tx nameservice set-name 8.8.8.8 user1.id --from user1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Try out a resolve query against the name you registered</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 针对您注册的名称尝试一个resolve查询</span></span><br><span class="line">nameservicecli query nameservice resolve user1.id</span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt; 8.8.8.8</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Try out a whois query against the name you just registered</span></span><br><span class="line">nameservicecli query nameservice get-whois user1.id</span><br><span class="line"><span class="meta">#</span><span class="bash"> whois查询</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt; &#123;<span class="string">"value"</span>:<span class="string">"8.8.8.8"</span>,<span class="string">"owner"</span>:<span class="string">"cosmos1l7k5tdt2qam0zecxrx78yuw447ga54dsmtpk2s"</span>,<span class="string">"price"</span>:[&#123;<span class="string">"denom"</span>:<span class="string">"nametoken"</span>,<span class="string">"amount"</span>:<span class="string">"5"</span>&#125;]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> user2 buys name from user1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> user2买user1的域名</span></span><br><span class="line">nameservicecli tx nameservice buy-name user1.id 10nametoken --from user2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> user2 decides to delete the name she just bought from user1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> use2删除域名</span></span><br><span class="line">nameservicecli tx nameservice delete-name user1.id --from user2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Try out a whois query against the name you just deleted</span></span><br><span class="line">nameservicecli query nameservice get-whois user1.id</span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt; &#123;<span class="string">"value"</span>:<span class="string">""</span>,<span class="string">"owner"</span>:<span class="string">""</span>,<span class="string">"price"</span>:[&#123;<span class="string">"denom"</span>:<span class="string">"nametoken"</span>,<span class="string">"amount"</span>:<span class="string">"1"</span>&#125;]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有的nameservice域名</span></span><br><span class="line">nameservicecli query nameservice list-whois</span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/E8GyGu.png" alt="E8GyGu"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/E4LXXw.png" alt="E4LXXw"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/HvLCWY.png" alt="HvLCWY"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/6NfJan.png" alt="6NfJan"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/s8W6Lp.png" alt="s8W6Lp"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/OgInYy.png" alt="OgInYy"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/npCWzq.png" alt="npCWzq"></p><p><strong>检查一下user2是否成功购买:</strong></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/mxpNfQ.png" alt="mxpNfQ"></p><p>余额检查:</p><ul><li><p>购买前: user1: 9990, user2: 1000</p></li><li><p>购买后: user1: 9990 - 5 + 50 = 10035 , user2: 1000 - 50 = 950</p></li></ul><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/MWdcH3.png" alt="MWdcH3"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/TOzYHX.png" alt="TOzYHX"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/V7Jmds.png" alt="V7Jmds"></p><h2 id="Run-second-node-on-another-machine-Optional"><a href="#Run-second-node-on-another-machine-Optional" class="headerlink" title="Run second node on another machine (Optional)"></a>Run second node on another machine (Optional)</h2><p>Open terminal to run commands against that just created to install nameserviced and nameservicecli</p><p>打开终端，对刚刚创建的用于安装nameserviced和nameservicecli的终端运行命令</p><p>复制项目, 进入目录:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="init-use-another-moniker-绰号-and-same-namechain"><a href="#init-use-another-moniker-绰号-and-same-namechain" class="headerlink" title="init use another moniker(绰号) and same namechain"></a>init use another moniker(绰号) and same namechain</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserviced init &lt;moniker<span class="number">-2</span>&gt; --chain-id namechain</span><br></pre></td></tr></table></figure><h3 id="overwrite-nameserviced-config-genesis-json-with-first-node’s-genesis-json"><a href="#overwrite-nameserviced-config-genesis-json-with-first-node’s-genesis-json" class="headerlink" title="overwrite ~/.nameserviced/config/genesis.json with first node’s genesis.json"></a>overwrite ~/.nameserviced/config/genesis.json with first node’s genesis.json</h3><h3 id="change-persistent-peers"><a href="#change-persistent-peers" class="headerlink" title="change persistent_peers"></a>change persistent_peers</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /.nameserviced/config/config.toml</span><br><span class="line">persistent_peers = "id@first_node_ip:26656"</span><br></pre></td></tr></table></figure><p>To find the node id of the first machine, run the following command on that machine:</p><p><code>nameserviced tendermint show-node-id</code></p><h3 id="start-this-second-node"><a href="#start-this-second-node" class="headerlink" title="start this second node"></a>start this second node</h3><p><code>nameserviced start</code></p><h1 id="20-Run-REST-routes"><a href="#20-Run-REST-routes" class="headerlink" title="20 Run REST routes"></a>20 Run REST routes</h1><p>==<strong>对于Rest接口，发送需要签名的交易需要本地签名，所以只有查询接口能够立即看到效果，其他接口都要等待签名</strong>==</p><p>==<strong>我的做法是使用前端cosmosjs：<a href="https://github.com/cosmostation/cosmosjs==" target="_blank" rel="noopener">https://github.com/cosmostation/cosmosjs==</a></strong></p><p>Now that you tested your CLI queries and transactions, time to test same things in the REST server. Leave the <code>nameserviced</code> that you had running earlier and start by gathering your addresses:</p><p>现在您已经测试了CLI查询和事务，现在可以在REST服务器中测试相同的内容了。离开你之前运行的’ nameserviced ‘，开始收集你的地址:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看用户的完整信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nameservicecli keys show 用户名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有的账户信息</span></span><br><span class="line">nameservicecli keys list</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nameservicecli keys show user1 --address</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nameservicecli keys show user2 --address</span></span><br></pre></td></tr></table></figure><p>Now its time to start the <code>rest-server</code> in another terminal window:</p><p>开启rest服务在另一个客户端:</p><p><strong>==注意,如果你的app已经开启了(即starport serve),那么默认的1317端口的rest服务已经打开,所以不需要使用以下命令.==</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nameservicecli rest-server --chain-id namechain --trust-node</span></span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/i6Skw9.png" alt="i6Skw9"></p><p>Then you can construct and run the following queries:</p><p>接下来就可以开始查询:</p><blockquote><p>NOTE: Be sure to substitute your password and buyer/owner addresses for the ones listed below!</p><p>请务必将您的密码和buyer/owner地址替换为下面列出的那些!</p></blockquote><p>==<strong>注意:此处官方文档的测试参数也有错误!!!, 参数amount要换成price</strong>==</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Get the sequence and account numbers <span class="keyword">for</span> user1 to construct the below requests</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取user1的序列和账号来构造下面的请求</span></span><br><span class="line">curl -s http://localhost:1317/auth/accounts/$(nameservicecli keys show user1 -a)</span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt; &#123;<span class="string">"type"</span>:<span class="string">"auth/Account"</span>,<span class="string">"value"</span>:&#123;<span class="string">"address"</span>:<span class="string">"cosmos127qa40nmq56hu27ae263zvfk3ey0tkapwk0gq6"</span>,<span class="string">"coins"</span>:[&#123;<span class="string">"denom"</span>:<span class="string">"jackCoin"</span>,<span class="string">"amount"</span>:<span class="string">"1000"</span>&#125;,&#123;<span class="string">"denom"</span>:<span class="string">"nametoken"</span>,<span class="string">"amount"</span>:<span class="string">"1010"</span>&#125;],<span class="string">"public_key"</span>:&#123;<span class="string">"type"</span>:<span class="string">"tendermint/PubKeySecp256k1"</span>,<span class="string">"value"</span>:<span class="string">"A9YxyEbSWzLr+IdK/PuMUYmYToKYQ3P/pM8SI1Bxx3wu"</span>&#125;,<span class="string">"account_number"</span>:<span class="string">"0"</span>,<span class="string">"sequence"</span>:<span class="string">"1"</span>&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Get the sequence and account numbers <span class="keyword">for</span> user2 to construct the below requests</span></span><br><span class="line">curl -s http://localhost:1317/auth/accounts/$(nameservicecli keys show user2 -a)</span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt; &#123;<span class="string">"type"</span>:<span class="string">"auth/Account"</span>,<span class="string">"value"</span>:&#123;<span class="string">"address"</span>:<span class="string">"cosmos1h7ztnf2zkf4558hdxv5kpemdrg3tf94hnpvgsl"</span>,<span class="string">"coins"</span>:[&#123;<span class="string">"denom"</span>:<span class="string">"aliceCoin"</span>,<span class="string">"amount"</span>:<span class="string">"1000"</span>&#125;,&#123;<span class="string">"denom"</span>:<span class="string">"nametoken"</span>,<span class="string">"amount"</span>:<span class="string">"980"</span>&#125;],<span class="string">"public_key"</span>:&#123;<span class="string">"type"</span>:<span class="string">"tendermint/PubKeySecp256k1"</span>,<span class="string">"value"</span>:<span class="string">"Avc7qwecLHz5qb1EKDuSTLJfVOjBQezk0KSPDNybLONJ"</span>&#125;,<span class="string">"account_number"</span>:<span class="string">"1"</span>,<span class="string">"sequence"</span>:<span class="string">"2"</span>&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Buy another name <span class="keyword">for</span> user1, first create the raw transaction</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NOTE: Be sure to specialize this request <span class="keyword">for</span> your specific environment, also the <span class="string">"buyer"</span> and <span class="string">"from"</span> should be the same address</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为user1购买另一个名称，首先创建原始交易</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意:请确保针对您的特定环境专门处理此请求，而且“buyer”和“from”应该是相同的地址</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意此处不是官方的amount,而是price, 在官网有错</span></span><br><span class="line">curl -X POST -s http://localhost:1317/nameservice/whois --data-binary '&#123;"base_req":&#123;"from":"'$(nameservicecli keys show user1 -a)'","chain_id":"namechain"&#125;,"name":"user1.id","price":"5nametoken","buyer":"'$(nameservicecli keys show user1 -a)'"&#125;' &gt; unsignedTx.json</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Then sign this transaction</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NOTE: In a real environment the raw transaction should be signed on the client side. Also the sequence needs to be adjusted, depending on what the query of user2<span class="string">'s account has shown.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后签署该事务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意:在真实环境中，原始交易应该在客户端签名。此外，还需要根据user2帐户的查询显示的内容调整序列。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意. 这里的sequence、account-number都是第一步查询序号和账户号的得到的,下面的命令自行替换</span></span><br><span class="line">nameservicecli tx sign unsignedTx.json --from user1 --offline --chain-id namechain --sequence 1 --account-number 0 &gt; signedTx.json</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 不使用离线模式进行签名</span></span><br><span class="line">nameservicecli tx sign unsignedTx.json --from user1 --chain-id namechain &gt; signedTx.json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> And finally broadcast the signed transaction</span></span><br><span class="line">nameservicecli tx broadcast signedTx.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt; &#123; <span class="string">"height"</span>: <span class="string">"266"</span>, <span class="string">"txhash"</span>: <span class="string">"C041AF0CE32FBAE5A4DD6545E4B1F2CB786879F75E2D62C79D690DAE163470BC"</span>, <span class="string">"logs"</span>: [  &#123;   <span class="string">"msg_index"</span>: <span class="string">"0"</span>,   <span class="string">"success"</span>: <span class="literal">true</span>,   <span class="string">"log"</span>: <span class="string">""</span>  &#125; ],<span class="string">"gas_wanted"</span>:<span class="string">"200000"</span>, <span class="string">"gas_used"</span>: <span class="string">"41510"</span>, <span class="string">"tags"</span>: [  &#123;   <span class="string">"key"</span>: <span class="string">"action"</span>,   <span class="string">"value"</span>: <span class="string">"buy_name"</span>  &#125; ]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set the data <span class="keyword">for</span> that name that user1 just bought</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NOTE: Be sure to specialize this request <span class="keyword">for</span> your specific environment, also the <span class="string">"owner"</span> and <span class="string">"from"</span> should be the same address</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为user1刚刚购买的名称设置数据</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意:请确保为您的特定环境专门化此请求，而且“owner”和“from”应该是相同的地址</span></span><br><span class="line">curl -X PUT -s http://localhost:1317/nameservice/whois --data-binary '&#123;"base_req":&#123;"from":"'$(nameservicecli keys show user1 -a)'","chain_id":"namechain","sequence": "1","account_number": "2"&#125;,"name":"user1.id","value":"8.8.4.4","owner":"'$(nameservicecli keys show user1 -a)'"&#125;' &gt; unsignedTx.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt; &#123;<span class="string">"check_tx"</span>:&#123;<span class="string">"gasWanted"</span>:<span class="string">"200000"</span>,<span class="string">"gasUsed"</span>:<span class="string">"1242"</span>&#125;,<span class="string">"deliver_tx"</span>:&#123;<span class="string">"log"</span>:<span class="string">"Msg 0: "</span>,<span class="string">"gasWanted"</span>:<span class="string">"200000"</span>,<span class="string">"gasUsed"</span>:<span class="string">"1352"</span>,<span class="string">"tags"</span>:[&#123;<span class="string">"key"</span>:<span class="string">"YWN0aW9u"</span>,<span class="string">"value"</span>:<span class="string">"c2V0X25hbWU="</span>&#125;]&#125;,<span class="string">"hash"</span>:<span class="string">"B4DF0105D57380D60524664A2E818428321A0DCA1B6B2F091FB3BEC54D68FAD7"</span>,<span class="string">"height"</span>:<span class="string">"26"</span>&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Again we need to sign and broadcast</span></span><br><span class="line">nameservicecli tx sign unsignedTx.json --from user1 --offline --chain-id namechain --sequence 2 --account-number 0 &gt; signedTx.json</span><br><span class="line">nameservicecli tx broadcast signedTx.json</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Query the value <span class="keyword">for</span> the name user1 just <span class="built_in">set</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -s http://localhost:1317/nameservice/whois/user1.id/resolve</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 8.8.4.4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Query whois <span class="keyword">for</span> the name user1 just bought</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -s http://localhost:1317/nameservice/whois/user1.id</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt; &#123;<span class="string">"value"</span>:<span class="string">"8.8.8.8"</span>,<span class="string">"owner"</span>:<span class="string">"cosmos127qa40nmq56hu27ae263zvfk3ey0tkapwk0gq6"</span>,<span class="string">"price"</span>:[&#123;<span class="string">"denom"</span>:<span class="string">"STAKE"</span>,<span class="string">"amount"</span>:<span class="string">"10"</span>&#125;]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> user2 buys name from user1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -X POST -s http://localhost:1317/nameservice/whois --data-binary <span class="string">'&#123;"base_req":&#123;"from":"'</span>$(nameservicecli keys show user2 -a)<span class="string">'","chain_id":"namechain"&#125;,"name":"user1.id","price":"10nametoken","buyer":"'</span>$(nameservicecli keys show user2 -a)<span class="string">'"&#125;'</span> &gt; unsignedTx.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Again we need to sign and broadcast</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NOTE: The account number has changed to 1 and the sequence is now 2, according to the query of user2<span class="string">'s account</span></span></span><br><span class="line">nameservicecli tx sign unsignedTx.json --from user2 --offline --chain-id namechain --sequence 2 --account-number 1 &gt; signedTx.json</span><br><span class="line">nameservicecli tx broadcast signedTx.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt; &#123; <span class="string">"height"</span>: <span class="string">"1515"</span>, <span class="string">"txhash"</span>: <span class="string">"C9DCC423E10E7E5E40A549057A4AA060DA6D6A885A394F6ED5C0E40AEE984A77"</span>, <span class="string">"logs"</span>: [  &#123;   <span class="string">"msg_index"</span>: <span class="string">"0"</span>,   <span class="string">"success"</span>: <span class="literal">true</span>,   <span class="string">"log"</span>: <span class="string">""</span>  &#125; ],<span class="string">"gas_wanted"</span>: <span class="string">"200000"</span>, <span class="string">"gas_used"</span>: <span class="string">"42375"</span>, <span class="string">"tags"</span>: [  &#123;   <span class="string">"key"</span>: <span class="string">"action"</span>,   <span class="string">"value"</span>: <span class="string">"buy_name"</span>  &#125; ]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Now, user2 no longer needs the name she bought from jack and hence deletes it</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NOTE: Only the owner can delete the name. Since she is one, she can delete the name she bought from jack</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -XDELETE -s http://localhost:1317/nameservice/names --data-binary <span class="string">'&#123;"base_req":&#123;"from":"'</span>$(nameservicecli keys show user2 -a)<span class="string">'","chain_id":"namechain"&#125;,"name":"user1.id","owner":"'</span>$(nameservicecli keys show user2 -a)<span class="string">'"&#125;'</span> &gt; unsignedTx.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> And a final time sign and broadcast</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NOTE: The account number is still 1, but the sequence is changed to 3, according to the query of user2<span class="string">'s account</span></span></span><br><span class="line">nameservicecli tx sign unsignedTx.json --from user2 --offline --chain-id namechain --sequence 3 --account-number 1 &gt; signedTx.json</span><br><span class="line">nameservicecli tx broadcast signedTx.json</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Query whois <span class="keyword">for</span> the name user2 just deleted</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -s http://localhost:1317/nameservice/names/user1.id/whois</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt; &#123;<span class="string">"value"</span>:<span class="string">""</span>,<span class="string">"owner"</span>:<span class="string">""</span>,<span class="string">"price"</span>:[&#123;<span class="string">"denom"</span>:<span class="string">"STAKE"</span>,<span class="string">"amount"</span>:<span class="string">"1"</span>&#125;]&#125;</span></span><br></pre></td></tr></table></figure><h2 id="1-开启rest服务"><a href="#1-开启rest服务" class="headerlink" title="1.开启rest服务"></a>1.开启rest服务</h2><p><strong>如果已经开启整个项目(即starport serve)那么此步骤可以不需要做</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameservicecli rest-server --chain-id namechain --trust-node</span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/CjF66E.png" alt="CjF66E"></p><h2 id="2-查询账户信息"><a href="#2-查询账户信息" class="headerlink" title="2.查询账户信息"></a>2.查询账户信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Get the sequence and account numbers <span class="keyword">for</span> user1 to construct the below requests</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取user1的序列和账号来构造下面的请求</span></span><br><span class="line">curl -s http://localhost:1317/auth/accounts/$(nameservicecli keys show user1 -a)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Get the sequence and account numbers <span class="keyword">for</span> user2 to construct the below requests</span></span><br><span class="line">curl -s http://localhost:1317/auth/accounts/$(nameservicecli keys show user2 -a)</span><br></pre></td></tr></table></figure><p>这些信息用于完成下面的请求参数</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/1NI6dR.png" alt="1NI6dR"></p><p>psotman:</p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/90EpOV.png" alt="90EpOV"></p><h2 id="3-购买域名"><a href="#3-购买域名" class="headerlink" title="3.购买域名"></a>3.购买域名</h2><p>user1购买域名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -s http://localhost:1317/nameservice/whois --data-binary '&#123;"base_req":&#123;"from":"'$(nameservicecli keys show user1 -a)'","chain_id":"namechain"&#125;,"name":"user1.id","price":"5nametoken","buyer":"'$(nameservicecli keys show user1 -a)'"&#125;' &gt; unsignedTx.json</span><br></pre></td></tr></table></figure><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/KkukAm.png" alt="KkukAm"></p><p><img src="http://xwjpics.gumptlu.work/qinniu_uPic/OITmtI.png" alt="OITmtI"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"cosmos-sdk/StdTx"</span>,</span><br><span class="line">    <span class="attr">"value"</span>: &#123;</span><br><span class="line">        <span class="attr">"msg"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"nameservice/BuyName"</span>,</span><br><span class="line">                <span class="attr">"value"</span>: &#123;</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"www.baidu.com"</span>,</span><br><span class="line">                    <span class="attr">"bid"</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">"denom"</span>: <span class="string">"nametoken"</span>,</span><br><span class="line">                            <span class="attr">"amount"</span>: <span class="string">"5"</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ],</span><br><span class="line">                    <span class="attr">"buyer"</span>: <span class="string">"cosmos170ca57fje9tcjapjeaeyk36xzzdfatlru06ju0"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"fee"</span>: &#123;</span><br><span class="line">            <span class="attr">"amount"</span>: [],</span><br><span class="line">            <span class="attr">"gas"</span>: <span class="string">"200000"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"signatures"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"memo"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-本地进行签名"><a href="#4-本地进行签名" class="headerlink" title="4.本地进行签名"></a>4.本地进行签名</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 然后签署该事务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意:在真实环境中，原始交易应该在客户端签名。此外，还需要根据user2帐户的查询显示的内容调整序列。</span></span><br><span class="line">nameservicecli tx sign unsignedTx.json --from user1 --offline --chain-id namechain --sequence 1 --account-number 0 &gt; signedTx.json</span><br></pre></td></tr></table></figure><p>signedTx.json:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  2   "type": "cosmos-sdk/StdTx",</span><br><span class="line">  3   "value": &#123;</span><br><span class="line">  4     "msg": [</span><br><span class="line">  <span class="number">5</span>       &#123;</span><br><span class="line">  6         "type": "nameservice/BuyName",</span><br><span class="line">  7         "value": &#123;</span><br><span class="line">  8           "name": "user1.id",</span><br><span class="line">  9           "bid": [</span><br><span class="line"> <span class="number">10</span>             &#123;</span><br><span class="line"> 11               "denom": "nametoken",</span><br><span class="line"> 12               "amount": "5"</span><br><span class="line"> 13             &#125;</span><br><span class="line"> 14           ],</span><br><span class="line"> 15           "buyer": "cosmos128su4wssj7dcmcsa2mr00pu4c0520fq5lcsd5m"</span><br><span class="line"> 16         &#125;</span><br><span class="line"> 17       &#125;</span><br><span class="line"> 18     ],</span><br><span class="line"> 19     "fee": &#123;</span><br><span class="line"> 20       "amount": [],</span><br><span class="line"> 21       "gas": "200000"</span><br><span class="line">22     &#125;,</span><br><span class="line"> 23     "signatures": [</span><br><span class="line"> <span class="number">24</span>       &#123;</span><br><span class="line"> 25         "pub_key": &#123;</span><br><span class="line"> 26           "type": "tendermint/PubKeySecp256k1",</span><br><span class="line"> 27           "value": "A7vz4G+HsxMmbd/19PAzIOfZro6xgRjgBZyb04H1tZRJ"</span><br><span class="line"> 28         &#125;,</span><br><span class="line"> 29         "signature": "k6Cq6DF1bbZRxUqFYeDteUt889HN1DwDULxQUS9QuTlXoFpl04U+Ge87jqjh6fv8mDrJLASu56rRt6vv7NtoPA=="</span><br><span class="line"> 30       &#125;</span><br><span class="line"> 31     ],</span><br><span class="line"> 32     "memo": ""</span><br><span class="line"> 33   &#125;</span><br><span class="line"> 34 &#125;</span><br></pre></td></tr></table></figure><h2 id="5-广播交易"><a href="#5-广播交易" class="headerlink" title="5.广播交易"></a>5.广播交易</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> And finally broadcast the signed transaction</span></span><br><span class="line">nameservicecli tx broadcast signedTx.json</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;h1 id=&quot;1-Getting-Started&quot;&gt;&lt;a href=&quot;#1-Getting-Started&quot; class=&quot;headerlink&quot; title=&quot;1.Getting Started&quot;&gt;&lt;/a&gt;1.Getting Started&lt;/h1&gt;&lt;p&gt;使用&lt;strong&gt;scratch&lt;/strong&gt;部署区块链&lt;/p&gt;
&lt;p&gt;项目最后会构建一个Nameservice, 就是一个映射关系 string-&amp;gt;other string(&lt;code&gt;map[string]string&lt;/code&gt;)&lt;/p&gt;</summary>
    
    
    
    <category term="technical" scheme="https://xwjahahahaha.github.io/categories/technical/"/>
    
    <category term="cosmos" scheme="https://xwjahahahaha.github.io/categories/technical/cosmos/"/>
    
    
    <category term="cosmos" scheme="https://xwjahahahaha.github.io/tags/cosmos/"/>
    
  </entry>
  
</feed>
